(function () {
	'use strict';

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/**
	@license @nocompile
	Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	(function(){/*

	 Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	 This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 Code distributed by Google as part of the polymer project is also
	 subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	var r,aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value);},fa="undefined"!=typeof window&&window===this?this:"undefined"!=typeof commonjsGlobal&&null!=commonjsGlobal?commonjsGlobal:this;function ha(){ha=function(){};fa.Symbol||(fa.Symbol=ia);}var ia=function(){var a=0;return function(b){return "jscomp_symbol_"+(b||"")+a++}}();
	function ja(){ha();var a=fa.Symbol.iterator;a||(a=fa.Symbol.iterator=fa.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&aa(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return ka(this)}});ja=function(){};}function ka(a){var b=0;return la(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})}function la(a){ja();a={next:a};a[fa.Symbol.iterator]=function(){return this};return a}function ma(a){ja();var b=a[Symbol.iterator];return b?b.call(a):ka(a)}
	function na(a){for(var b,c=[];!(b=a.next()).done;)c.push(b.value);return c}var oa;if("function"==typeof Object.setPrototypeOf)oa=Object.setPrototypeOf;else{var pa;a:{var qa={Na:!0},ra={};try{ra.__proto__=qa;pa=ra.Na;break a}catch(a){}pa=!1;}oa=pa?function(a,b){a.__proto__=b;if(a.__proto__!==b)throw new TypeError(a+" is not extensible");return a}:null;}var sa=oa;function ta(){this.f=!1;this.b=null;this.fa=void 0;this.a=1;this.G=0;this.c=null;}
	function ua(a){if(a.f)throw new TypeError("Generator is already running");a.f=!0;}ta.prototype.m=function(a){this.fa=a;};function va(a,b){a.c={Qa:b,Ua:!0};a.a=a.G;}ta.prototype.return=function(a){this.c={return:a};this.a=this.G;};function wa(a,b){a.a=3;return {value:b}}function xa(a){this.a=new ta;this.b=a;}function ya(a,b){ua(a.a);var c=a.a.b;if(c)return Ba(a,"return"in c?c["return"]:function(a){return {value:a,done:!0}},b,a.a.return);a.a.return(b);return Ca(a)}
	function Ba(a,b,c,d){try{var e=b.call(a.a.b,c);if(!(e instanceof Object))throw new TypeError("Iterator result "+e+" is not an object");if(!e.done)return a.a.f=!1,e;var f=e.value;}catch(g){return a.a.b=null,va(a.a,g),Ca(a)}a.a.b=null;d.call(a.a,f);return Ca(a)}function Ca(a){for(;a.a.a;)try{var b=a.b(a.a);if(b)return a.a.f=!1,{value:b.value,done:!1}}catch(c){a.a.fa=void 0,va(a.a,c);}a.a.f=!1;if(a.a.c){b=a.a.c;a.a.c=null;if(b.Ua)throw b.Qa;return {value:b.return,done:!0}}return {value:void 0,done:!0}}
	function Da(a){this.next=function(b){ua(a.a);a.a.b?b=Ba(a,a.a.b.next,b,a.a.m):(a.a.m(b),b=Ca(a));return b};this.throw=function(b){ua(a.a);a.a.b?b=Ba(a,a.a.b["throw"],b,a.a.m):(va(a.a,b),b=Ca(a));return b};this.return=function(b){return ya(a,b)};ja();this[Symbol.iterator]=function(){return this};}function Ea(a,b){b=new Da(new xa(b));sa&&sa(b,a.prototype);return b}
	(function(){if(!function(){var a=document.createEvent("Event");a.initEvent("foo",!0,!0);a.preventDefault();return a.defaultPrevented}()){var a=Event.prototype.preventDefault;Event.prototype.preventDefault=function(){this.cancelable&&(a.call(this),Object.defineProperty(this,"defaultPrevented",{get:function(){return !0},configurable:!0}));};}var b=/Trident/.test(navigator.userAgent);if(!window.CustomEvent||b&&"function"!==typeof window.CustomEvent)window.CustomEvent=function(a,b){b=b||{};var c=document.createEvent("CustomEvent");
	c.initCustomEvent(a,!!b.bubbles,!!b.cancelable,b.detail);return c},window.CustomEvent.prototype=window.Event.prototype;if(!window.Event||b&&"function"!==typeof window.Event){var c=window.Event;window.Event=function(a,b){b=b||{};var c=document.createEvent("Event");c.initEvent(a,!!b.bubbles,!!b.cancelable);return c};if(c)for(var d in c)window.Event[d]=c[d];window.Event.prototype=c.prototype;}if(!window.MouseEvent||b&&"function"!==typeof window.MouseEvent){b=window.MouseEvent;window.MouseEvent=function(a,
	b){b=b||{};var c=document.createEvent("MouseEvent");c.initMouseEvent(a,!!b.bubbles,!!b.cancelable,b.view||window,b.detail,b.screenX,b.screenY,b.clientX,b.clientY,b.ctrlKey,b.altKey,b.shiftKey,b.metaKey,b.button,b.relatedTarget);return c};if(b)for(d in b)window.MouseEvent[d]=b[d];window.MouseEvent.prototype=b.prototype;}Array.from||(Array.from=function(a){return [].slice.call(a)});Object.assign||(Object.assign=function(a,b){for(var c=[].slice.call(arguments,1),d=0,e;d<c.length;d++)if(e=c[d])for(var f=
	a,n=e,p=Object.getOwnPropertyNames(n),G=0;G<p.length;G++)e=p[G],f[e]=n[e];return a});})(window.WebComponents);(function(){function a(){}function b(a,b){if(!a.childNodes.length)return [];switch(a.nodeType){case Node.DOCUMENT_NODE:return R.call(a,b);case Node.DOCUMENT_FRAGMENT_NODE:return yb.call(a,b);default:return w.call(a,b)}}var c="undefined"===typeof HTMLTemplateElement,d=!(document.createDocumentFragment().cloneNode()instanceof DocumentFragment),e=!1;/Trident/.test(navigator.userAgent)&&function(){function a(a,b){if(a instanceof DocumentFragment)for(var d;d=a.firstChild;)c.call(this,d,b);else c.call(this,
	a,b);return a}e=!0;var b=Node.prototype.cloneNode;Node.prototype.cloneNode=function(a){a=b.call(this,a);this instanceof DocumentFragment&&(a.__proto__=DocumentFragment.prototype);return a};DocumentFragment.prototype.querySelectorAll=HTMLElement.prototype.querySelectorAll;DocumentFragment.prototype.querySelector=HTMLElement.prototype.querySelector;Object.defineProperties(DocumentFragment.prototype,{nodeType:{get:function(){return Node.DOCUMENT_FRAGMENT_NODE},configurable:!0},localName:{get:function(){},
	configurable:!0},nodeName:{get:function(){return "#document-fragment"},configurable:!0}});var c=Node.prototype.insertBefore;Node.prototype.insertBefore=a;var d=Node.prototype.appendChild;Node.prototype.appendChild=function(b){b instanceof DocumentFragment?a.call(this,b,null):d.call(this,b);return b};var f=Node.prototype.removeChild,g=Node.prototype.replaceChild;Node.prototype.replaceChild=function(b,c){b instanceof DocumentFragment?(a.call(this,b,c),f.call(this,c)):g.call(this,b,c);return c};Document.prototype.createDocumentFragment=
	function(){var a=this.createElement("df");a.__proto__=DocumentFragment.prototype;return a};var h=Document.prototype.importNode;Document.prototype.importNode=function(a,b){b=h.call(this,a,b||!1);a instanceof DocumentFragment&&(b.__proto__=DocumentFragment.prototype);return b};}();var f=Node.prototype.cloneNode,g=Document.prototype.createElement,h=Document.prototype.importNode,k=Node.prototype.removeChild,l=Node.prototype.appendChild,n=Node.prototype.replaceChild,p=DOMParser.prototype.parseFromString,
	G=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML")||{get:function(){return this.innerHTML},set:function(a){this.innerHTML=a;}},u=Object.getOwnPropertyDescriptor(window.Node.prototype,"childNodes")||{get:function(){return this.childNodes}},w=Element.prototype.querySelectorAll,R=Document.prototype.querySelectorAll,yb=DocumentFragment.prototype.querySelectorAll,zb=function(){if(!c){var a=document.createElement("template"),b=document.createElement("template");b.content.appendChild(document.createElement("div"));
	a.content.appendChild(b);a=a.cloneNode(!0);return 0===a.content.childNodes.length||0===a.content.firstChild.content.childNodes.length||d}}();if(c){var U=document.implementation.createHTMLDocument("template"),Ma=!0,q=document.createElement("style");q.textContent="template{display:none;}";var za=document.head;za.insertBefore(q,za.firstElementChild);a.prototype=Object.create(HTMLElement.prototype);var da=!document.createElement("div").hasOwnProperty("innerHTML");a.R=function(b){if(!b.content&&b.namespaceURI===
	document.documentElement.namespaceURI){b.content=U.createDocumentFragment();for(var c;c=b.firstChild;)l.call(b.content,c);if(da)b.__proto__=a.prototype;else if(b.cloneNode=function(b){return a.b(this,b)},Ma)try{m(b),y(b);}catch(Hh){Ma=!1;}a.a(b.content);}};var ba={option:["select"],thead:["table"],col:["colgroup","table"],tr:["tbody","table"],th:["tr","tbody","table"],td:["tr","tbody","table"]},m=function(b){Object.defineProperty(b,"innerHTML",{get:function(){return ea(this)},set:function(b){var c=ba[(/<([a-z][^/\0>\x20\t\r\n\f]+)/i.exec(b)||
	["",""])[1].toLowerCase()];if(c)for(var d=0;d<c.length;d++)b="<"+c[d]+">"+b+"</"+c[d]+">";U.body.innerHTML=b;for(a.a(U);this.content.firstChild;)k.call(this.content,this.content.firstChild);b=U.body;if(c)for(d=0;d<c.length;d++)b=b.lastChild;for(;b.firstChild;)l.call(this.content,b.firstChild);},configurable:!0});},y=function(a){Object.defineProperty(a,"outerHTML",{get:function(){return "<template>"+this.innerHTML+"</template>"},set:function(a){if(this.parentNode){U.body.innerHTML=a;for(a=this.ownerDocument.createDocumentFragment();U.body.firstChild;)l.call(a,
	U.body.firstChild);n.call(this.parentNode,a,this);}else throw Error("Failed to set the 'outerHTML' property on 'Element': This element has no parent node.");},configurable:!0});};m(a.prototype);y(a.prototype);a.a=function(c){c=b(c,"template");for(var d=0,e=c.length,f;d<e&&(f=c[d]);d++)a.R(f);};document.addEventListener("DOMContentLoaded",function(){a.a(document);});Document.prototype.createElement=function(){var b=g.apply(this,arguments);"template"===b.localName&&a.R(b);return b};DOMParser.prototype.parseFromString=
	function(){var b=p.apply(this,arguments);a.a(b);return b};Object.defineProperty(HTMLElement.prototype,"innerHTML",{get:function(){return ea(this)},set:function(b){G.set.call(this,b);a.a(this);},configurable:!0,enumerable:!0});var ca=/[&\u00A0"]/g,Ab=/[&\u00A0<>]/g,Na=function(a){switch(a){case "&":return "&amp;";case "<":return "&lt;";case ">":return "&gt;";case '"':return "&quot;";case "\u00a0":return "&nbsp;"}};q=function(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b};var Aa=q("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),
	Oa=q("style script xmp iframe noembed noframes plaintext noscript".split(" ")),ea=function(a,b){"template"===a.localName&&(a=a.content);for(var c="",d=b?b(a):u.get.call(a),e=0,f=d.length,g;e<f&&(g=d[e]);e++){a:{var h=g;var k=a;var l=b;switch(h.nodeType){case Node.ELEMENT_NODE:for(var n=h.localName,m="<"+n,p=h.attributes,w=0;k=p[w];w++)m+=" "+k.name+'="'+k.value.replace(ca,Na)+'"';m+=">";h=Aa[n]?m:m+ea(h,l)+"</"+n+">";break a;case Node.TEXT_NODE:h=h.data;h=k&&Oa[k.localName]?h:h.replace(Ab,Na);break a;
	case Node.COMMENT_NODE:h="\x3c!--"+h.data+"--\x3e";break a;default:throw window.console.error(h),Error("not implemented");}}c+=h;}return c};}if(c||zb){a.b=function(a,b){var c=f.call(a,!1);this.R&&this.R(c);b&&(l.call(c.content,f.call(a.content,!0)),Pa(c.content,a.content));return c};var Pa=function(c,d){if(d.querySelectorAll&&(d=b(d,"template"),0!==d.length)){c=b(c,"template");for(var e=0,f=c.length,g,h;e<f;e++)h=d[e],g=c[e],a&&a.R&&a.R(h),n.call(g.parentNode,tf.call(h,!0),g);}},tf=Node.prototype.cloneNode=
	function(b){if(!e&&d&&this instanceof DocumentFragment)if(b)var c=uf.call(this.ownerDocument,this,!0);else return this.ownerDocument.createDocumentFragment();else this.nodeType===Node.ELEMENT_NODE&&"template"===this.localName&&this.namespaceURI==document.documentElement.namespaceURI?c=a.b(this,b):c=f.call(this,b);b&&Pa(c,this);return c},uf=Document.prototype.importNode=function(c,d){d=d||!1;if("template"===c.localName)return a.b(c,d);var e=h.call(this,c,d);if(d){Pa(e,c);c=b(e,'script:not([type]),script[type="application/javascript"],script[type="text/javascript"]');
	for(var f,k=0;k<c.length;k++){f=c[k];d=g.call(document,"script");d.textContent=f.textContent;for(var l=f.attributes,m=0,p;m<l.length;m++)p=l[m],d.setAttribute(p.name,p.value);n.call(f.parentNode,d,f);}}return e};}c&&(window.HTMLTemplateElement=a);})();var Fa=setTimeout;function Ga(){}function Ha(a,b){return function(){a.apply(b,arguments);}}function t(a){if(!(this instanceof t))throw new TypeError("Promises must be constructed via new");if("function"!==typeof a)throw new TypeError("not a function");this.J=0;this.wa=!1;this.A=void 0;this.U=[];Ia(a,this);}
	function Ja(a,b){for(;3===a.J;)a=a.A;0===a.J?a.U.push(b):(a.wa=!0,Ka(function(){var c=1===a.J?b.Wa:b.Xa;if(null===c)(1===a.J?La:Qa)(b.ra,a.A);else{try{var d=c(a.A);}catch(e){Qa(b.ra,e);return}La(b.ra,d);}}));}function La(a,b){try{if(b===a)throw new TypeError("A promise cannot be resolved with itself.");if(b&&("object"===typeof b||"function"===typeof b)){var c=b.then;if(b instanceof t){a.J=3;a.A=b;Ra(a);return}if("function"===typeof c){Ia(Ha(c,b),a);return}}a.J=1;a.A=b;Ra(a);}catch(d){Qa(a,d);}}
	function Qa(a,b){a.J=2;a.A=b;Ra(a);}function Ra(a){2===a.J&&0===a.U.length&&Ka(function(){a.wa||"undefined"!==typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",a.A);});for(var b=0,c=a.U.length;b<c;b++)Ja(a,a.U[b]);a.U=null;}function Sa(a,b,c){this.Wa="function"===typeof a?a:null;this.Xa="function"===typeof b?b:null;this.ra=c;}function Ia(a,b){var c=!1;try{a(function(a){c||(c=!0,La(b,a));},function(a){c||(c=!0,Qa(b,a));});}catch(d){c||(c=!0,Qa(b,d));}}
	t.prototype["catch"]=function(a){return this.then(null,a)};t.prototype.then=function(a,b){var c=new this.constructor(Ga);Ja(this,new Sa(a,b,c));return c};t.prototype["finally"]=function(a){var b=this.constructor;return this.then(function(c){return b.resolve(a()).then(function(){return c})},function(c){return b.resolve(a()).then(function(){return b.reject(c)})})};
	function Ta(a){return new t(function(b,c){function d(a,g){try{if(g&&("object"===typeof g||"function"===typeof g)){var h=g.then;if("function"===typeof h){h.call(g,function(b){d(a,b);},c);return}}e[a]=g;0===--f&&b(e);}catch(n){c(n);}}if(!a||"undefined"===typeof a.length)throw new TypeError("Promise.all accepts an array");var e=Array.prototype.slice.call(a);if(0===e.length)return b([]);for(var f=e.length,g=0;g<e.length;g++)d(g,e[g]);})}
	function Ua(a){return a&&"object"===typeof a&&a.constructor===t?a:new t(function(b){b(a);})}function Va(a){return new t(function(b,c){c(a);})}function Wa(a){return new t(function(b,c){for(var d=0,e=a.length;d<e;d++)a[d].then(b,c);})}var Ka="function"===typeof setImmediate&&function(a){setImmediate(a);}||function(a){Fa(a,0);};/*

	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	if(!window.Promise){window.Promise=t;t.prototype.then=t.prototype.then;t.all=Ta;t.race=Wa;t.resolve=Ua;t.reject=Va;var Xa=document.createTextNode(""),Ya=[];(new MutationObserver(function(){for(var a=Ya.length,b=0;b<a;b++)Ya[b]();Ya.splice(0,a);})).observe(Xa,{characterData:!0});Ka=function(a){Ya.push(a);Xa.textContent=0<Xa.textContent.length?"":"a";};}(function(a,b){if(!(b in a)){var c=typeof commonjsGlobal===typeof c?window:commonjsGlobal,d=0,e=""+Math.random(),f="__\u0001symbol@@"+e,g=a.getOwnPropertyNames,h=a.getOwnPropertyDescriptor,k=a.create,l=a.keys,n=a.freeze||a,p=a.defineProperty,G=a.defineProperties,u=h(a,"getOwnPropertyNames"),w=a.prototype,R=w.hasOwnProperty,yb=w.propertyIsEnumerable,zb=w.toString,U=function(a,b,c){R.call(a,f)||p(a,f,{enumerable:!1,configurable:!1,writable:!1,value:{}});a[f]["@@"+b]=c;},Ma=function(a,b){var c=k(a);g(b).forEach(function(a){ba.call(b,
	a)&&Aa(c,a,b[a]);});return c},q=function(){},za=function(a){return a!=f&&!R.call(ca,a)},da=function(a){return a!=f&&R.call(ca,a)},ba=function(a){var b=""+a;return da(b)?R.call(this,b)&&this[f]["@@"+b]:yb.call(this,a)},m=function(b){p(w,b,{enumerable:!1,configurable:!0,get:q,set:function(a){ea(this,b,{enumerable:!1,configurable:!0,writable:!0,value:a});U(this,b,!0);}});return n(ca[b]=p(a(b),"constructor",Ab))},y=function(a){if(this&&this!==c)throw new TypeError("Symbol is not a constructor");return m("__\u0001symbol:".concat(a||
	"",e,++d))},ca=k(null),Ab={value:y},Na=function(a){return ca[a]},Aa=function(a,b,c){var d=""+b;if(da(d)){b=ea;if(c.enumerable){var e=k(c);e.enumerable=!1;}else e=c;b(a,d,e);U(a,d,!!c.enumerable);}else p(a,b,c);return a},Oa=function(a){return g(a).filter(da).map(Na)};u.value=Aa;p(a,"defineProperty",u);u.value=Oa;p(a,b,u);u.value=function(a){return g(a).filter(za)};p(a,"getOwnPropertyNames",u);u.value=function(a,b){var c=Oa(b);c.length?l(b).concat(c).forEach(function(c){ba.call(b,c)&&Aa(a,c,b[c]);}):G(a,
	b);return a};p(a,"defineProperties",u);u.value=ba;p(w,"propertyIsEnumerable",u);u.value=y;p(c,"Symbol",u);u.value=function(a){a="__\u0001symbol:".concat("__\u0001symbol:",a,e);return a in w?ca[a]:m(a)};p(y,"for",u);u.value=function(a){if(za(a))throw new TypeError(a+" is not a symbol");return R.call(ca,a)?a.slice(20,-e.length):void 0};p(y,"keyFor",u);u.value=function(a,b){var c=h(a,b);c&&da(b)&&(c.enumerable=ba.call(a,b));return c};p(a,"getOwnPropertyDescriptor",u);u.value=function(a,b){return 1===
	arguments.length?k(a):Ma(a,b)};p(a,"create",u);u.value=function(){var a=zb.call(this);return "[object String]"===a&&da(this)?"[object Symbol]":a};p(w,"toString",u);try{var ea=k(p({},"__\u0001symbol:",{get:function(){return p(this,"__\u0001symbol:",{value:!1})["__\u0001symbol:"]}}))["__\u0001symbol:"]||p;}catch(Pa){ea=function(a,b,c){var d=h(w,b);delete w[b];p(a,b,c);p(w,b,d);};}}})(Object,"getOwnPropertySymbols");
	(function(a){var b=a.defineProperty,c=a.prototype,d=c.toString,e;"iterator match replace search split hasInstance isConcatSpreadable unscopables species toPrimitive toStringTag".split(" ").forEach(function(f){if(!(f in Symbol))switch(b(Symbol,f,{value:Symbol(f)}),f){case "toStringTag":e=a.getOwnPropertyDescriptor(c,"toString"),e.value=function(){var a=d.call(this),b=this[Symbol.toStringTag];return "undefined"===typeof b?a:"[object "+b+"]"},b(c,"toString",e);}});})(Object,Symbol);
	(function(a,b,c){function d(){return this}b[a]||(b[a]=function(){var b=0,c=this,g={next:function(){var a=c.length<=b;return a?{done:a}:{done:a,value:c[b++]}}};g[a]=d;return g});c[a]||(c[a]=function(){var b=String.fromCodePoint,c=this,g=0,h=c.length,k={next:function(){var a=h<=g,d=a?"":b(c.codePointAt(g));g+=d.length;return a?{done:a}:{done:a,value:d}}};k[a]=d;return k});})(Symbol.iterator,Array.prototype,String.prototype);/*

	Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	Object.keys=function(a){return Object.getOwnPropertyNames(a).filter(function(b){return (b=Object.getOwnPropertyDescriptor(a,b))&&b.enumerable})};var Za=window.Symbol.iterator;String.prototype[Za]&&String.prototype.codePointAt||(String.prototype[Za]=function $a(){var b,c=this;return Ea($a,function(d){1==d.a&&(b=0);if(3!=d.a)return b<c.length?d=wa(d,c[b]):(d.a=0,d=void 0),d;b++;d.a=2;})});
	Set.prototype[Za]||(Set.prototype[Za]=function ab(){var b,c=this,d;return Ea(ab,function(e){1==e.a&&(b=[],c.forEach(function(c){b.push(c);}),d=0);if(3!=e.a)return d<b.length?e=wa(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2;})});Map.prototype[Za]||(Map.prototype[Za]=function bb(){var b,c=this,d;return Ea(bb,function(e){1==e.a&&(b=[],c.forEach(function(c,d){b.push([d,c]);}),d=0);if(3!=e.a)return d<b.length?e=wa(e,b[d]):(e.a=0,e=void 0),e;d++;e.a=2;})});/*

	 Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	 This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 Code distributed by Google as part of the polymer project is also
	 subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	window.WebComponents=window.WebComponents||{flags:{}};var cb=document.querySelector('script[src*="webcomponents-bundle"]'),db=/wc-(.+)/,v={};if(!v.noOpts){location.search.slice(1).split("&").forEach(function(a){a=a.split("=");var b;a[0]&&(b=a[0].match(db))&&(v[b[1]]=a[1]||!0);});if(cb)for(var eb=0,fb=void 0;fb=cb.attributes[eb];eb++)"src"!==fb.name&&(v[fb.name]=fb.value||!0);if(v.log&&v.log.split){var gb=v.log.split(",");v.log={};gb.forEach(function(a){v.log[a]=!0;});}else v.log={};}
	window.WebComponents.flags=v;var hb=v.shadydom;hb&&(window.ShadyDOM=window.ShadyDOM||{},window.ShadyDOM.force=hb);var ib=v.register||v.ce;ib&&window.customElements&&(window.customElements.forcePolyfill=ib);/*

	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	function jb(){this.za=this.root=null;this.ea=!1;this.N=this.$=this.oa=this.assignedSlot=this.assignedNodes=this.S=null;this.childNodes=this.nextSibling=this.previousSibling=this.lastChild=this.firstChild=this.parentNode=this.V=void 0;this.Ea=this.ua=!1;this.Z={};}jb.prototype.toJSON=function(){return {}};function x(a){a.ma||(a.ma=new jb);return a.ma}function z(a){return a&&a.ma}var A=window.ShadyDOM||{};A.Sa=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var kb=Object.getOwnPropertyDescriptor(Node.prototype,"firstChild");A.K=!!(kb&&kb.configurable&&kb.get);A.qa=A.force||!A.Sa;var lb=navigator.userAgent.match("Trident"),mb=navigator.userAgent.match("Edge");void 0===A.Ba&&(A.Ba=A.K&&(lb||mb));function nb(a){return (a=z(a))&&void 0!==a.firstChild}function B(a){return "ShadyRoot"===a.Ja}function ob(a){a=a.getRootNode();if(B(a))return a}
	var pb=Element.prototype,qb=pb.matches||pb.matchesSelector||pb.mozMatchesSelector||pb.msMatchesSelector||pb.oMatchesSelector||pb.webkitMatchesSelector;function rb(a,b){if(a&&b)for(var c=Object.getOwnPropertyNames(b),d=0,e=void 0;d<c.length&&(e=c[d]);d++){var f=e,g=a,h=Object.getOwnPropertyDescriptor(b,f);h&&Object.defineProperty(g,f,h);}}function sb(a,b){for(var c=[],d=1;d<arguments.length;++d)c[d-1]=arguments[d];for(d=0;d<c.length;d++)rb(a,c[d]);return a}
	function tb(a,b){for(var c in b)a[c]=b[c];}var ub=document.createTextNode(""),vb=0,wb=[];(new MutationObserver(function(){for(;wb.length;)try{wb.shift()();}catch(a){throw ub.textContent=vb++,a;}})).observe(ub,{characterData:!0});function xb(a){wb.push(a);ub.textContent=vb++;}var Bb=!!document.contains;function Cb(a,b){for(;b;){if(b==a)return !0;b=b.parentNode;}return !1}
	function Db(a){for(var b=a.length-1;0<=b;b--){var c=a[b],d=c.getAttribute("id")||c.getAttribute("name");d&&"length"!==d&&isNaN(d)&&(a[d]=c);}a.item=function(b){return a[b]};a.namedItem=function(b){if("length"!==b&&isNaN(b)&&a[b])return a[b];for(var c=ma(a),d=c.next();!d.done;d=c.next())if(d=d.value,(d.getAttribute("id")||d.getAttribute("name"))==b)return d;return null};return a}var Eb=[],Fb;function Gb(a){Fb||(Fb=!0,xb(Hb));Eb.push(a);}function Hb(){Fb=!1;for(var a=!!Eb.length;Eb.length;)Eb.shift()();return a}Hb.list=Eb;function Ib(){this.a=!1;this.addedNodes=[];this.removedNodes=[];this.ca=new Set;}function Jb(a){a.a||(a.a=!0,xb(function(){a.flush();}));}Ib.prototype.flush=function(){if(this.a){this.a=!1;var a=this.takeRecords();a.length&&this.ca.forEach(function(b){b(a);});}};Ib.prototype.takeRecords=function(){if(this.addedNodes.length||this.removedNodes.length){var a=[{addedNodes:this.addedNodes,removedNodes:this.removedNodes}];this.addedNodes=[];this.removedNodes=[];return a}return []};
	function Kb(a,b){var c=x(a);c.S||(c.S=new Ib);c.S.ca.add(b);var d=c.S;return {Ia:b,P:d,Ka:a,takeRecords:function(){return d.takeRecords()}}}function Lb(a){var b=a&&a.P;b&&(b.ca.delete(a.Ia),b.ca.size||(x(a.Ka).S=null));}
	function Mb(a,b){var c=b.getRootNode();return a.map(function(a){var b=c===a.target.getRootNode();if(b&&a.addedNodes){if(b=Array.from(a.addedNodes).filter(function(a){return c===a.getRootNode()}),b.length)return a=Object.create(a),Object.defineProperty(a,"addedNodes",{value:b,configurable:!0}),a}else if(b)return a}).filter(function(a){return a})}var Nb=Element.prototype.insertBefore,Ob=Element.prototype.replaceChild,Pb=Element.prototype.removeChild,Qb=Element.prototype.setAttribute,Rb=Element.prototype.removeAttribute,Sb=Element.prototype.cloneNode,Tb=Document.prototype.importNode,Ub=Element.prototype.addEventListener,Vb=Element.prototype.removeEventListener,Wb=Window.prototype.addEventListener,Xb=Window.prototype.removeEventListener,Yb=Element.prototype.dispatchEvent,Zb=Node.prototype.contains||HTMLElement.prototype.contains,$b=Document.prototype.getElementById,
	ac=Element.prototype.querySelector,bc=DocumentFragment.prototype.querySelector,cc=Document.prototype.querySelector,dc=Element.prototype.querySelectorAll,ec=DocumentFragment.prototype.querySelectorAll,fc=Document.prototype.querySelectorAll,C={};C.appendChild=Element.prototype.appendChild;C.insertBefore=Nb;C.replaceChild=Ob;C.removeChild=Pb;C.setAttribute=Qb;C.removeAttribute=Rb;C.cloneNode=Sb;C.importNode=Tb;C.addEventListener=Ub;C.removeEventListener=Vb;C.gb=Wb;C.hb=Xb;C.dispatchEvent=Yb;
	C.contains=Zb;C.getElementById=$b;C.pb=ac;C.tb=bc;C.nb=cc;C.querySelector=function(a){switch(this.nodeType){case Node.ELEMENT_NODE:return ac.call(this,a);case Node.DOCUMENT_NODE:return cc.call(this,a);default:return bc.call(this,a)}};C.qb=dc;C.ub=ec;C.ob=fc;C.querySelectorAll=function(a){switch(this.nodeType){case Node.ELEMENT_NODE:return dc.call(this,a);case Node.DOCUMENT_NODE:return fc.call(this,a);default:return ec.call(this,a)}};var gc=/[&\u00A0"]/g,hc=/[&\u00A0<>]/g;function ic(a){switch(a){case "&":return "&amp;";case "<":return "&lt;";case ">":return "&gt;";case '"':return "&quot;";case "\u00a0":return "&nbsp;"}}function jc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var kc=jc("area base br col command embed hr img input keygen link meta param source track wbr".split(" ")),lc=jc("style script xmp iframe noembed noframes plaintext noscript".split(" "));
	function mc(a,b){"template"===a.localName&&(a=a.content);for(var c="",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var n="<"+k,p=h.attributes,G=0,u;u=p[G];G++)n+=" "+u.name+'="'+u.value.replace(gc,ic)+'"';n+=">";h=kc[k]?n:n+mc(h,l)+"</"+k+">";break a;case Node.TEXT_NODE:h=h.data;h=k&&lc[k.localName]?h:h.replace(hc,ic);break a;case Node.COMMENT_NODE:h="\x3c!--"+h.data+"--\x3e";break a;default:throw window.console.error(h),
	Error("not implemented");}}c+=h;}return c}var D=document.createTreeWalker(document,NodeFilter.SHOW_ALL,null,!1),E=document.createTreeWalker(document,NodeFilter.SHOW_ELEMENT,null,!1);function nc(a){var b=[];D.currentNode=a;for(a=D.firstChild();a;)b.push(a),a=D.nextSibling();return b}
	var F={parentNode:function(a){D.currentNode=a;return D.parentNode()},firstChild:function(a){D.currentNode=a;return D.firstChild()},lastChild:function(a){D.currentNode=a;return D.lastChild()},previousSibling:function(a){D.currentNode=a;return D.previousSibling()},nextSibling:function(a){D.currentNode=a;return D.nextSibling()}};F.childNodes=nc;F.parentElement=function(a){E.currentNode=a;return E.parentNode()};F.firstElementChild=function(a){E.currentNode=a;return E.firstChild()};
	F.lastElementChild=function(a){E.currentNode=a;return E.lastChild()};F.previousElementSibling=function(a){E.currentNode=a;return E.previousSibling()};F.nextElementSibling=function(a){E.currentNode=a;return E.nextSibling()};F.children=function(a){var b=[];E.currentNode=a;for(a=E.firstChild();a;)b.push(a),a=E.nextSibling();return Db(b)};F.innerHTML=function(a){return mc(a,function(a){return nc(a)})};
	F.textContent=function(a){switch(a.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:a=document.createTreeWalker(a,NodeFilter.SHOW_TEXT,null,!1);for(var b="",c;c=a.nextNode();)b+=c.nodeValue;return b;default:return a.nodeValue}};var oc=A.K,pc=[Node.prototype,Element.prototype,HTMLElement.prototype];function H(a){var b;a:{for(b=0;b<pc.length;b++){var c=pc[b];if(c.hasOwnProperty(a)){b=c;break a}}b=void 0;}if(!b)throw Error("Could not find descriptor for "+a);return Object.getOwnPropertyDescriptor(b,a)}
	var I=oc?{parentNode:H("parentNode"),firstChild:H("firstChild"),lastChild:H("lastChild"),previousSibling:H("previousSibling"),nextSibling:H("nextSibling"),childNodes:H("childNodes"),parentElement:H("parentElement"),previousElementSibling:H("previousElementSibling"),nextElementSibling:H("nextElementSibling"),innerHTML:H("innerHTML"),textContent:H("textContent"),firstElementChild:H("firstElementChild"),lastElementChild:H("lastElementChild"),children:H("children")}:{},qc=oc?{firstElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,
	"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(DocumentFragment.prototype,"children")}:{},rc=oc?{firstElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"firstElementChild"),lastElementChild:Object.getOwnPropertyDescriptor(Document.prototype,"lastElementChild"),children:Object.getOwnPropertyDescriptor(Document.prototype,"children")}:{},sc={ya:I,sb:qc,mb:rc,parentNode:function(a){return I.parentNode.get.call(a)},
	firstChild:function(a){return I.firstChild.get.call(a)},lastChild:function(a){return I.lastChild.get.call(a)},previousSibling:function(a){return I.previousSibling.get.call(a)},nextSibling:function(a){return I.nextSibling.get.call(a)},childNodes:function(a){return Array.prototype.slice.call(I.childNodes.get.call(a))},parentElement:function(a){return I.parentElement.get.call(a)},previousElementSibling:function(a){return I.previousElementSibling.get.call(a)},nextElementSibling:function(a){return I.nextElementSibling.get.call(a)},
	innerHTML:function(a){return I.innerHTML.get.call(a)},textContent:function(a){return I.textContent.get.call(a)},children:function(a){switch(a.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return qc.children.get.call(a);case Node.DOCUMENT_NODE:return rc.children.get.call(a);default:return I.children.get.call(a)}},firstElementChild:function(a){switch(a.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return qc.firstElementChild.get.call(a);case Node.DOCUMENT_NODE:return rc.firstElementChild.get.call(a);default:return I.firstElementChild.get.call(a)}},
	lastElementChild:function(a){switch(a.nodeType){case Node.DOCUMENT_FRAGMENT_NODE:return qc.lastElementChild.get.call(a);case Node.DOCUMENT_NODE:return rc.lastElementChild.get.call(a);default:return I.lastElementChild.get.call(a)}}};var J=A.Ba?sc:F;function tc(a){for(;a.firstChild;)a.removeChild(a.firstChild);}
	var uc=A.K,vc=document.implementation.createHTMLDocument("inert"),wc=Object.getOwnPropertyDescriptor(Node.prototype,"isConnected"),xc=wc&&wc.get,yc=Object.getOwnPropertyDescriptor(Document.prototype,"activeElement"),zc={parentElement:{get:function(){var a=z(this);(a=a&&a.parentNode)&&a.nodeType!==Node.ELEMENT_NODE&&(a=null);return void 0!==a?a:J.parentElement(this)},configurable:!0},parentNode:{get:function(){var a=z(this);a=a&&a.parentNode;return void 0!==a?a:J.parentNode(this)},configurable:!0},
	nextSibling:{get:function(){var a=z(this);a=a&&a.nextSibling;return void 0!==a?a:J.nextSibling(this)},configurable:!0},previousSibling:{get:function(){var a=z(this);a=a&&a.previousSibling;return void 0!==a?a:J.previousSibling(this)},configurable:!0},nextElementSibling:{get:function(){var a=z(this);if(a&&void 0!==a.nextSibling){for(a=this.nextSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return J.nextElementSibling(this)},configurable:!0},previousElementSibling:{get:function(){var a=
	z(this);if(a&&void 0!==a.previousSibling){for(a=this.previousSibling;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return J.previousElementSibling(this)},configurable:!0}},Ac={className:{get:function(){return this.getAttribute("class")||""},set:function(a){this.setAttribute("class",a);},configurable:!0}},Bc={childNodes:{get:function(){if(nb(this)){var a=z(this);if(!a.childNodes){a.childNodes=[];for(var b=this.firstChild;b;b=b.nextSibling)a.childNodes.push(b);}var c=a.childNodes;}else c=
	J.childNodes(this);c.item=function(a){return c[a]};return c},configurable:!0},childElementCount:{get:function(){return this.children.length},configurable:!0},firstChild:{get:function(){var a=z(this);a=a&&a.firstChild;return void 0!==a?a:J.firstChild(this)},configurable:!0},lastChild:{get:function(){var a=z(this);a=a&&a.lastChild;return void 0!==a?a:J.lastChild(this)},configurable:!0},textContent:{get:function(){if(nb(this)){for(var a=[],b=0,c=this.childNodes,d;d=c[b];b++)d.nodeType!==Node.COMMENT_NODE&&
	a.push(d.textContent);return a.join("")}return J.textContent(this)},set:function(a){if("undefined"===typeof a||null===a)a="";switch(this.nodeType){case Node.ELEMENT_NODE:case Node.DOCUMENT_FRAGMENT_NODE:if(!nb(this)&&uc){var b=this.firstChild;(b!=this.lastChild||b&&b.nodeType!=Node.TEXT_NODE)&&tc(this);sc.ya.textContent.set.call(this,a);}else tc(this),(0<a.length||this.nodeType===Node.ELEMENT_NODE)&&this.appendChild(document.createTextNode(a));break;default:this.nodeValue=a;}},configurable:!0},firstElementChild:{get:function(){var a=
	z(this);if(a&&void 0!==a.firstChild){for(a=this.firstChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.nextSibling;return a}return J.firstElementChild(this)},configurable:!0},lastElementChild:{get:function(){var a=z(this);if(a&&void 0!==a.lastChild){for(a=this.lastChild;a&&a.nodeType!==Node.ELEMENT_NODE;)a=a.previousSibling;return a}return J.lastElementChild(this)},configurable:!0},children:{get:function(){return nb(this)?Db(Array.prototype.filter.call(this.childNodes,function(a){return a.nodeType===Node.ELEMENT_NODE})):
	J.children(this)},configurable:!0},innerHTML:{get:function(){return nb(this)?mc("template"===this.localName?this.content:this):J.innerHTML(this)},set:function(a){var b="template"===this.localName?this.content:this;tc(b);var c=this.localName||"div";c=this.namespaceURI&&this.namespaceURI!==vc.namespaceURI?vc.createElementNS(this.namespaceURI,c):vc.createElement(c);uc?sc.ya.innerHTML.set.call(c,a):c.innerHTML=a;for(a="template"===this.localName?c.content:c;a.firstChild;)b.appendChild(a.firstChild);},
	configurable:!0}},Cc={shadowRoot:{get:function(){var a=z(this);return a&&a.za||null},configurable:!0}},Dc={activeElement:{get:function(){var a=yc&&yc.get?yc.get.call(document):A.K?void 0:document.activeElement;if(a&&a.nodeType){var b=!!B(this);if(this===document||b&&this.host!==a&&C.contains.call(this.host,a)){for(b=ob(a);b&&b!==this;)a=b.host,b=ob(a);a=this===document?b?null:a:b===this?a:null;}else a=null;}else a=null;return a},set:function(){},configurable:!0}};
	function K(a,b,c){for(var d in b){var e=Object.getOwnPropertyDescriptor(a,d);e&&e.configurable||!e&&c?Object.defineProperty(a,d,b[d]):c&&console.warn("Could not define",d,"on",a);}}function Ec(a){K(a,zc);K(a,Ac);K(a,Bc);K(a,Dc);}
	function Fc(){var a=Gc.prototype;a.__proto__=DocumentFragment.prototype;K(a,zc,!0);K(a,Bc,!0);K(a,Dc,!0);Object.defineProperties(a,{nodeType:{value:Node.DOCUMENT_FRAGMENT_NODE,configurable:!0},nodeName:{value:"#document-fragment",configurable:!0},nodeValue:{value:null,configurable:!0}});["localName","namespaceURI","prefix"].forEach(function(b){Object.defineProperty(a,b,{value:void 0,configurable:!0});});["ownerDocument","baseURI","isConnected"].forEach(function(b){Object.defineProperty(a,b,{get:function(){return this.host[b]},
	configurable:!0});});}var Hc=A.K?function(){}:function(a){var b=x(a);b.ua||(b.ua=!0,K(a,zc,!0),K(a,Ac,!0));},Ic=A.K?function(){}:function(a){x(a).Ea||(K(a,Bc,!0),K(a,Cc,!0));};var Jc=J.childNodes;function Kc(a,b,c){Ic(b);var d=x(b);void 0!==d.firstChild&&(d.childNodes=null);if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE){d=a.childNodes;for(var e=0;e<d.length;e++)Lc(d[e],b,c);a=x(a);b=void 0!==a.firstChild?null:void 0;a.firstChild=a.lastChild=b;a.childNodes=b;}else Lc(a,b,c);}
	function Lc(a,b,c){Hc(a);c=c||null;var d=x(a),e=x(b),f=c?x(c):null;d.previousSibling=c?f.previousSibling:b.lastChild;if(f=z(d.previousSibling))f.nextSibling=a;if(f=z(d.nextSibling=c))f.previousSibling=a;d.parentNode=b;c?c===e.firstChild&&(e.firstChild=a):(e.lastChild=a,e.firstChild||(e.firstChild=a));e.childNodes=null;}
	function Mc(a,b){var c=x(a);b=x(b);a===b.firstChild&&(b.firstChild=c.nextSibling);a===b.lastChild&&(b.lastChild=c.previousSibling);a=c.previousSibling;var d=c.nextSibling;a&&(x(a).nextSibling=d);d&&(x(d).previousSibling=a);c.parentNode=c.previousSibling=c.nextSibling=void 0;void 0!==b.childNodes&&(b.childNodes=null);}
	function Nc(a){var b=x(a);if(void 0===b.firstChild){b.childNodes=null;var c=Jc(a);b.firstChild=c[0]||null;b.lastChild=c[c.length-1]||null;Ic(a);for(b=0;b<c.length;b++){var d=c[b],e=x(d);e.parentNode=a;e.nextSibling=c[b+1]||null;e.previousSibling=c[b-1]||null;Hc(d);}}}var Oc=J.parentNode;
	function Pc(a,b,c){if(b===a)throw Error("Failed to execute 'appendChild' on 'Node': The new child element contains the parent.");if(c){var d=z(c);d=d&&d.parentNode;if(void 0!==d&&d!==a||void 0===d&&Oc(c)!==a)throw Error("Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.");}if(c===b)return b;var e=[],f=Qc,g=ob(a),h=g?g.host.localName:"";if(b.parentNode){var k=Rc(b);Sc(b.parentNode,b,!!g||!(b.getRootNode()instanceof ShadowRoot));
	f=function(a,b){Tc()&&(Uc(a,k),Qc(a,b));};}d=!0;var l=!Vc(b,h);!g||b.__noInsertionPoint&&!l||Wc(b,function(a){"slot"===a.localName&&e.push(a);l&&f(a,h);});e.length&&Xc(g,e);("slot"===a.localName||e.length)&&g&&Yc(g);nb(a)&&(Kc(b,a,c),g=z(a),Zc(a)?(Yc(g.root),d=!1):g.root&&(d=!1));d?(d=B(a)?a.host:a,c?(c=$c(c),C.insertBefore.call(d,b,c)):C.appendChild.call(d,b)):b.ownerDocument!==a.ownerDocument&&a.ownerDocument.adoptNode(b);ad(a,b);return b}
	function Sc(a,b,c){c=void 0===c?!1:c;if(b.parentNode!==a)throw Error("The node to be removed is not a child of this node: "+b);var d=ob(b),e=z(a);if(nb(a)&&(Mc(b,a),Zc(a))){Yc(e.root);var f=!0;}if(Tc()&&!c&&d){var g=Rc(b);Wc(b,function(a){Uc(a,g);});}bd(b);if(d){var h=a&&"slot"===a.localName;h&&(f=!0);((c=cd(d,b))||h)&&Yc(d);}f||(f=B(a)?a.host:a,(!e.root&&"slot"!==b.localName||f===Oc(b))&&C.removeChild.call(f,b));ad(a,null,b);return b}
	function bd(a){var b=z(a);if(b&&void 0!==b.V){b=a.childNodes;for(var c=0,d=b.length,e=void 0;c<d&&(e=b[c]);c++)bd(e);}if(a=z(a))a.V=void 0;}function $c(a){var b=a;a&&"slot"===a.localName&&(b=(b=(b=z(a))&&b.N)&&b.length?b[0]:$c(a.nextSibling));return b}function Zc(a){return (a=(a=z(a))&&a.root)&&dd(a)}
	function ed(a,b){if("slot"===b)a=a.parentNode,Zc(a)&&Yc(z(a).root);else if("slot"===a.localName&&"name"===b&&(b=ob(a))){if(b.o){fd(b);var c=a.Ha,d=gd(a);if(d!==c){c=b.w[c];var e=c.indexOf(a);0<=e&&c.splice(e,1);c=b.w[d]||(b.w[d]=[]);c.push(a);1<c.length&&(b.w[d]=hd(c));}}Yc(b);}}function ad(a,b,c){if(a=(a=z(a))&&a.S)b&&a.addedNodes.push(b),c&&a.removedNodes.push(c),Jb(a);}
	function id(a){if(a&&a.nodeType){var b=x(a),c=b.V;void 0===c&&(B(a)?(c=a,b.V=c):(c=(c=a.parentNode)?id(c):a,C.contains.call(document.documentElement,a)&&(b.V=c)));return c}}function jd(a,b,c){var d=[];kd(a.childNodes,b,c,d);return d}function kd(a,b,c,d){for(var e=0,f=a.length,g=void 0;e<f&&(g=a[e]);e++){var h;if(h=g.nodeType===Node.ELEMENT_NODE){h=g;var k=b,l=c,n=d,p=k(h);p&&n.push(h);l&&l(p)?h=p:(kd(h.childNodes,k,l,n),h=void 0);}if(h)break}}var ld=null;
	function Tc(){ld||(ld=window.ShadyCSS&&window.ShadyCSS.ScopingShim);return ld||null}function md(a,b,c){var d=Tc();d&&"class"===b?d.setElementClass(a,c):(C.setAttribute.call(a,b,c),ed(a,b));}function nd(a,b){if(a.ownerDocument!==document||"template"===a.localName)return C.importNode.call(document,a,b);var c=C.importNode.call(document,a,!1);if(b){a=a.childNodes;b=0;for(var d;b<a.length;b++)d=nd(a[b],!0),c.appendChild(d);}return c}function Qc(a,b){var c=Tc();c&&c.scopeNode(a,b);}
	function Uc(a,b){var c=Tc();c&&c.unscopeNode(a,b);}function Vc(a,b){var c=Tc();if(!c)return !0;if(a.nodeType===Node.DOCUMENT_FRAGMENT_NODE){c=!0;for(var d=0;c&&d<a.childNodes.length;d++)c=c&&Vc(a.childNodes[d],b);return c}return a.nodeType!==Node.ELEMENT_NODE?!0:c.currentScopeForNode(a)===b}function Rc(a){if(a.nodeType!==Node.ELEMENT_NODE)return "";var b=Tc();return b?b.currentScopeForNode(a):""}
	function Wc(a,b){if(a){a.nodeType===Node.ELEMENT_NODE&&b(a);for(var c=0,d;c<a.childNodes.length;c++)d=a.childNodes[c],d.nodeType===Node.ELEMENT_NODE&&Wc(d,b);}}var od="__eventWrappers"+Date.now(),pd=function(){var a=Object.getOwnPropertyDescriptor(Event.prototype,"composed");return a?function(b){return a.get.call(b)}:null}(),qd={blur:!0,focus:!0,focusin:!0,focusout:!0,click:!0,dblclick:!0,mousedown:!0,mouseenter:!0,mouseleave:!0,mousemove:!0,mouseout:!0,mouseover:!0,mouseup:!0,wheel:!0,beforeinput:!0,input:!0,keydown:!0,keyup:!0,compositionstart:!0,compositionupdate:!0,compositionend:!0,touchstart:!0,touchend:!0,touchmove:!0,touchcancel:!0,pointerover:!0,
	pointerenter:!0,pointerdown:!0,pointermove:!0,pointerup:!0,pointercancel:!0,pointerout:!0,pointerleave:!0,gotpointercapture:!0,lostpointercapture:!0,dragstart:!0,drag:!0,dragenter:!0,dragleave:!0,dragover:!0,drop:!0,dragend:!0,DOMActivate:!0,DOMFocusIn:!0,DOMFocusOut:!0,keypress:!0},rd={DOMAttrModified:!0,DOMAttributeNameChanged:!0,DOMCharacterDataModified:!0,DOMElementNameChanged:!0,DOMNodeInserted:!0,DOMNodeInsertedIntoDocument:!0,DOMNodeRemoved:!0,DOMNodeRemovedFromDocument:!0,DOMSubtreeModified:!0};
	function sd(a,b){var c=[],d=a;for(a=a===window?window:a.getRootNode();d;)c.push(d),d=d.assignedSlot?d.assignedSlot:d.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&d.host&&(b||d!==a)?d.host:d.parentNode;c[c.length-1]===document&&c.push(window);return c}function td(a,b){if(!B)return a;a=sd(a,!0);for(var c=0,d,e=void 0,f,g=void 0;c<b.length;c++)if(d=b[c],f=d===window?window:d.getRootNode(),f!==e&&(g=a.indexOf(f),e=f),!B(f)||-1<g)return d}
	var ud={get composed(){void 0===this.Y&&(pd?this.Y="focusin"===this.type||"focusout"===this.type||pd(this):!1!==this.isTrusted&&(this.Y=qd[this.type]));return this.Y||!1},composedPath:function(){this.ta||(this.ta=sd(this.__target,this.composed));return this.ta},get target(){return td(this.currentTarget||this.__previousCurrentTarget,this.composedPath())},get relatedTarget(){if(!this.la)return null;this.va||(this.va=sd(this.la,!0));return td(this.currentTarget||this.__previousCurrentTarget,this.va)},
	stopPropagation:function(){Event.prototype.stopPropagation.call(this);this.ka=!0;},stopImmediatePropagation:function(){Event.prototype.stopImmediatePropagation.call(this);this.ka=this.Da=!0;}};function vd(a){function b(b,d){b=new a(b,d);b.Y=d&&!!d.composed;return b}tb(b,a);b.prototype=a.prototype;return b}var wd={focus:!0,blur:!0};function xd(a){return a.__target!==a.target||a.la!==a.relatedTarget}
	function yd(a,b,c){if(c=b.__handlers&&b.__handlers[a.type]&&b.__handlers[a.type][c])for(var d=0,e;(e=c[d])&&(!xd(a)||a.target!==a.relatedTarget)&&(e.call(b,a),!a.Da);d++);}
	function zd(a){var b=a.composedPath();Object.defineProperty(a,"currentTarget",{get:function(){return d},configurable:!0});for(var c=b.length-1;0<=c;c--){var d=b[c];yd(a,d,"capture");if(a.ka)return}Object.defineProperty(a,"eventPhase",{get:function(){return Event.AT_TARGET}});var e;for(c=0;c<b.length;c++){d=b[c];var f=z(d);f=f&&f.root;if(0===c||f&&f===e)if(yd(a,d,"bubble"),d!==window&&(e=d.getRootNode()),a.ka)break}}
	function Ad(a,b,c,d,e,f){for(var g=0;g<a.length;g++){var h=a[g],k=h.type,l=h.capture,n=h.once,p=h.passive;if(b===h.node&&c===k&&d===l&&e===n&&f===p)return g}return -1}
	function Bd(a,b,c){if(b){var d=typeof b;if("function"===d||"object"===d)if("object"!==d||b.handleEvent&&"function"===typeof b.handleEvent){var e=this instanceof Window?C.gb:C.addEventListener;if(rd[a])return e.call(this,a,b,c);if(c&&"object"===typeof c){var f=!!c.capture;var g=!!c.once;var h=!!c.passive;}else f=!!c,h=g=!1;var k=c&&c.na||this,l=b[od];if(l){if(-1<Ad(l,k,a,f,g,h))return}else b[od]=[];l=function(e){g&&this.removeEventListener(a,b,c);e.__target||Cd(e);if(k!==this){var f=Object.getOwnPropertyDescriptor(e,
	"currentTarget");Object.defineProperty(e,"currentTarget",{get:function(){return k},configurable:!0});}e.__previousCurrentTarget=e.currentTarget;if(!B(k)||-1!=e.composedPath().indexOf(k))if(e.composed||-1<e.composedPath().indexOf(k))if(xd(e)&&e.target===e.relatedTarget)e.eventPhase===Event.BUBBLING_PHASE&&e.stopImmediatePropagation();else if(e.eventPhase===Event.CAPTURING_PHASE||e.bubbles||e.target===k||k instanceof Window){var h="function"===d?b.call(k,e):b.handleEvent&&b.handleEvent(e);k!==this&&
	(f?(Object.defineProperty(e,"currentTarget",f),f=null):delete e.currentTarget);return h}};b[od].push({node:k,type:a,capture:f,once:g,passive:h,ib:l});wd[a]?(this.__handlers=this.__handlers||{},this.__handlers[a]=this.__handlers[a]||{capture:[],bubble:[]},this.__handlers[a][f?"capture":"bubble"].push(l)):e.call(this,a,l,c);}}}
	function Dd(a,b,c){if(b){var d=this instanceof Window?C.hb:C.removeEventListener;if(rd[a])return d.call(this,a,b,c);if(c&&"object"===typeof c){var e=!!c.capture;var f=!!c.once;var g=!!c.passive;}else e=!!c,g=f=!1;var h=c&&c.na||this,k=void 0;var l=null;try{l=b[od];}catch(n){}l&&(f=Ad(l,h,a,e,f,g),-1<f&&(k=l.splice(f,1)[0].ib,l.length||(b[od]=void 0)));d.call(this,a,k||b,c);k&&wd[a]&&this.__handlers&&this.__handlers[a]&&(a=this.__handlers[a][e?"capture":"bubble"],k=a.indexOf(k),-1<k&&a.splice(k,1));}}
	function Ed(){for(var a in wd)window.addEventListener(a,function(a){a.__target||(Cd(a),zd(a));},!0);}function Cd(a){a.__target=a.target;a.la=a.relatedTarget;if(A.K){var b=Object.getPrototypeOf(a);if(!b.hasOwnProperty("__patchProto")){var c=Object.create(b);c.jb=b;rb(c,ud);b.__patchProto=c;}a.__proto__=b.__patchProto;}else rb(a,ud);}var Fd=vd(window.Event),Gd=vd(window.CustomEvent),Hd=vd(window.MouseEvent);
	function Id(){window.Event=Fd;window.CustomEvent=Gd;window.MouseEvent=Hd;Ed();if(!pd&&Object.getOwnPropertyDescriptor(Event.prototype,"isTrusted")){var a=function(){var a=new MouseEvent("click",{bubbles:!0,cancelable:!0,composed:!0});this.dispatchEvent(a);};Element.prototype.click?Element.prototype.click=a:HTMLElement.prototype.click&&(HTMLElement.prototype.click=a);}}function Jd(a,b){return {index:a,W:[],ba:b}}
	function Kd(a,b,c,d){var e=0,f=0,g=0,h=0,k=Math.min(b-e,d-f);if(0==e&&0==f)a:{for(g=0;g<k;g++)if(a[g]!==c[g])break a;g=k;}if(b==a.length&&d==c.length){h=a.length;for(var l=c.length,n=0;n<k-g&&Ld(a[--h],c[--l]);)n++;h=n;}e+=g;f+=g;b-=h;d-=h;if(0==b-e&&0==d-f)return [];if(e==b){for(b=Jd(e,0);f<d;)b.W.push(c[f++]);return [b]}if(f==d)return [Jd(e,b-e)];k=e;g=f;d=d-g+1;h=b-k+1;b=Array(d);for(l=0;l<d;l++)b[l]=Array(h),b[l][0]=l;for(l=0;l<h;l++)b[0][l]=l;for(l=1;l<d;l++)for(n=1;n<h;n++)if(a[k+n-1]===c[g+l-1])b[l][n]=
	b[l-1][n-1];else{var p=b[l-1][n]+1,G=b[l][n-1]+1;b[l][n]=p<G?p:G;}k=b.length-1;g=b[0].length-1;d=b[k][g];for(a=[];0<k||0<g;)0==k?(a.push(2),g--):0==g?(a.push(3),k--):(h=b[k-1][g-1],l=b[k-1][g],n=b[k][g-1],p=l<n?l<h?l:h:n<h?n:h,p==h?(h==d?a.push(0):(a.push(1),d=h),k--,g--):p==l?(a.push(3),k--,d=l):(a.push(2),g--,d=n));a.reverse();b=void 0;k=[];for(g=0;g<a.length;g++)switch(a[g]){case 0:b&&(k.push(b),b=void 0);e++;f++;break;case 1:b||(b=Jd(e,0));b.ba++;e++;b.W.push(c[f]);f++;break;case 2:b||(b=Jd(e,
	0));b.ba++;e++;break;case 3:b||(b=Jd(e,0)),b.W.push(c[f]),f++;}b&&k.push(b);return k}function Ld(a,b){return a===b}var Md=J.parentNode,Nd=J.childNodes,Od={},Pd=A.deferConnectionCallbacks&&"loading"===document.readyState,Qd;function Rd(a){var b=[];do b.unshift(a);while(a=a.parentNode);return b}
	function Gc(a,b,c){if(a!==Od)throw new TypeError("Illegal constructor");this.Ja="ShadyRoot";this.host=b;this.c=c&&c.mode;Nc(b);a=x(b);a.root=this;a.za="closed"!==this.c?this:null;a=x(this);a.firstChild=a.lastChild=a.parentNode=a.nextSibling=a.previousSibling=null;a.childNodes=[];this.b=this.aa=!1;this.a=this.w=this.o=null;Yc(this);}function Yc(a){a.aa||(a.aa=!0,Gb(function(){return Sd(a)}));}
	function Sd(a){for(var b;a;){a.aa&&(b=a);a:{var c=a;a=c.host.getRootNode();if(B(a))for(var d=c.host.childNodes,e=0;e<d.length;e++)if(c=d[e],"slot"==c.localName)break a;a=void 0;}}b&&b._renderRoot();}
	Gc.prototype._renderRoot=function(){var a=Pd;Pd=!0;this.aa=!1;if(this.o){fd(this);for(var b=0,c;b<this.o.length;b++){c=this.o[b];var d=z(c),e=d.assignedNodes;d.assignedNodes=[];d.N=[];if(d.oa=e)for(d=0;d<e.length;d++){var f=z(e[d]);f.$=f.assignedSlot;f.assignedSlot===c&&(f.assignedSlot=null);}}for(b=this.host.firstChild;b;b=b.nextSibling)Td(this,b);for(b=0;b<this.o.length;b++){c=this.o[b];e=z(c);if(!e.assignedNodes.length)for(d=c.firstChild;d;d=d.nextSibling)Td(this,d,c);(d=(d=z(c.parentNode))&&d.root)&&
	dd(d)&&d._renderRoot();Ud(this,e.N,e.assignedNodes);if(d=e.oa){for(f=0;f<d.length;f++)z(d[f]).$=null;e.oa=null;d.length>e.assignedNodes.length&&(e.ea=!0);}e.ea&&(e.ea=!1,Vd(this,c));}c=this.o;b=[];for(e=0;e<c.length;e++)d=c[e].parentNode,(f=z(d))&&f.root||!(0>b.indexOf(d))||b.push(d);for(c=0;c<b.length;c++){f=b[c];e=f===this?this.host:f;d=[];f=f.childNodes;for(var g=0;g<f.length;g++){var h=f[g];if("slot"==h.localName){h=z(h).N;for(var k=0;k<h.length;k++)d.push(h[k]);}else d.push(h);}f=Nd(e);g=Kd(d,d.length,
	f,f.length);k=h=0;for(var l=void 0;h<g.length&&(l=g[h]);h++){for(var n=0,p=void 0;n<l.W.length&&(p=l.W[n]);n++)Md(p)===e&&C.removeChild.call(e,p),f.splice(l.index+k,1);k-=l.ba;}k=0;for(l=void 0;k<g.length&&(l=g[k]);k++)for(h=f[l.index],n=l.index;n<l.index+l.ba;n++)p=d[n],C.insertBefore.call(e,p,h),f.splice(n,0,p);}}if(!this.b)for(b=this.host.childNodes,c=0,e=b.length;c<e;c++)d=b[c],f=z(d),Md(d)!==this.host||"slot"!==d.localName&&f.assignedSlot||C.removeChild.call(this.host,d);this.b=!0;Pd=a;Qd&&Qd();};
	function Td(a,b,c){var d=x(b),e=d.$;d.$=null;c||(c=(a=a.w[b.slot||"__catchall"])&&a[0]);c?(x(c).assignedNodes.push(b),d.assignedSlot=c):d.assignedSlot=void 0;e!==d.assignedSlot&&d.assignedSlot&&(x(d.assignedSlot).ea=!0);}function Ud(a,b,c){for(var d=0,e=void 0;d<c.length&&(e=c[d]);d++)if("slot"==e.localName){var f=z(e).assignedNodes;f&&f.length&&Ud(a,b,f);}else b.push(c[d]);}function Vd(a,b){C.dispatchEvent.call(b,new Event("slotchange"));b=z(b);b.assignedSlot&&Vd(a,b.assignedSlot);}
	function Xc(a,b){a.a=a.a||[];a.o=a.o||[];a.w=a.w||{};a.a.push.apply(a.a,b instanceof Array?b:na(ma(b)));}function fd(a){if(a.a&&a.a.length){for(var b=a.a,c,d=0;d<b.length;d++){var e=b[d];Nc(e);Nc(e.parentNode);var f=gd(e);a.w[f]?(c=c||{},c[f]=!0,a.w[f].push(e)):a.w[f]=[e];a.o.push(e);}if(c)for(var g in c)a.w[g]=hd(a.w[g]);a.a=[];}}function gd(a){var b=a.name||a.getAttribute("name")||"__catchall";return a.Ha=b}
	function hd(a){return a.sort(function(a,c){a=Rd(a);for(var b=Rd(c),e=0;e<a.length;e++){c=a[e];var f=b[e];if(c!==f)return a=Array.from(c.parentNode.childNodes),a.indexOf(c)-a.indexOf(f)}})}function cd(a,b){if(a.o){fd(a);var c=a.w,d;for(d in c)for(var e=c[d],f=0;f<e.length;f++){var g=e[f];if(Cb(b,g)){e.splice(f,1);var h=a.o.indexOf(g);0<=h&&a.o.splice(h,1);f--;g=z(g);if(h=g.N)for(var k=0;k<h.length;k++){var l=h[k],n=Md(l);n&&C.removeChild.call(n,l);}g.N=[];g.assignedNodes=[];h=!0;}}return h}}
	function dd(a){fd(a);return !(!a.o||!a.o.length)}
	if(window.customElements&&A.qa){var Wd=new Map;Qd=function(){var a=Array.from(Wd);Wd.clear();a=ma(a);for(var b=a.next();!b.done;b=a.next()){b=ma(b.value);var c=b.next().value;b.next().value?c.Fa():c.Ga();}};Pd&&document.addEventListener("readystatechange",function(){Pd=!1;Qd();},{once:!0});var Xd=function(a,b,c){var d=0,e="__isConnected"+d++;if(b||c)a.prototype.connectedCallback=a.prototype.Fa=function(){Pd?Wd.set(this,!0):this[e]||(this[e]=!0,b&&b.call(this));},a.prototype.disconnectedCallback=a.prototype.Ga=
	function(){Pd?this.isConnected||Wd.set(this,!1):this[e]&&(this[e]=!1,c&&c.call(this));};return a},define=window.customElements.define;Object.defineProperty(window.CustomElementRegistry.prototype,"define",{value:function(a,b){var c=b.prototype.connectedCallback,d=b.prototype.disconnectedCallback;define.call(window.customElements,a,Xd(b,c,d));b.prototype.connectedCallback=c;b.prototype.disconnectedCallback=d;}});}function Yd(a){var b=a.getRootNode();B(b)&&Sd(b);return (a=z(a))&&a.assignedSlot||null}
	var Zd={addEventListener:Bd.bind(window),removeEventListener:Dd.bind(window)},$d={addEventListener:Bd,removeEventListener:Dd,appendChild:function(a){return Pc(this,a)},insertBefore:function(a,b){return Pc(this,a,b)},removeChild:function(a){return Sc(this,a)},replaceChild:function(a,b){Pc(this,a,b);Sc(this,b);return a},cloneNode:function(a){if("template"==this.localName)var b=C.cloneNode.call(this,a);else if(b=C.cloneNode.call(this,!1),a&&b.nodeType!==Node.ATTRIBUTE_NODE){a=this.childNodes;for(var c=
	0,d;c<a.length;c++)d=a[c].cloneNode(!0),b.appendChild(d);}return b},getRootNode:function(){return id(this)},contains:function(a){return Cb(this,a)},dispatchEvent:function(a){Hb();return C.dispatchEvent.call(this,a)}};
	Object.defineProperties($d,{isConnected:{get:function(){if(xc&&xc.call(this))return !0;if(this.nodeType==Node.DOCUMENT_FRAGMENT_NODE)return !1;var a=this.ownerDocument;if(Bb){if(C.contains.call(a,this))return !0}else if(a.documentElement&&C.contains.call(a.documentElement,this))return !0;for(a=this;a&&!(a instanceof Document);)a=a.parentNode||(B(a)?a.host:void 0);return !!(a&&a instanceof Document)},configurable:!0}});
	var ae={get assignedSlot(){return Yd(this)}},be={querySelector:function(a){return jd(this,function(b){return qb.call(b,a)},function(a){return !!a})[0]||null},querySelectorAll:function(a,b){if(b){b=Array.prototype.slice.call(C.querySelectorAll.call(this,a));var c=this.getRootNode();return b.filter(function(a){return a.getRootNode()==c})}return jd(this,function(b){return qb.call(b,a)})}},ce={assignedNodes:function(a){if("slot"===this.localName){var b=this.getRootNode();B(b)&&Sd(b);return (b=z(this))?
	(a&&a.flatten?b.N:b.assignedNodes)||[]:[]}}},de=sb({setAttribute:function(a,b){md(this,a,b);},removeAttribute:function(a){C.removeAttribute.call(this,a);ed(this,a);},attachShadow:function(a){if(!this)throw"Must provide a host.";if(!a)throw"Not enough arguments.";return new Gc(Od,this,a)},get slot(){return this.getAttribute("slot")},set slot(a){md(this,"slot",a);},get assignedSlot(){return Yd(this)}},be,ce);Object.defineProperties(de,Cc);
	var ee=sb({importNode:function(a,b){return nd(a,b)},getElementById:function(a){return jd(this,function(b){return b.id==a},function(a){return !!a})[0]||null}},be);Object.defineProperties(ee,{_activeElement:Dc.activeElement});
	for(var fe=HTMLElement.prototype.blur,ge={blur:function(){var a=z(this);(a=(a=a&&a.root)&&a.activeElement)?a.blur():fe.call(this);}},he={},ie=ma(Object.getOwnPropertyNames(Document.prototype)),je=ie.next();!je.done;he={H:he.H},je=ie.next())he.H=je.value,"on"===he.H.substring(0,2)&&Object.defineProperty(ge,he.H,{set:function(a){return function(b){var c=x(this),d=a.H.substring(2);c.Z[a.H]&&this.removeEventListener(d,c.Z[a.H]);this.addEventListener(d,b,{});c.Z[a.H]=b;}}(he),get:function(a){return function(){var b=
	z(this);return b&&b.Z[a.H]}}(he),configurable:!0});var ke={addEventListener:function(a,b,c){"object"!==typeof c&&(c={capture:!!c});c.na=this;this.host.addEventListener(a,b,c);},removeEventListener:function(a,b,c){"object"!==typeof c&&(c={capture:!!c});c.na=this;this.host.removeEventListener(a,b,c);},getElementById:function(a){return jd(this,function(b){return b.id==a},function(a){return !!a})[0]||null}};
	function L(a,b){for(var c=Object.getOwnPropertyNames(b),d=0;d<c.length;d++){var e=c[d],f=Object.getOwnPropertyDescriptor(b,e);f.value?a[e]=f.value:Object.defineProperty(a,e,f);}}if(A.qa){var ShadyDOM={inUse:A.qa,patch:function(a){Ic(a);Hc(a);return a},isShadyRoot:B,enqueue:Gb,flush:Hb,settings:A,filterMutations:Mb,observeChildren:Kb,unobserveChildren:Lb,nativeMethods:C,nativeTree:J,deferConnectionCallbacks:A.deferConnectionCallbacks,handlesDynamicScoping:!0};window.ShadyDOM=ShadyDOM;Id();var le=window.customElements&&window.customElements.nativeHTMLElement||HTMLElement;L(Gc.prototype,ke);L(window.Node.prototype,$d);L(window.Window.prototype,Zd);L(window.Text.prototype,ae);
	L(window.DocumentFragment.prototype,be);L(window.Element.prototype,de);L(window.Document.prototype,ee);window.HTMLSlotElement&&L(window.HTMLSlotElement.prototype,ce);L(le.prototype,ge);A.K&&(Ec(window.Node.prototype),Ec(window.Text.prototype),Ec(window.DocumentFragment.prototype),Ec(window.Element.prototype),Ec(le.prototype),Ec(window.Document.prototype),window.HTMLSlotElement&&Ec(window.HTMLSlotElement.prototype));Fc();window.ShadowRoot=Gc;}var me=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));function ne(a){var b=me.has(a);a=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(a);return !b&&a}function M(a){var b=a.isConnected;if(void 0!==b)return b;for(;a&&!(a.__CE_isImportDocument||a instanceof Document);)a=a.parentNode||(window.ShadowRoot&&a instanceof ShadowRoot?a.host:void 0);return !(!a||!(a.__CE_isImportDocument||a instanceof Document))}
	function oe(a,b){for(;b&&b!==a&&!b.nextSibling;)b=b.parentNode;return b&&b!==a?b.nextSibling:null}
	function pe(a,b,c){c=void 0===c?new Set:c;for(var d=a;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;b(e);var f=e.localName;if("link"===f&&"import"===e.getAttribute("rel")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)pe(d,b,c);d=oe(a,e);continue}else if("template"===f){d=oe(a,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)pe(e,b,c);}d=d.firstChild?d.firstChild:oe(a,d);}}function N(a,b,c){a[b]=c;}function qe(){this.a=new Map;this.m=new Map;this.f=[];this.c=!1;}function re(a,b,c){a.a.set(b,c);a.m.set(c.constructor,c);}function se(a,b){a.c=!0;a.f.push(b);}function te(a,b){a.c&&pe(b,function(b){return a.b(b)});}qe.prototype.b=function(a){if(this.c&&!a.__CE_patched){a.__CE_patched=!0;for(var b=0;b<this.f.length;b++)this.f[b](a);}};function O(a,b){var c=[];pe(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state?a.connectedCallback(d):ue(a,d);}}
	function P(a,b){var c=[];pe(b,function(a){return c.push(a)});for(b=0;b<c.length;b++){var d=c[b];1===d.__CE_state&&a.disconnectedCallback(d);}}
	function Q(a,b,c){c=void 0===c?{}:c;var d=c.fb||new Set,e=c.ia||function(b){return ue(a,b)},f=[];pe(b,function(b){if("link"===b.localName&&"import"===b.getAttribute("rel")){var c=b.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&"complete"===c.readyState?c.__CE_documentLoadHandled=!0:b.addEventListener("load",function(){var c=b.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);Q(a,c,{fb:f,ia:e});}});}else f.push(b);},d);
	if(a.c)for(b=0;b<f.length;b++)a.b(f[b]);for(b=0;b<f.length;b++)e(f[b]);}
	function ue(a,b){if(void 0===b.__CE_state){var c=b.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=a.a.get(b.localName)){c.constructionStack.push(b);var d=c.constructor;try{try{if(new d!==b)throw Error("The custom element constructor did not produce the element being upgraded.");}finally{c.constructionStack.pop();}}catch(g){throw b.__CE_state=2,g;}b.__CE_state=1;b.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],
	f=b.getAttribute(e);null!==f&&a.attributeChangedCallback(b,e,null,f,null);}M(b)&&a.connectedCallback(b);}}}qe.prototype.connectedCallback=function(a){var b=a.__CE_definition;b.connectedCallback&&b.connectedCallback.call(a);};qe.prototype.disconnectedCallback=function(a){var b=a.__CE_definition;b.disconnectedCallback&&b.disconnectedCallback.call(a);};
	qe.prototype.attributeChangedCallback=function(a,b,c,d,e){var f=a.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(b)&&f.attributeChangedCallback.call(a,b,c,d,e);};function ve(a){var b=document;this.b=a;this.a=b;this.P=void 0;Q(this.b,this.a);"loading"===this.a.readyState&&(this.P=new MutationObserver(this.c.bind(this)),this.P.observe(this.a,{childList:!0,subtree:!0}));}function we(a){a.P&&a.P.disconnect();}ve.prototype.c=function(a){var b=this.a.readyState;"interactive"!==b&&"complete"!==b||we(this);for(b=0;b<a.length;b++)for(var c=a[b].addedNodes,d=0;d<c.length;d++)Q(this.b,c[d]);};function xe(){var a=this;this.a=this.A=void 0;this.b=new Promise(function(b){a.a=b;a.A&&b(a.A);});}xe.prototype.resolve=function(a){if(this.A)throw Error("Already resolved.");this.A=a;this.a&&this.a(a);};function S(a){this.c=!1;this.a=a;this.G=new Map;this.f=function(a){return a()};this.b=!1;this.m=[];this.fa=new ve(a);}r=S.prototype;
	r.define=function(a,b){var c=this;if(!(b instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!ne(a))throw new SyntaxError("The element name '"+a+"' is not valid.");if(this.a.a.get(a))throw Error("A custom element with name '"+a+"' has already been defined.");if(this.c)throw Error("A custom element is already being defined.");this.c=!0;try{var d=function(a){var b=e[a];if(void 0!==b&&!(b instanceof Function))throw Error("The '"+a+"' callback must be a function.");
	return b},e=b.prototype;if(!(e instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var f=d("connectedCallback");var g=d("disconnectedCallback");var h=d("adoptedCallback");var k=d("attributeChangedCallback");var l=b.observedAttributes||[];}catch(n){return}finally{this.c=!1;}b={localName:a,constructor:b,connectedCallback:f,disconnectedCallback:g,adoptedCallback:h,attributeChangedCallback:k,observedAttributes:l,constructionStack:[]};re(this.a,a,b);this.m.push(b);
	this.b||(this.b=!0,this.f(function(){return ye(c)}));};r.ia=function(a){Q(this.a,a);};function ye(a){if(!1!==a.b){a.b=!1;for(var b=a.m,c=[],d=new Map,e=0;e<b.length;e++)d.set(b[e].localName,[]);Q(a.a,document,{ia:function(b){if(void 0===b.__CE_state){var e=b.localName,f=d.get(e);f?f.push(b):a.a.a.get(e)&&c.push(b);}}});for(e=0;e<c.length;e++)ue(a.a,c[e]);for(;0<b.length;){var f=b.shift();e=f.localName;f=d.get(f.localName);for(var g=0;g<f.length;g++)ue(a.a,f[g]);(e=a.G.get(e))&&e.resolve(void 0);}}}
	r.get=function(a){if(a=this.a.a.get(a))return a.constructor};r.Ca=function(a){if(!ne(a))return Promise.reject(new SyntaxError("'"+a+"' is not a valid custom element name."));var b=this.G.get(a);if(b)return b.b;b=new xe;this.G.set(a,b);this.a.a.get(a)&&!this.m.some(function(b){return b.localName===a})&&b.resolve(void 0);return b.b};r.Ya=function(a){we(this.fa);var b=this.f;this.f=function(c){return a(function(){return b(c)})};};window.CustomElementRegistry=S;S.prototype.define=S.prototype.define;
	S.prototype.upgrade=S.prototype.ia;S.prototype.get=S.prototype.get;S.prototype.whenDefined=S.prototype.Ca;S.prototype.polyfillWrapFlushCallback=S.prototype.Ya;var ze=window.Document.prototype.createElement,Ae=window.Document.prototype.createElementNS,Be=window.Document.prototype.importNode,Ce=window.Document.prototype.prepend,De=window.Document.prototype.append,Ee=window.DocumentFragment.prototype.prepend,Fe=window.DocumentFragment.prototype.append,Ge=window.Node.prototype.cloneNode,He=window.Node.prototype.appendChild,Ie=window.Node.prototype.insertBefore,Je=window.Node.prototype.removeChild,Ke=window.Node.prototype.replaceChild,Le=Object.getOwnPropertyDescriptor(window.Node.prototype,
	"textContent"),Me=window.Element.prototype.attachShadow,Ne=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),Oe=window.Element.prototype.getAttribute,Pe=window.Element.prototype.setAttribute,Qe=window.Element.prototype.removeAttribute,Re=window.Element.prototype.getAttributeNS,Se=window.Element.prototype.setAttributeNS,Te=window.Element.prototype.removeAttributeNS,Ue=window.Element.prototype.insertAdjacentElement,Ve=window.Element.prototype.insertAdjacentHTML,We=window.Element.prototype.prepend,
	Xe=window.Element.prototype.append,Ye=window.Element.prototype.before,Ze=window.Element.prototype.after,$e=window.Element.prototype.replaceWith,af=window.Element.prototype.remove,bf=window.HTMLElement,cf=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),df=window.HTMLElement.prototype.insertAdjacentElement,ef=window.HTMLElement.prototype.insertAdjacentHTML;var ff=new function(){};function gf(){var a=hf;window.HTMLElement=function(){function b(){var b=this.constructor,d=a.m.get(b);if(!d)throw Error("The custom element being constructed was not registered with `customElements`.");var e=d.constructionStack;if(0===e.length)return e=ze.call(document,d.localName),Object.setPrototypeOf(e,b.prototype),e.__CE_state=1,e.__CE_definition=d,a.b(e),e;d=e.length-1;var f=e[d];if(f===ff)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");
	e[d]=ff;Object.setPrototypeOf(f,b.prototype);a.b(f);return f}b.prototype=bf.prototype;Object.defineProperty(b.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:b});return b}();}function jf(a,b,c){function d(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e]=arguments[e];e=[];for(var f=[],l=0;l<d.length;l++){var n=d[l];n instanceof Element&&M(n)&&f.push(n);if(n instanceof DocumentFragment)for(n=n.firstChild;n;n=n.nextSibling)e.push(n);else e.push(n);}b.apply(this,d);for(d=0;d<f.length;d++)P(a,f[d]);if(M(this))for(d=0;d<e.length;d++)f=e[d],f instanceof Element&&O(a,f);}}void 0!==c.ha&&(b.prepend=d(c.ha));void 0!==c.append&&(b.append=d(c.append));}function kf(){var a=hf;N(Document.prototype,"createElement",function(b){if(this.__CE_hasRegistry){var c=a.a.get(b);if(c)return new c.constructor}b=ze.call(this,b);a.b(b);return b});N(Document.prototype,"importNode",function(b,c){b=Be.call(this,b,c);this.__CE_hasRegistry?Q(a,b):te(a,b);return b});N(Document.prototype,"createElementNS",function(b,c){if(this.__CE_hasRegistry&&(null===b||"http://www.w3.org/1999/xhtml"===b)){var d=a.a.get(c);if(d)return new d.constructor}b=Ae.call(this,b,c);a.b(b);return b});
	jf(a,Document.prototype,{ha:Ce,append:De});}function lf(){function a(a,d){Object.defineProperty(a,"textContent",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,a);else{var c=void 0;if(this.firstChild){var e=this.childNodes,h=e.length;if(0<h&&M(this)){c=Array(h);for(var k=0;k<h;k++)c[k]=e[k];}}d.set.call(this,a);if(c)for(a=0;a<c.length;a++)P(b,c[a]);}}});}var b=hf;N(Node.prototype,"insertBefore",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);
	a=Ie.call(this,a,d);if(M(this))for(d=0;d<c.length;d++)O(b,c[d]);return a}c=M(a);d=Ie.call(this,a,d);c&&P(b,a);M(this)&&O(b,a);return d});N(Node.prototype,"appendChild",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=He.call(this,a);if(M(this))for(var e=0;e<c.length;e++)O(b,c[e]);return a}c=M(a);e=He.call(this,a);c&&P(b,a);M(this)&&O(b,a);return e});N(Node.prototype,"cloneNode",function(a){a=Ge.call(this,a);this.ownerDocument.__CE_hasRegistry?Q(b,a):
	te(b,a);return a});N(Node.prototype,"removeChild",function(a){var c=M(a),e=Je.call(this,a);c&&P(b,a);return e});N(Node.prototype,"replaceChild",function(a,d){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=Ke.call(this,a,d);if(M(this))for(P(b,d),d=0;d<c.length;d++)O(b,c[d]);return a}c=M(a);var f=Ke.call(this,a,d),g=M(this);g&&P(b,d);c&&P(b,a);g&&O(b,a);return f});Le&&Le.get?a(Node.prototype,Le):se(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=
	[],b=0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join("")},set:function(a){for(;this.firstChild;)Je.call(this,this.firstChild);He.call(this,document.createTextNode(a));}});});}function mf(a){function b(b){return function(c){for(var d=[],e=0;e<arguments.length;++e)d[e]=arguments[e];e=[];for(var h=[],k=0;k<d.length;k++){var l=d[k];l instanceof Element&&M(l)&&h.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)e.push(l);else e.push(l);}b.apply(this,d);for(d=0;d<h.length;d++)P(a,h[d]);if(M(this))for(d=0;d<e.length;d++)h=e[d],h instanceof Element&&O(a,h);}}var c=Element.prototype;void 0!==Ye&&(c.before=b(Ye));void 0!==Ye&&(c.after=b(Ze));void 0!==$e&&
	N(c,"replaceWith",function(b){for(var c=[],d=0;d<arguments.length;++d)c[d]=arguments[d];d=[];for(var g=[],h=0;h<c.length;h++){var k=c[h];k instanceof Element&&M(k)&&g.push(k);if(k instanceof DocumentFragment)for(k=k.firstChild;k;k=k.nextSibling)d.push(k);else d.push(k);}h=M(this);$e.apply(this,c);for(c=0;c<g.length;c++)P(a,g[c]);if(h)for(P(a,this),c=0;c<d.length;c++)g=d[c],g instanceof Element&&O(a,g);});void 0!==af&&N(c,"remove",function(){var b=M(this);af.call(this);b&&P(a,this);});}function nf(){function a(a,b){Object.defineProperty(a,"innerHTML",{enumerable:b.enumerable,configurable:!0,get:b.get,set:function(a){var c=this,e=void 0;M(this)&&(e=[],pe(this,function(a){a!==c&&e.push(a);}));b.set.call(this,a);if(e)for(var f=0;f<e.length;f++){var g=e[f];1===g.__CE_state&&d.disconnectedCallback(g);}this.ownerDocument.__CE_hasRegistry?Q(d,this):te(d,this);return a}});}function b(a,b){N(a,"insertAdjacentElement",function(a,c){var e=M(c);a=b.call(this,a,c);e&&P(d,c);M(a)&&O(d,c);return a});}
	function c(a,b){function c(a,b){for(var c=[];a!==b;a=a.nextSibling)c.push(a);for(b=0;b<c.length;b++)Q(d,c[b]);}N(a,"insertAdjacentHTML",function(a,d){a=a.toLowerCase();if("beforebegin"===a){var e=this.previousSibling;b.call(this,a,d);c(e||this.parentNode.firstChild,this);}else if("afterbegin"===a)e=this.firstChild,b.call(this,a,d),c(this.firstChild,e);else if("beforeend"===a)e=this.lastChild,b.call(this,a,d),c(e||this.firstChild,null);else if("afterend"===a)e=this.nextSibling,b.call(this,a,d),c(this.nextSibling,
	e);else throw new SyntaxError("The value provided ("+String(a)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");});}var d=hf;Me&&N(Element.prototype,"attachShadow",function(a){return this.__CE_shadowRoot=a=Me.call(this,a)});Ne&&Ne.get?a(Element.prototype,Ne):cf&&cf.get?a(HTMLElement.prototype,cf):se(d,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return Ge.call(this,!0).innerHTML},set:function(a){var b="template"===this.localName,c=b?this.content:this,d=Ae.call(document,
	this.namespaceURI,this.localName);for(d.innerHTML=a;0<c.childNodes.length;)Je.call(c,c.childNodes[0]);for(a=b?d.content:d;0<a.childNodes.length;)He.call(c,a.childNodes[0]);}});});N(Element.prototype,"setAttribute",function(a,b){if(1!==this.__CE_state)return Pe.call(this,a,b);var c=Oe.call(this,a);Pe.call(this,a,b);b=Oe.call(this,a);d.attributeChangedCallback(this,a,c,b,null);});N(Element.prototype,"setAttributeNS",function(a,b,c){if(1!==this.__CE_state)return Se.call(this,a,b,c);var e=Re.call(this,a,
	b);Se.call(this,a,b,c);c=Re.call(this,a,b);d.attributeChangedCallback(this,b,e,c,a);});N(Element.prototype,"removeAttribute",function(a){if(1!==this.__CE_state)return Qe.call(this,a);var b=Oe.call(this,a);Qe.call(this,a);null!==b&&d.attributeChangedCallback(this,a,b,null,null);});N(Element.prototype,"removeAttributeNS",function(a,b){if(1!==this.__CE_state)return Te.call(this,a,b);var c=Re.call(this,a,b);Te.call(this,a,b);var e=Re.call(this,a,b);c!==e&&d.attributeChangedCallback(this,b,c,e,a);});df?b(HTMLElement.prototype,
	df):Ue?b(Element.prototype,Ue):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched.");ef?c(HTMLElement.prototype,ef):Ve?c(Element.prototype,Ve):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched.");jf(d,Element.prototype,{ha:We,append:Xe});mf(d);}var of=window.customElements;if(!of||of.forcePolyfill||"function"!=typeof of.define||"function"!=typeof of.get){var hf=new qe;gf();kf();jf(hf,DocumentFragment.prototype,{ha:Ee,append:Fe});lf();nf();document.__CE_hasRegistry=!0;var customElements=new S(hf);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:customElements});}function pf(){this.end=this.start=0;this.rules=this.parent=this.previous=null;this.cssText=this.parsedCssText="";this.atRule=!1;this.type=0;this.parsedSelector=this.selector=this.keyframesName="";}
	function qf(a){a=a.replace(rf,"").replace(sf,"");var b=vf,c=a,d=new pf;d.start=0;d.end=c.length;for(var e=d,f=0,g=c.length;f<g;f++)if("{"===c[f]){e.rules||(e.rules=[]);var h=e,k=h.rules[h.rules.length-1]||null;e=new pf;e.start=f+1;e.parent=h;e.previous=k;h.rules.push(e);}else"}"===c[f]&&(e.end=f+1,e=e.parent||d);return b(d,a)}
	function vf(a,b){var c=b.substring(a.start,a.end-1);a.parsedCssText=a.cssText=c.trim();a.parent&&(c=b.substring(a.previous?a.previous.end:a.parent.start,a.start-1),c=wf(c),c=c.replace(xf," "),c=c.substring(c.lastIndexOf(";")+1),c=a.parsedSelector=a.selector=c.trim(),a.atRule=0===c.indexOf("@"),a.atRule?0===c.indexOf("@media")?a.type=yf:c.match(zf)&&(a.type=Af,a.keyframesName=a.selector.split(xf).pop()):a.type=0===c.indexOf("--")?Bf:Cf);if(c=a.rules)for(var d=0,e=c.length,f=void 0;d<e&&(f=c[d]);d++)vf(f,
	b);return a}function wf(a){return a.replace(/\\([0-9a-f]{1,6})\s/gi,function(a,c){a=c;for(c=6-a.length;c--;)a="0"+a;return "\\"+a})}
	function Df(a,b,c){c=void 0===c?"":c;var d="";if(a.cssText||a.rules){var e=a.rules,f;if(f=e)f=e[0],f=!(f&&f.selector&&0===f.selector.indexOf("--"));if(f){f=0;for(var g=e.length,h=void 0;f<g&&(h=e[f]);f++)d=Df(h,b,d);}else b?b=a.cssText:(b=a.cssText,b=b.replace(Ef,"").replace(Ff,""),b=b.replace(Gf,"").replace(Hf,"")),(d=b.trim())&&(d="  "+d+"\n");}d&&(a.selector&&(c+=a.selector+" {\n"),c+=d,a.selector&&(c+="}\n\n"));return c}
	var Cf=1,Af=7,yf=4,Bf=1E3,rf=/\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,sf=/@import[^;]*;/gim,Ef=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,Ff=/(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,Gf=/@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,Hf=/[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,zf=/^@[^\s]*keyframes/,xf=/\s+/g;var T=!(window.ShadyDOM&&window.ShadyDOM.inUse),If;function Jf(a){If=a&&a.shimcssproperties?!1:T||!(navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/)||!window.CSS||!CSS.supports||!CSS.supports("box-shadow","0 0 0 var(--foo)"));}window.ShadyCSS&&void 0!==window.ShadyCSS.nativeCss?If=window.ShadyCSS.nativeCss:window.ShadyCSS?(Jf(window.ShadyCSS),window.ShadyCSS=void 0):Jf(window.WebComponents&&window.WebComponents.flags);var V=If;var Kf=/(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi,Lf=/(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi,Mf=/(--[\w-]+)\s*([:,;)]|$)/gi,Nf=/(animation\s*:)|(animation-name\s*:)/,Of=/@media\s(.*)/,Pf=/\{[^}]*\}/g;var Qf=new Set;function Rf(a,b){if(!a)return "";"string"===typeof a&&(a=qf(a));b&&Sf(a,b);return Df(a,V)}function Tf(a){!a.__cssRules&&a.textContent&&(a.__cssRules=qf(a.textContent));return a.__cssRules||null}function Uf(a){return !!a.parent&&a.parent.type===Af}function Sf(a,b,c,d){if(a){var e=!1,f=a.type;if(d&&f===yf){var g=a.selector.match(Of);g&&(window.matchMedia(g[1]).matches||(e=!0));}f===Cf?b(a):c&&f===Af?c(a):f===Bf&&(e=!0);if((a=a.rules)&&!e)for(e=0,f=a.length,g=void 0;e<f&&(g=a[e]);e++)Sf(g,b,c,d);}}
	function Vf(a,b,c,d){var e=document.createElement("style");b&&e.setAttribute("scope",b);e.textContent=a;Wf(e,c,d);return e}var Xf=null;function Yf(a){a=document.createComment(" Shady DOM styles for "+a+" ");var b=document.head;b.insertBefore(a,(Xf?Xf.nextSibling:null)||b.firstChild);return Xf=a}function Wf(a,b,c){b=b||document.head;b.insertBefore(a,c&&c.nextSibling||b.firstChild);Xf?a.compareDocumentPosition(Xf)===Node.DOCUMENT_POSITION_PRECEDING&&(Xf=a):Xf=a;}
	function Zf(a,b){for(var c=0,d=a.length;b<d;b++)if("("===a[b])c++;else if(")"===a[b]&&0===--c)return b;return -1}function $f(a,b){var c=a.indexOf("var(");if(-1===c)return b(a,"","","");var d=Zf(a,c+3),e=a.substring(c+4,d);c=a.substring(0,c);a=$f(a.substring(d+1),b);d=e.indexOf(",");return -1===d?b(c,e.trim(),"",a):b(c,e.substring(0,d).trim(),e.substring(d+1).trim(),a)}function ag(a,b){T?a.setAttribute("class",b):window.ShadyDOM.nativeMethods.setAttribute.call(a,"class",b);}
	function bg(a){var b=a.localName,c="";b?-1<b.indexOf("-")||(c=b,b=a.getAttribute&&a.getAttribute("is")||""):(b=a.is,c=a.extends);return {is:b,X:c}}function cg(a){for(var b=[],c="",d=0;0<=d&&d<a.length;d++)if("("===a[d]){var e=Zf(a,d);c+=a.slice(d,e+1);d=e;}else","===a[d]?(b.push(c),c=""):c+=a[d];c&&b.push(c);return b}
	function dg(a){if(void 0===a.ja){var b=a.getAttribute("css-build");if(b)a.ja=b;else{a:{b="template"===a.localName?a.content.firstChild:a.firstChild;if(b instanceof Comment&&(b=b.textContent.trim().split(":"),"css-build"===b[0])){b=b[1];break a}b="";}if(""!==b){var c="template"===a.localName?a.content.firstChild:a.firstChild;c.parentNode.removeChild(c);}a.ja=b;}}return a.ja||""}function eg(){}function fg(a,b){gg(W,a,function(a){hg(a,b||"");});}function gg(a,b,c){b.nodeType===Node.ELEMENT_NODE&&c(b);if(b="template"===b.localName?(b.content||b.kb||b).childNodes:b.children||b.childNodes)for(var d=0;d<b.length;d++)gg(a,b[d],c);}
	function hg(a,b,c){if(b)if(a.classList)c?(a.classList.remove("style-scope"),a.classList.remove(b)):(a.classList.add("style-scope"),a.classList.add(b));else if(a.getAttribute){var d=a.getAttribute(ig);c?d&&(b=d.replace("style-scope","").replace(b,""),ag(a,b)):ag(a,(d?d+" ":"")+"style-scope "+b);}}function jg(a,b,c){gg(W,a,function(a){hg(a,b,!0);hg(a,c);});}function kg(a,b){gg(W,a,function(a){hg(a,b||"",!0);});}
	function lg(a,b,c,d){var e=W;T||"shady"===(void 0===d?"":d)?b=Rf(b,c):(a=bg(a),b=mg(e,b,a.is,a.X,c)+"\n\n");return b.trim()}function mg(a,b,c,d,e){var f=ng(c,d);c=c?og+c:"";return Rf(b,function(b){b.c||(b.selector=b.F=pg(a,b,a.b,c,f),b.c=!0);e&&e(b,c,f);})}function ng(a,b){return b?"[is="+a+"]":a}function pg(a,b,c,d,e){var f=cg(b.selector);if(!Uf(b)){b=0;for(var g=f.length,h=void 0;b<g&&(h=f[b]);b++)f[b]=c.call(a,h,d,e);}return f.filter(function(a){return !!a}).join(qg)}
	function rg(a){return a.replace(sg,function(a,c,d){-1<d.indexOf("+")?d=d.replace(/\+/g,"___"):-1<d.indexOf("___")&&(d=d.replace(/___/g,"+"));return ":"+c+"("+d+")"})}function tg(a){for(var b=[],c;c=a.match(ug);){var d=c.index,e=Zf(a,d);if(-1===e)throw Error(c.input+" selector missing ')'");c=a.slice(d,e+1);a=a.replace(c,"\ue000");b.push(c);}return {sa:a,matches:b}}function vg(a,b){var c=a.split("\ue000");return b.reduce(function(a,b,f){return a+b+c[f+1]},c[0])}
	eg.prototype.b=function(a,b,c){var d=!1;a=a.trim();var e=sg.test(a);e&&(a=a.replace(sg,function(a,b,c){return ":"+b+"("+c.replace(/\s/g,"")+")"}),a=rg(a));var f=ug.test(a);if(f){var g=tg(a);a=g.sa;g=g.matches;}a=a.replace(wg,xg+" $1");a=a.replace(yg,function(a,e,f){d||(a=zg(f,e,b,c),d=d||a.stop,e=a.Oa,f=a.value);return e+f});f&&(a=vg(a,g));e&&(a=rg(a));return a};
	function zg(a,b,c,d){var e=a.indexOf(Ag);0<=a.indexOf(xg)?a=Bg(a,d):0!==e&&(a=c?Cg(a,c):a);c=!1;0<=e&&(b="",c=!0);if(c){var f=!0;c&&(a=a.replace(Dg,function(a,b){return " > "+b}));}a=a.replace(Eg,function(a,b,c){return '[dir="'+c+'"] '+b+", "+b+'[dir="'+c+'"]'});return {value:a,Oa:b,stop:f}}function Cg(a,b){a=a.split(Fg);a[0]+=b;return a.join(Fg)}
	function Bg(a,b){var c=a.match(Gg);return (c=c&&c[2].trim()||"")?c[0].match(Hg)?a.replace(Gg,function(a,c,f){return b+f}):c.split(Hg)[0]===b?c:Ig:a.replace(xg,b)}function Jg(a){a.selector===Kg&&(a.selector="html");}eg.prototype.c=function(a){return a.match(xg)?"":a.match(Ag)?this.b(a,Lg):Cg(a.trim(),Lg)};fa.Object.defineProperties(eg.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return "style-scope"}}});
	var sg=/:(nth[-\w]+)\(([^)]+)\)/,Lg=":not(.style-scope)",qg=",",yg=/(^|[\s>+~]+)((?:\[.+?\]|[^\s>+~=[])+)/g,Hg=/[[.:#*]/,xg=":host",Kg=":root",Ag="::slotted",wg=new RegExp("^("+Ag+")"),Gg=/(:host)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Dg=/(?:::slotted)(?:\(((?:\([^)(]*\)|[^)(]*)+?)\))/,Eg=/(.*):dir\((?:(ltr|rtl))\)/,og=".",Fg=":",ig="class",Ig="should_not_match",ug=/:(?:matches|any|-(?:webkit|moz)-any)/,W=new eg;function Mg(a,b,c,d,e){this.M=a||null;this.b=b||null;this.c=c||[];this.T=null;this.da=e||"";this.X=d||"";this.a=this.I=this.O=null;}function X(a){return a?a.__styleInfo:null}function Ng(a,b){return a.__styleInfo=b}Mg.prototype.f=function(){return this.M};Mg.prototype._getStyleRules=Mg.prototype.f;function Og(a){var b=this.matches||this.matchesSelector||this.mozMatchesSelector||this.msMatchesSelector||this.oMatchesSelector||this.webkitMatchesSelector;return b&&b.call(this,a)}var Pg=navigator.userAgent.match("Trident");function Qg(){}function Rg(a){var b={},c=[],d=0;Sf(a,function(a){Sg(a);a.index=d++;a=a.B.cssText;for(var c;c=Mf.exec(a);){var e=c[1];":"!==c[2]&&(b[e]=!0);}},function(a){c.push(a);});a.b=c;a=[];for(var e in b)a.push(e);return a}
	function Sg(a){if(!a.B){var b={},c={};Tg(a,c)&&(b.L=c,a.rules=null);b.cssText=a.parsedCssText.replace(Pf,"").replace(Kf,"");a.B=b;}}function Tg(a,b){var c=a.B;if(c){if(c.L)return Object.assign(b,c.L),!0}else{c=a.parsedCssText;for(var d;a=Kf.exec(c);){d=(a[2]||a[3]).trim();if("inherit"!==d||"unset"!==d)b[a[1].trim()]=d;d=!0;}return d}}
	function Ug(a,b,c){b&&(b=0<=b.indexOf(";")?Vg(a,b,c):$f(b,function(b,e,f,g){if(!e)return b+g;(e=Ug(a,c[e],c))&&"initial"!==e?"apply-shim-inherit"===e&&(e="inherit"):e=Ug(a,c[f]||f,c)||f;return b+(e||"")+g}));return b&&b.trim()||""}
	function Vg(a,b,c){b=b.split(";");for(var d=0,e,f;d<b.length;d++)if(e=b[d]){Lf.lastIndex=0;if(f=Lf.exec(e))e=Ug(a,c[f[1]],c);else if(f=e.indexOf(":"),-1!==f){var g=e.substring(f);g=g.trim();g=Ug(a,g,c)||g;e=e.substring(0,f)+g;}b[d]=e&&e.lastIndexOf(";")===e.length-1?e.slice(0,-1):e||"";}return b.join(";")}
	function Wg(a,b){var c={},d=[];Sf(a,function(a){a.B||Sg(a);var e=a.F||a.parsedSelector;b&&a.B.L&&e&&Og.call(b,e)&&(Tg(a,c),a=a.index,e=parseInt(a/32,10),d[e]=(d[e]||0)|1<<a%32);},null,!0);return {L:c,key:d}}
	function Xg(a,b,c,d){b.B||Sg(b);if(b.B.L){var e=bg(a);a=e.is;e=e.X;e=a?ng(a,e):"html";var f=b.parsedSelector,g=":host > *"===f||"html"===f,h=0===f.indexOf(":host")&&!g;"shady"===c&&(g=f===e+" > *."+e||-1!==f.indexOf("html"),h=!g&&0===f.indexOf(e));if(g||h)c=e,h&&(b.F||(b.F=pg(W,b,W.b,a?og+a:"",e)),c=b.F||e),d({sa:c,Va:h,vb:g});}}function Yg(a,b,c){var d={},e={};Sf(b,function(b){Xg(a,b,c,function(c){Og.call(a.lb||a,c.sa)&&(c.Va?Tg(b,d):Tg(b,e));});},null,!0);return {Za:e,Ta:d}}
	function Zg(a,b,c,d){var e=bg(b),f=ng(e.is,e.X),g=new RegExp("(?:^|[^.#[:])"+(b.extends?"\\"+f.slice(0,-1)+"\\]":f)+"($|[.:[\\s>+~])"),h=X(b);e=h.M;h=h.da;var k=$g(e,d);return lg(b,e,function(b){var e="";b.B||Sg(b);b.B.cssText&&(e=Vg(a,b.B.cssText,c));b.cssText=e;if(!T&&!Uf(b)&&b.cssText){var h=e=b.cssText;null==b.xa&&(b.xa=Nf.test(e));if(b.xa)if(null==b.ga){b.ga=[];for(var l in k)h=k[l],h=h(e),e!==h&&(e=h,b.ga.push(l));}else{for(l=0;l<b.ga.length;++l)h=k[b.ga[l]],e=h(e);h=e;}b.cssText=h;b.F=b.F||b.selector;
	e="."+d;l=cg(b.F);h=0;for(var u=l.length,w=void 0;h<u&&(w=l[h]);h++)l[h]=w.match(g)?w.replace(f,e):e+" "+w;b.selector=l.join(",");}},h)}function $g(a,b){a=a.b;var c={};if(!T&&a)for(var d=0,e=a[d];d<a.length;e=a[++d]){var f=e,g=b;f.f=new RegExp("\\b"+f.keyframesName+"(?!\\B|-)","g");f.a=f.keyframesName+"-"+g;f.F=f.F||f.selector;f.selector=f.F.replace(f.keyframesName,f.a);c[e.keyframesName]=ah(e);}return c}function ah(a){return function(b){return b.replace(a.f,a.a)}}
	function bh(a,b){var c=ch,d=Tf(a);a.textContent=Rf(d,function(a){var d=a.cssText=a.parsedCssText;a.B&&a.B.cssText&&(d=d.replace(Ef,"").replace(Ff,""),a.cssText=Vg(c,d,b));});}fa.Object.defineProperties(Qg.prototype,{a:{configurable:!0,enumerable:!0,get:function(){return "x-scope"}}});var ch=new Qg;var dh={},eh=window.customElements;if(eh&&!T){var fh=eh.define;eh.define=function(a,b,c){dh[a]||(dh[a]=Yf(a));fh.call(eh,a,b,c);};}function gh(){this.cache={};}gh.prototype.store=function(a,b,c,d){var e=this.cache[a]||[];e.push({L:b,styleElement:c,I:d});100<e.length&&e.shift();this.cache[a]=e;};gh.prototype.fetch=function(a,b,c){if(a=this.cache[a])for(var d=a.length-1;0<=d;d--){var e=a[d],f;a:{for(f=0;f<c.length;f++){var g=c[f];if(e.L[g]!==b[g]){f=!1;break a}}f=!0;}if(f)return e}};function hh(){}function ih(a){var b=[];a.classList?b=Array.from(a.classList):a instanceof window.SVGElement&&a.hasAttribute("class")&&(b=a.getAttribute("class").split(/\s+/));a=b;b=a.indexOf(W.a);return -1<b?a[b+1]:""}function jh(a){var b=a.getRootNode();return b===a||b===a.ownerDocument?"":(a=b.host)?bg(a).is:""}
	function kh(a){for(var b=0;b<a.length;b++){var c=a[b];if(c.target!==document.documentElement&&c.target!==document.head)for(var d=0;d<c.addedNodes.length;d++){var e=c.addedNodes[d];if(e.nodeType===Node.ELEMENT_NODE){var f=e.getRootNode(),g=ih(e);if(g&&f===e.ownerDocument&&("style"!==e.localName&&"template"!==e.localName||""===dg(e)))kg(e,g);else if(f instanceof ShadowRoot)for(f=jh(e),f!==g&&jg(e,g,f),e=window.ShadyDOM.nativeMethods.querySelectorAll.call(e,":not(."+W.a+")"),g=0;g<e.length;g++){f=e[g];
	var h=jh(f);h&&hg(f,h);}}}}}
	if(!(T||window.ShadyDOM&&window.ShadyDOM.handlesDynamicScoping)){var lh=new MutationObserver(kh),mh=function(a){lh.observe(a,{childList:!0,subtree:!0});};if(window.customElements&&!window.customElements.polyfillWrapFlushCallback)mh(document);else{var nh=function(){mh(document.body);};window.HTMLImports?window.HTMLImports.whenReady(nh):requestAnimationFrame(function(){if("loading"===document.readyState){var a=function(){nh();document.removeEventListener("readystatechange",a);};document.addEventListener("readystatechange",
	a);}else nh();});}hh=function(){kh(lh.takeRecords());};}var oh=hh;var ph={};var qh=Promise.resolve();function rh(a){if(a=ph[a])a._applyShimCurrentVersion=a._applyShimCurrentVersion||0,a._applyShimValidatingVersion=a._applyShimValidatingVersion||0,a._applyShimNextVersion=(a._applyShimNextVersion||0)+1;}function sh(a){return a._applyShimCurrentVersion===a._applyShimNextVersion}function th(a){a._applyShimValidatingVersion=a._applyShimNextVersion;a.b||(a.b=!0,qh.then(function(){a._applyShimCurrentVersion=a._applyShimNextVersion;a.b=!1;}));}var uh=new gh;function Y(){this.G={};this.c=document.documentElement;var a=new pf;a.rules=[];this.f=Ng(this.c,new Mg(a));this.m=!1;this.b=this.a=null;}r=Y.prototype;r.flush=function(){oh();};r.Ra=function(a){return Tf(a)};r.cb=function(a){return Rf(a)};r.prepareTemplate=function(a,b,c){this.prepareTemplateDom(a,b);this.prepareTemplateStyles(a,b,c);};
	r.prepareTemplateStyles=function(a,b,c){if(!a.m){T||dh[b]||(dh[b]=Yf(b));a.m=!0;a.name=b;a.extends=c;ph[b]=a;var d=dg(a);var e=[];for(var f=a.content.querySelectorAll("style"),g=0;g<f.length;g++){var h=f[g];if(h.hasAttribute("shady-unscoped")){if(!T){var k=h.textContent;Qf.has(k)||(Qf.add(k),k=h.cloneNode(!0),document.head.appendChild(k));h.parentNode.removeChild(h);}}else e.push(h.textContent),h.parentNode.removeChild(h);}e=e.join("").trim();c={is:b,extends:c};vh(this);if(f=""===dg(a))f=Lf.test(e)||
	Kf.test(e),Lf.lastIndex=0,Kf.lastIndex=0;e=qf(e);f&&V&&this.a&&this.a.transformRules(e,b);a._styleAst=e;e=[];V||(e=Rg(a._styleAst));if(!e.length||V)f=T?a.content:null,b=dh[b]||null,d=lg(c,a._styleAst,null,d),d=d.length?Vf(d,c.is,f,b):void 0,a.a=d;a.f=e;}};r.prepareTemplateDom=function(a,b){var c=dg(a);T||"shady"===c||a.c||(a.c=!0,fg(a.content,b));};
	function wh(a){!a.b&&window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface&&(a.b=window.ShadyCSS.CustomStyleInterface,a.b.transformCallback=function(b){a.Aa(b);},a.b.validateCallback=function(){requestAnimationFrame(function(){(a.b.enqueued||a.m)&&a.flushCustomStyles();});});}function vh(a){!a.a&&window.ShadyCSS&&window.ShadyCSS.ApplyShim&&(a.a=window.ShadyCSS.ApplyShim,a.a.invalidCallback=rh);wh(a);}
	r.flushCustomStyles=function(){vh(this);if(this.b){var a=this.b.processStyles();if(this.b.enqueued){if(V)for(var b=0;b<a.length;b++){var c=this.b.getStyleForCustomStyle(a[b]);if(c&&V&&this.a){var d=Tf(c);vh(this);this.a.transformRules(d);c.textContent=Rf(d);}}else for(xh(this,this.c,this.f),b=0;b<a.length;b++)(c=this.b.getStyleForCustomStyle(a[b]))&&bh(c,this.f.O);this.b.enqueued=!1;this.m&&!V&&this.styleDocument();}}};
	r.styleElement=function(a,b){var c=X(a);if(!c){var d=bg(a);c=d.is;d=d.X;var e=dh[c]||null;c=ph[c];if(c){var f=c._styleAst;var g=c.f;var h=dg(c);}f=new Mg(f,e,g,d,h);c&&Ng(a,f);c=f;}a!==this.c&&(this.m=!0);b&&(c.T=c.T||{},Object.assign(c.T,b));if(V){b=c;f=bg(a).is;if(b.T){g=b.T;for(var k in g)null===k?a.style.removeProperty(k):a.style.setProperty(k,g[k]);}if(!(!(k=ph[f])&&a!==this.c||k&&""!==dg(k))&&k&&k.a&&!sh(k)){if(sh(k)||k._applyShimValidatingVersion!==k._applyShimNextVersion)vh(this),this.a&&this.a.transformRules(k._styleAst,
	f),k.a.textContent=lg(a,b.M),th(k);T&&(f=a.shadowRoot)&&(f=f.querySelector("style"))&&(f.textContent=lg(a,b.M));b.M=k._styleAst;}}else if(k=c,this.flush(),xh(this,a,k),k.c&&k.c.length){b=bg(a).is;c=(f=uh.fetch(b,k.O,k.c))?f.styleElement:null;g=k.I;(h=f&&f.I)||(h=this.G[b]=(this.G[b]||0)+1,h=b+"-"+h);k.I=h;h=k.I;d=ch;d=c?c.textContent||"":Zg(d,a,k.O,h);e=X(a);var l=e.a;l&&!T&&l!==c&&(l._useCount--,0>=l._useCount&&l.parentNode&&l.parentNode.removeChild(l));T?e.a?(e.a.textContent=d,c=e.a):d&&(c=Vf(d,
	h,a.shadowRoot,e.b)):c?c.parentNode||(Pg&&-1<d.indexOf("@media")&&(c.textContent=d),Wf(c,null,e.b)):d&&(c=Vf(d,h,null,e.b));c&&(c._useCount=c._useCount||0,e.a!=c&&c._useCount++,e.a=c);h=c;T||(c=k.I,e=d=a.getAttribute("class")||"",g&&(e=d.replace(new RegExp("\\s*x-scope\\s*"+g+"\\s*","g")," ")),e+=(e?" ":"")+"x-scope "+c,d!==e&&ag(a,e));f||uh.store(b,k.O,h,k.I);}};function yh(a,b){return (b=b.getRootNode().host)?X(b)?b:yh(a,b):a.c}
	function xh(a,b,c){a=yh(a,b);var d=X(a);a=Object.create(d.O||null);var e=Yg(b,c.M,c.da);b=Wg(d.M,b).L;Object.assign(a,e.Ta,b,e.Za);b=c.T;for(var f in b)if((e=b[f])||0===e)a[f]=e;f=ch;b=Object.getOwnPropertyNames(a);for(e=0;e<b.length;e++)d=b[e],a[d]=Ug(f,a[d],a);c.O=a;}r.styleDocument=function(a){this.styleSubtree(this.c,a);};
	r.styleSubtree=function(a,b){var c=a.shadowRoot;(c||a===this.c)&&this.styleElement(a,b);if(b=c&&(c.children||c.childNodes))for(a=0;a<b.length;a++)this.styleSubtree(b[a]);else if(a=a.children||a.childNodes)for(b=0;b<a.length;b++)this.styleSubtree(a[b]);};
	r.Aa=function(a){var b=this,c=Tf(a),d=dg(a);d!==this.f.da&&(this.f.da=d);Sf(c,function(a){if(T)Jg(a);else{var c=W;a.selector=a.parsedSelector;Jg(a);a.selector=a.F=pg(c,a,c.c,void 0,void 0);}V&&""===d&&(vh(b),b.a&&b.a.transformRule(a));});V?a.textContent=Rf(c):this.f.M.rules.push(c);};r.getComputedStyleValue=function(a,b){var c;V||(c=(X(a)||X(yh(this,a))).O[b]);return (c=c||window.getComputedStyle(a).getPropertyValue(b))?c.trim():""};
	r.bb=function(a,b){var c=a.getRootNode();b=b?b.split(/\s/):[];c=c.host&&c.host.localName;if(!c){var d=a.getAttribute("class");if(d){d=d.split(/\s/);for(var e=0;e<d.length;e++)if(d[e]===W.a){c=d[e+1];break}}}c&&b.push(W.a,c);V||(c=X(a))&&c.I&&b.push(ch.a,c.I);ag(a,b.join(" "));};r.La=function(a){return X(a)};r.ab=function(a,b){hg(a,b);};r.eb=function(a,b){hg(a,b,!0);};r.$a=function(a){return jh(a)};r.Pa=function(a){return ih(a)};Y.prototype.flush=Y.prototype.flush;Y.prototype.prepareTemplate=Y.prototype.prepareTemplate;
	Y.prototype.styleElement=Y.prototype.styleElement;Y.prototype.styleDocument=Y.prototype.styleDocument;Y.prototype.styleSubtree=Y.prototype.styleSubtree;Y.prototype.getComputedStyleValue=Y.prototype.getComputedStyleValue;Y.prototype.setElementClass=Y.prototype.bb;Y.prototype._styleInfoForNode=Y.prototype.La;Y.prototype.transformCustomStyleForDocument=Y.prototype.Aa;Y.prototype.getStyleAst=Y.prototype.Ra;Y.prototype.styleAstToString=Y.prototype.cb;Y.prototype.flushCustomStyles=Y.prototype.flushCustomStyles;
	Y.prototype.scopeNode=Y.prototype.ab;Y.prototype.unscopeNode=Y.prototype.eb;Y.prototype.scopeForNode=Y.prototype.$a;Y.prototype.currentScopeForNode=Y.prototype.Pa;Object.defineProperties(Y.prototype,{nativeShadow:{get:function(){return T}},nativeCss:{get:function(){return V}}});var Z=new Y,zh,Ah;window.ShadyCSS&&(zh=window.ShadyCSS.ApplyShim,Ah=window.ShadyCSS.CustomStyleInterface);
	window.ShadyCSS={ScopingShim:Z,prepareTemplate:function(a,b,c){Z.flushCustomStyles();Z.prepareTemplate(a,b,c);},prepareTemplateDom:function(a,b){Z.prepareTemplateDom(a,b);},prepareTemplateStyles:function(a,b,c){Z.flushCustomStyles();Z.prepareTemplateStyles(a,b,c);},styleSubtree:function(a,b){Z.flushCustomStyles();Z.styleSubtree(a,b);},styleElement:function(a){Z.flushCustomStyles();Z.styleElement(a);},styleDocument:function(a){Z.flushCustomStyles();Z.styleDocument(a);},flushCustomStyles:function(){Z.flushCustomStyles();},
	getComputedStyleValue:function(a,b){return Z.getComputedStyleValue(a,b)},nativeCss:V,nativeShadow:T};zh&&(window.ShadyCSS.ApplyShim=zh);Ah&&(window.ShadyCSS.CustomStyleInterface=Ah);(function(a){function b(a){""==a&&(f.call(this),this.i=!0);return a.toLowerCase()}function c(a){var b=a.charCodeAt(0);return 32<b&&127>b&&-1==[34,35,60,62,63,96].indexOf(b)?a:encodeURIComponent(a)}function d(a){var b=a.charCodeAt(0);return 32<b&&127>b&&-1==[34,35,60,62,96].indexOf(b)?a:encodeURIComponent(a)}function e(a,e,g){function h(a){}var k=e||"scheme start",w=0,q="",u=!1,R=!1;a:for(;(void 0!=a[w-1]||0==w)&&!this.i;){var m=a[w];switch(k){case "scheme start":if(m&&p.test(m))q+=
	m.toLowerCase(),k="scheme";else if(e){break a}else{q="";k="no scheme";continue}break;case "scheme":if(m&&G.test(m))q+=m.toLowerCase();else if(":"==m){this.h=q;q="";if(e)break a;void 0!==l[this.h]&&(this.D=!0);k="file"==this.h?"relative":this.D&&g&&g.h==this.h?"relative or authority":this.D?"authority first slash":"scheme data";}else if(e){break a}else{q="";w=0;k="no scheme";continue}break;case "scheme data":"?"==m?(this.u="?",
	k="query"):"#"==m?(this.C="#",k="fragment"):void 0!=m&&"\t"!=m&&"\n"!=m&&"\r"!=m&&(this.pa+=c(m));break;case "no scheme":if(g&&void 0!==l[g.h]){k="relative";continue}else f.call(this),this.i=!0;break;case "relative or authority":if("/"==m&&"/"==a[w+1])k="authority ignore slashes";else{k="relative";continue}break;case "relative":this.D=!0;"file"!=this.h&&(this.h=g.h);if(void 0==m){this.j=g.j;this.s=g.s;this.l=g.l.slice();this.u=g.u;this.v=g.v;this.g=g.g;
	break a}else if("/"==m||"\\"==m)k="relative slash";else if("?"==m)this.j=g.j,this.s=g.s,this.l=g.l.slice(),this.u="?",this.v=g.v,this.g=g.g,k="query";else if("#"==m)this.j=g.j,this.s=g.s,this.l=g.l.slice(),this.u=g.u,this.C="#",this.v=g.v,this.g=g.g,k="fragment";else{k=a[w+1];var y=a[w+2];if("file"!=this.h||!p.test(m)||":"!=k&&"|"!=k||void 0!=y&&"/"!=y&&"\\"!=y&&"?"!=y&&"#"!=y)this.j=g.j,this.s=g.s,this.v=g.v,this.g=g.g,this.l=g.l.slice(),this.l.pop();k=
	"relative path";continue}break;case "relative slash":if("/"==m||"\\"==m)k="file"==this.h?"file host":"authority ignore slashes";else{"file"!=this.h&&(this.j=g.j,this.s=g.s,this.v=g.v,this.g=g.g);k="relative path";continue}break;case "authority first slash":if("/"==m)k="authority second slash";else{k="authority ignore slashes";continue}break;case "authority second slash":k="authority ignore slashes";if("/"!=m){continue}break;case "authority ignore slashes":if("/"!=m&&"\\"!=m){k="authority";continue}break;case "authority":if("@"==m){u&&(q+="%40");u=!0;for(m=0;m<q.length;m++)y=q[m],"\t"==y||"\n"==y||"\r"==y?h("Invalid whitespace in authority."):":"==y&&null===this.g?this.g="":(y=c(y),null!==this.g?this.g+=y:this.v+=y);q="";}else if(void 0==m||"/"==m||"\\"==m||"?"==m||"#"==m){w-=q.length;q="";k="host";continue}else q+=m;break;case "file host":if(void 0==
	m||"/"==m||"\\"==m||"?"==m||"#"==m){2!=q.length||!p.test(q[0])||":"!=q[1]&&"|"!=q[1]?(0!=q.length&&(this.j=b.call(this,q),q=""),k="relative path start"):k="relative path";continue}else"\t"==m||"\n"==m||"\r"==m?h("Invalid whitespace in file host."):q+=m;break;case "host":case "hostname":if(":"!=m||R)if(void 0==m||"/"==m||"\\"==m||"?"==m||"#"==m){this.j=b.call(this,q);q="";k="relative path start";if(e)break a;continue}else"\t"!=m&&"\n"!=m&&"\r"!=m?("["==m?R=!0:"]"==m&&(R=!1),q+=m):h("Invalid code point in host/hostname: "+
	m);else if(this.j=b.call(this,q),q="",k="port","hostname"==e)break a;break;case "port":if(/[0-9]/.test(m))q+=m;else if(void 0==m||"/"==m||"\\"==m||"?"==m||"#"==m||e){""!=q&&(q=parseInt(q,10),q!=l[this.h]&&(this.s=q+""),q="");if(e)break a;k="relative path start";continue}else"\t"==m||"\n"==m||"\r"==m?h("Invalid code point in port: "+m):(f.call(this),this.i=!0);break;case "relative path start":k="relative path";if("/"!=m&&"\\"!=m)continue;break;case "relative path":if(void 0!=
	m&&"/"!=m&&"\\"!=m&&(e||"?"!=m&&"#"!=m))"\t"!=m&&"\n"!=m&&"\r"!=m&&(q+=c(m));else{if(y=n[q.toLowerCase()])q=y;".."==q?(this.l.pop(),"/"!=m&&"\\"!=m&&this.l.push("")):"."==q&&"/"!=m&&"\\"!=m?this.l.push(""):"."!=q&&("file"==this.h&&0==this.l.length&&2==q.length&&p.test(q[0])&&"|"==q[1]&&(q=q[0]+":"),this.l.push(q));q="";"?"==m?(this.u="?",k="query"):"#"==m&&(this.C="#",k="fragment");}break;case "query":e||"#"!=m?void 0!=m&&"\t"!=m&&"\n"!=m&&"\r"!=m&&(this.u+=
	d(m)):(this.C="#",k="fragment");break;case "fragment":void 0!=m&&"\t"!=m&&"\n"!=m&&"\r"!=m&&(this.C+=m);}w++;}}function f(){this.v=this.pa=this.h="";this.g=null;this.s=this.j="";this.l=[];this.C=this.u="";this.D=this.i=!1;}function g(a,b){void 0===b||b instanceof g||(b=new g(String(b)));this.Ma=a;f.call(this);a=a.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g,"");e.call(this,a,null,b);}var h=!1;if(!a.rb)try{var k=new URL("b","http://a");k.pathname="c%20d";h="http://a/c%20d"===k.href;}catch(w){}if(!h){var l=Object.create(null);
	l.ftp=21;l.file=0;l.gopher=70;l.http=80;l.https=443;l.ws=80;l.wss=443;var n=Object.create(null);n["%2e"]=".";n[".%2e"]="..";n["%2e."]="..";n["%2e%2e"]="..";var p=/[a-zA-Z]/,G=/[a-zA-Z0-9\+\-\.]/;g.prototype={toString:function(){return this.href},get href(){if(this.i)return this.Ma;var a="";if(""!=this.v||null!=this.g)a=this.v+(null!=this.g?":"+this.g:"")+"@";return this.protocol+(this.D?"//"+a+this.host:"")+this.pathname+this.u+this.C},set href(a){f.call(this);e.call(this,a);},get protocol(){return this.h+
	":"},set protocol(a){this.i||e.call(this,a+":","scheme start");},get host(){return this.i?"":this.s?this.j+":"+this.s:this.j},set host(a){!this.i&&this.D&&e.call(this,a,"host");},get hostname(){return this.j},set hostname(a){!this.i&&this.D&&e.call(this,a,"hostname");},get port(){return this.s},set port(a){!this.i&&this.D&&e.call(this,a,"port");},get pathname(){return this.i?"":this.D?"/"+this.l.join("/"):this.pa},set pathname(a){!this.i&&this.D&&(this.l=[],e.call(this,a,"relative path start"));},get search(){return this.i||
	!this.u||"?"==this.u?"":this.u},set search(a){!this.i&&this.D&&(this.u="?","?"==a[0]&&(a=a.slice(1)),e.call(this,a,"query"));},get hash(){return this.i||!this.C||"#"==this.C?"":this.C},set hash(a){this.i||(this.C="#","#"==a[0]&&(a=a.slice(1)),e.call(this,a,"fragment"));},get origin(){var a;if(this.i||!this.h)return "";switch(this.h){case "data":case "file":case "javascript":case "mailto":return "null"}return (a=this.host)?this.h+"://"+a:""}};var u=a.URL;u&&(g.createObjectURL=function(a){return u.createObjectURL.apply(u,
	arguments)},g.revokeObjectURL=function(a){u.revokeObjectURL(a);});a.URL=g;}})(window);Object.getOwnPropertyDescriptor(Node.prototype,"baseURI")||Object.defineProperty(Node.prototype,"baseURI",{get:function(){var a=(this.ownerDocument||this).querySelector("base[href]");return a&&a.href||window.location.href},configurable:!0,enumerable:!0});var Bh=document.createElement("style");Bh.textContent="body {transition: opacity ease-in 0.2s; } \nbody[unresolved] {opacity: 0; display: block; overflow: hidden; position: relative; } \n";var Ch=document.querySelector("head");Ch.insertBefore(Bh,Ch.firstChild);var Dh=window.customElements,Eh=!1,Fh=null;Dh.polyfillWrapFlushCallback&&Dh.polyfillWrapFlushCallback(function(a){Fh=a;Eh&&a();});function Gh(){window.HTMLTemplateElement.bootstrap&&window.HTMLTemplateElement.bootstrap(window.document);Fh&&Fh();Eh=!0;window.WebComponents.ready=!0;document.dispatchEvent(new CustomEvent("WebComponentsReady",{bubbles:!0}));}
	"complete"!==document.readyState?(window.addEventListener("load",Gh),window.addEventListener("DOMContentLoaded",function(){window.removeEventListener("load",Gh);Gh();})):Gh();}).call(commonjsGlobal);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	window.JSCompiler_renameProperty = function(prop) { return prop; };

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let CSS_URL_RX = /(url\()([^)]*)(\))/g;
	let ABS_URL = /(^\/)|(^#)|(^[\w-\d]*:)/;
	let workingURL;
	let resolveDoc;
	/**
	 * Resolves the given URL against the provided `baseUri'.
	 *
	 * Note that this function performs no resolution for URLs that start
	 * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
	 * URL resolution, use `window.URL`.
	 *
	 * @param {string} url Input URL to resolve
	 * @param {?string=} baseURI Base URI to resolve the URL against
	 * @return {string} resolved URL
	 */
	function resolveUrl(url, baseURI) {
	  if (url && ABS_URL.test(url)) {
	    return url;
	  }
	  // Lazy feature detection.
	  if (workingURL === undefined) {
	    workingURL = false;
	    try {
	      const u = new URL('b', 'http://a');
	      u.pathname = 'c%20d';
	      workingURL = (u.href === 'http://a/c%20d');
	    } catch (e) {
	      // silently fail
	    }
	  }
	  if (!baseURI) {
	    baseURI = document.baseURI || window.location.href;
	  }
	  if (workingURL) {
	    return (new URL(url, baseURI)).href;
	  }
	  // Fallback to creating an anchor into a disconnected document.
	  if (!resolveDoc) {
	    resolveDoc = document.implementation.createHTMLDocument('temp');
	    resolveDoc.base = resolveDoc.createElement('base');
	    resolveDoc.head.appendChild(resolveDoc.base);
	    resolveDoc.anchor = resolveDoc.createElement('a');
	    resolveDoc.body.appendChild(resolveDoc.anchor);
	  }
	  resolveDoc.base.href = baseURI;
	  resolveDoc.anchor.href = url;
	  return resolveDoc.anchor.href || url;

	}

	/**
	 * Resolves any relative URL's in the given CSS text against the provided
	 * `ownerDocument`'s `baseURI`.
	 *
	 * @param {string} cssText CSS text to process
	 * @param {string} baseURI Base URI to resolve the URL against
	 * @return {string} Processed CSS text with resolved URL's
	 */
	function resolveCss(cssText, baseURI) {
	  return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {
	    return pre + '\'' +
	      resolveUrl(url.replace(/["']/g, ''), baseURI) +
	      '\'' + post;
	  });
	}

	/**
	 * Returns a path from a given `url`. The path includes the trailing
	 * `/` from the url.
	 *
	 * @param {string} url Input URL to transform
	 * @return {string} resolved path
	 */
	function pathFromUrl(url) {
	  return url.substring(0, url.lastIndexOf('/') + 1);
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/
	const useShadow = !(window.ShadyDOM);
	const useNativeCSSProperties = Boolean(!window.ShadyCSS || window.ShadyCSS.nativeCss);
	const useNativeCustomElements = !(window.customElements.polyfillWrapFlushCallback);


	/**
	 * Globally settable property that is automatically assigned to
	 * `ElementMixin` instances, useful for binding in templates to
	 * make URL's relative to an application's root.  Defaults to the main
	 * document URL, but can be overridden by users.  It may be useful to set
	 * `rootPath` to provide a stable application mount path when
	 * using client side routing.
	 */
	let rootPath = undefined ||
	  pathFromUrl(document.baseURI || window.location.href);

	/**
	 * A global callback used to sanitize any value before inserting it into the DOM. The callback signature is:
	 *
	 *     Polymer = {
	 *       sanitizeDOMValue: function(value, name, type, node) { ... }
	 *     }
	 *
	 * Where:
	 *
	 * `value` is the value to sanitize.
	 * `name` is the name of an attribute or property (for example, href).
	 * `type` indicates where the value is being inserted: one of property, attribute, or text.
	 * `node` is the node where the value is being inserted.
	 *
	 * @type {(function(*,string,string,Node):*)|undefined}
	 */
	let sanitizeDOMValue = undefined;

	/**
	 * Globally settable property to make Polymer Gestures use passive TouchEvent listeners when recognizing gestures.
	 * When set to `true`, gestures made from touch will not be able to prevent scrolling, allowing for smoother
	 * scrolling performance.
	 * Defaults to `false` for backwards compatibility.
	 */
	let passiveTouchGestures = false;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// unique global id for deduping mixins.
	let dedupeId = 0;

	/* eslint-disable valid-jsdoc */
	/**
	 * Wraps an ES6 class expression mixin such that the mixin is only applied
	 * if it has not already been applied its base argument. Also memoizes mixin
	 * applications.
	 *
	 * @template T
	 * @param {T} mixin ES6 class expression mixin to wrap
	 * @return {T}
	 * @suppress {invalidCasts}
	 */
	const dedupingMixin = function(mixin) {
	  let mixinApplications = /** @type {!MixinFunction} */(mixin).__mixinApplications;
	  if (!mixinApplications) {
	    mixinApplications = new WeakMap();
	    /** @type {!MixinFunction} */(mixin).__mixinApplications = mixinApplications;
	  }
	  // maintain a unique id for each mixin
	  let mixinDedupeId = dedupeId++;
	  function dedupingMixin(base) {
	    let baseSet = /** @type {!MixinFunction} */(base).__mixinSet;
	    if (baseSet && baseSet[mixinDedupeId]) {
	      return base;
	    }
	    let map = mixinApplications;
	    let extended = map.get(base);
	    if (!extended) {
	      extended = /** @type {!Function} */(mixin)(base);
	      map.set(base, extended);
	    }
	    // copy inherited mixin set from the extended class, or the base class
	    // NOTE: we avoid use of Set here because some browser (IE11)
	    // cannot extend a base Set via the constructor.
	    let mixinSet = Object.create(/** @type {!MixinFunction} */(extended).__mixinSet || baseSet || null);
	    mixinSet[mixinDedupeId] = true;
	    /** @type {!MixinFunction} */(extended).__mixinSet = mixinSet;
	    return extended;
	  }

	  return dedupingMixin;
	};
	/* eslint-enable valid-jsdoc */

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';
	const INCLUDE_ATTR = 'include';
	const SHADY_UNSCOPED_ATTR = 'shady-unscoped';

	function importModule(moduleId) {
	  const /** DomModule */ PolymerDomModule = customElements.get('dom-module');
	  if (!PolymerDomModule) {
	    return null;
	  }
	  return PolymerDomModule.import(moduleId);
	}

	function styleForImport(importDoc) {
	  // NOTE: polyfill affordance.
	  // under the HTMLImports polyfill, there will be no 'body',
	  // but the import pseudo-doc can be used directly.
	  let container = importDoc.body ? importDoc.body : importDoc;
	  const importCss = resolveCss(container.textContent,
	    importDoc.baseURI);
	  const style = document.createElement('style');
	  style.textContent = importCss;
	  return style;
	}

	/**
	 * Returns a list of <style> elements in a space-separated list of `dom-module`s.
	 *
	 * @function
	 * @param {string} moduleIds List of dom-module id's within which to
	 * search for css.
	 * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements
	 * @this {StyleGather}
	 */
	function stylesFromModules(moduleIds) {
	 const modules = moduleIds.trim().split(/\s+/);
	 const styles = [];
	 for (let i=0; i < modules.length; i++) {
	   styles.push(...stylesFromModule(modules[i]));
	 }
	 return styles;
	}

	/**
	 * Returns a list of <style> elements in a given `dom-module`.
	 * Styles in a `dom-module` can come either from `<style>`s within the
	 * first `<template>`, or else from one or more
	 * `<link rel="import" type="css">` links outside the template.
	 *
	 * @param {string} moduleId dom-module id to gather styles from
	 * @return {!Array<!HTMLStyleElement>} Array of contained styles.
	 * @this {StyleGather}
	 */
	function stylesFromModule(moduleId) {
	  const m = importModule(moduleId);

	  if (!m) {
	    console.warn('Could not find style data in module named', moduleId);
	    return [];
	  }

	  if (m._styles === undefined) {
	    const styles = [];
	    // module imports: <link rel="import" type="css">
	    styles.push(..._stylesFromModuleImports(m));
	    // include css from the first template in the module
	    const template = m.querySelector('template');
	    if (template) {
	      styles.push(...stylesFromTemplate(template,
	        /** @type {templateWithAssetPath} */(m).assetpath));
	    }

	    m._styles = styles;
	  }

	  return m._styles;
	}

	/**
	 * Returns the `<style>` elements within a given template.
	 *
	 * @param {!HTMLTemplateElement} template Template to gather styles from
	 * @param {string} baseURI baseURI for style content
	 * @return {!Array<!HTMLStyleElement>} Array of styles
	 * @this {StyleGather}
	 */
	function stylesFromTemplate(template, baseURI) {
	  if (!template._styles) {
	    const styles = [];
	    // if element is a template, get content from its .content
	    const e$ = template.content.querySelectorAll('style');
	    for (let i=0; i < e$.length; i++) {
	      let e = e$[i];
	      // support style sharing by allowing styles to "include"
	      // other dom-modules that contain styling
	      let include = e.getAttribute(INCLUDE_ATTR);
	      if (include) {
	        styles.push(...stylesFromModules(include).filter(function(item, index, self) {
	          return self.indexOf(item) === index;
	        }));
	      }
	      if (baseURI) {
	        e.textContent = resolveCss(e.textContent, baseURI);
	      }
	      styles.push(e);
	    }
	    template._styles = styles;
	  }
	  return template._styles;
	}

	/**
	 * Returns a list of <style> elements  from stylesheets loaded via `<link rel="import" type="css">` links within the specified `dom-module`.
	 *
	 * @param {string} moduleId Id of `dom-module` to gather CSS from
	 * @return {!Array<!HTMLStyleElement>} Array of contained styles.
	 * @this {StyleGather}
	 */
	function stylesFromModuleImports(moduleId) {
	 let m = importModule(moduleId);
	 return m ? _stylesFromModuleImports(m) : [];
	}

	/**
	 * @this {StyleGather}
	 * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
	 * @return {!Array<!HTMLStyleElement>} Array of contained styles
	 */
	function _stylesFromModuleImports(module) {
	  const styles = [];
	  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);
	  for (let i=0; i < p$.length; i++) {
	    let p = p$[i];
	    if (p.import) {
	      const importDoc = p.import;
	      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);
	      if (unscoped && !importDoc._unscopedStyle) {
	        const style = styleForImport(importDoc);
	        style.setAttribute(SHADY_UNSCOPED_ATTR, '');
	        importDoc._unscopedStyle = style;
	      } else if (!importDoc._style) {
	        importDoc._style = styleForImport(importDoc);
	      }
	      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);
	    }
	  }
	  return styles;
	}

	/**
	 *
	 * Returns CSS text of styles in a space-separated list of `dom-module`s.
	 * Note: This method is deprecated, use `stylesFromModules` instead.
	 *
	 * @deprecated
	 * @param {string} moduleIds List of dom-module id's within which to
	 * search for css.
	 * @return {string} Concatenated CSS content from specified `dom-module`s
	 * @this {StyleGather}
	 */
	function cssFromModules(moduleIds) {
	 let modules = moduleIds.trim().split(/\s+/);
	 let cssText = '';
	 for (let i=0; i < modules.length; i++) {
	   cssText += cssFromModule(modules[i]);
	 }
	 return cssText;
	}

	/**
	 * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`
	 * can come either from `<style>`s within the first `<template>`, or else
	 * from one or more `<link rel="import" type="css">` links outside the
	 * template.
	 *
	 * Any `<styles>` processed are removed from their original location.
	 * Note: This method is deprecated, use `styleFromModule` instead.
	 *
	 * @deprecated
	 * @param {string} moduleId dom-module id to gather styles from
	 * @return {string} Concatenated CSS content from specified `dom-module`
	 * @this {StyleGather}
	 */
	function cssFromModule(moduleId) {
	  let m = importModule(moduleId);
	  if (m && m._cssText === undefined) {
	    // module imports: <link rel="import" type="css">
	    let cssText = _cssFromModuleImports(m);
	    // include css from the first template in the module
	    let t = m.querySelector('template');
	    if (t) {
	      cssText += cssFromTemplate(t,
	        /** @type {templateWithAssetPath} */(m).assetpath);
	    }
	    m._cssText = cssText || null;
	  }
	  if (!m) {
	    console.warn('Could not find style data in module named', moduleId);
	  }
	  return m && m._cssText || '';
	}

	/**
	 * Returns CSS text of `<styles>` within a given template.
	 *
	 * Any `<styles>` processed are removed from their original location.
	 * Note: This method is deprecated, use `styleFromTemplate` instead.
	 *
	 * @deprecated
	 * @param {!HTMLTemplateElement} template Template to gather styles from
	 * @param {string} baseURI Base URI to resolve the URL against
	 * @return {string} Concatenated CSS content from specified template
	 * @this {StyleGather}
	 */
	function cssFromTemplate(template, baseURI) {
	  let cssText = '';
	  const e$ = stylesFromTemplate(template, baseURI);
	  // if element is a template, get content from its .content
	  for (let i=0; i < e$.length; i++) {
	    let e = e$[i];
	    if (e.parentNode) {
	      e.parentNode.removeChild(e);
	    }
	    cssText += e.textContent;
	  }
	  return cssText;
	}

	/**
	 * @deprecated
	 * @this {StyleGather}
	 * @param {!HTMLElement} module dom-module element that could contain `<link rel="import" type="css">` styles
	 * @return {string} Concatenated CSS content from links in the dom-module
	 */
	function _cssFromModuleImports(module) {
	 let cssText = '';
	 let styles = _stylesFromModuleImports(module);
	 for (let i=0; i < styles.length; i++) {
	   cssText += styles[i].textContent;
	 }
	 return cssText;
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let modules = {};
	let lcModules = {};
	function findModule(id) {
	  return modules[id] || lcModules[id.toLowerCase()];
	}

	function styleOutsideTemplateCheck(inst) {
	  if (inst.querySelector('style')) {
	    console.warn('dom-module %s has style outside template', inst.id);
	  }
	}

	/**
	 * The `dom-module` element registers the dom it contains to the name given
	 * by the module's id attribute. It provides a unified database of dom
	 * accessible via its static `import` API.
	 *
	 * A key use case of `dom-module` is for providing custom element `<template>`s
	 * via HTML imports that are parsed by the native HTML parser, that can be
	 * relocated during a bundling pass and still looked up by `id`.
	 *
	 * Example:
	 *
	 *     <dom-module id="foo">
	 *       <img src="stuff.png">
	 *     </dom-module>
	 *
	 * Then in code in some other location that cannot access the dom-module above
	 *
	 *     let img = customElements.get('dom-module').import('foo', 'img');
	 *
	 * @customElement
	 * @extends HTMLElement
	 * @summary Custom element that provides a registry of relocatable DOM content
	 *   by `id` that is agnostic to bundling.
	 * @unrestricted
	 */
	class DomModule extends HTMLElement {

	  static get observedAttributes() { return ['id']; }

	  /**
	   * Retrieves the element specified by the css `selector` in the module
	   * registered by `id`. For example, this.import('foo', 'img');
	   * @param {string} id The id of the dom-module in which to search.
	   * @param {string=} selector The css selector by which to find the element.
	   * @return {Element} Returns the element which matches `selector` in the
	   * module registered at the specified `id`.
	   */
	  static import(id, selector) {
	    if (id) {
	      let m = findModule(id);
	      if (m && selector) {
	        return m.querySelector(selector);
	      }
	      return m;
	    }
	    return null;
	  }

	  /* eslint-disable no-unused-vars */
	  /**
	   * @param {string} name Name of attribute.
	   * @param {?string} old Old value of attribute.
	   * @param {?string} value Current value of attribute.
	   * @param {?string} namespace Attribute namespace.
	   * @return {void}
	   * @override
	   */
	  attributeChangedCallback(name, old, value, namespace) {
	    if (old !== value) {
	      this.register();
	    }
	  }
	  /* eslint-enable no-unused-args */

	  /**
	   * The absolute URL of the original location of this `dom-module`.
	   *
	   * This value will differ from this element's `ownerDocument` in the
	   * following ways:
	   * - Takes into account any `assetpath` attribute added during bundling
	   *   to indicate the original location relative to the bundled location
	   * - Uses the HTMLImports polyfill's `importForElement` API to ensure
	   *   the path is relative to the import document's location since
	   *   `ownerDocument` is not currently polyfilled
	   */
	  get assetpath() {
	    // Don't override existing assetpath.
	    if (!this.__assetpath) {
	      // note: assetpath set via an attribute must be relative to this
	      // element's location; accomodate polyfilled HTMLImports
	      const owner = window.HTMLImports && HTMLImports.importForElement ?
	        HTMLImports.importForElement(this) || document : this.ownerDocument;
	      const url = resolveUrl(
	        this.getAttribute('assetpath') || '', owner.baseURI);
	      this.__assetpath = pathFromUrl(url);
	    }
	    return this.__assetpath;
	  }

	  /**
	   * Registers the dom-module at a given id. This method should only be called
	   * when a dom-module is imperatively created. For
	   * example, `document.createElement('dom-module').register('foo')`.
	   * @param {string=} id The id at which to register the dom-module.
	   * @return {void}
	   */
	  register(id) {
	    id = id || this.id;
	    if (id) {
	      this.id = id;
	      // store id separate from lowercased id so that
	      // in all cases mixedCase id will stored distinctly
	      // and lowercase version is a fallback
	      modules[id] = this;
	      lcModules[id.toLowerCase()] = this;
	      styleOutsideTemplateCheck(this);
	    }
	  }
	}

	DomModule.prototype['modules'] = modules;

	customElements.define('dom-module', DomModule);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Returns true if the given string is a structured data path (has dots).
	 *
	 * Example:
	 *
	 * ```
	 * isPath('foo.bar.baz') // true
	 * isPath('foo')         // false
	 * ```
	 *
	 * @param {string} path Path string
	 * @return {boolean} True if the string contained one or more dots
	 */
	function isPath(path) {
	  return path.indexOf('.') >= 0;
	}

	/**
	 * Returns the root property name for the given path.
	 *
	 * Example:
	 *
	 * ```
	 * root('foo.bar.baz') // 'foo'
	 * root('foo')         // 'foo'
	 * ```
	 *
	 * @param {string} path Path string
	 * @return {string} Root property name
	 */
	function root(path) {
	  let dotIndex = path.indexOf('.');
	  if (dotIndex === -1) {
	    return path;
	  }
	  return path.slice(0, dotIndex);
	}

	/**
	 * Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not
	 * Returns true if the given path is an ancestor of the base path.
	 *
	 * Example:
	 *
	 * ```
	 * isAncestor('foo.bar', 'foo')         // true
	 * isAncestor('foo.bar', 'foo.bar')     // false
	 * isAncestor('foo.bar', 'foo.bar.baz') // false
	 * ```
	 *
	 * @param {string} base Path string to test against.
	 * @param {string} path Path string to test.
	 * @return {boolean} True if `path` is an ancestor of `base`.
	 */
	function isAncestor(base, path) {
	  //     base.startsWith(path + '.');
	  return base.indexOf(path + '.') === 0;
	}

	/**
	 * Given `base` is `foo.bar`, `foo.bar.baz` is an descendant
	 *
	 * Example:
	 *
	 * ```
	 * isDescendant('foo.bar', 'foo.bar.baz') // true
	 * isDescendant('foo.bar', 'foo.bar')     // false
	 * isDescendant('foo.bar', 'foo')         // false
	 * ```
	 *
	 * @param {string} base Path string to test against.
	 * @param {string} path Path string to test.
	 * @return {boolean} True if `path` is a descendant of `base`.
	 */
	function isDescendant(base, path) {
	  //     path.startsWith(base + '.');
	  return path.indexOf(base + '.') === 0;
	}

	/**
	 * Replaces a previous base path with a new base path, preserving the
	 * remainder of the path.
	 *
	 * User must ensure `path` has a prefix of `base`.
	 *
	 * Example:
	 *
	 * ```
	 * translate('foo.bar', 'zot', 'foo.bar.baz') // 'zot.baz'
	 * ```
	 *
	 * @param {string} base Current base string to remove
	 * @param {string} newBase New base string to replace with
	 * @param {string} path Path to translate
	 * @return {string} Translated string
	 */
	function translate(base, newBase, path) {
	  return newBase + path.slice(base.length);
	}

	/**
	 * @param {string} base Path string to test against
	 * @param {string} path Path string to test
	 * @return {boolean} True if `path` is equal to `base`
	 * @this {Path}
	 */
	function matches(base, path) {
	  return (base === path) ||
	         isAncestor(base, path) ||
	         isDescendant(base, path);
	}

	/**
	 * Converts array-based paths to flattened path.  String-based paths
	 * are returned as-is.
	 *
	 * Example:
	 *
	 * ```
	 * normalize(['foo.bar', 0, 'baz'])  // 'foo.bar.0.baz'
	 * normalize('foo.bar.0.baz')        // 'foo.bar.0.baz'
	 * ```
	 *
	 * @param {string | !Array<string|number>} path Input path
	 * @return {string} Flattened path
	 */
	function normalize(path) {
	  if (Array.isArray(path)) {
	    let parts = [];
	    for (let i=0; i<path.length; i++) {
	      let args = path[i].toString().split('.');
	      for (let j=0; j<args.length; j++) {
	        parts.push(args[j]);
	      }
	    }
	    return parts.join('.');
	  } else {
	    return path;
	  }
	}

	/**
	 * Splits a path into an array of property names. Accepts either arrays
	 * of path parts or strings.
	 *
	 * Example:
	 *
	 * ```
	 * split(['foo.bar', 0, 'baz'])  // ['foo', 'bar', '0', 'baz']
	 * split('foo.bar.0.baz')        // ['foo', 'bar', '0', 'baz']
	 * ```
	 *
	 * @param {string | !Array<string|number>} path Input path
	 * @return {!Array<string>} Array of path parts
	 * @this {Path}
	 * @suppress {checkTypes}
	 */
	function split(path) {
	  if (Array.isArray(path)) {
	    return normalize(path).split('.');
	  }
	  return path.toString().split('.');
	}

	/**
	 * Reads a value from a path.  If any sub-property in the path is `undefined`,
	 * this method returns `undefined` (will never throw.
	 *
	 * @param {Object} root Object from which to dereference path from
	 * @param {string | !Array<string|number>} path Path to read
	 * @param {Object=} info If an object is provided to `info`, the normalized
	 *  (flattened) path will be set to `info.path`.
	 * @return {*} Value at path, or `undefined` if the path could not be
	 *  fully dereferenced.
	 * @this {Path}
	 */
	function get(root, path, info) {
	  let prop = root;
	  let parts = split(path);
	  // Loop over path parts[0..n-1] and dereference
	  for (let i=0; i<parts.length; i++) {
	    if (!prop) {
	      return;
	    }
	    let part = parts[i];
	    prop = prop[part];
	  }
	  if (info) {
	    info.path = parts.join('.');
	  }
	  return prop;
	}

	/**
	 * Sets a value to a path.  If any sub-property in the path is `undefined`,
	 * this method will no-op.
	 *
	 * @param {Object} root Object from which to dereference path from
	 * @param {string | !Array<string|number>} path Path to set
	 * @param {*} value Value to set to path
	 * @return {string | undefined} The normalized version of the input path
	 * @this {Path}
	 */
	function set(root, path, value) {
	  let prop = root;
	  let parts = split(path);
	  let last = parts[parts.length-1];
	  if (parts.length > 1) {
	    // Loop over path parts[0..n-2] and dereference
	    for (let i=0; i<parts.length-1; i++) {
	      let part = parts[i];
	      prop = prop[part];
	      if (!prop) {
	        return;
	      }
	    }
	    // Set value to object at end of path
	    prop[last] = value;
	  } else {
	    // Simple property set
	    prop[path] = value;
	  }
	  return parts.join('.');
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const caseMap = {};
	const DASH_TO_CAMEL = /-[a-z]/g;
	const CAMEL_TO_DASH = /([A-Z])/g;

	/**
	 * @fileoverview Module with utilities for converting between "dash-case" and
	 * "camelCase" identifiers.
	 */

	/**
	 * Converts "dash-case" identifier (e.g. `foo-bar-baz`) to "camelCase"
	 * (e.g. `fooBarBaz`).
	 *
	 * @param {string} dash Dash-case identifier
	 * @return {string} Camel-case representation of the identifier
	 */
	function dashToCamelCase(dash) {
	  return caseMap[dash] || (
	    caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(DASH_TO_CAMEL,
	      (m) => m[1].toUpperCase()
	    )
	  );
	}

	/**
	 * Converts "camelCase" identifier (e.g. `fooBarBaz`) to "dash-case"
	 * (e.g. `foo-bar-baz`).
	 *
	 * @param {string} camel Camel-case identifier
	 * @return {string} Dash-case representation of the identifier
	 */
	function camelToDashCase(camel) {
	  return caseMap[camel] || (
	    caseMap[camel] = camel.replace(CAMEL_TO_DASH, '-$1').toLowerCase()
	  );
	}

	var caseMap$0 = /*#__PURE__*/Object.freeze({
		dashToCamelCase: dashToCamelCase,
		camelToDashCase: camelToDashCase
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// Microtask implemented using Mutation Observer
	let microtaskCurrHandle = 0;
	let microtaskLastHandle = 0;
	let microtaskCallbacks = [];
	let microtaskNodeContent = 0;
	let microtaskNode = document.createTextNode('');
	new window.MutationObserver(microtaskFlush).observe(microtaskNode, {characterData: true});

	function microtaskFlush() {
	  const len = microtaskCallbacks.length;
	  for (let i = 0; i < len; i++) {
	    let cb = microtaskCallbacks[i];
	    if (cb) {
	      try {
	        cb();
	      } catch (e) {
	        setTimeout(() => { throw e; });
	      }
	    }
	  }
	  microtaskCallbacks.splice(0, len);
	  microtaskLastHandle += len;
	}

	/**
	 * Async interface wrapper around `setTimeout`.
	 *
	 * @namespace
	 * @summary Async interface wrapper around `setTimeout`.
	 */
	const timeOut = {
	  /**
	   * Returns a sub-module with the async interface providing the provided
	   * delay.
	   *
	   * @memberof timeOut
	   * @param {number=} delay Time to wait before calling callbacks in ms
	   * @return {!AsyncInterface} An async timeout interface
	   */
	  after(delay) {
	    return {
	      run(fn) { return window.setTimeout(fn, delay); },
	      cancel(handle) {
	        window.clearTimeout(handle);
	      }
	    };
	  },
	  /**
	   * Enqueues a function called in the next task.
	   *
	   * @memberof timeOut
	   * @param {!Function} fn Callback to run
	   * @param {number=} delay Delay in milliseconds
	   * @return {number} Handle used for canceling task
	   */
	  run(fn, delay) {
	    return window.setTimeout(fn, delay);
	  },
	  /**
	   * Cancels a previously enqueued `timeOut` callback.
	   *
	   * @memberof timeOut
	   * @param {number} handle Handle returned from `run` of callback to cancel
	   * @return {void}
	   */
	  cancel(handle) {
	    window.clearTimeout(handle);
	  }
	};

	/**
	 * Async interface wrapper around `requestAnimationFrame`.
	 *
	 * @namespace
	 * @summary Async interface wrapper around `requestAnimationFrame`.
	 */
	const animationFrame = {
	  /**
	   * Enqueues a function called at `requestAnimationFrame` timing.
	   *
	   * @memberof animationFrame
	   * @param {function(number):void} fn Callback to run
	   * @return {number} Handle used for canceling task
	   */
	  run(fn) {
	    return window.requestAnimationFrame(fn);
	  },
	  /**
	   * Cancels a previously enqueued `animationFrame` callback.
	   *
	   * @memberof animationFrame
	   * @param {number} handle Handle returned from `run` of callback to cancel
	   * @return {void}
	   */
	  cancel(handle) {
	    window.cancelAnimationFrame(handle);
	  }
	};

	/**
	 * Async interface for enqueuing callbacks that run at microtask timing.
	 *
	 * Note that microtask timing is achieved via a single `MutationObserver`,
	 * and thus callbacks enqueued with this API will all run in a single
	 * batch, and not interleaved with other microtasks such as promises.
	 * Promises are avoided as an implementation choice for the time being
	 * due to Safari bugs that cause Promises to lack microtask guarantees.
	 *
	 * @namespace
	 * @summary Async interface for enqueuing callbacks that run at microtask
	 *   timing.
	 */
	const microTask = {

	  /**
	   * Enqueues a function called at microtask timing.
	   *
	   * @memberof microTask
	   * @param {!Function=} callback Callback to run
	   * @return {number} Handle used for canceling task
	   */
	  run(callback) {
	    microtaskNode.textContent = microtaskNodeContent++;
	    microtaskCallbacks.push(callback);
	    return microtaskCurrHandle++;
	  },

	  /**
	   * Cancels a previously enqueued `microTask` callback.
	   *
	   * @memberof microTask
	   * @param {number} handle Handle returned from `run` of callback to cancel
	   * @return {void}
	   */
	  cancel(handle) {
	    const idx = handle - microtaskLastHandle;
	    if (idx >= 0) {
	      if (!microtaskCallbacks[idx]) {
	        throw new Error('invalid async handle: ' + handle);
	      }
	      microtaskCallbacks[idx] = null;
	    }
	  }

	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @const {!AsyncInterface} */
	const microtask = microTask;

	/**
	 * Element class mixin that provides basic meta-programming for creating one
	 * or more property accessors (getter/setter pair) that enqueue an async
	 * (batched) `_propertiesChanged` callback.
	 *
	 * For basic usage of this mixin, call `MyClass.createProperties(props)`
	 * once at class definition time to create property accessors for properties
	 * named in props, implement `_propertiesChanged` to react as desired to
	 * property changes, and implement `static get observedAttributes()` and
	 * include lowercase versions of any property names that should be set from
	 * attributes. Last, call `this._enableProperties()` in the element's
	 * `connectedCallback` to enable the accessors.
	 *
	 * @mixinFunction
	 * @polymer
	 * @summary Element class mixin for reacting to property changes from
	 *   generated property accessors.
	 */
	const PropertiesChanged = dedupingMixin(
	    /**
	     * @template T
	     * @param {function(new:T)} superClass Class to apply mixin to.
	     * @return {function(new:T)} superClass with mixin applied.
	     */
	    (superClass) => {

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_PropertiesChanged}
	   * @unrestricted
	   */
	  class PropertiesChanged extends superClass {

	    /**
	     * Creates property accessors for the given property names.
	     * @param {!Object} props Object whose keys are names of accessors.
	     * @return {void}
	     * @protected
	     */
	    static createProperties(props) {
	      const proto = this.prototype;
	      for (let prop in props) {
	        // don't stomp an existing accessor
	        if (!(prop in proto)) {
	          proto._createPropertyAccessor(prop);
	        }
	      }
	    }

	    /**
	     * Returns an attribute name that corresponds to the given property.
	     * The attribute name is the lowercased property name. Override to
	     * customize this mapping.
	     * @param {string} property Property to convert
	     * @return {string} Attribute name corresponding to the given property.
	     *
	     * @protected
	     */
	    static attributeNameForProperty(property) {
	      return property.toLowerCase();
	    }

	    /**
	     * Override point to provide a type to which to deserialize a value to
	     * a given property.
	     * @param {string} name Name of property
	     *
	     * @protected
	     */
	    static typeForProperty(name) { } //eslint-disable-line no-unused-vars

	    /**
	     * Creates a setter/getter pair for the named property with its own
	     * local storage.  The getter returns the value in the local storage,
	     * and the setter calls `_setProperty`, which updates the local storage
	     * for the property and enqueues a `_propertiesChanged` callback.
	     *
	     * This method may be called on a prototype or an instance.  Calling
	     * this method may overwrite a property value that already exists on
	     * the prototype/instance by creating the accessor.
	     *
	     * @param {string} property Name of the property
	     * @param {boolean=} readOnly When true, no setter is created; the
	     *   protected `_setProperty` function must be used to set the property
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _createPropertyAccessor(property, readOnly) {
	      this._addPropertyToAttributeMap(property);
	      if (!this.hasOwnProperty('__dataHasAccessor')) {
	        this.__dataHasAccessor = Object.assign({}, this.__dataHasAccessor);
	      }
	      if (!this.__dataHasAccessor[property]) {
	        this.__dataHasAccessor[property] = true;
	        this._definePropertyAccessor(property, readOnly);
	      }
	    }

	    /**
	     * Adds the given `property` to a map matching attribute names
	     * to property names, using `attributeNameForProperty`. This map is
	     * used when deserializing attribute values to properties.
	     *
	     * @param {string} property Name of the property
	     * @override
	     */
	    _addPropertyToAttributeMap(property) {
	      if (!this.hasOwnProperty('__dataAttributes')) {
	        this.__dataAttributes = Object.assign({}, this.__dataAttributes);
	      }
	      if (!this.__dataAttributes[property]) {
	        const attr = this.constructor.attributeNameForProperty(property);
	        this.__dataAttributes[attr] = property;
	      }
	    }

	    /**
	     * Defines a property accessor for the given property.
	     * @param {string} property Name of the property
	     * @param {boolean=} readOnly When true, no setter is created
	     * @return {void}
	     * @override
	     */
	     _definePropertyAccessor(property, readOnly) {
	      Object.defineProperty(this, property, {
	        /* eslint-disable valid-jsdoc */
	        /** @this {PropertiesChanged} */
	        get() {
	          return this._getProperty(property);
	        },
	        /** @this {PropertiesChanged} */
	        set: readOnly ? function () {} : function (value) {
	          this._setProperty(property, value);
	        }
	        /* eslint-enable */
	      });
	    }

	    constructor() {
	      super();
	      this.__dataEnabled = false;
	      this.__dataReady = false;
	      this.__dataInvalid = false;
	      this.__data = {};
	      this.__dataPending = null;
	      this.__dataOld = null;
	      this.__dataInstanceProps = null;
	      this.__serializing = false;
	      this._initializeProperties();
	    }

	    /**
	     * Lifecycle callback called when properties are enabled via
	     * `_enableProperties`.
	     *
	     * Users may override this function to implement behavior that is
	     * dependent on the element having its property data initialized, e.g.
	     * from defaults (initialized from `constructor`, `_initializeProperties`),
	     * `attributeChangedCallback`, or values propagated from host e.g. via
	     * bindings.  `super.ready()` must be called to ensure the data system
	     * becomes enabled.
	     *
	     * @return {void}
	     * @public
	     * @override
	     */
	    ready() {
	      this.__dataReady = true;
	      this._flushProperties();
	    }

	    /**
	     * Initializes the local storage for property accessors.
	     *
	     * Provided as an override point for performing any setup work prior
	     * to initializing the property accessor system.
	     *
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _initializeProperties() {
	      // Capture instance properties; these will be set into accessors
	      // during first flush. Don't set them here, since we want
	      // these to overwrite defaults/constructor assignments
	      for (let p in this.__dataHasAccessor) {
	        if (this.hasOwnProperty(p)) {
	          this.__dataInstanceProps = this.__dataInstanceProps || {};
	          this.__dataInstanceProps[p] = this[p];
	          delete this[p];
	        }
	      }
	    }

	    /**
	     * Called at ready time with bag of instance properties that overwrote
	     * accessors when the element upgraded.
	     *
	     * The default implementation sets these properties back into the
	     * setter at ready time.  This method is provided as an override
	     * point for customizing or providing more efficient initialization.
	     *
	     * @param {Object} props Bag of property values that were overwritten
	     *   when creating property accessors.
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _initializeInstanceProperties(props) {
	      Object.assign(this, props);
	    }

	    /**
	     * Updates the local storage for a property (via `_setPendingProperty`)
	     * and enqueues a `_proeprtiesChanged` callback.
	     *
	     * @param {string} property Name of the property
	     * @param {*} value Value to set
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _setProperty(property, value) {
	      if (this._setPendingProperty(property, value)) {
	        this._invalidateProperties();
	      }
	    }

	    /**
	     * Returns the value for the given property.
	     * @param {string} property Name of property
	     * @return {*} Value for the given property
	     * @protected
	     * @override
	     */
	    _getProperty(property) {
	      return this.__data[property];
	    }

	    /* eslint-disable no-unused-vars */
	    /**
	     * Updates the local storage for a property, records the previous value,
	     * and adds it to the set of "pending changes" that will be passed to the
	     * `_propertiesChanged` callback.  This method does not enqueue the
	     * `_propertiesChanged` callback.
	     *
	     * @param {string} property Name of the property
	     * @param {*} value Value to set
	     * @param {boolean=} ext Not used here; affordance for closure
	     * @return {boolean} Returns true if the property changed
	     * @protected
	     * @override
	     */
	    _setPendingProperty(property, value, ext) {
	      let old = this.__data[property];
	      let changed = this._shouldPropertyChange(property, value, old);
	      if (changed) {
	        if (!this.__dataPending) {
	          this.__dataPending = {};
	          this.__dataOld = {};
	        }
	        // Ensure old is captured from the last turn
	        if (this.__dataOld && !(property in this.__dataOld)) {
	          this.__dataOld[property] = old;
	        }
	        this.__data[property] = value;
	        this.__dataPending[property] = value;
	      }
	      return changed;
	    }
	    /* eslint-enable */

	    /**
	     * Marks the properties as invalid, and enqueues an async
	     * `_propertiesChanged` callback.
	     *
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _invalidateProperties() {
	      if (!this.__dataInvalid && this.__dataReady) {
	        this.__dataInvalid = true;
	        microtask.run(() => {
	          if (this.__dataInvalid) {
	            this.__dataInvalid = false;
	            this._flushProperties();
	          }
	        });
	      }
	    }

	    /**
	     * Call to enable property accessor processing. Before this method is
	     * called accessor values will be set but side effects are
	     * queued. When called, any pending side effects occur immediately.
	     * For elements, generally `connectedCallback` is a normal spot to do so.
	     * It is safe to call this method multiple times as it only turns on
	     * property accessors once.
	     *
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _enableProperties() {
	      if (!this.__dataEnabled) {
	        this.__dataEnabled = true;
	        if (this.__dataInstanceProps) {
	          this._initializeInstanceProperties(this.__dataInstanceProps);
	          this.__dataInstanceProps = null;
	        }
	        this.ready();
	      }
	    }

	    /**
	     * Calls the `_propertiesChanged` callback with the current set of
	     * pending changes (and old values recorded when pending changes were
	     * set), and resets the pending set of changes. Generally, this method
	     * should not be called in user code.
	     *
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _flushProperties() {
	      const props = this.__data;
	      const changedProps = this.__dataPending;
	      const old = this.__dataOld;
	      if (this._shouldPropertiesChange(props, changedProps, old)) {
	        this.__dataPending = null;
	        this.__dataOld = null;
	        this._propertiesChanged(props, changedProps, old);
	      }
	    }

	    /**
	     * Called in `_flushProperties` to determine if `_propertiesChanged`
	     * should be called. The default implementation returns true if
	     * properties are pending. Override to customize when
	     * `_propertiesChanged` is called.
	     * @param {!Object} currentProps Bag of all current accessor values
	     * @param {?Object} changedProps Bag of properties changed since the last
	     *   call to `_propertiesChanged`
	     * @param {?Object} oldProps Bag of previous values for each property
	     *   in `changedProps`
	     * @return {boolean} true if changedProps is truthy
	     * @override
	     */
	    _shouldPropertiesChange(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
	      return Boolean(changedProps);
	    }

	    /**
	     * Callback called when any properties with accessors created via
	     * `_createPropertyAccessor` have been set.
	     *
	     * @param {!Object} currentProps Bag of all current accessor values
	     * @param {?Object} changedProps Bag of properties changed since the last
	     *   call to `_propertiesChanged`
	     * @param {?Object} oldProps Bag of previous values for each property
	     *   in `changedProps`
	     * @return {void}
	     * @protected
	     * @override
	     */
	    _propertiesChanged(currentProps, changedProps, oldProps) { // eslint-disable-line no-unused-vars
	    }

	    /**
	     * Method called to determine whether a property value should be
	     * considered as a change and cause the `_propertiesChanged` callback
	     * to be enqueued.
	     *
	     * The default implementation returns `true` if a strict equality
	     * check fails. The method always returns false for `NaN`.
	     *
	     * Override this method to e.g. provide stricter checking for
	     * Objects/Arrays when using immutable patterns.
	     *
	     * @param {string} property Property name
	     * @param {*} value New property value
	     * @param {*} old Previous property value
	     * @return {boolean} Whether the property should be considered a change
	     *   and enqueue a `_proeprtiesChanged` callback
	     * @protected
	     * @override
	     */
	    _shouldPropertyChange(property, value, old) {
	      return (
	        // Strict equality check
	        (old !== value &&
	          // This ensures (old==NaN, value==NaN) always returns false
	          (old === old || value === value))
	      );
	    }

	    /**
	     * Implements native Custom Elements `attributeChangedCallback` to
	     * set an attribute value to a property via `_attributeToProperty`.
	     *
	     * @param {string} name Name of attribute that changed
	     * @param {?string} old Old attribute value
	     * @param {?string} value New attribute value
	     * @param {?string} namespace Attribute namespace.
	     * @return {void}
	     * @suppress {missingProperties} Super may or may not implement the callback
	     * @override
	     */
	    attributeChangedCallback(name, old, value, namespace) {
	      if (old !== value) {
	        this._attributeToProperty(name, value);
	      }
	      if (super.attributeChangedCallback) {
	        super.attributeChangedCallback(name, old, value, namespace);
	      }
	    }

	    /**
	     * Deserializes an attribute to its associated property.
	     *
	     * This method calls the `_deserializeValue` method to convert the string to
	     * a typed value.
	     *
	     * @param {string} attribute Name of attribute to deserialize.
	     * @param {?string} value of the attribute.
	     * @param {*=} type type to deserialize to, defaults to the value
	     * returned from `typeForProperty`
	     * @return {void}
	     * @override
	     */
	    _attributeToProperty(attribute, value, type) {
	      if (!this.__serializing) {
	        const map = this.__dataAttributes;
	        const property = map && map[attribute] || attribute;
	        this[property] = this._deserializeValue(value, type ||
	          this.constructor.typeForProperty(property));
	      }
	    }

	    /**
	     * Serializes a property to its associated attribute.
	     *
	     * @suppress {invalidCasts} Closure can't figure out `this` is an element.
	     *
	     * @param {string} property Property name to reflect.
	     * @param {string=} attribute Attribute name to reflect to.
	     * @param {*=} value Property value to refect.
	     * @return {void}
	     * @override
	     */
	    _propertyToAttribute(property, attribute, value) {
	      this.__serializing = true;
	      value = (arguments.length < 3) ? this[property] : value;
	      this._valueToNodeAttribute(/** @type {!HTMLElement} */(this), value,
	        attribute || this.constructor.attributeNameForProperty(property));
	      this.__serializing = false;
	    }

	    /**
	     * Sets a typed value to an HTML attribute on a node.
	     *
	     * This method calls the `_serializeValue` method to convert the typed
	     * value to a string.  If the `_serializeValue` method returns `undefined`,
	     * the attribute will be removed (this is the default for boolean
	     * type `false`).
	     *
	     * @param {Element} node Element to set attribute to.
	     * @param {*} value Value to serialize.
	     * @param {string} attribute Attribute name to serialize to.
	     * @return {void}
	     * @override
	     */
	    _valueToNodeAttribute(node, value, attribute) {
	      const str = this._serializeValue(value);
	      if (str === undefined) {
	        node.removeAttribute(attribute);
	      } else {
	        node.setAttribute(attribute, str);
	      }
	    }

	    /**
	     * Converts a typed JavaScript value to a string.
	     *
	     * This method is called when setting JS property values to
	     * HTML attributes.  Users may override this method to provide
	     * serialization for custom types.
	     *
	     * @param {*} value Property value to serialize.
	     * @return {string | undefined} String serialized from the provided
	     * property  value.
	     * @override
	     */
	    _serializeValue(value) {
	      switch (typeof value) {
	        case 'boolean':
	          return value ? '' : undefined;
	        default:
	          return value != null ? value.toString() : undefined;
	      }
	    }

	    /**
	     * Converts a string to a typed JavaScript value.
	     *
	     * This method is called when reading HTML attribute values to
	     * JS properties.  Users may override this method to provide
	     * deserialization for custom `type`s. Types for `Boolean`, `String`,
	     * and `Number` convert attributes to the expected types.
	     *
	     * @param {?string} value Value to deserialize.
	     * @param {*=} type Type to deserialize the string to.
	     * @return {*} Typed value deserialized from the provided string.
	     * @override
	     */
	    _deserializeValue(value, type) {
	      switch (type) {
	        case Boolean:
	          return (value !== null);
	        case Number:
	          return Number(value);
	        default:
	          return value;
	      }
	    }

	  }

	  return PropertiesChanged;
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let caseMap$1 = caseMap$0;

	// Save map of native properties; this forms a blacklist or properties
	// that won't have their values "saved" by `saveAccessorValue`, since
	// reading from an HTMLElement accessor from the context of a prototype throws
	const nativeProperties = {};
	let proto = HTMLElement.prototype;
	while (proto) {
	  let props = Object.getOwnPropertyNames(proto);
	  for (let i=0; i<props.length; i++) {
	    nativeProperties[props[i]] = true;
	  }
	  proto = Object.getPrototypeOf(proto);
	}

	/**
	 * Used to save the value of a property that will be overridden with
	 * an accessor. If the `model` is a prototype, the values will be saved
	 * in `__dataProto`, and it's up to the user (or downstream mixin) to
	 * decide how/when to set these values back into the accessors.
	 * If `model` is already an instance (it has a `__data` property), then
	 * the value will be set as a pending property, meaning the user should
	 * call `_invalidateProperties` or `_flushProperties` to take effect
	 *
	 * @param {Object} model Prototype or instance
	 * @param {string} property Name of property
	 * @return {void}
	 * @private
	 */
	function saveAccessorValue(model, property) {
	  // Don't read/store value for any native properties since they could throw
	  if (!nativeProperties[property]) {
	    let value = model[property];
	    if (value !== undefined) {
	      if (model.__data) {
	        // Adding accessor to instance; update the property
	        // It is the user's responsibility to call _flushProperties
	        model._setPendingProperty(property, value);
	      } else {
	        // Adding accessor to proto; save proto's value for instance-time use
	        if (!model.__dataProto) {
	          model.__dataProto = {};
	        } else if (!model.hasOwnProperty(JSCompiler_renameProperty('__dataProto', model))) {
	          model.__dataProto = Object.create(model.__dataProto);
	        }
	        model.__dataProto[property] = value;
	      }
	    }
	  }
	}

	/**
	 * Element class mixin that provides basic meta-programming for creating one
	 * or more property accessors (getter/setter pair) that enqueue an async
	 * (batched) `_propertiesChanged` callback.
	 *
	 * For basic usage of this mixin:
	 *
	 * -   Declare attributes to observe via the standard `static get observedAttributes()`. Use
	 *     `dash-case` attribute names to represent `camelCase` property names.
	 * -   Implement the `_propertiesChanged` callback on the class.
	 * -   Call `MyClass.createPropertiesForAttributes()` **once** on the class to generate
	 *     property accessors for each observed attribute. This must be called before the first
	 *     instance is created, for example, by calling it before calling `customElements.define`.
	 *     It can also be called lazily from the element's `constructor`, as long as it's guarded so
	 *     that the call is only made once, when the first instance is created.
	 * -   Call `this._enableProperties()` in the element's `connectedCallback` to enable
	 *     the accessors.
	 *
	 * Any `observedAttributes` will automatically be
	 * deserialized via `attributeChangedCallback` and set to the associated
	 * property using `dash-case`-to-`camelCase` convention.
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin PropertiesChanged
	 * @summary Element class mixin for reacting to property changes from
	 *   generated property accessors.
	 */
	const PropertyAccessors = dedupingMixin(superClass => {

	  /**
	   * @constructor
	   * @extends {superClass}
	   * @implements {Polymer_PropertiesChanged}
	   * @unrestricted
	   * @private
	   */
	   const base = PropertiesChanged(superClass);

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_PropertyAccessors}
	   * @extends {base}
	   * @unrestricted
	   */
	  class PropertyAccessors extends base {

	    /**
	     * Generates property accessors for all attributes in the standard
	     * static `observedAttributes` array.
	     *
	     * Attribute names are mapped to property names using the `dash-case` to
	     * `camelCase` convention
	     *
	     * @return {void}
	     */
	    static createPropertiesForAttributes() {
	      let a$ = this.observedAttributes;
	      for (let i=0; i < a$.length; i++) {
	        this.prototype._createPropertyAccessor(caseMap$1.dashToCamelCase(a$[i]));
	      }
	    }

	    /**
	     * Returns an attribute name that corresponds to the given property.
	     * By default, converts camel to dash case, e.g. `fooBar` to `foo-bar`.
	     * @param {string} property Property to convert
	     * @return {string} Attribute name corresponding to the given property.
	     *
	     * @protected
	     */
	    static attributeNameForProperty(property) {
	      return caseMap$1.camelToDashCase(property);
	    }

	    /**
	     * Overrides PropertiesChanged implementation to initialize values for
	     * accessors created for values that already existed on the element
	     * prototype.
	     *
	     * @return {void}
	     * @protected
	     */
	    _initializeProperties() {
	      if (this.__dataProto) {
	        this._initializeProtoProperties(this.__dataProto);
	        this.__dataProto = null;
	      }
	      super._initializeProperties();
	    }

	    /**
	     * Called at instance time with bag of properties that were overwritten
	     * by accessors on the prototype when accessors were created.
	     *
	     * The default implementation sets these properties back into the
	     * setter at instance time.  This method is provided as an override
	     * point for customizing or providing more efficient initialization.
	     *
	     * @param {Object} props Bag of property values that were overwritten
	     *   when creating property accessors.
	     * @return {void}
	     * @protected
	     */
	    _initializeProtoProperties(props) {
	      for (let p in props) {
	        this._setProperty(p, props[p]);
	      }
	    }

	    /**
	     * Ensures the element has the given attribute. If it does not,
	     * assigns the given value to the attribute.
	     *
	     * @suppress {invalidCasts} Closure can't figure out `this` is infact an element
	     *
	     * @param {string} attribute Name of attribute to ensure is set.
	     * @param {string} value of the attribute.
	     * @return {void}
	     */
	    _ensureAttribute(attribute, value) {
	      const el = /** @type {!HTMLElement} */(this);
	      if (!el.hasAttribute(attribute)) {
	        this._valueToNodeAttribute(el, value, attribute);
	      }
	    }

	    /**
	     * Overrides PropertiesChanged implemention to serialize objects as JSON.
	     *
	     * @param {*} value Property value to serialize.
	     * @return {string | undefined} String serialized from the provided property value.
	     */
	    _serializeValue(value) {
	      /* eslint-disable no-fallthrough */
	      switch (typeof value) {
	        case 'object':
	          if (value instanceof Date) {
	            return value.toString();
	          } else if (value) {
	            try {
	              return JSON.stringify(value);
	            } catch(x) {
	              return '';
	            }
	          }

	        default:
	          return super._serializeValue(value);
	      }
	    }

	    /**
	     * Converts a string to a typed JavaScript value.
	     *
	     * This method is called by Polymer when reading HTML attribute values to
	     * JS properties.  Users may override this method on Polymer element
	     * prototypes to provide deserialization for custom `type`s.  Note,
	     * the `type` argument is the value of the `type` field provided in the
	     * `properties` configuration object for a given property, and is
	     * by convention the constructor for the type to deserialize.
	     *
	     *
	     * @param {?string} value Attribute value to deserialize.
	     * @param {*=} type Type to deserialize the string to.
	     * @return {*} Typed value deserialized from the provided string.
	     */
	    _deserializeValue(value, type) {
	      /**
	       * @type {*}
	       */
	      let outValue;
	      switch (type) {
	        case Object:
	          try {
	            outValue = JSON.parse(/** @type {string} */(value));
	          } catch(x) {
	            // allow non-JSON literals like Strings and Numbers
	            outValue = value;
	          }
	          break;
	        case Array:
	          try {
	            outValue = JSON.parse(/** @type {string} */(value));
	          } catch(x) {
	            outValue = null;
	            console.warn(`Polymer::Attributes: couldn't decode Array as JSON: ${value}`);
	          }
	          break;
	        case Date:
	          outValue = isNaN(value) ? String(value) : Number(value);
	          outValue = new Date(outValue);
	          break;
	        default:
	          outValue = super._deserializeValue(value, type);
	          break;
	      }
	      return outValue;
	    }
	    /* eslint-enable no-fallthrough */

	    /**
	     * Overrides PropertiesChanged implementation to save existing prototype
	     * property value so that it can be reset.
	     * @param {string} property Name of the property
	     * @param {boolean=} readOnly When true, no setter is created
	     *
	     * When calling on a prototype, any overwritten values are saved in
	     * `__dataProto`, and it is up to the subclasser to decide how/when
	     * to set those properties back into the accessor.  When calling on an
	     * instance, the overwritten value is set via `_setPendingProperty`,
	     * and the user should call `_invalidateProperties` or `_flushProperties`
	     * for the values to take effect.
	     * @protected
	     * @return {void}
	     */
	    _definePropertyAccessor(property, readOnly) {
	      saveAccessorValue(this, property);
	      super._definePropertyAccessor(property, readOnly);
	    }

	    /**
	     * Returns true if this library created an accessor for the given property.
	     *
	     * @param {string} property Property name
	     * @return {boolean} True if an accessor was created
	     */
	    _hasAccessor(property) {
	      return this.__dataHasAccessor && this.__dataHasAccessor[property];
	    }

	    /**
	     * Returns true if the specified property has a pending change.
	     *
	     * @param {string} prop Property name
	     * @return {boolean} True if property has a pending change
	     * @protected
	     */
	    _isPropertyPending(prop) {
	      return Boolean(this.__dataPending && (prop in this.__dataPending));
	    }

	  }

	  return PropertyAccessors;

	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// 1.x backwards-compatible auto-wrapper for template type extensions
	// This is a clear layering violation and gives favored-nation status to
	// dom-if and dom-repeat templates.  This is a conceit we're choosing to keep
	// a.) to ease 1.x backwards-compatibility due to loss of `is`, and
	// b.) to maintain if/repeat capability in parser-constrained elements
	//     (e.g. table, select) in lieu of native CE type extensions without
	//     massive new invention in this space (e.g. directive system)
	const templateExtensions = {
	  'dom-if': true,
	  'dom-repeat': true
	};
	function wrapTemplateExtension(node) {
	  let is = node.getAttribute('is');
	  if (is && templateExtensions[is]) {
	    let t = node;
	    t.removeAttribute('is');
	    node = t.ownerDocument.createElement(is);
	    t.parentNode.replaceChild(node, t);
	    node.appendChild(t);
	    while(t.attributes.length) {
	      node.setAttribute(t.attributes[0].name, t.attributes[0].value);
	      t.removeAttribute(t.attributes[0].name);
	    }
	  }
	  return node;
	}

	function findTemplateNode(root, nodeInfo) {
	  // recursively ascend tree until we hit root
	  let parent = nodeInfo.parentInfo && findTemplateNode(root, nodeInfo.parentInfo);
	  // unwind the stack, returning the indexed node at each level
	  if (parent) {
	    // note: marginally faster than indexing via childNodes
	    // (http://jsperf.com/childnodes-lookup)
	    for (let n=parent.firstChild, i=0; n; n=n.nextSibling) {
	      if (nodeInfo.parentIndex === i++) {
	        return n;
	      }
	    }
	  } else {
	    return root;
	  }
	}

	// construct `$` map (from id annotations)
	function applyIdToMap(inst, map, node, nodeInfo) {
	  if (nodeInfo.id) {
	    map[nodeInfo.id] = node;
	  }
	}

	// install event listeners (from event annotations)
	function applyEventListener(inst, node, nodeInfo) {
	  if (nodeInfo.events && nodeInfo.events.length) {
	    for (let j=0, e$=nodeInfo.events, e; (j<e$.length) && (e=e$[j]); j++) {
	      inst._addMethodEventListenerToNode(node, e.name, e.value, inst);
	    }
	  }
	}

	// push configuration references at configure time
	function applyTemplateContent(inst, node, nodeInfo) {
	  if (nodeInfo.templateInfo) {
	    node._templateInfo = nodeInfo.templateInfo;
	  }
	}

	function createNodeEventHandler(context, eventName, methodName) {
	  // Instances can optionally have a _methodHost which allows redirecting where
	  // to find methods. Currently used by `templatize`.
	  context = context._methodHost || context;
	  let handler = function(e) {
	    if (context[methodName]) {
	      context[methodName](e, e.detail);
	    } else {
	      console.warn('listener method `' + methodName + '` not defined');
	    }
	  };
	  return handler;
	}

	/**
	 * Element mixin that provides basic template parsing and stamping, including
	 * the following template-related features for stamped templates:
	 *
	 * - Declarative event listeners (`on-eventname="listener"`)
	 * - Map of node id's to stamped node instances (`this.$.id`)
	 * - Nested template content caching/removal and re-installation (performance
	 *   optimization)
	 *
	 * @mixinFunction
	 * @polymer
	 * @summary Element class mixin that provides basic template parsing and stamping
	 */
	const TemplateStamp = dedupingMixin(
	    /**
	     * @template T
	     * @param {function(new:T)} superClass Class to apply mixin to.
	     * @return {function(new:T)} superClass with mixin applied.
	     */
	    (superClass) => {

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_TemplateStamp}
	   */
	  class TemplateStamp extends superClass {

	    /**
	     * Scans a template to produce template metadata.
	     *
	     * Template-specific metadata are stored in the object returned, and node-
	     * specific metadata are stored in objects in its flattened `nodeInfoList`
	     * array.  Only nodes in the template that were parsed as nodes of
	     * interest contain an object in `nodeInfoList`.  Each `nodeInfo` object
	     * contains an `index` (`childNodes` index in parent) and optionally
	     * `parent`, which points to node info of its parent (including its index).
	     *
	     * The template metadata object returned from this method has the following
	     * structure (many fields optional):
	     *
	     * ```js
	     *   {
	     *     // Flattened list of node metadata (for nodes that generated metadata)
	     *     nodeInfoList: [
	     *       {
	     *         // `id` attribute for any nodes with id's for generating `$` map
	     *         id: {string},
	     *         // `on-event="handler"` metadata
	     *         events: [
	     *           {
	     *             name: {string},   // event name
	     *             value: {string},  // handler method name
	     *           }, ...
	     *         ],
	     *         // Notes when the template contained a `<slot>` for shady DOM
	     *         // optimization purposes
	     *         hasInsertionPoint: {boolean},
	     *         // For nested `<template>`` nodes, nested template metadata
	     *         templateInfo: {object}, // nested template metadata
	     *         // Metadata to allow efficient retrieval of instanced node
	     *         // corresponding to this metadata
	     *         parentInfo: {number},   // reference to parent nodeInfo>
	     *         parentIndex: {number},  // index in parent's `childNodes` collection
	     *         infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`
	     *       },
	     *       ...
	     *     ],
	     *     // When true, the template had the `strip-whitespace` attribute
	     *     // or was nested in a template with that setting
	     *     stripWhitespace: {boolean},
	     *     // For nested templates, nested template content is moved into
	     *     // a document fragment stored here; this is an optimization to
	     *     // avoid the cost of nested template cloning
	     *     content: {DocumentFragment}
	     *   }
	     * ```
	     *
	     * This method kicks off a recursive treewalk as follows:
	     *
	     * ```
	     *    _parseTemplate <---------------------+
	     *      _parseTemplateContent              |
	     *        _parseTemplateNode  <------------|--+
	     *          _parseTemplateNestedTemplate --+  |
	     *          _parseTemplateChildNodes ---------+
	     *          _parseTemplateNodeAttributes
	     *            _parseTemplateNodeAttribute
	     *
	     * ```
	     *
	     * These methods may be overridden to add custom metadata about templates
	     * to either `templateInfo` or `nodeInfo`.
	     *
	     * Note that this method may be destructive to the template, in that
	     * e.g. event annotations may be removed after being noted in the
	     * template metadata.
	     *
	     * @param {!HTMLTemplateElement} template Template to parse
	     * @param {TemplateInfo=} outerTemplateInfo Template metadata from the outer
	     *   template, for parsing nested templates
	     * @return {!TemplateInfo} Parsed template metadata
	     */
	    static _parseTemplate(template, outerTemplateInfo) {
	      // since a template may be re-used, memo-ize metadata
	      if (!template._templateInfo) {
	        let templateInfo = template._templateInfo = {};
	        templateInfo.nodeInfoList = [];
	        templateInfo.stripWhiteSpace =
	          (outerTemplateInfo && outerTemplateInfo.stripWhiteSpace) ||
	          template.hasAttribute('strip-whitespace');
	        this._parseTemplateContent(template, templateInfo, {parent: null});
	      }
	      return template._templateInfo;
	    }

	    static _parseTemplateContent(template, templateInfo, nodeInfo) {
	      return this._parseTemplateNode(template.content, templateInfo, nodeInfo);
	    }

	    /**
	     * Parses template node and adds template and node metadata based on
	     * the current node, and its `childNodes` and `attributes`.
	     *
	     * This method may be overridden to add custom node or template specific
	     * metadata based on this node.
	     *
	     * @param {Node} node Node to parse
	     * @param {!TemplateInfo} templateInfo Template metadata for current template
	     * @param {!NodeInfo} nodeInfo Node metadata for current template.
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     */
	    static _parseTemplateNode(node, templateInfo, nodeInfo) {
	      let noted;
	      let element = /** @type {Element} */(node);
	      if (element.localName == 'template' && !element.hasAttribute('preserve-content')) {
	        noted = this._parseTemplateNestedTemplate(element, templateInfo, nodeInfo) || noted;
	      } else if (element.localName === 'slot') {
	        // For ShadyDom optimization, indicating there is an insertion point
	        templateInfo.hasInsertionPoint = true;
	      }
	      if (element.firstChild) {
	        noted = this._parseTemplateChildNodes(element, templateInfo, nodeInfo) || noted;
	      }
	      if (element.hasAttributes && element.hasAttributes()) {
	        noted = this._parseTemplateNodeAttributes(element, templateInfo, nodeInfo) || noted;
	      }
	      return noted;
	    }

	    /**
	     * Parses template child nodes for the given root node.
	     *
	     * This method also wraps whitelisted legacy template extensions
	     * (`is="dom-if"` and `is="dom-repeat"`) with their equivalent element
	     * wrappers, collapses text nodes, and strips whitespace from the template
	     * if the `templateInfo.stripWhitespace` setting was provided.
	     *
	     * @param {Node} root Root node whose `childNodes` will be parsed
	     * @param {!TemplateInfo} templateInfo Template metadata for current template
	     * @param {!NodeInfo} nodeInfo Node metadata for current template.
	     * @return {void}
	     */
	    static _parseTemplateChildNodes(root, templateInfo, nodeInfo) {
	      if (root.localName === 'script' || root.localName === 'style') {
	        return;
	      }
	      for (let node=root.firstChild, parentIndex=0, next; node; node=next) {
	        // Wrap templates
	        if (node.localName == 'template') {
	          node = wrapTemplateExtension(node);
	        }
	        // collapse adjacent textNodes: fixes an IE issue that can cause
	        // text nodes to be inexplicably split =(
	        // note that root.normalize() should work but does not so we do this
	        // manually.
	        next = node.nextSibling;
	        if (node.nodeType === Node.TEXT_NODE) {
	          let /** Node */ n = next;
	          while (n && (n.nodeType === Node.TEXT_NODE)) {
	            node.textContent += n.textContent;
	            next = n.nextSibling;
	            root.removeChild(n);
	            n = next;
	          }
	          // optionally strip whitespace
	          if (templateInfo.stripWhiteSpace && !node.textContent.trim()) {
	            root.removeChild(node);
	            continue;
	          }
	        }
	        let childInfo = { parentIndex, parentInfo: nodeInfo };
	        if (this._parseTemplateNode(node, templateInfo, childInfo)) {
	          childInfo.infoIndex = templateInfo.nodeInfoList.push(/** @type {!NodeInfo} */(childInfo)) - 1;
	        }
	        // Increment if not removed
	        if (node.parentNode) {
	          parentIndex++;
	        }
	      }
	    }

	    /**
	     * Parses template content for the given nested `<template>`.
	     *
	     * Nested template info is stored as `templateInfo` in the current node's
	     * `nodeInfo`. `template.content` is removed and stored in `templateInfo`.
	     * It will then be the responsibility of the host to set it back to the
	     * template and for users stamping nested templates to use the
	     * `_contentForTemplate` method to retrieve the content for this template
	     * (an optimization to avoid the cost of cloning nested template content).
	     *
	     * @param {HTMLTemplateElement} node Node to parse (a <template>)
	     * @param {TemplateInfo} outerTemplateInfo Template metadata for current template
	     *   that includes the template `node`
	     * @param {!NodeInfo} nodeInfo Node metadata for current template.
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     */
	    static _parseTemplateNestedTemplate(node, outerTemplateInfo, nodeInfo) {
	      let templateInfo = this._parseTemplate(node, outerTemplateInfo);
	      let content = templateInfo.content =
	        node.content.ownerDocument.createDocumentFragment();
	      content.appendChild(node.content);
	      nodeInfo.templateInfo = templateInfo;
	      return true;
	    }

	    /**
	     * Parses template node attributes and adds node metadata to `nodeInfo`
	     * for nodes of interest.
	     *
	     * @param {Element} node Node to parse
	     * @param {TemplateInfo} templateInfo Template metadata for current template
	     * @param {NodeInfo} nodeInfo Node metadata for current template.
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     */
	    static _parseTemplateNodeAttributes(node, templateInfo, nodeInfo) {
	      // Make copy of original attribute list, since the order may change
	      // as attributes are added and removed
	      let noted = false;
	      let attrs = Array.from(node.attributes);
	      for (let i=attrs.length-1, a; (a=attrs[i]); i--) {
	        noted = this._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, a.name, a.value) || noted;
	      }
	      return noted;
	    }

	    /**
	     * Parses a single template node attribute and adds node metadata to
	     * `nodeInfo` for attributes of interest.
	     *
	     * This implementation adds metadata for `on-event="handler"` attributes
	     * and `id` attributes.
	     *
	     * @param {Element} node Node to parse
	     * @param {!TemplateInfo} templateInfo Template metadata for current template
	     * @param {!NodeInfo} nodeInfo Node metadata for current template.
	     * @param {string} name Attribute name
	     * @param {string} value Attribute value
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     */
	    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
	      // events (on-*)
	      if (name.slice(0, 3) === 'on-') {
	        node.removeAttribute(name);
	        nodeInfo.events = nodeInfo.events || [];
	        nodeInfo.events.push({
	          name: name.slice(3),
	          value
	        });
	        return true;
	      }
	      // static id
	      else if (name === 'id') {
	        nodeInfo.id = value;
	        return true;
	      }
	      return false;
	    }

	    /**
	     * Returns the `content` document fragment for a given template.
	     *
	     * For nested templates, Polymer performs an optimization to cache nested
	     * template content to avoid the cost of cloning deeply nested templates.
	     * This method retrieves the cached content for a given template.
	     *
	     * @param {HTMLTemplateElement} template Template to retrieve `content` for
	     * @return {DocumentFragment} Content fragment
	     */
	    static _contentForTemplate(template) {
	      let templateInfo = /** @type {HTMLTemplateElementWithInfo} */ (template)._templateInfo;
	      return (templateInfo && templateInfo.content) || template.content;
	    }

	    /**
	     * Clones the provided template content and returns a document fragment
	     * containing the cloned dom.
	     *
	     * The template is parsed (once and memoized) using this library's
	     * template parsing features, and provides the following value-added
	     * features:
	     * * Adds declarative event listeners for `on-event="handler"` attributes
	     * * Generates an "id map" for all nodes with id's under `$` on returned
	     *   document fragment
	     * * Passes template info including `content` back to templates as
	     *   `_templateInfo` (a performance optimization to avoid deep template
	     *   cloning)
	     *
	     * Note that the memoized template parsing process is destructive to the
	     * template: attributes for bindings and declarative event listeners are
	     * removed after being noted in notes, and any nested `<template>.content`
	     * is removed and stored in notes as well.
	     *
	     * @param {!HTMLTemplateElement} template Template to stamp
	     * @return {!StampedTemplate} Cloned template content
	     * @override
	     */
	    _stampTemplate(template) {
	      // Polyfill support: bootstrap the template if it has not already been
	      if (template && !template.content &&
	          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {
	        HTMLTemplateElement.decorate(template);
	      }
	      let templateInfo = this.constructor._parseTemplate(template);
	      let nodeInfo = templateInfo.nodeInfoList;
	      let content = templateInfo.content || template.content;
	      let dom = /** @type {DocumentFragment} */ (document.importNode(content, true));
	      // NOTE: ShadyDom optimization indicating there is an insertion point
	      dom.__noInsertionPoint = !templateInfo.hasInsertionPoint;
	      let nodes = dom.nodeList = new Array(nodeInfo.length);
	      dom.$ = {};
	      for (let i=0, l=nodeInfo.length, info; (i<l) && (info=nodeInfo[i]); i++) {
	        let node = nodes[i] = findTemplateNode(dom, info);
	        applyIdToMap(this, dom.$, node, info);
	        applyTemplateContent(this, node, info);
	        applyEventListener(this, node, info);
	      }
	      dom = /** @type {!StampedTemplate} */(dom); // eslint-disable-line no-self-assign
	      return dom;
	    }

	    /**
	     * Adds an event listener by method name for the event provided.
	     *
	     * This method generates a handler function that looks up the method
	     * name at handling time.
	     *
	     * @param {!Node} node Node to add listener on
	     * @param {string} eventName Name of event
	     * @param {string} methodName Name of method
	     * @param {*=} context Context the method will be called on (defaults
	     *   to `node`)
	     * @return {Function} Generated handler function
	     * @override
	     */
	    _addMethodEventListenerToNode(node, eventName, methodName, context) {
	      context = context || node;
	      let handler = createNodeEventHandler(context, eventName, methodName);
	      this._addEventListenerToNode(node, eventName, handler);
	      return handler;
	    }

	    /**
	     * Override point for adding custom or simulated event handling.
	     *
	     * @param {!Node} node Node to add event listener to
	     * @param {string} eventName Name of event
	     * @param {function(!Event):void} handler Listener function to add
	     * @return {void}
	     * @override
	     */
	    _addEventListenerToNode(node, eventName, handler) {
	      node.addEventListener(eventName, handler);
	    }

	    /**
	     * Override point for adding custom or simulated event handling.
	     *
	     * @param {!Node} node Node to remove event listener from
	     * @param {string} eventName Name of event
	     * @param {function(!Event):void} handler Listener function to remove
	     * @return {void}
	     * @override
	     */
	    _removeEventListenerFromNode(node, eventName, handler) {
	      node.removeEventListener(eventName, handler);
	    }

	  }

	  return TemplateStamp;

	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @const {Object} */
	const CaseMap = caseMap$0;

	// Monotonically increasing unique ID used for de-duping effects triggered
	// from multiple properties in the same turn
	let dedupeId$1 = 0;

	/**
	 * Property effect types; effects are stored on the prototype using these keys
	 * @enum {string}
	 */
	const TYPES = {
	  COMPUTE: '__computeEffects',
	  REFLECT: '__reflectEffects',
	  NOTIFY: '__notifyEffects',
	  PROPAGATE: '__propagateEffects',
	  OBSERVE: '__observeEffects',
	  READ_ONLY: '__readOnly'
	};

	/** @const {RegExp} */
	const capitalAttributeRegex = /[A-Z]/;

	/**
	 * Ensures that the model has an own-property map of effects for the given type.
	 * The model may be a prototype or an instance.
	 *
	 * Property effects are stored as arrays of effects by property in a map,
	 * by named type on the model. e.g.
	 *
	 *   __computeEffects: {
	 *     foo: [ ... ],
	 *     bar: [ ... ]
	 *   }
	 *
	 * If the model does not yet have an effect map for the type, one is created
	 * and returned.  If it does, but it is not an own property (i.e. the
	 * prototype had effects), the the map is deeply cloned and the copy is
	 * set on the model and returned, ready for new effects to be added.
	 *
	 * @param {Object} model Prototype or instance
	 * @param {string} type Property effect type
	 * @return {Object} The own-property map of effects for the given type
	 * @private
	 */
	function ensureOwnEffectMap(model, type) {
	  let effects = model[type];
	  if (!effects) {
	    effects = model[type] = {};
	  } else if (!model.hasOwnProperty(type)) {
	    effects = model[type] = Object.create(model[type]);
	    for (let p in effects) {
	      let protoFx = effects[p];
	      let instFx = effects[p] = Array(protoFx.length);
	      for (let i=0; i<protoFx.length; i++) {
	        instFx[i] = protoFx[i];
	      }
	    }
	  }
	  return effects;
	}

	// -- effects ----------------------------------------------

	/**
	 * Runs all effects of a given type for the given set of property changes
	 * on an instance.
	 *
	 * @param {!PropertyEffectsType} inst The instance with effects to run
	 * @param {Object} effects Object map of property-to-Array of effects
	 * @param {Object} props Bag of current property changes
	 * @param {Object=} oldProps Bag of previous values for changed properties
	 * @param {boolean=} hasPaths True with `props` contains one or more paths
	 * @param {*=} extraArgs Additional metadata to pass to effect function
	 * @return {boolean} True if an effect ran for this property
	 * @private
	 */
	function runEffects(inst, effects, props, oldProps, hasPaths, extraArgs) {
	  if (effects) {
	    let ran = false;
	    let id = dedupeId$1++;
	    for (let prop in props) {
	      if (runEffectsForProperty(inst, effects, id, prop, props, oldProps, hasPaths, extraArgs)) {
	        ran = true;
	      }
	    }
	    return ran;
	  }
	  return false;
	}

	/**
	 * Runs a list of effects for a given property.
	 *
	 * @param {!PropertyEffectsType} inst The instance with effects to run
	 * @param {Object} effects Object map of property-to-Array of effects
	 * @param {number} dedupeId Counter used for de-duping effects
	 * @param {string} prop Name of changed property
	 * @param {*} props Changed properties
	 * @param {*} oldProps Old properties
	 * @param {boolean=} hasPaths True with `props` contains one or more paths
	 * @param {*=} extraArgs Additional metadata to pass to effect function
	 * @return {boolean} True if an effect ran for this property
	 * @private
	 */
	function runEffectsForProperty(inst, effects, dedupeId, prop, props, oldProps, hasPaths, extraArgs) {
	  let ran = false;
	  let rootProperty = hasPaths ? root(prop) : prop;
	  let fxs = effects[rootProperty];
	  if (fxs) {
	    for (let i=0, l=fxs.length, fx; (i<l) && (fx=fxs[i]); i++) {
	      if ((!fx.info || fx.info.lastRun !== dedupeId) &&
	          (!hasPaths || pathMatchesTrigger(prop, fx.trigger))) {
	        if (fx.info) {
	          fx.info.lastRun = dedupeId;
	        }
	        fx.fn(inst, prop, props, oldProps, fx.info, hasPaths, extraArgs);
	        ran = true;
	      }
	    }
	  }
	  return ran;
	}

	/**
	 * Determines whether a property/path that has changed matches the trigger
	 * criteria for an effect.  A trigger is a descriptor with the following
	 * structure, which matches the descriptors returned from `parseArg`.
	 * e.g. for `foo.bar.*`:
	 * ```
	 * trigger: {
	 *   name: 'a.b',
	 *   structured: true,
	 *   wildcard: true
	 * }
	 * ```
	 * If no trigger is given, the path is deemed to match.
	 *
	 * @param {string} path Path or property that changed
	 * @param {DataTrigger} trigger Descriptor
	 * @return {boolean} Whether the path matched the trigger
	 */
	function pathMatchesTrigger(path, trigger) {
	  if (trigger) {
	    let triggerPath = trigger.name;
	    return (triggerPath == path) ||
	      (trigger.structured && isAncestor(triggerPath, path)) ||
	      (trigger.wildcard && isDescendant(triggerPath, path));
	  } else {
	    return true;
	  }
	}

	/**
	 * Implements the "observer" effect.
	 *
	 * Calls the method with `info.methodName` on the instance, passing the
	 * new and old values.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} property Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @return {void}
	 * @private
	 */
	function runObserverEffect(inst, property, props, oldProps, info) {
	  let fn = typeof info.method === "string" ? inst[info.method] : info.method;
	  let changedProp = info.property;
	  if (fn) {
	    fn.call(inst, inst.__data[changedProp], oldProps[changedProp]);
	  } else if (!info.dynamicFn) {
	    console.warn('observer method `' + info.method + '` not defined');
	  }
	}

	/**
	 * Runs "notify" effects for a set of changed properties.
	 *
	 * This method differs from the generic `runEffects` method in that it
	 * will dispatch path notification events in the case that the property
	 * changed was a path and the root property for that path didn't have a
	 * "notify" effect.  This is to maintain 1.0 behavior that did not require
	 * `notify: true` to ensure object sub-property notifications were
	 * sent.
	 *
	 * @param {!PropertyEffectsType} inst The instance with effects to run
	 * @param {Object} notifyProps Bag of properties to notify
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {boolean} hasPaths True with `props` contains one or more paths
	 * @return {void}
	 * @private
	 */
	function runNotifyEffects(inst, notifyProps, props, oldProps, hasPaths) {
	  // Notify
	  let fxs = inst[TYPES.NOTIFY];
	  let notified;
	  let id = dedupeId$1++;
	  // Try normal notify effects; if none, fall back to try path notification
	  for (let prop in notifyProps) {
	    if (notifyProps[prop]) {
	      if (fxs && runEffectsForProperty(inst, fxs, id, prop, props, oldProps, hasPaths)) {
	        notified = true;
	      } else if (hasPaths && notifyPath(inst, prop, props)) {
	        notified = true;
	      }
	    }
	  }
	  // Flush host if we actually notified and host was batching
	  // And the host has already initialized clients; this prevents
	  // an issue with a host observing data changes before clients are ready.
	  let host;
	  if (notified && (host = inst.__dataHost) && host._invalidateProperties) {
	    host._invalidateProperties();
	  }
	}

	/**
	 * Dispatches {property}-changed events with path information in the detail
	 * object to indicate a sub-path of the property was changed.
	 *
	 * @param {!PropertyEffectsType} inst The element from which to fire the event
	 * @param {string} path The path that was changed
	 * @param {Object} props Bag of current property changes
	 * @return {boolean} Returns true if the path was notified
	 * @private
	 */
	function notifyPath(inst, path, props) {
	  let rootProperty = root(path);
	  if (rootProperty !== path) {
	    let eventName = camelToDashCase(rootProperty) + '-changed';
	    dispatchNotifyEvent(inst, eventName, props[path], path);
	    return true;
	  }
	  return false;
	}

	/**
	 * Dispatches {property}-changed events to indicate a property (or path)
	 * changed.
	 *
	 * @param {!PropertyEffectsType} inst The element from which to fire the event
	 * @param {string} eventName The name of the event to send ('{property}-changed')
	 * @param {*} value The value of the changed property
	 * @param {string | null | undefined} path If a sub-path of this property changed, the path
	 *   that changed (optional).
	 * @return {void}
	 * @private
	 * @suppress {invalidCasts}
	 */
	function dispatchNotifyEvent(inst, eventName, value, path) {
	  let detail = {
	    value: value,
	    queueProperty: true
	  };
	  if (path) {
	    detail.path = path;
	  }
	  /** @type {!HTMLElement} */(inst).dispatchEvent(new CustomEvent(eventName, { detail }));
	}

	/**
	 * Implements the "notify" effect.
	 *
	 * Dispatches a non-bubbling event named `info.eventName` on the instance
	 * with a detail object containing the new `value`.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} property Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @param {boolean} hasPaths True with `props` contains one or more paths
	 * @return {void}
	 * @private
	 */
	function runNotifyEffect(inst, property, props, oldProps, info, hasPaths) {
	  let rootProperty = hasPaths ? root(property) : property;
	  let path = rootProperty != property ? property : null;
	  let value = path ? get(inst, path) : inst.__data[property];
	  if (path && value === undefined) {
	    value = props[property];  // specifically for .splices
	  }
	  dispatchNotifyEvent(inst, info.eventName, value, path);
	}

	/**
	 * Handler function for 2-way notification events. Receives context
	 * information captured in the `addNotifyListener` closure from the
	 * `__notifyListeners` metadata.
	 *
	 * Sets the value of the notified property to the host property or path.  If
	 * the event contained path information, translate that path to the host
	 * scope's name for that path first.
	 *
	 * @param {CustomEvent} event Notification event (e.g. '<property>-changed')
	 * @param {!PropertyEffectsType} inst Host element instance handling the notification event
	 * @param {string} fromProp Child element property that was bound
	 * @param {string} toPath Host property/path that was bound
	 * @param {boolean} negate Whether the binding was negated
	 * @return {void}
	 * @private
	 */
	function handleNotification(event, inst, fromProp, toPath, negate) {
	  let value;
	  let detail = /** @type {Object} */(event.detail);
	  let fromPath = detail && detail.path;
	  if (fromPath) {
	    toPath = translate(fromProp, toPath, fromPath);
	    value = detail && detail.value;
	  } else {
	    value = event.target[fromProp];
	  }
	  value = negate ? !value : value;
	  if (!inst[TYPES.READ_ONLY] || !inst[TYPES.READ_ONLY][toPath]) {
	    if (inst._setPendingPropertyOrPath(toPath, value, true, Boolean(fromPath))
	      && (!detail || !detail.queueProperty)) {
	      inst._invalidateProperties();
	    }
	  }
	}

	/**
	 * Implements the "reflect" effect.
	 *
	 * Sets the attribute named `info.attrName` to the given property value.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} property Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @return {void}
	 * @private
	 */
	function runReflectEffect(inst, property, props, oldProps, info) {
	  let value = inst.__data[property];
	  if (sanitizeDOMValue) {
	    value = sanitizeDOMValue(value, info.attrName, 'attribute', /** @type {Node} */(inst));
	  }
	  inst._propertyToAttribute(property, info.attrName, value);
	}

	/**
	 * Runs "computed" effects for a set of changed properties.
	 *
	 * This method differs from the generic `runEffects` method in that it
	 * continues to run computed effects based on the output of each pass until
	 * there are no more newly computed properties.  This ensures that all
	 * properties that will be computed by the initial set of changes are
	 * computed before other effects (binding propagation, observers, and notify)
	 * run.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {!Object} changedProps Bag of changed properties
	 * @param {!Object} oldProps Bag of previous values for changed properties
	 * @param {boolean} hasPaths True with `props` contains one or more paths
	 * @return {void}
	 * @private
	 */
	function runComputedEffects(inst, changedProps, oldProps, hasPaths) {
	  let computeEffects = inst[TYPES.COMPUTE];
	  if (computeEffects) {
	    let inputProps = changedProps;
	    while (runEffects(inst, computeEffects, inputProps, oldProps, hasPaths)) {
	      Object.assign(oldProps, inst.__dataOld);
	      Object.assign(changedProps, inst.__dataPending);
	      inputProps = inst.__dataPending;
	      inst.__dataPending = null;
	    }
	  }
	}

	/**
	 * Implements the "computed property" effect by running the method with the
	 * values of the arguments specified in the `info` object and setting the
	 * return value to the computed property specified.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} property Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @return {void}
	 * @private
	 */
	function runComputedEffect(inst, property, props, oldProps, info) {
	  let result = runMethodEffect(inst, property, props, oldProps, info);
	  let computedProp = info.methodInfo;
	  if (inst.__dataHasAccessor && inst.__dataHasAccessor[computedProp]) {
	    inst._setPendingProperty(computedProp, result, true);
	  } else {
	    inst[computedProp] = result;
	  }
	}

	/**
	 * Computes path changes based on path links set up using the `linkPaths`
	 * API.
	 *
	 * @param {!PropertyEffectsType} inst The instance whose props are changing
	 * @param {string | !Array<(string|number)>} path Path that has changed
	 * @param {*} value Value of changed path
	 * @return {void}
	 * @private
	 */
	function computeLinkedPaths(inst, path, value) {
	  let links = inst.__dataLinkedPaths;
	  if (links) {
	    let link;
	    for (let a in links) {
	      let b = links[a];
	      if (isDescendant(a, path)) {
	        link = translate(a, b, path);
	        inst._setPendingPropertyOrPath(link, value, true, true);
	      } else if (isDescendant(b, path)) {
	        link = translate(b, a, path);
	        inst._setPendingPropertyOrPath(link, value, true, true);
	      }
	    }
	  }
	}

	// -- bindings ----------------------------------------------

	/**
	 * Adds binding metadata to the current `nodeInfo`, and binding effects
	 * for all part dependencies to `templateInfo`.
	 *
	 * @param {Function} constructor Class that `_parseTemplate` is currently
	 *   running on
	 * @param {TemplateInfo} templateInfo Template metadata for current template
	 * @param {NodeInfo} nodeInfo Node metadata for current template node
	 * @param {string} kind Binding kind, either 'property', 'attribute', or 'text'
	 * @param {string} target Target property name
	 * @param {!Array<!BindingPart>} parts Array of binding part metadata
	 * @param {string=} literal Literal text surrounding binding parts (specified
	 *   only for 'property' bindings, since these must be initialized as part
	 *   of boot-up)
	 * @return {void}
	 * @private
	 */
	function addBinding(constructor, templateInfo, nodeInfo, kind, target, parts, literal) {
	  // Create binding metadata and add to nodeInfo
	  nodeInfo.bindings = nodeInfo.bindings || [];
	  let /** Binding */ binding = { kind, target, parts, literal, isCompound: (parts.length !== 1) };
	  nodeInfo.bindings.push(binding);
	  // Add listener info to binding metadata
	  if (shouldAddListener(binding)) {
	    let {event, negate} = binding.parts[0];
	    binding.listenerEvent = event || (CaseMap.camelToDashCase(target) + '-changed');
	    binding.listenerNegate = negate;
	  }
	  // Add "propagate" property effects to templateInfo
	  let index = templateInfo.nodeInfoList.length;
	  for (let i=0; i<binding.parts.length; i++) {
	    let part = binding.parts[i];
	    part.compoundIndex = i;
	    addEffectForBindingPart(constructor, templateInfo, binding, part, index);
	  }
	}

	/**
	 * Adds property effects to the given `templateInfo` for the given binding
	 * part.
	 *
	 * @param {Function} constructor Class that `_parseTemplate` is currently
	 *   running on
	 * @param {TemplateInfo} templateInfo Template metadata for current template
	 * @param {!Binding} binding Binding metadata
	 * @param {!BindingPart} part Binding part metadata
	 * @param {number} index Index into `nodeInfoList` for this node
	 * @return {void}
	 */
	function addEffectForBindingPart(constructor, templateInfo, binding, part, index) {
	  if (!part.literal) {
	    if (binding.kind === 'attribute' && binding.target[0] === '-') {
	      console.warn('Cannot set attribute ' + binding.target +
	        ' because "-" is not a valid attribute starting character');
	    } else {
	      let dependencies = part.dependencies;
	      let info = { index, binding, part, evaluator: constructor };
	      for (let j=0; j<dependencies.length; j++) {
	        let trigger = dependencies[j];
	        if (typeof trigger == 'string') {
	          trigger = parseArg(trigger);
	          trigger.wildcard = true;
	        }
	        constructor._addTemplatePropertyEffect(templateInfo, trigger.rootProperty, {
	          fn: runBindingEffect,
	          info, trigger
	        });
	      }
	    }
	  }
	}

	/**
	 * Implements the "binding" (property/path binding) effect.
	 *
	 * Note that binding syntax is overridable via `_parseBindings` and
	 * `_evaluateBinding`.  This method will call `_evaluateBinding` for any
	 * non-literal parts returned from `_parseBindings`.  However,
	 * there is no support for _path_ bindings via custom binding parts,
	 * as this is specific to Polymer's path binding syntax.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} path Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @param {boolean} hasPaths True with `props` contains one or more paths
	 * @param {Array} nodeList List of nodes associated with `nodeInfoList` template
	 *   metadata
	 * @return {void}
	 * @private
	 */
	function runBindingEffect(inst, path, props, oldProps, info, hasPaths, nodeList) {
	  let node = nodeList[info.index];
	  let binding = info.binding;
	  let part = info.part;
	  // Subpath notification: transform path and set to client
	  // e.g.: foo="{{obj.sub}}", path: 'obj.sub.prop', set 'foo.prop'=obj.sub.prop
	  if (hasPaths && part.source && (path.length > part.source.length) &&
	      (binding.kind == 'property') && !binding.isCompound &&
	      node.__isPropertyEffectsClient &&
	      node.__dataHasAccessor && node.__dataHasAccessor[binding.target]) {
	    let value = props[path];
	    path = translate(part.source, binding.target, path);
	    if (node._setPendingPropertyOrPath(path, value, false, true)) {
	      inst._enqueueClient(node);
	    }
	  } else {
	    let value = info.evaluator._evaluateBinding(inst, part, path, props, oldProps, hasPaths);
	    // Propagate value to child
	    applyBindingValue(inst, node, binding, part, value);
	  }
	}

	/**
	 * Sets the value for an "binding" (binding) effect to a node,
	 * either as a property or attribute.
	 *
	 * @param {!PropertyEffectsType} inst The instance owning the binding effect
	 * @param {Node} node Target node for binding
	 * @param {!Binding} binding Binding metadata
	 * @param {!BindingPart} part Binding part metadata
	 * @param {*} value Value to set
	 * @return {void}
	 * @private
	 */
	function applyBindingValue(inst, node, binding, part, value) {
	  value = computeBindingValue(node, value, binding, part);
	  if (sanitizeDOMValue) {
	    value = sanitizeDOMValue(value, binding.target, binding.kind, node);
	  }
	  if (binding.kind == 'attribute') {
	    // Attribute binding
	    inst._valueToNodeAttribute(/** @type {Element} */(node), value, binding.target);
	  } else {
	    // Property binding
	    let prop = binding.target;
	    if (node.__isPropertyEffectsClient &&
	        node.__dataHasAccessor && node.__dataHasAccessor[prop]) {
	      if (!node[TYPES.READ_ONLY] || !node[TYPES.READ_ONLY][prop]) {
	        if (node._setPendingProperty(prop, value)) {
	          inst._enqueueClient(node);
	        }
	      }
	    } else  {
	      inst._setUnmanagedPropertyToNode(node, prop, value);
	    }
	  }
	}

	/**
	 * Transforms an "binding" effect value based on compound & negation
	 * effect metadata, as well as handling for special-case properties
	 *
	 * @param {Node} node Node the value will be set to
	 * @param {*} value Value to set
	 * @param {!Binding} binding Binding metadata
	 * @param {!BindingPart} part Binding part metadata
	 * @return {*} Transformed value to set
	 * @private
	 */
	function computeBindingValue(node, value, binding, part) {
	  if (binding.isCompound) {
	    let storage = node.__dataCompoundStorage[binding.target];
	    storage[part.compoundIndex] = value;
	    value = storage.join('');
	  }
	  if (binding.kind !== 'attribute') {
	    // Some browsers serialize `undefined` to `"undefined"`
	    if (binding.target === 'textContent' ||
	        (binding.target === 'value' &&
	          (node.localName === 'input' || node.localName === 'textarea'))) {
	      value = value == undefined ? '' : value;
	    }
	  }
	  return value;
	}

	/**
	 * Returns true if a binding's metadata meets all the requirements to allow
	 * 2-way binding, and therefore a `<property>-changed` event listener should be
	 * added:
	 * - used curly braces
	 * - is a property (not attribute) binding
	 * - is not a textContent binding
	 * - is not compound
	 *
	 * @param {!Binding} binding Binding metadata
	 * @return {boolean} True if 2-way listener should be added
	 * @private
	 */
	function shouldAddListener(binding) {
	  return Boolean(binding.target) &&
	         binding.kind != 'attribute' &&
	         binding.kind != 'text' &&
	         !binding.isCompound &&
	         binding.parts[0].mode === '{';
	}

	/**
	 * Setup compound binding storage structures, notify listeners, and dataHost
	 * references onto the bound nodeList.
	 *
	 * @param {!PropertyEffectsType} inst Instance that bas been previously bound
	 * @param {TemplateInfo} templateInfo Template metadata
	 * @return {void}
	 * @private
	 */
	function setupBindings(inst, templateInfo) {
	  // Setup compound storage, dataHost, and notify listeners
	  let {nodeList, nodeInfoList} = templateInfo;
	  if (nodeInfoList.length) {
	    for (let i=0; i < nodeInfoList.length; i++) {
	      let info = nodeInfoList[i];
	      let node = nodeList[i];
	      let bindings = info.bindings;
	      if (bindings) {
	        for (let i=0; i<bindings.length; i++) {
	          let binding = bindings[i];
	          setupCompoundStorage(node, binding);
	          addNotifyListener(node, inst, binding);
	        }
	      }
	      node.__dataHost = inst;
	    }
	  }
	}

	/**
	 * Initializes `__dataCompoundStorage` local storage on a bound node with
	 * initial literal data for compound bindings, and sets the joined
	 * literal parts to the bound property.
	 *
	 * When changes to compound parts occur, they are first set into the compound
	 * storage array for that property, and then the array is joined to result in
	 * the final value set to the property/attribute.
	 *
	 * @param {Node} node Bound node to initialize
	 * @param {Binding} binding Binding metadata
	 * @return {void}
	 * @private
	 */
	function setupCompoundStorage(node, binding) {
	  if (binding.isCompound) {
	    // Create compound storage map
	    let storage = node.__dataCompoundStorage ||
	      (node.__dataCompoundStorage = {});
	    let parts = binding.parts;
	    // Copy literals from parts into storage for this binding
	    let literals = new Array(parts.length);
	    for (let j=0; j<parts.length; j++) {
	      literals[j] = parts[j].literal;
	    }
	    let target = binding.target;
	    storage[target] = literals;
	    // Configure properties with their literal parts
	    if (binding.literal && binding.kind == 'property') {
	      node[target] = binding.literal;
	    }
	  }
	}

	/**
	 * Adds a 2-way binding notification event listener to the node specified
	 *
	 * @param {Object} node Child element to add listener to
	 * @param {!PropertyEffectsType} inst Host element instance to handle notification event
	 * @param {Binding} binding Binding metadata
	 * @return {void}
	 * @private
	 */
	function addNotifyListener(node, inst, binding) {
	  if (binding.listenerEvent) {
	    let part = binding.parts[0];
	    node.addEventListener(binding.listenerEvent, function(e) {
	      handleNotification(e, inst, binding.target, part.source, part.negate);
	    });
	  }
	}

	// -- for method-based effects (complexObserver & computed) --------------

	/**
	 * Adds property effects for each argument in the method signature (and
	 * optionally, for the method name if `dynamic` is true) that calls the
	 * provided effect function.
	 *
	 * @param {Element | Object} model Prototype or instance
	 * @param {!MethodSignature} sig Method signature metadata
	 * @param {string} type Type of property effect to add
	 * @param {Function} effectFn Function to run when arguments change
	 * @param {*=} methodInfo Effect-specific information to be included in
	 *   method effect metadata
	 * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
	 *   method names should be included as a dependency to the effect. Note,
	 *   defaults to true if the signature is static (sig.static is true).
	 * @return {void}
	 * @private
	 */
	function createMethodEffect(model, sig, type, effectFn, methodInfo, dynamicFn) {
	  dynamicFn = sig.static || (dynamicFn &&
	    (typeof dynamicFn !== 'object' || dynamicFn[sig.methodName]));
	  let info = {
	    methodName: sig.methodName,
	    args: sig.args,
	    methodInfo,
	    dynamicFn
	  };
	  for (let i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {
	    if (!arg.literal) {
	      model._addPropertyEffect(arg.rootProperty, type, {
	        fn: effectFn, info: info, trigger: arg
	      });
	    }
	  }
	  if (dynamicFn) {
	    model._addPropertyEffect(sig.methodName, type, {
	      fn: effectFn, info: info
	    });
	  }
	}

	/**
	 * Calls a method with arguments marshaled from properties on the instance
	 * based on the method signature contained in the effect metadata.
	 *
	 * Multi-property observers, computed properties, and inline computing
	 * functions call this function to invoke the method, then use the return
	 * value accordingly.
	 *
	 * @param {!PropertyEffectsType} inst The instance the effect will be run on
	 * @param {string} property Name of property
	 * @param {Object} props Bag of current property changes
	 * @param {Object} oldProps Bag of previous values for changed properties
	 * @param {?} info Effect metadata
	 * @return {*} Returns the return value from the method invocation
	 * @private
	 */
	function runMethodEffect(inst, property, props, oldProps, info) {
	  // Instances can optionally have a _methodHost which allows redirecting where
	  // to find methods. Currently used by `templatize`.
	  let context = inst._methodHost || inst;
	  let fn = context[info.methodName];
	  if (fn) {
	    let args = marshalArgs(inst.__data, info.args, property, props);
	    return fn.apply(context, args);
	  } else if (!info.dynamicFn) {
	    console.warn('method `' + info.methodName + '` not defined');
	  }
	}

	const emptyArray = [];

	// Regular expressions used for binding
	const IDENT  = '(?:' + '[a-zA-Z_$][\\w.:$\\-*]*' + ')';
	const NUMBER = '(?:' + '[-+]?[0-9]*\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';
	const SQUOTE_STRING = '(?:' + '\'(?:[^\'\\\\]|\\\\.)*\'' + ')';
	const DQUOTE_STRING = '(?:' + '"(?:[^"\\\\]|\\\\.)*"' + ')';
	const STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';
	const ARGUMENT = '(?:(' + IDENT + '|' + NUMBER + '|' +  STRING + ')\\s*' + ')';
	const ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\s*' + ARGUMENT + ')*' + ')';
	const ARGUMENT_LIST = '(?:' + '\\(\\s*' +
	                              '(?:' + ARGUMENTS + '?' + ')' +
	                            '\\)\\s*' + ')';
	const BINDING = '(' + IDENT + '\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3
	const OPEN_BRACKET = '(\\[\\[|{{)' + '\\s*';
	const CLOSE_BRACKET = '(?:]]|}})';
	const NEGATE = '(?:(!)\\s*)?'; // Group 2
	const EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;
	const bindingRegex = new RegExp(EXPRESSION, "g");

	/**
	 * Create a string from binding parts of all the literal parts
	 *
	 * @param {!Array<BindingPart>} parts All parts to stringify
	 * @return {string} String made from the literal parts
	 */
	function literalFromParts(parts) {
	  let s = '';
	  for (let i=0; i<parts.length; i++) {
	    let literal = parts[i].literal;
	    s += literal || '';
	  }
	  return s;
	}

	/**
	 * Parses an expression string for a method signature, and returns a metadata
	 * describing the method in terms of `methodName`, `static` (whether all the
	 * arguments are literals), and an array of `args`
	 *
	 * @param {string} expression The expression to parse
	 * @return {?MethodSignature} The method metadata object if a method expression was
	 *   found, otherwise `undefined`
	 * @private
	 */
	function parseMethod(expression) {
	  // tries to match valid javascript property names
	  let m = expression.match(/([^\s]+?)\(([\s\S]*)\)/);
	  if (m) {
	    let methodName = m[1];
	    let sig = { methodName, static: true, args: emptyArray };
	    if (m[2].trim()) {
	      // replace escaped commas with comma entity, split on un-escaped commas
	      let args = m[2].replace(/\\,/g, '&comma;').split(',');
	      return parseArgs(args, sig);
	    } else {
	      return sig;
	    }
	  }
	  return null;
	}

	/**
	 * Parses an array of arguments and sets the `args` property of the supplied
	 * signature metadata object. Sets the `static` property to false if any
	 * argument is a non-literal.
	 *
	 * @param {!Array<string>} argList Array of argument names
	 * @param {!MethodSignature} sig Method signature metadata object
	 * @return {!MethodSignature} The updated signature metadata object
	 * @private
	 */
	function parseArgs(argList, sig) {
	  sig.args = argList.map(function(rawArg) {
	    let arg = parseArg(rawArg);
	    if (!arg.literal) {
	      sig.static = false;
	    }
	    return arg;
	  }, this);
	  return sig;
	}

	/**
	 * Parses an individual argument, and returns an argument metadata object
	 * with the following fields:
	 *
	 *   {
	 *     value: 'prop',        // property/path or literal value
	 *     literal: false,       // whether argument is a literal
	 *     structured: false,    // whether the property is a path
	 *     rootProperty: 'prop', // the root property of the path
	 *     wildcard: false       // whether the argument was a wildcard '.*' path
	 *   }
	 *
	 * @param {string} rawArg The string value of the argument
	 * @return {!MethodArg} Argument metadata object
	 * @private
	 */
	function parseArg(rawArg) {
	  // clean up whitespace
	  let arg = rawArg.trim()
	    // replace comma entity with comma
	    .replace(/&comma;/g, ',')
	    // repair extra escape sequences; note only commas strictly need
	    // escaping, but we allow any other char to be escaped since its
	    // likely users will do this
	    .replace(/\\(.)/g, '\$1')
	    ;
	  // basic argument descriptor
	  let a = {
	    name: arg,
	    value: '',
	    literal: false
	  };
	  // detect literal value (must be String or Number)
	  let fc = arg[0];
	  if (fc === '-') {
	    fc = arg[1];
	  }
	  if (fc >= '0' && fc <= '9') {
	    fc = '#';
	  }
	  switch(fc) {
	    case "'":
	    case '"':
	      a.value = arg.slice(1, -1);
	      a.literal = true;
	      break;
	    case '#':
	      a.value = Number(arg);
	      a.literal = true;
	      break;
	  }
	  // if not literal, look for structured path
	  if (!a.literal) {
	    a.rootProperty = root(arg);
	    // detect structured path (has dots)
	    a.structured = isPath(arg);
	    if (a.structured) {
	      a.wildcard = (arg.slice(-2) == '.*');
	      if (a.wildcard) {
	        a.name = arg.slice(0, -2);
	      }
	    }
	  }
	  return a;
	}

	/**
	 * Gather the argument values for a method specified in the provided array
	 * of argument metadata.
	 *
	 * The `path` and `value` arguments are used to fill in wildcard descriptor
	 * when the method is being called as a result of a path notification.
	 *
	 * @param {Object} data Instance data storage object to read properties from
	 * @param {!Array<!MethodArg>} args Array of argument metadata
	 * @param {string} path Property/path name that triggered the method effect
	 * @param {Object} props Bag of current property changes
	 * @return {Array<*>} Array of argument values
	 * @private
	 */
	function marshalArgs(data, args, path, props) {
	  let values = [];
	  for (let i=0, l=args.length; i<l; i++) {
	    let arg = args[i];
	    let name = arg.name;
	    let v;
	    if (arg.literal) {
	      v = arg.value;
	    } else {
	      if (arg.structured) {
	        v = get(data, name);
	        // when data is not stored e.g. `splices`
	        if (v === undefined) {
	          v = props[name];
	        }
	      } else {
	        v = data[name];
	      }
	    }
	    if (arg.wildcard) {
	      // Only send the actual path changed info if the change that
	      // caused the observer to run matched the wildcard
	      let baseChanged = (name.indexOf(path + '.') === 0);
	      let matches$$1 = (path.indexOf(name) === 0 && !baseChanged);
	      values[i] = {
	        path: matches$$1 ? path : name,
	        value: matches$$1 ? props[path] : v,
	        base: v
	      };
	    } else {
	      values[i] = v;
	    }
	  }
	  return values;
	}

	// data api

	/**
	 * Sends array splice notifications (`.splices` and `.length`)
	 *
	 * Note: this implementation only accepts normalized paths
	 *
	 * @param {!PropertyEffectsType} inst Instance to send notifications to
	 * @param {Array} array The array the mutations occurred on
	 * @param {string} path The path to the array that was mutated
	 * @param {Array} splices Array of splice records
	 * @return {void}
	 * @private
	 */
	function notifySplices(inst, array, path, splices) {
	  let splicesPath = path + '.splices';
	  inst.notifyPath(splicesPath, { indexSplices: splices });
	  inst.notifyPath(path + '.length', array.length);
	  // Null here to allow potentially large splice records to be GC'ed.
	  inst.__data[splicesPath] = {indexSplices: null};
	}

	/**
	 * Creates a splice record and sends an array splice notification for
	 * the described mutation
	 *
	 * Note: this implementation only accepts normalized paths
	 *
	 * @param {!PropertyEffectsType} inst Instance to send notifications to
	 * @param {Array} array The array the mutations occurred on
	 * @param {string} path The path to the array that was mutated
	 * @param {number} index Index at which the array mutation occurred
	 * @param {number} addedCount Number of added items
	 * @param {Array} removed Array of removed items
	 * @return {void}
	 * @private
	 */
	function notifySplice(inst, array, path, index, addedCount, removed) {
	  notifySplices(inst, array, path, [{
	    index: index,
	    addedCount: addedCount,
	    removed: removed,
	    object: array,
	    type: 'splice'
	  }]);
	}

	/**
	 * Returns an upper-cased version of the string.
	 *
	 * @param {string} name String to uppercase
	 * @return {string} Uppercased string
	 * @private
	 */
	function upper(name) {
	  return name[0].toUpperCase() + name.substring(1);
	}

	/**
	 * Element class mixin that provides meta-programming for Polymer's template
	 * binding and data observation (collectively, "property effects") system.
	 *
	 * This mixin uses provides the following key static methods for adding
	 * property effects to an element class:
	 * - `addPropertyEffect`
	 * - `createPropertyObserver`
	 * - `createMethodObserver`
	 * - `createNotifyingProperty`
	 * - `createReadOnlyProperty`
	 * - `createReflectedProperty`
	 * - `createComputedProperty`
	 * - `bindTemplate`
	 *
	 * Each method creates one or more property accessors, along with metadata
	 * used by this mixin's implementation of `_propertiesChanged` to perform
	 * the property effects.
	 *
	 * Underscored versions of the above methods also exist on the element
	 * prototype for adding property effects on instances at runtime.
	 *
	 * Note that this mixin overrides several `PropertyAccessors` methods, in
	 * many cases to maintain guarantees provided by the Polymer 1.x features;
	 * notably it changes property accessors to be synchronous by default
	 * whereas the default when using `PropertyAccessors` standalone is to be
	 * async by default.
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin TemplateStamp
	 * @appliesMixin PropertyAccessors
	 * @summary Element class mixin that provides meta-programming for Polymer's
	 * template binding and data observation system.
	 */
	const PropertyEffects = dedupingMixin(superClass => {

	  /**
	   * @constructor
	   * @extends {superClass}
	   * @implements {Polymer_PropertyAccessors}
	   * @implements {Polymer_TemplateStamp}
	   * @unrestricted
	   * @private
	   */
	  const propertyEffectsBase = TemplateStamp(PropertyAccessors(superClass));

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_PropertyEffects}
	   * @extends {propertyEffectsBase}
	   * @unrestricted
	   */
	  class PropertyEffects extends propertyEffectsBase {

	    constructor() {
	      super();
	      /** @type {boolean} */
	      // Used to identify users of this mixin, ala instanceof
	      this.__isPropertyEffectsClient = true;
	      /** @type {number} */
	      // NOTE: used to track re-entrant calls to `_flushProperties`
	      // path changes dirty check against `__dataTemp` only during one "turn"
	      // and are cleared when `__dataCounter` returns to 0.
	      this.__dataCounter = 0;
	      /** @type {boolean} */
	      this.__dataClientsReady;
	      /** @type {Array} */
	      this.__dataPendingClients;
	      /** @type {Object} */
	      this.__dataToNotify;
	      /** @type {Object} */
	      this.__dataLinkedPaths;
	      /** @type {boolean} */
	      this.__dataHasPaths;
	      /** @type {Object} */
	      this.__dataCompoundStorage;
	      /** @type {Polymer_PropertyEffects} */
	      this.__dataHost;
	      /** @type {!Object} */
	      this.__dataTemp;
	      /** @type {boolean} */
	      this.__dataClientsInitialized;
	      /** @type {!Object} */
	      this.__data;
	      /** @type {!Object} */
	      this.__dataPending;
	      /** @type {!Object} */
	      this.__dataOld;
	      /** @type {Object} */
	      this.__computeEffects;
	      /** @type {Object} */
	      this.__reflectEffects;
	      /** @type {Object} */
	      this.__notifyEffects;
	      /** @type {Object} */
	      this.__propagateEffects;
	      /** @type {Object} */
	      this.__observeEffects;
	      /** @type {Object} */
	      this.__readOnly;
	      /** @type {!TemplateInfo} */
	      this.__templateInfo;
	    }

	    get PROPERTY_EFFECT_TYPES() {
	      return TYPES;
	    }

	    /**
	     * @return {void}
	     */
	    _initializeProperties() {
	      super._initializeProperties();
	      hostStack.registerHost(this);
	      this.__dataClientsReady = false;
	      this.__dataPendingClients = null;
	      this.__dataToNotify = null;
	      this.__dataLinkedPaths = null;
	      this.__dataHasPaths = false;
	      // May be set on instance prior to upgrade
	      this.__dataCompoundStorage = this.__dataCompoundStorage || null;
	      this.__dataHost = this.__dataHost || null;
	      this.__dataTemp = {};
	      this.__dataClientsInitialized = false;
	    }

	    /**
	     * Overrides `PropertyAccessors` implementation to provide a
	     * more efficient implementation of initializing properties from
	     * the prototype on the instance.
	     *
	     * @override
	     * @param {Object} props Properties to initialize on the prototype
	     * @return {void}
	     */
	    _initializeProtoProperties(props) {
	      this.__data = Object.create(props);
	      this.__dataPending = Object.create(props);
	      this.__dataOld = {};
	    }

	    /**
	     * Overrides `PropertyAccessors` implementation to avoid setting
	     * `_setProperty`'s `shouldNotify: true`.
	     *
	     * @override
	     * @param {Object} props Properties to initialize on the instance
	     * @return {void}
	     */
	    _initializeInstanceProperties(props) {
	      let readOnly = this[TYPES.READ_ONLY];
	      for (let prop in props) {
	        if (!readOnly || !readOnly[prop]) {
	          this.__dataPending = this.__dataPending || {};
	          this.__dataOld = this.__dataOld || {};
	          this.__data[prop] = this.__dataPending[prop] = props[prop];
	        }
	      }
	    }

	    // Prototype setup ----------------------------------------

	    /**
	     * Equivalent to static `addPropertyEffect` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Property that should trigger the effect
	     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
	     * @param {Object=} effect Effect metadata object
	     * @return {void}
	     * @protected
	     */
	    _addPropertyEffect(property, type, effect) {
	      this._createPropertyAccessor(property, type == TYPES.READ_ONLY);
	      // effects are accumulated into arrays per property based on type
	      let effects = ensureOwnEffectMap(this, type)[property];
	      if (!effects) {
	        effects = this[type][property] = [];
	      }
	      effects.push(effect);
	    }

	    /**
	     * Removes the given property effect.
	     *
	     * @param {string} property Property the effect was associated with
	     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
	     * @param {Object=} effect Effect metadata object to remove
	     * @return {void}
	     */
	    _removePropertyEffect(property, type, effect) {
	      let effects = ensureOwnEffectMap(this, type)[property];
	      let idx = effects.indexOf(effect);
	      if (idx >= 0) {
	        effects.splice(idx, 1);
	      }
	    }

	    /**
	     * Returns whether the current prototype/instance has a property effect
	     * of a certain type.
	     *
	     * @param {string} property Property name
	     * @param {string=} type Effect type, from this.PROPERTY_EFFECT_TYPES
	     * @return {boolean} True if the prototype/instance has an effect of this type
	     * @protected
	     */
	    _hasPropertyEffect(property, type) {
	      let effects = this[type];
	      return Boolean(effects && effects[property]);
	    }

	    /**
	     * Returns whether the current prototype/instance has a "read only"
	     * accessor for the given property.
	     *
	     * @param {string} property Property name
	     * @return {boolean} True if the prototype/instance has an effect of this type
	     * @protected
	     */
	    _hasReadOnlyEffect(property) {
	      return this._hasPropertyEffect(property, TYPES.READ_ONLY);
	    }

	    /**
	     * Returns whether the current prototype/instance has a "notify"
	     * property effect for the given property.
	     *
	     * @param {string} property Property name
	     * @return {boolean} True if the prototype/instance has an effect of this type
	     * @protected
	     */
	    _hasNotifyEffect(property) {
	      return this._hasPropertyEffect(property, TYPES.NOTIFY);
	    }

	    /**
	     * Returns whether the current prototype/instance has a "reflect to attribute"
	     * property effect for the given property.
	     *
	     * @param {string} property Property name
	     * @return {boolean} True if the prototype/instance has an effect of this type
	     * @protected
	     */
	    _hasReflectEffect(property) {
	      return this._hasPropertyEffect(property, TYPES.REFLECT);
	    }

	    /**
	     * Returns whether the current prototype/instance has a "computed"
	     * property effect for the given property.
	     *
	     * @param {string} property Property name
	     * @return {boolean} True if the prototype/instance has an effect of this type
	     * @protected
	     */
	    _hasComputedEffect(property) {
	      return this._hasPropertyEffect(property, TYPES.COMPUTE);
	    }

	    // Runtime ----------------------------------------

	    /**
	     * Sets a pending property or path.  If the root property of the path in
	     * question had no accessor, the path is set, otherwise it is enqueued
	     * via `_setPendingProperty`.
	     *
	     * This function isolates relatively expensive functionality necessary
	     * for the public API (`set`, `setProperties`, `notifyPath`, and property
	     * change listeners via {{...}} bindings), such that it is only done
	     * when paths enter the system, and not at every propagation step.  It
	     * also sets a `__dataHasPaths` flag on the instance which is used to
	     * fast-path slower path-matching code in the property effects host paths.
	     *
	     * `path` can be a path string or array of path parts as accepted by the
	     * public API.
	     *
	     * @param {string | !Array<number|string>} path Path to set
	     * @param {*} value Value to set
	     * @param {boolean=} shouldNotify Set to true if this change should
	     *  cause a property notification event dispatch
	     * @param {boolean=} isPathNotification If the path being set is a path
	     *   notification of an already changed value, as opposed to a request
	     *   to set and notify the change.  In the latter `false` case, a dirty
	     *   check is performed and then the value is set to the path before
	     *   enqueuing the pending property change.
	     * @return {boolean} Returns true if the property/path was enqueued in
	     *   the pending changes bag.
	     * @protected
	     */
	    _setPendingPropertyOrPath(path, value, shouldNotify, isPathNotification) {
	      if (isPathNotification ||
	          root(Array.isArray(path) ? path[0] : path) !== path) {
	        // Dirty check changes being set to a path against the actual object,
	        // since this is the entry point for paths into the system; from here
	        // the only dirty checks are against the `__dataTemp` cache to prevent
	        // duplicate work in the same turn only. Note, if this was a notification
	        // of a change already set to a path (isPathNotification: true),
	        // we always let the change through and skip the `set` since it was
	        // already dirty checked at the point of entry and the underlying
	        // object has already been updated
	        if (!isPathNotification) {
	          let old = get(this, path);
	          path = /** @type {string} */ (set(this, path, value));
	          // Use property-accessor's simpler dirty check
	          if (!path || !super._shouldPropertyChange(path, value, old)) {
	            return false;
	          }
	        }
	        this.__dataHasPaths = true;
	        if (this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify)) {
	          computeLinkedPaths(this, path, value);
	          return true;
	        }
	      } else {
	        if (this.__dataHasAccessor && this.__dataHasAccessor[path]) {
	          return this._setPendingProperty(/**@type{string}*/(path), value, shouldNotify);
	        } else {
	          this[path] = value;
	        }
	      }
	      return false;
	    }

	    /**
	     * Applies a value to a non-Polymer element/node's property.
	     *
	     * The implementation makes a best-effort at binding interop:
	     * Some native element properties have side-effects when
	     * re-setting the same value (e.g. setting `<input>.value` resets the
	     * cursor position), so we do a dirty-check before setting the value.
	     * However, for better interop with non-Polymer custom elements that
	     * accept objects, we explicitly re-set object changes coming from the
	     * Polymer world (which may include deep object changes without the
	     * top reference changing), erring on the side of providing more
	     * information.
	     *
	     * Users may override this method to provide alternate approaches.
	     *
	     * @param {!Node} node The node to set a property on
	     * @param {string} prop The property to set
	     * @param {*} value The value to set
	     * @return {void}
	     * @protected
	     */
	    _setUnmanagedPropertyToNode(node, prop, value) {
	      // It is a judgment call that resetting primitives is
	      // "bad" and resettings objects is also "good"; alternatively we could
	      // implement a whitelist of tag & property values that should never
	      // be reset (e.g. <input>.value && <select>.value)
	      if (value !== node[prop] || typeof value == 'object') {
	        node[prop] = value;
	      }
	    }

	    /**
	     * Overrides the `PropertiesChanged` implementation to introduce special
	     * dirty check logic depending on the property & value being set:
	     *
	     * 1. Any value set to a path (e.g. 'obj.prop': 42 or 'obj.prop': {...})
	     *    Stored in `__dataTemp`, dirty checked against `__dataTemp`
	     * 2. Object set to simple property (e.g. 'prop': {...})
	     *    Stored in `__dataTemp` and `__data`, dirty checked against
	     *    `__dataTemp` by default implementation of `_shouldPropertyChange`
	     * 3. Primitive value set to simple property (e.g. 'prop': 42)
	     *    Stored in `__data`, dirty checked against `__data`
	     *
	     * The dirty-check is important to prevent cycles due to two-way
	     * notification, but paths and objects are only dirty checked against any
	     * previous value set during this turn via a "temporary cache" that is
	     * cleared when the last `_propertiesChanged` exits. This is so:
	     * a. any cached array paths (e.g. 'array.3.prop') may be invalidated
	     *    due to array mutations like shift/unshift/splice; this is fine
	     *    since path changes are dirty-checked at user entry points like `set`
	     * b. dirty-checking for objects only lasts one turn to allow the user
	     *    to mutate the object in-place and re-set it with the same identity
	     *    and have all sub-properties re-propagated in a subsequent turn.
	     *
	     * The temp cache is not necessarily sufficient to prevent invalid array
	     * paths, since a splice can happen during the same turn (with pathological
	     * user code); we could introduce a "fixup" for temporarily cached array
	     * paths if needed: https://github.com/Polymer/polymer/issues/4227
	     *
	     * @override
	     * @param {string} property Name of the property
	     * @param {*} value Value to set
	     * @param {boolean=} shouldNotify True if property should fire notification
	     *   event (applies only for `notify: true` properties)
	     * @return {boolean} Returns true if the property changed
	     */
	    _setPendingProperty(property, value, shouldNotify) {
	      let isPath$$1 = this.__dataHasPaths && isPath(property);
	      let prevProps = isPath$$1 ? this.__dataTemp : this.__data;
	      if (this._shouldPropertyChange(property, value, prevProps[property])) {
	        if (!this.__dataPending) {
	          this.__dataPending = {};
	          this.__dataOld = {};
	        }
	        // Ensure old is captured from the last turn
	        if (!(property in this.__dataOld)) {
	          this.__dataOld[property] = this.__data[property];
	        }
	        // Paths are stored in temporary cache (cleared at end of turn),
	        // which is used for dirty-checking, all others stored in __data
	        if (isPath$$1) {
	          this.__dataTemp[property] = value;
	        } else {
	          this.__data[property] = value;
	        }
	        // All changes go into pending property bag, passed to _propertiesChanged
	        this.__dataPending[property] = value;
	        // Track properties that should notify separately
	        if (isPath$$1 || (this[TYPES.NOTIFY] && this[TYPES.NOTIFY][property])) {
	          this.__dataToNotify = this.__dataToNotify || {};
	          this.__dataToNotify[property] = shouldNotify;
	        }
	        return true;
	      }
	      return false;
	    }

	    /**
	     * Overrides base implementation to ensure all accessors set `shouldNotify`
	     * to true, for per-property notification tracking.
	     *
	     * @override
	     * @param {string} property Name of the property
	     * @param {*} value Value to set
	     * @return {void}
	     */
	    _setProperty(property, value) {
	      if (this._setPendingProperty(property, value, true)) {
	        this._invalidateProperties();
	      }
	    }

	    /**
	     * Overrides `PropertyAccessor`'s default async queuing of
	     * `_propertiesChanged`: if `__dataReady` is false (has not yet been
	     * manually flushed), the function no-ops; otherwise flushes
	     * `_propertiesChanged` synchronously.
	     *
	     * @override
	     * @return {void}
	     */
	    _invalidateProperties() {
	      if (this.__dataReady) {
	        this._flushProperties();
	      }
	    }

	    /**
	     * Enqueues the given client on a list of pending clients, whose
	     * pending property changes can later be flushed via a call to
	     * `_flushClients`.
	     *
	     * @param {Object} client PropertyEffects client to enqueue
	     * @return {void}
	     * @protected
	     */
	    _enqueueClient(client) {
	      this.__dataPendingClients = this.__dataPendingClients || [];
	      if (client !== this) {
	        this.__dataPendingClients.push(client);
	      }
	    }

	    /**
	     * Overrides superclass implementation.
	     *
	     * @return {void}
	     * @protected
	     */
	    _flushProperties() {
	      this.__dataCounter++;
	      super._flushProperties();
	      this.__dataCounter--;
	    }

	    /**
	     * Flushes any clients previously enqueued via `_enqueueClient`, causing
	     * their `_flushProperties` method to run.
	     *
	     * @return {void}
	     * @protected
	     */
	    _flushClients() {
	      if (!this.__dataClientsReady) {
	        this.__dataClientsReady = true;
	        this._readyClients();
	        // Override point where accessors are turned on; importantly,
	        // this is after clients have fully readied, providing a guarantee
	        // that any property effects occur only after all clients are ready.
	        this.__dataReady = true;
	      } else {
	        this.__enableOrFlushClients();
	      }
	    }

	    // NOTE: We ensure clients either enable or flush as appropriate. This
	    // handles two corner cases:
	    // (1) clients flush properly when connected/enabled before the host
	    // enables; e.g.
	    //   (a) Templatize stamps with no properties and does not flush and
	    //   (b) the instance is inserted into dom and
	    //   (c) then the instance flushes.
	    // (2) clients enable properly when not connected/enabled when the host
	    // flushes; e.g.
	    //   (a) a template is runtime stamped and not yet connected/enabled
	    //   (b) a host sets a property, causing stamped dom to flush
	    //   (c) the stamped dom enables.
	    __enableOrFlushClients() {
	      let clients = this.__dataPendingClients;
	      if (clients) {
	        this.__dataPendingClients = null;
	        for (let i=0; i < clients.length; i++) {
	          let client = clients[i];
	          if (!client.__dataEnabled) {
	            client._enableProperties();
	          } else if (client.__dataPending) {
	            client._flushProperties();
	          }
	        }
	      }
	    }

	    /**
	     * Perform any initial setup on client dom. Called before the first
	     * `_flushProperties` call on client dom and before any element
	     * observers are called.
	     *
	     * @return {void}
	     * @protected
	     */
	    _readyClients() {
	      this.__enableOrFlushClients();
	    }

	    /**
	     * Sets a bag of property changes to this instance, and
	     * synchronously processes all effects of the properties as a batch.
	     *
	     * Property names must be simple properties, not paths.  Batched
	     * path propagation is not supported.
	     *
	     * @param {Object} props Bag of one or more key-value pairs whose key is
	     *   a property and value is the new value to set for that property.
	     * @param {boolean=} setReadOnly When true, any private values set in
	     *   `props` will be set. By default, `setProperties` will not set
	     *   `readOnly: true` root properties.
	     * @return {void}
	     * @public
	     */
	    setProperties(props, setReadOnly) {
	      for (let path in props) {
	        if (setReadOnly || !this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][path]) {
	          //TODO(kschaaf): explicitly disallow paths in setProperty?
	          // wildcard observers currently only pass the first changed path
	          // in the `info` object, and you could do some odd things batching
	          // paths, e.g. {'foo.bar': {...}, 'foo': null}
	          this._setPendingPropertyOrPath(path, props[path], true);
	        }
	      }
	      this._invalidateProperties();
	    }

	    /**
	     * Overrides `PropertyAccessors` so that property accessor
	     * side effects are not enabled until after client dom is fully ready.
	     * Also calls `_flushClients` callback to ensure client dom is enabled
	     * that was not enabled as a result of flushing properties.
	     *
	     * @override
	     * @return {void}
	     */
	    ready() {
	      // It is important that `super.ready()` is not called here as it
	      // immediately turns on accessors. Instead, we wait until `readyClients`
	      // to enable accessors to provide a guarantee that clients are ready
	      // before processing any accessors side effects.
	      this._flushProperties();
	      // If no data was pending, `_flushProperties` will not `flushClients`
	      // so ensure this is done.
	      if (!this.__dataClientsReady) {
	        this._flushClients();
	      }
	      // Before ready, client notifications do not trigger _flushProperties.
	      // Therefore a flush is necessary here if data has been set.
	      if (this.__dataPending) {
	        this._flushProperties();
	      }
	    }

	    /**
	     * Implements `PropertyAccessors`'s properties changed callback.
	     *
	     * Runs each class of effects for the batch of changed properties in
	     * a specific order (compute, propagate, reflect, observe, notify).
	     *
	     * @param {!Object} currentProps Bag of all current accessor values
	     * @param {?Object} changedProps Bag of properties changed since the last
	     *   call to `_propertiesChanged`
	     * @param {?Object} oldProps Bag of previous values for each property
	     *   in `changedProps`
	     * @return {void}
	     */
	    _propertiesChanged(currentProps, changedProps, oldProps) {
	      // ----------------------------
	      // let c = Object.getOwnPropertyNames(changedProps || {});
	      // window.debug && console.group(this.localName + '#' + this.id + ': ' + c);
	      // if (window.debug) { debugger; }
	      // ----------------------------
	      let hasPaths = this.__dataHasPaths;
	      this.__dataHasPaths = false;
	      // Compute properties
	      runComputedEffects(this, changedProps, oldProps, hasPaths);
	      // Clear notify properties prior to possible reentry (propagate, observe),
	      // but after computing effects have a chance to add to them
	      let notifyProps = this.__dataToNotify;
	      this.__dataToNotify = null;
	      // Propagate properties to clients
	      this._propagatePropertyChanges(changedProps, oldProps, hasPaths);
	      // Flush clients
	      this._flushClients();
	      // Reflect properties
	      runEffects(this, this[TYPES.REFLECT], changedProps, oldProps, hasPaths);
	      // Observe properties
	      runEffects(this, this[TYPES.OBSERVE], changedProps, oldProps, hasPaths);
	      // Notify properties to host
	      if (notifyProps) {
	        runNotifyEffects(this, notifyProps, changedProps, oldProps, hasPaths);
	      }
	      // Clear temporary cache at end of turn
	      if (this.__dataCounter == 1) {
	        this.__dataTemp = {};
	      }
	      // ----------------------------
	      // window.debug && console.groupEnd(this.localName + '#' + this.id + ': ' + c);
	      // ----------------------------
	    }

	    /**
	     * Called to propagate any property changes to stamped template nodes
	     * managed by this element.
	     *
	     * @param {Object} changedProps Bag of changed properties
	     * @param {Object} oldProps Bag of previous values for changed properties
	     * @param {boolean} hasPaths True with `props` contains one or more paths
	     * @return {void}
	     * @protected
	     */
	    _propagatePropertyChanges(changedProps, oldProps, hasPaths) {
	      if (this[TYPES.PROPAGATE]) {
	        runEffects(this, this[TYPES.PROPAGATE], changedProps, oldProps, hasPaths);
	      }
	      let templateInfo = this.__templateInfo;
	      while (templateInfo) {
	        runEffects(this, templateInfo.propertyEffects, changedProps, oldProps,
	          hasPaths, templateInfo.nodeList);
	        templateInfo = templateInfo.nextTemplateInfo;
	      }
	    }

	    /**
	     * Aliases one data path as another, such that path notifications from one
	     * are routed to the other.
	     *
	     * @param {string | !Array<string|number>} to Target path to link.
	     * @param {string | !Array<string|number>} from Source path to link.
	     * @return {void}
	     * @public
	     */
	    linkPaths(to, from) {
	      to = normalize(to);
	      from = normalize(from);
	      this.__dataLinkedPaths = this.__dataLinkedPaths || {};
	      this.__dataLinkedPaths[to] = from;
	    }

	    /**
	     * Removes a data path alias previously established with `_linkPaths`.
	     *
	     * Note, the path to unlink should be the target (`to`) used when
	     * linking the paths.
	     *
	     * @param {string | !Array<string|number>} path Target path to unlink.
	     * @return {void}
	     * @public
	     */
	    unlinkPaths(path) {
	      path = normalize(path);
	      if (this.__dataLinkedPaths) {
	        delete this.__dataLinkedPaths[path];
	      }
	    }

	    /**
	     * Notify that an array has changed.
	     *
	     * Example:
	     *
	     *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];
	     *     ...
	     *     this.items.splice(1, 1, {name: 'Sam'});
	     *     this.items.push({name: 'Bob'});
	     *     this.notifySplices('items', [
	     *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, object: this.items, type: 'splice' },
	     *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}
	     *     ]);
	     *
	     * @param {string} path Path that should be notified.
	     * @param {Array} splices Array of splice records indicating ordered
	     *   changes that occurred to the array. Each record should have the
	     *   following fields:
	     *    * index: index at which the change occurred
	     *    * removed: array of items that were removed from this index
	     *    * addedCount: number of new items added at this index
	     *    * object: a reference to the array in question
	     *    * type: the string literal 'splice'
	     *
	     *   Note that splice records _must_ be normalized such that they are
	     *   reported in index order (raw results from `Object.observe` are not
	     *   ordered and must be normalized/merged before notifying).
	     * @return {void}
	     * @public
	    */
	    notifySplices(path, splices) {
	      let info = {path: ''};
	      let array = /** @type {Array} */(get(this, path, info));
	      notifySplices(this, array, info.path, splices);
	    }

	    /**
	     * Convenience method for reading a value from a path.
	     *
	     * Note, if any part in the path is undefined, this method returns
	     * `undefined` (this method does not throw when dereferencing undefined
	     * paths).
	     *
	     * @param {(string|!Array<(string|number)>)} path Path to the value
	     *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)
	     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
	     *   bracketed expressions are not supported; string-based path parts
	     *   *must* be separated by dots.  Note that when dereferencing array
	     *   indices, the index may be used as a dotted part directly
	     *   (e.g. `users.12.name` or `['users', 12, 'name']`).
	     * @param {Object=} root Root object from which the path is evaluated.
	     * @return {*} Value at the path, or `undefined` if any part of the path
	     *   is undefined.
	     * @public
	     */
	    get(path, root$$1) {
	      return get(root$$1 || this, path);
	    }

	    /**
	     * Convenience method for setting a value to a path and notifying any
	     * elements bound to the same path.
	     *
	     * Note, if any part in the path except for the last is undefined,
	     * this method does nothing (this method does not throw when
	     * dereferencing undefined paths).
	     *
	     * @param {(string|!Array<(string|number)>)} path Path to the value
	     *   to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)
	     *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that
	     *   bracketed expressions are not supported; string-based path parts
	     *   *must* be separated by dots.  Note that when dereferencing array
	     *   indices, the index may be used as a dotted part directly
	     *   (e.g. `'users.12.name'` or `['users', 12, 'name']`).
	     * @param {*} value Value to set at the specified path.
	     * @param {Object=} root Root object from which the path is evaluated.
	     *   When specified, no notification will occur.
	     * @return {void}
	     * @public
	    */
	    set(path, value, root$$1) {
	      if (root$$1) {
	        set(root$$1, path, value);
	      } else {
	        if (!this[TYPES.READ_ONLY] || !this[TYPES.READ_ONLY][/** @type {string} */(path)]) {
	          if (this._setPendingPropertyOrPath(path, value, true)) {
	            this._invalidateProperties();
	          }
	        }
	      }
	    }

	    /**
	     * Adds items onto the end of the array at the path specified.
	     *
	     * The arguments after `path` and return value match that of
	     * `Array.prototype.push`.
	     *
	     * This method notifies other paths to the same array that a
	     * splice occurred to the array.
	     *
	     * @param {string | !Array<string|number>} path Path to array.
	     * @param {...*} items Items to push onto array
	     * @return {number} New length of the array.
	     * @public
	     */
	    push(path, ...items) {
	      let info = {path: ''};
	      let array = /** @type {Array}*/(get(this, path, info));
	      let len = array.length;
	      let ret = array.push(...items);
	      if (items.length) {
	        notifySplice(this, array, info.path, len, items.length, []);
	      }
	      return ret;
	    }

	    /**
	     * Removes an item from the end of array at the path specified.
	     *
	     * The arguments after `path` and return value match that of
	     * `Array.prototype.pop`.
	     *
	     * This method notifies other paths to the same array that a
	     * splice occurred to the array.
	     *
	     * @param {string | !Array<string|number>} path Path to array.
	     * @return {*} Item that was removed.
	     * @public
	     */
	    pop(path) {
	      let info = {path: ''};
	      let array = /** @type {Array} */(get(this, path, info));
	      let hadLength = Boolean(array.length);
	      let ret = array.pop();
	      if (hadLength) {
	        notifySplice(this, array, info.path, array.length, 0, [ret]);
	      }
	      return ret;
	    }

	    /**
	     * Starting from the start index specified, removes 0 or more items
	     * from the array and inserts 0 or more new items in their place.
	     *
	     * The arguments after `path` and return value match that of
	     * `Array.prototype.splice`.
	     *
	     * This method notifies other paths to the same array that a
	     * splice occurred to the array.
	     *
	     * @param {string | !Array<string|number>} path Path to array.
	     * @param {number} start Index from which to start removing/inserting.
	     * @param {number} deleteCount Number of items to remove.
	     * @param {...*} items Items to insert into array.
	     * @return {Array} Array of removed items.
	     * @public
	     */
	    splice(path, start, deleteCount, ...items) {
	      let info = {path : ''};
	      let array = /** @type {Array} */(get(this, path, info));
	      // Normalize fancy native splice handling of crazy start values
	      if (start < 0) {
	        start = array.length - Math.floor(-start);
	      } else if (start) {
	        start = Math.floor(start);
	      }
	      // array.splice does different things based on the number of arguments
	      // you pass in. Therefore, array.splice(0) and array.splice(0, undefined)
	      // do different things. In the former, the whole array is cleared. In the
	      // latter, no items are removed.
	      // This means that we need to detect whether 1. one of the arguments
	      // is actually passed in and then 2. determine how many arguments
	      // we should pass on to the native array.splice
	      //
	      let ret;
	      // Omit any additional arguments if they were not passed in
	      if (arguments.length === 2) {
	        ret = array.splice(start);
	      // Either start was undefined and the others were defined, but in this
	      // case we can safely pass on all arguments
	      //
	      // Note: this includes the case where none of the arguments were passed in,
	      // e.g. this.splice('array'). However, if both start and deleteCount
	      // are undefined, array.splice will not modify the array (as expected)
	      } else {
	        ret = array.splice(start, deleteCount, ...items);
	      }
	      // At the end, check whether any items were passed in (e.g. insertions)
	      // or if the return array contains items (e.g. deletions).
	      // Only notify if items were added or deleted.
	      if (items.length || ret.length) {
	        notifySplice(this, array, info.path, start, items.length, ret);
	      }
	      return ret;
	    }

	    /**
	     * Removes an item from the beginning of array at the path specified.
	     *
	     * The arguments after `path` and return value match that of
	     * `Array.prototype.pop`.
	     *
	     * This method notifies other paths to the same array that a
	     * splice occurred to the array.
	     *
	     * @param {string | !Array<string|number>} path Path to array.
	     * @return {*} Item that was removed.
	     * @public
	     */
	    shift(path) {
	      let info = {path: ''};
	      let array = /** @type {Array} */(get(this, path, info));
	      let hadLength = Boolean(array.length);
	      let ret = array.shift();
	      if (hadLength) {
	        notifySplice(this, array, info.path, 0, 0, [ret]);
	      }
	      return ret;
	    }

	    /**
	     * Adds items onto the beginning of the array at the path specified.
	     *
	     * The arguments after `path` and return value match that of
	     * `Array.prototype.push`.
	     *
	     * This method notifies other paths to the same array that a
	     * splice occurred to the array.
	     *
	     * @param {string | !Array<string|number>} path Path to array.
	     * @param {...*} items Items to insert info array
	     * @return {number} New length of the array.
	     * @public
	     */
	    unshift(path, ...items) {
	      let info = {path: ''};
	      let array = /** @type {Array} */(get(this, path, info));
	      let ret = array.unshift(...items);
	      if (items.length) {
	        notifySplice(this, array, info.path, 0, items.length, []);
	      }
	      return ret;
	    }

	    /**
	     * Notify that a path has changed.
	     *
	     * Example:
	     *
	     *     this.item.user.name = 'Bob';
	     *     this.notifyPath('item.user.name');
	     *
	     * @param {string} path Path that should be notified.
	     * @param {*=} value Value at the path (optional).
	     * @return {void}
	     * @public
	    */
	    notifyPath(path, value) {
	      /** @type {string} */
	      let propPath;
	      if (arguments.length == 1) {
	        // Get value if not supplied
	        let info = {path: ''};
	        value = get(this, path, info);
	        propPath = info.path;
	      } else if (Array.isArray(path)) {
	        // Normalize path if needed
	        propPath = normalize(path);
	      } else {
	        propPath = /** @type{string} */(path);
	      }
	      if (this._setPendingPropertyOrPath(propPath, value, true, true)) {
	        this._invalidateProperties();
	      }
	    }

	    /**
	     * Equivalent to static `createReadOnlyProperty` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Property name
	     * @param {boolean=} protectedSetter Creates a custom protected setter
	     *   when `true`.
	     * @return {void}
	     * @protected
	     */
	    _createReadOnlyProperty(property, protectedSetter) {
	      this._addPropertyEffect(property, TYPES.READ_ONLY);
	      if (protectedSetter) {
	        this['_set' + upper(property)] = /** @this {PropertyEffects} */function(value) {
	          this._setProperty(property, value);
	        };
	      }
	    }

	    /**
	     * Equivalent to static `createPropertyObserver` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Property name
	     * @param {string|function(*,*)} method Function or name of observer method to call
	     * @param {boolean=} dynamicFn Whether the method name should be included as
	     *   a dependency to the effect.
	     * @return {void}
	     * @protected
	     */
	    _createPropertyObserver(property, method, dynamicFn) {
	      let info = { property, method, dynamicFn: Boolean(dynamicFn) };
	      this._addPropertyEffect(property, TYPES.OBSERVE, {
	        fn: runObserverEffect, info, trigger: {name: property}
	      });
	      if (dynamicFn) {
	        this._addPropertyEffect(/** @type {string} */(method), TYPES.OBSERVE, {
	          fn: runObserverEffect, info, trigger: {name: method}
	        });
	      }
	    }

	    /**
	     * Equivalent to static `createMethodObserver` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} expression Method expression
	     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
	     *   whether method names should be included as a dependency to the effect.
	     * @return {void}
	     * @protected
	     */
	    _createMethodObserver(expression, dynamicFn) {
	      let sig = parseMethod(expression);
	      if (!sig) {
	        throw new Error("Malformed observer expression '" + expression + "'");
	      }
	      createMethodEffect(this, sig, TYPES.OBSERVE, runMethodEffect, null, dynamicFn);
	    }

	    /**
	     * Equivalent to static `createNotifyingProperty` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Property name
	     * @return {void}
	     * @protected
	     */
	    _createNotifyingProperty(property) {
	      this._addPropertyEffect(property, TYPES.NOTIFY, {
	        fn: runNotifyEffect,
	        info: {
	          eventName: CaseMap.camelToDashCase(property) + '-changed',
	          property: property
	        }
	      });
	    }

	    /**
	     * Equivalent to static `createReflectedProperty` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Property name
	     * @return {void}
	     * @protected
	     */
	    _createReflectedProperty(property) {
	      let attr = this.constructor.attributeNameForProperty(property);
	      if (attr[0] === '-') {
	        console.warn('Property ' + property + ' cannot be reflected to attribute ' +
	          attr + ' because "-" is not a valid starting attribute name. Use a lowercase first letter for the property instead.');
	      } else {
	        this._addPropertyEffect(property, TYPES.REFLECT, {
	          fn: runReflectEffect,
	          info: {
	            attrName: attr
	          }
	        });
	      }
	    }

	    /**
	     * Equivalent to static `createComputedProperty` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * @param {string} property Name of computed property to set
	     * @param {string} expression Method expression
	     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
	     *   whether method names should be included as a dependency to the effect.
	     * @return {void}
	     * @protected
	     */
	    _createComputedProperty(property, expression, dynamicFn) {
	      let sig = parseMethod(expression);
	      if (!sig) {
	        throw new Error("Malformed computed expression '" + expression + "'");
	      }
	      createMethodEffect(this, sig, TYPES.COMPUTE, runComputedEffect, property, dynamicFn);
	    }

	    // -- static class methods ------------

	    /**
	     * Ensures an accessor exists for the specified property, and adds
	     * to a list of "property effects" that will run when the accessor for
	     * the specified property is set.  Effects are grouped by "type", which
	     * roughly corresponds to a phase in effect processing.  The effect
	     * metadata should be in the following form:
	     *
	     *     {
	     *       fn: effectFunction, // Reference to function to call to perform effect
	     *       info: { ... }       // Effect metadata passed to function
	     *       trigger: {          // Optional triggering metadata; if not provided
	     *         name: string      // the property is treated as a wildcard
	     *         structured: boolean
	     *         wildcard: boolean
	     *       }
	     *     }
	     *
	     * Effects are called from `_propertiesChanged` in the following order by
	     * type:
	     *
	     * 1. COMPUTE
	     * 2. PROPAGATE
	     * 3. REFLECT
	     * 4. OBSERVE
	     * 5. NOTIFY
	     *
	     * Effect functions are called with the following signature:
	     *
	     *     effectFunction(inst, path, props, oldProps, info, hasPaths)
	     *
	     * @param {string} property Property that should trigger the effect
	     * @param {string} type Effect type, from this.PROPERTY_EFFECT_TYPES
	     * @param {Object=} effect Effect metadata object
	     * @return {void}
	     * @protected
	     */
	    static addPropertyEffect(property, type, effect) {
	      this.prototype._addPropertyEffect(property, type, effect);
	    }

	    /**
	     * Creates a single-property observer for the given property.
	     *
	     * @param {string} property Property name
	     * @param {string|function(*,*)} method Function or name of observer method to call
	     * @param {boolean=} dynamicFn Whether the method name should be included as
	     *   a dependency to the effect.
	     * @return {void}
	     * @protected
	     */
	    static createPropertyObserver(property, method, dynamicFn) {
	      this.prototype._createPropertyObserver(property, method, dynamicFn);
	    }

	    /**
	     * Creates a multi-property "method observer" based on the provided
	     * expression, which should be a string in the form of a normal JavaScript
	     * function signature: `'methodName(arg1, [..., argn])'`.  Each argument
	     * should correspond to a property or path in the context of this
	     * prototype (or instance), or may be a literal string or number.
	     *
	     * @param {string} expression Method expression
	     * @param {boolean|Object=} dynamicFn Boolean or object map indicating
	     * @return {void}
	     *   whether method names should be included as a dependency to the effect.
	     * @protected
	     */
	    static createMethodObserver(expression, dynamicFn) {
	      this.prototype._createMethodObserver(expression, dynamicFn);
	    }

	    /**
	     * Causes the setter for the given property to dispatch `<property>-changed`
	     * events to notify of changes to the property.
	     *
	     * @param {string} property Property name
	     * @return {void}
	     * @protected
	     */
	    static createNotifyingProperty(property) {
	      this.prototype._createNotifyingProperty(property);
	    }

	    /**
	     * Creates a read-only accessor for the given property.
	     *
	     * To set the property, use the protected `_setProperty` API.
	     * To create a custom protected setter (e.g. `_setMyProp()` for
	     * property `myProp`), pass `true` for `protectedSetter`.
	     *
	     * Note, if the property will have other property effects, this method
	     * should be called first, before adding other effects.
	     *
	     * @param {string} property Property name
	     * @param {boolean=} protectedSetter Creates a custom protected setter
	     *   when `true`.
	     * @return {void}
	     * @protected
	     */
	    static createReadOnlyProperty(property, protectedSetter) {
	      this.prototype._createReadOnlyProperty(property, protectedSetter);
	    }

	    /**
	     * Causes the setter for the given property to reflect the property value
	     * to a (dash-cased) attribute of the same name.
	     *
	     * @param {string} property Property name
	     * @return {void}
	     * @protected
	     */
	    static createReflectedProperty(property) {
	      this.prototype._createReflectedProperty(property);
	    }

	    /**
	     * Creates a computed property whose value is set to the result of the
	     * method described by the given `expression` each time one or more
	     * arguments to the method changes.  The expression should be a string
	     * in the form of a normal JavaScript function signature:
	     * `'methodName(arg1, [..., argn])'`
	     *
	     * @param {string} property Name of computed property to set
	     * @param {string} expression Method expression
	     * @param {boolean|Object=} dynamicFn Boolean or object map indicating whether
	     *   method names should be included as a dependency to the effect.
	     * @return {void}
	     * @protected
	     */
	    static createComputedProperty(property, expression, dynamicFn) {
	      this.prototype._createComputedProperty(property, expression, dynamicFn);
	    }

	    /**
	     * Parses the provided template to ensure binding effects are created
	     * for them, and then ensures property accessors are created for any
	     * dependent properties in the template.  Binding effects for bound
	     * templates are stored in a linked list on the instance so that
	     * templates can be efficiently stamped and unstamped.
	     *
	     * @param {!HTMLTemplateElement} template Template containing binding
	     *   bindings
	     * @return {!TemplateInfo} Template metadata object
	     * @protected
	     */
	    static bindTemplate(template) {
	      return this.prototype._bindTemplate(template);
	    }

	    // -- binding ----------------------------------------------

	    /**
	     * Equivalent to static `bindTemplate` API but can be called on
	     * an instance to add effects at runtime.  See that method for
	     * full API docs.
	     *
	     * This method may be called on the prototype (for prototypical template
	     * binding, to avoid creating accessors every instance) once per prototype,
	     * and will be called with `runtimeBinding: true` by `_stampTemplate` to
	     * create and link an instance of the template metadata associated with a
	     * particular stamping.
	     *
	     * @param {!HTMLTemplateElement} template Template containing binding
	     *   bindings
	     * @param {boolean=} instanceBinding When false (default), performs
	     *   "prototypical" binding of the template and overwrites any previously
	     *   bound template for the class. When true (as passed from
	     *   `_stampTemplate`), the template info is instanced and linked into
	     *   the list of bound templates.
	     * @return {!TemplateInfo} Template metadata object; for `runtimeBinding`,
	     *   this is an instance of the prototypical template info
	     * @protected
	     */
	    _bindTemplate(template, instanceBinding) {
	      let templateInfo = this.constructor._parseTemplate(template);
	      let wasPreBound = this.__templateInfo == templateInfo;
	      // Optimization: since this is called twice for proto-bound templates,
	      // don't attempt to recreate accessors if this template was pre-bound
	      if (!wasPreBound) {
	        for (let prop in templateInfo.propertyEffects) {
	          this._createPropertyAccessor(prop);
	        }
	      }
	      if (instanceBinding) {
	        // For instance-time binding, create instance of template metadata
	        // and link into list of templates if necessary
	        templateInfo = /** @type {!TemplateInfo} */(Object.create(templateInfo));
	        templateInfo.wasPreBound = wasPreBound;
	        if (!wasPreBound && this.__templateInfo) {
	          let last = this.__templateInfoLast || this.__templateInfo;
	          this.__templateInfoLast = last.nextTemplateInfo = templateInfo;
	          templateInfo.previousTemplateInfo = last;
	          return templateInfo;
	        }
	      }
	      return this.__templateInfo = templateInfo;
	    }

	    /**
	     * Adds a property effect to the given template metadata, which is run
	     * at the "propagate" stage of `_propertiesChanged` when the template
	     * has been bound to the element via `_bindTemplate`.
	     *
	     * The `effect` object should match the format in `_addPropertyEffect`.
	     *
	     * @param {Object} templateInfo Template metadata to add effect to
	     * @param {string} prop Property that should trigger the effect
	     * @param {Object=} effect Effect metadata object
	     * @return {void}
	     * @protected
	     */
	    static _addTemplatePropertyEffect(templateInfo, prop, effect) {
	      let hostProps = templateInfo.hostProps = templateInfo.hostProps || {};
	      hostProps[prop] = true;
	      let effects = templateInfo.propertyEffects = templateInfo.propertyEffects || {};
	      let propEffects = effects[prop] = effects[prop] || [];
	      propEffects.push(effect);
	    }

	    /**
	     * Stamps the provided template and performs instance-time setup for
	     * Polymer template features, including data bindings, declarative event
	     * listeners, and the `this.$` map of `id`'s to nodes.  A document fragment
	     * is returned containing the stamped DOM, ready for insertion into the
	     * DOM.
	     *
	     * This method may be called more than once; however note that due to
	     * `shadycss` polyfill limitations, only styles from templates prepared
	     * using `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped
	     * to the shadow root and support CSS custom properties), and note that
	     * `ShadyCSS.prepareTemplate` may only be called once per element. As such,
	     * any styles required by in runtime-stamped templates must be included
	     * in the main element template.
	     *
	     * @param {!HTMLTemplateElement} template Template to stamp
	     * @return {!StampedTemplate} Cloned template content
	     * @override
	     * @protected
	     */
	    _stampTemplate(template) {
	      // Ensures that created dom is `_enqueueClient`'d to this element so
	      // that it can be flushed on next call to `_flushProperties`
	      hostStack.beginHosting(this);
	      let dom = super._stampTemplate(template);
	      hostStack.endHosting(this);
	      let templateInfo = /** @type {!TemplateInfo} */(this._bindTemplate(template, true));
	      // Add template-instance-specific data to instanced templateInfo
	      templateInfo.nodeList = dom.nodeList;
	      // Capture child nodes to allow unstamping of non-prototypical templates
	      if (!templateInfo.wasPreBound) {
	        let nodes = templateInfo.childNodes = [];
	        for (let n=dom.firstChild; n; n=n.nextSibling) {
	          nodes.push(n);
	        }
	      }
	      dom.templateInfo = templateInfo;
	      // Setup compound storage, 2-way listeners, and dataHost for bindings
	      setupBindings(this, templateInfo);
	      // Flush properties into template nodes if already booted
	      if (this.__dataReady) {
	        runEffects(this, templateInfo.propertyEffects, this.__data, null,
	          false, templateInfo.nodeList);
	      }
	      return dom;
	    }

	    /**
	     * Removes and unbinds the nodes previously contained in the provided
	     * DocumentFragment returned from `_stampTemplate`.
	     *
	     * @param {!StampedTemplate} dom DocumentFragment previously returned
	     *   from `_stampTemplate` associated with the nodes to be removed
	     * @return {void}
	     * @protected
	     */
	    _removeBoundDom(dom) {
	      // Unlink template info
	      let templateInfo = dom.templateInfo;
	      if (templateInfo.previousTemplateInfo) {
	        templateInfo.previousTemplateInfo.nextTemplateInfo =
	          templateInfo.nextTemplateInfo;
	      }
	      if (templateInfo.nextTemplateInfo) {
	        templateInfo.nextTemplateInfo.previousTemplateInfo =
	          templateInfo.previousTemplateInfo;
	      }
	      if (this.__templateInfoLast == templateInfo) {
	        this.__templateInfoLast = templateInfo.previousTemplateInfo;
	      }
	      templateInfo.previousTemplateInfo = templateInfo.nextTemplateInfo = null;
	      // Remove stamped nodes
	      let nodes = templateInfo.childNodes;
	      for (let i=0; i<nodes.length; i++) {
	        let node = nodes[i];
	        node.parentNode.removeChild(node);
	      }
	    }

	    /**
	     * Overrides default `TemplateStamp` implementation to add support for
	     * parsing bindings from `TextNode`'s' `textContent`.  A `bindings`
	     * array is added to `nodeInfo` and populated with binding metadata
	     * with information capturing the binding target, and a `parts` array
	     * with one or more metadata objects capturing the source(s) of the
	     * binding.
	     *
	     * @override
	     * @param {Node} node Node to parse
	     * @param {TemplateInfo} templateInfo Template metadata for current template
	     * @param {NodeInfo} nodeInfo Node metadata for current template node
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     * @protected
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	    static _parseTemplateNode(node, templateInfo, nodeInfo) {
	      let noted = super._parseTemplateNode(node, templateInfo, nodeInfo);
	      if (node.nodeType === Node.TEXT_NODE) {
	        let parts = this._parseBindings(node.textContent, templateInfo);
	        if (parts) {
	          // Initialize the textContent with any literal parts
	          // NOTE: default to a space here so the textNode remains; some browsers
	          // (IE) omit an empty textNode following cloneNode/importNode.
	          node.textContent = literalFromParts(parts) || ' ';
	          addBinding(this, templateInfo, nodeInfo, 'text', 'textContent', parts);
	          noted = true;
	        }
	      }
	      return noted;
	    }

	    /**
	     * Overrides default `TemplateStamp` implementation to add support for
	     * parsing bindings from attributes.  A `bindings`
	     * array is added to `nodeInfo` and populated with binding metadata
	     * with information capturing the binding target, and a `parts` array
	     * with one or more metadata objects capturing the source(s) of the
	     * binding.
	     *
	     * @override
	     * @param {Element} node Node to parse
	     * @param {TemplateInfo} templateInfo Template metadata for current template
	     * @param {NodeInfo} nodeInfo Node metadata for current template node
	     * @param {string} name Attribute name
	     * @param {string} value Attribute value
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     * @protected
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	    static _parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value) {
	      let parts = this._parseBindings(value, templateInfo);
	      if (parts) {
	        // Attribute or property
	        let origName = name;
	        let kind = 'property';
	        // The only way we see a capital letter here is if the attr has
	        // a capital letter in it per spec. In this case, to make sure
	        // this binding works, we go ahead and make the binding to the attribute.
	        if (capitalAttributeRegex.test(name)) {
	          kind = 'attribute';
	        } else if (name[name.length-1] == '$') {
	          name = name.slice(0, -1);
	          kind = 'attribute';
	        }
	        // Initialize attribute bindings with any literal parts
	        let literal = literalFromParts(parts);
	        if (literal && kind == 'attribute') {
	          node.setAttribute(name, literal);
	        }
	        // Clear attribute before removing, since IE won't allow removing
	        // `value` attribute if it previously had a value (can't
	        // unconditionally set '' before removing since attributes with `$`
	        // can't be set using setAttribute)
	        if (node.localName === 'input' && origName === 'value') {
	          node.setAttribute(origName, '');
	        }
	        // Remove annotation
	        node.removeAttribute(origName);
	        // Case hackery: attributes are lower-case, but bind targets
	        // (properties) are case sensitive. Gambit is to map dash-case to
	        // camel-case: `foo-bar` becomes `fooBar`.
	        // Attribute bindings are excepted.
	        if (kind === 'property') {
	          name = dashToCamelCase(name);
	        }
	        addBinding(this, templateInfo, nodeInfo, kind, name, parts, literal);
	        return true;
	      } else {
	        return super._parseTemplateNodeAttribute(node, templateInfo, nodeInfo, name, value);
	      }
	    }

	    /**
	     * Overrides default `TemplateStamp` implementation to add support for
	     * binding the properties that a nested template depends on to the template
	     * as `_host_<property>`.
	     *
	     * @override
	     * @param {Node} node Node to parse
	     * @param {TemplateInfo} templateInfo Template metadata for current template
	     * @param {NodeInfo} nodeInfo Node metadata for current template node
	     * @return {boolean} `true` if the visited node added node-specific
	     *   metadata to `nodeInfo`
	     * @protected
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	    static _parseTemplateNestedTemplate(node, templateInfo, nodeInfo) {
	      let noted = super._parseTemplateNestedTemplate(node, templateInfo, nodeInfo);
	      // Merge host props into outer template and add bindings
	      let hostProps = nodeInfo.templateInfo.hostProps;
	      let mode = '{';
	      for (let source in hostProps) {
	        let parts = [{ mode, source, dependencies: [source] }];
	        addBinding(this, templateInfo, nodeInfo, 'property', '_host_' + source, parts);
	      }
	      return noted;
	    }

	    /**
	     * Called to parse text in a template (either attribute values or
	     * textContent) into binding metadata.
	     *
	     * Any overrides of this method should return an array of binding part
	     * metadata  representing one or more bindings found in the provided text
	     * and any "literal" text in between.  Any non-literal parts will be passed
	     * to `_evaluateBinding` when any dependencies change.  The only required
	     * fields of each "part" in the returned array are as follows:
	     *
	     * - `dependencies` - Array containing trigger metadata for each property
	     *   that should trigger the binding to update
	     * - `literal` - String containing text if the part represents a literal;
	     *   in this case no `dependencies` are needed
	     *
	     * Additional metadata for use by `_evaluateBinding` may be provided in
	     * each part object as needed.
	     *
	     * The default implementation handles the following types of bindings
	     * (one or more may be intermixed with literal strings):
	     * - Property binding: `[[prop]]`
	     * - Path binding: `[[object.prop]]`
	     * - Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`
	     * - Two-way property or path bindings (supports negation):
	     *   `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`
	     * - Inline computed method (supports negation):
	     *   `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`
	     *
	     * The default implementation uses a regular expression for best
	     * performance. However, the regular expression uses a white-list of
	     * allowed characters in a data-binding, which causes problems for
	     * data-bindings that do use characters not in this white-list.
	     *
	     * Instead of updating the white-list with all allowed characters,
	     * there is a StrictBindingParser (see lib/mixins/strict-binding-parser)
	     * that uses a state machine instead. This state machine is able to handle
	     * all characters. However, it is slightly less performant, therefore we
	     * extracted it into a separate optional mixin.
	     *
	     * @param {string} text Text to parse from attribute or textContent
	     * @param {Object} templateInfo Current template metadata
	     * @return {Array<!BindingPart>} Array of binding part metadata
	     * @protected
	     */
	    static _parseBindings(text, templateInfo) {
	      let parts = [];
	      let lastIndex = 0;
	      let m;
	      // Example: "literal1{{prop}}literal2[[!compute(foo,bar)]]final"
	      // Regex matches:
	      //        Iteration 1:  Iteration 2:
	      // m[1]: '{{'          '[['
	      // m[2]: ''            '!'
	      // m[3]: 'prop'        'compute(foo,bar)'
	      while ((m = bindingRegex.exec(text)) !== null) {
	        // Add literal part
	        if (m.index > lastIndex) {
	          parts.push({literal: text.slice(lastIndex, m.index)});
	        }
	        // Add binding part
	        let mode = m[1][0];
	        let negate = Boolean(m[2]);
	        let source = m[3].trim();
	        let customEvent = false, notifyEvent = '', colon = -1;
	        if (mode == '{' && (colon = source.indexOf('::')) > 0) {
	          notifyEvent = source.substring(colon + 2);
	          source = source.substring(0, colon);
	          customEvent = true;
	        }
	        let signature = parseMethod(source);
	        let dependencies = [];
	        if (signature) {
	          // Inline computed function
	          let {args, methodName} = signature;
	          for (let i=0; i<args.length; i++) {
	            let arg = args[i];
	            if (!arg.literal) {
	              dependencies.push(arg);
	            }
	          }
	          let dynamicFns = templateInfo.dynamicFns;
	          if (dynamicFns && dynamicFns[methodName] || signature.static) {
	            dependencies.push(methodName);
	            signature.dynamicFn = true;
	          }
	        } else {
	          // Property or path
	          dependencies.push(source);
	        }
	        parts.push({
	          source, mode, negate, customEvent, signature, dependencies,
	          event: notifyEvent
	        });
	        lastIndex = bindingRegex.lastIndex;
	      }
	      // Add a final literal part
	      if (lastIndex && lastIndex < text.length) {
	        let literal = text.substring(lastIndex);
	        if (literal) {
	          parts.push({
	            literal: literal
	          });
	        }
	      }
	      if (parts.length) {
	        return parts;
	      } else {
	        return null;
	      }
	    }

	    /**
	     * Called to evaluate a previously parsed binding part based on a set of
	     * one or more changed dependencies.
	     *
	     * @param {this} inst Element that should be used as scope for
	     *   binding dependencies
	     * @param {BindingPart} part Binding part metadata
	     * @param {string} path Property/path that triggered this effect
	     * @param {Object} props Bag of current property changes
	     * @param {Object} oldProps Bag of previous values for changed properties
	     * @param {boolean} hasPaths True with `props` contains one or more paths
	     * @return {*} Value the binding part evaluated to
	     * @protected
	     */
	    static _evaluateBinding(inst, part, path, props, oldProps, hasPaths) {
	      let value;
	      if (part.signature) {
	        value = runMethodEffect(inst, path, props, oldProps, part.signature);
	      } else if (path != part.source) {
	        value = get(inst, part.source);
	      } else {
	        if (hasPaths && isPath(path)) {
	          value = get(inst, path);
	        } else {
	          value = inst.__data[path];
	        }
	      }
	      if (part.negate) {
	        value = !value;
	      }
	      return value;
	    }

	  }

	  return PropertyEffects;
	});

	/**
	 * Helper api for enqueuing client dom created by a host element.
	 *
	 * By default elements are flushed via `_flushProperties` when
	 * `connectedCallback` is called. Elements attach their client dom to
	 * themselves at `ready` time which results from this first flush.
	 * This provides an ordering guarantee that the client dom an element
	 * creates is flushed before the element itself (i.e. client `ready`
	 * fires before host `ready`).
	 *
	 * However, if `_flushProperties` is called *before* an element is connected,
	 * as for example `Templatize` does, this ordering guarantee cannot be
	 * satisfied because no elements are connected. (Note: Bound elements that
	 * receive data do become enqueued clients and are properly ordered but
	 * unbound elements are not.)
	 *
	 * To maintain the desired "client before host" ordering guarantee for this
	 * case we rely on the "host stack. Client nodes registers themselves with
	 * the creating host element when created. This ensures that all client dom
	 * is readied in the proper order, maintaining the desired guarantee.
	 *
	 * @private
	 */
	class HostStack {
	  constructor() {
	    this.stack = [];
	  }

	  /**
	   * @param {*} inst Instance to add to hostStack
	   * @return {void}
	   */
	  registerHost(inst) {
	    if (this.stack.length) {
	      let host = this.stack[this.stack.length-1];
	      host._enqueueClient(inst);
	    }
	  }

	  /**
	   * @param {*} inst Instance to begin hosting
	   * @return {void}
	   */
	  beginHosting(inst) {
	    this.stack.push(inst);
	  }

	  /**
	   * @param {*} inst Instance to end hosting
	   * @return {void}
	   */
	  endHosting(inst) {
	    let stackLen = this.stack.length;
	    if (stackLen && this.stack[stackLen-1] == inst) {
	      this.stack.pop();
	    }
	  }
	}
	const hostStack = new HostStack();

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Creates a copy of `props` with each property normalized such that
	 * upgraded it is an object with at least a type property { type: Type}.
	 *
	 * @param {Object} props Properties to normalize
	 * @return {Object} Copy of input `props` with normalized properties that
	 * are in the form {type: Type}
	 * @private
	 */
	function normalizeProperties(props) {
	  const output = {};
	  for (let p in props) {
	    const o = props[p];
	    output[p] = (typeof o === 'function') ? {type: o} : o;
	  }
	  return output;
	}

	/**
	 * Mixin that provides a minimal starting point to using the PropertiesChanged
	 * mixin by providing a mechanism to declare properties in a static
	 * getter (e.g. static get properties() { return { foo: String } }). Changes
	 * are reported via the `_propertiesChanged` method.
	 *
	 * This mixin provides no specific support for rendering. Users are expected
	 * to create a ShadowRoot and put content into it and update it in whatever
	 * way makes sense. This can be done in reaction to properties changing by
	 * implementing `_propertiesChanged`.
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin PropertiesChanged
	 * @summary Mixin that provides a minimal starting point for using
	 * the PropertiesChanged mixin by providing a declarative `properties` object.
	 */
	const PropertiesMixin = dedupingMixin(superClass => {

	 /**
	  * @constructor
	  * @implements {Polymer_PropertiesChanged}
	  * @private
	  */
	 const base = PropertiesChanged(superClass);

	 /**
	  * Returns the super class constructor for the given class, if it is an
	  * instance of the PropertiesMixin.
	  *
	  * @param {!PropertiesMixinConstructor} constructor PropertiesMixin constructor
	  * @return {?PropertiesMixinConstructor} Super class constructor
	  */
	 function superPropertiesClass(constructor) {
	   const superCtor = Object.getPrototypeOf(constructor);

	   // Note, the `PropertiesMixin` class below only refers to the class
	   // generated by this call to the mixin; the instanceof test only works
	   // because the mixin is deduped and guaranteed only to apply once, hence
	   // all constructors in a proto chain will see the same `PropertiesMixin`
	   return (superCtor.prototype instanceof PropertiesMixin) ?
	     /** @type {!PropertiesMixinConstructor} */ (superCtor) : null;
	 }

	 /**
	  * Returns a memoized version of the `properties` object for the
	  * given class. Properties not in object format are converted to at
	  * least {type}.
	  *
	  * @param {PropertiesMixinConstructor} constructor PropertiesMixin constructor
	  * @return {Object} Memoized properties object
	  */
	 function ownProperties(constructor) {
	   if (!constructor.hasOwnProperty(JSCompiler_renameProperty('__ownProperties', constructor))) {
	     let props = null;

	     if (constructor.hasOwnProperty(JSCompiler_renameProperty('properties', constructor)) && constructor.properties) {
	       props = normalizeProperties(constructor.properties);
	     }

	     constructor.__ownProperties = props;
	   }
	   return constructor.__ownProperties;
	 }

	 /**
	  * @polymer
	  * @mixinClass
	  * @extends {base}
	  * @implements {Polymer_PropertiesMixin}
	  * @unrestricted
	  */
	 class PropertiesMixin extends base {

	   /**
	    * Implements standard custom elements getter to observes the attributes
	    * listed in `properties`.
	    * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	    */
	   static get observedAttributes() {
	     const props = this._properties;
	     return props ? Object.keys(props).map(p => this.attributeNameForProperty(p)) : [];
	   }

	   /**
	    * Finalizes an element definition, including ensuring any super classes
	    * are also finalized. This includes ensuring property
	    * accessors exist on the element prototype. This method calls
	    * `_finalizeClass` to finalize each constructor in the prototype chain.
	    * @return {void}
	    */
	   static finalize() {
	     if (!this.hasOwnProperty(JSCompiler_renameProperty('__finalized', this))) {
	       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
	       if (superCtor) {
	         superCtor.finalize();
	       }
	       this.__finalized = true;
	       this._finalizeClass();
	     }
	   }

	   /**
	    * Finalize an element class. This includes ensuring property
	    * accessors exist on the element prototype. This method is called by
	    * `finalize` and finalizes the class constructor.
	    *
	    * @protected
	    */
	   static _finalizeClass() {
	     const props = ownProperties(/** @type {!PropertiesMixinConstructor} */(this));
	     if (props) {
	       this.createProperties(props);
	     }
	   }

	   /**
	    * Returns a memoized version of all properties, including those inherited
	    * from super classes. Properties not in object format are converted to
	    * at least {type}.
	    *
	    * @return {Object} Object containing properties for this class
	    * @protected
	    */
	   static get _properties() {
	     if (!this.hasOwnProperty(
	       JSCompiler_renameProperty('__properties', this))) {
	       const superCtor = superPropertiesClass(/** @type {!PropertiesMixinConstructor} */(this));
	       this.__properties = Object.assign({},
	         superCtor && superCtor._properties,
	         ownProperties(/** @type {PropertiesMixinConstructor} */(this)));
	     }
	     return this.__properties;
	   }

	   /**
	    * Overrides `PropertiesChanged` method to return type specified in the
	    * static `properties` object for the given property.
	    * @param {string} name Name of property
	    * @return {*} Type to which to deserialize attribute
	    *
	    * @protected
	    */
	   static typeForProperty(name) {
	     const info = this._properties[name];
	     return info && info.type;
	   }

	   /**
	    * Overrides `PropertiesChanged` method and adds a call to
	    * `finalize` which lazily configures the element's property accessors.
	    * @override
	    * @return {void}
	    */
	   _initializeProperties() {
	     this.constructor.finalize();
	     super._initializeProperties();
	   }

	   /**
	    * Called when the element is added to a document.
	    * Calls `_enableProperties` to turn on property system from
	    * `PropertiesChanged`.
	    * @suppress {missingProperties} Super may or may not implement the callback
	    * @return {void}
	    * @override
	    */
	   connectedCallback() {
	     if (super.connectedCallback) {
	       super.connectedCallback();
	     }
	     this._enableProperties();
	   }

	   /**
	    * Called when the element is removed from a document
	    * @suppress {missingProperties} Super may or may not implement the callback
	    * @return {void}
	    * @override
	    */
	   disconnectedCallback() {
	     if (super.disconnectedCallback) {
	       super.disconnectedCallback();
	     }
	   }

	 }

	 return PropertiesMixin;

	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Element class mixin that provides the core API for Polymer's meta-programming
	 * features including template stamping, data-binding, attribute deserialization,
	 * and property change observation.
	 *
	 * Subclassers may provide the following static getters to return metadata
	 * used to configure Polymer's features for the class:
	 *
	 * - `static get is()`: When the template is provided via a `dom-module`,
	 *   users should return the `dom-module` id from a static `is` getter.  If
	 *   no template is needed or the template is provided directly via the
	 *   `template` getter, there is no need to define `is` for the element.
	 *
	 * - `static get template()`: Users may provide the template directly (as
	 *   opposed to via `dom-module`) by implementing a static `template` getter.
	 *   The getter must return an `HTMLTemplateElement`.
	 *
	 * - `static get properties()`: Should return an object describing
	 *   property-related metadata used by Polymer features (key: property name
	 *   value: object containing property metadata). Valid keys in per-property
	 *   metadata include:
	 *   - `type` (String|Number|Object|Array|...): Used by
	 *     `attributeChangedCallback` to determine how string-based attributes
	 *     are deserialized to JavaScript property values.
	 *   - `notify` (boolean): Causes a change in the property to fire a
	 *     non-bubbling event called `<property>-changed`. Elements that have
	 *     enabled two-way binding to the property use this event to observe changes.
	 *   - `readOnly` (boolean): Creates a getter for the property, but no setter.
	 *     To set a read-only property, use the private setter method
	 *     `_setProperty(property, value)`.
	 *   - `observer` (string): Observer method name that will be called when
	 *     the property changes. The arguments of the method are
	 *     `(value, previousValue)`.
	 *   - `computed` (string): String describing method and dependent properties
	 *     for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
	 *     Computed properties are read-only by default and can only be changed
	 *     via the return value of the computing method.
	 *
	 * - `static get observers()`: Array of strings describing multi-property
	 *   observer methods and their dependent properties (e.g.
	 *   `'observeABC(a, b, c)'`).
	 *
	 * The base class provides default implementations for the following standard
	 * custom element lifecycle callbacks; users may override these, but should
	 * call the super method to ensure
	 * - `constructor`: Run when the element is created or upgraded
	 * - `connectedCallback`: Run each time the element is connected to the
	 *   document
	 * - `disconnectedCallback`: Run each time the element is disconnected from
	 *   the document
	 * - `attributeChangedCallback`: Run each time an attribute in
	 *   `observedAttributes` is set or removed (note: this element's default
	 *   `observedAttributes` implementation will automatically return an array
	 *   of dash-cased attributes based on `properties`)
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin PropertyEffects
	 * @appliesMixin PropertiesMixin
	 * @property rootPath {string} Set to the value of `rootPath`,
	 *   which defaults to the main document path
	 * @property importPath {string} Set to the value of the class's static
	 *   `importPath` property, which defaults to the path of this element's
	 *   `dom-module` (when `is` is used), but can be overridden for other
	 *   import strategies.
	 * @summary Element class mixin that provides the core API for Polymer's
	 * meta-programming features.
	 */
	const ElementMixin = dedupingMixin(base => {

	  /**
	   * @constructor
	   * @extends {base}
	   * @implements {Polymer_PropertyEffects}
	   * @implements {Polymer_PropertiesMixin}
	   * @private
	   */
	  const polymerElementBase = PropertiesMixin(PropertyEffects(base));

	  /**
	   * Returns a list of properties with default values.
	   * This list is created as an optimization since it is a subset of
	   * the list returned from `_properties`.
	   * This list is used in `_initializeProperties` to set property defaults.
	   *
	   * @param {PolymerElementConstructor} constructor Element class
	   * @return {PolymerElementProperties} Flattened properties for this class
	   *   that have default values
	   * @private
	   */
	  function propertyDefaults(constructor) {
	    if (!constructor.hasOwnProperty(
	      JSCompiler_renameProperty('__propertyDefaults', constructor))) {
	      constructor.__propertyDefaults = null;
	      let props = constructor._properties;
	      for (let p in props) {
	        let info = props[p];
	        if ('value' in info) {
	          constructor.__propertyDefaults = constructor.__propertyDefaults || {};
	          constructor.__propertyDefaults[p] = info;
	        }
	      }
	    }
	    return constructor.__propertyDefaults;
	  }

	  /**
	   * Returns a memoized version of the the `observers` array.
	   * @param {PolymerElementConstructor} constructor Element class
	   * @return {Array} Array containing own observers for the given class
	   * @protected
	   */
	  function ownObservers(constructor) {
	    if (!constructor.hasOwnProperty(
	      JSCompiler_renameProperty('__ownObservers', constructor))) {
	        constructor.__ownObservers =
	        constructor.hasOwnProperty(JSCompiler_renameProperty('observers', constructor)) ?
	        /** @type {PolymerElementConstructor} */ (constructor).observers : null;
	    }
	    return constructor.__ownObservers;
	  }

	  /**
	   * Creates effects for a property.
	   *
	   * Note, once a property has been set to
	   * `readOnly`, `computed`, `reflectToAttribute`, or `notify`
	   * these values may not be changed. For example, a subclass cannot
	   * alter these settings. However, additional `observers` may be added
	   * by subclasses.
	   *
	   * The info object should may contain property metadata as follows:
	   *
	   * * `type`: {function} type to which an attribute matching the property
	   * is deserialized. Note the property is camel-cased from a dash-cased
	   * attribute. For example, 'foo-bar' attribute is deserialized to a
	   * property named 'fooBar'.
	   *
	   * * `readOnly`: {boolean} creates a readOnly property and
	   * makes a private setter for the private of the form '_setFoo' for a
	   * property 'foo',
	   *
	   * * `computed`: {string} creates a computed property. A computed property
	   * also automatically is set to `readOnly: true`. The value is calculated
	   * by running a method and arguments parsed from the given string. For
	   * example 'compute(foo)' will compute a given property when the
	   * 'foo' property changes by executing the 'compute' method. This method
	   * must return the computed value.
	   *
	   * * `reflectToAttribute`: {boolean} If true, the property value is reflected
	   * to an attribute of the same name. Note, the attribute is dash-cased
	   * so a property named 'fooBar' is reflected as 'foo-bar'.
	   *
	   * * `notify`: {boolean} sends a non-bubbling notification event when
	   * the property changes. For example, a property named 'foo' sends an
	   * event named 'foo-changed' with `event.detail` set to the value of
	   * the property.
	   *
	   * * observer: {string} name of a method that runs when the property
	   * changes. The arguments of the method are (value, previousValue).
	   *
	   * Note: Users may want control over modifying property
	   * effects via subclassing. For example, a user might want to make a
	   * reflectToAttribute property not do so in a subclass. We've chosen to
	   * disable this because it leads to additional complication.
	   * For example, a readOnly effect generates a special setter. If a subclass
	   * disables the effect, the setter would fail unexpectedly.
	   * Based on feedback, we may want to try to make effects more malleable
	   * and/or provide an advanced api for manipulating them.
	   * Also consider adding warnings when an effect cannot be changed.
	   *
	   * @param {!PolymerElement} proto Element class prototype to add accessors
	   *   and effects to
	   * @param {string} name Name of the property.
	   * @param {Object} info Info object from which to create property effects.
	   * Supported keys:
	   * @param {Object} allProps Flattened map of all properties defined in this
	   *   element (including inherited properties)
	   * @return {void}
	   * @private
	   */
	  function createPropertyFromConfig(proto, name, info, allProps) {
	    // computed forces readOnly...
	    if (info.computed) {
	      info.readOnly = true;
	    }
	    // Note, since all computed properties are readOnly, this prevents
	    // adding additional computed property effects (which leads to a confusing
	    // setup where multiple triggers for setting a property)
	    // While we do have `hasComputedEffect` this is set on the property's
	    // dependencies rather than itself.
	    if (info.computed && !proto._hasReadOnlyEffect(name)) {
	      proto._createComputedProperty(name, info.computed, allProps);
	    }
	    if (info.readOnly && !proto._hasReadOnlyEffect(name)) {
	      proto._createReadOnlyProperty(name, !info.computed);
	    }
	    if (info.reflectToAttribute && !proto._hasReflectEffect(name)) {
	      proto._createReflectedProperty(name);
	    }
	    if (info.notify && !proto._hasNotifyEffect(name)) {
	      proto._createNotifyingProperty(name);
	    }
	    // always add observer
	    if (info.observer) {
	      proto._createPropertyObserver(name, info.observer, allProps[info.observer]);
	    }
	    // always create the mapping from attribute back to property for deserialization.
	    proto._addPropertyToAttributeMap(name);
	  }

	  /**
	   * Process all style elements in the element template. Styles with the
	   * `include` attribute are processed such that any styles in
	   * the associated "style modules" are included in the element template.
	   * @param {PolymerElementConstructor} klass Element class
	   * @param {!HTMLTemplateElement} template Template to process
	   * @param {string} is Name of element
	   * @param {string} baseURI Base URI for element
	   * @private
	   */
	  function processElementStyles(klass, template, is, baseURI) {
	    const templateStyles = template.content.querySelectorAll('style');
	    const stylesWithImports = stylesFromTemplate(template);
	    // insert styles from <link rel="import" type="css"> at the top of the template
	    const linkedStyles = stylesFromModuleImports(is);
	    const firstTemplateChild = template.content.firstElementChild;
	    for (let idx = 0; idx < linkedStyles.length; idx++) {
	      let s = linkedStyles[idx];
	      s.textContent = klass._processStyleText(s.textContent, baseURI);
	      template.content.insertBefore(s, firstTemplateChild);
	    }
	    // keep track of the last "concrete" style in the template we have encountered
	    let templateStyleIndex = 0;
	    // ensure all gathered styles are actually in this template.
	    for (let i = 0; i < stylesWithImports.length; i++) {
	      let s = stylesWithImports[i];
	      let templateStyle = templateStyles[templateStyleIndex];
	      // if the style is not in this template, it's been "included" and
	      // we put a clone of it in the template before the style that included it
	      if (templateStyle !== s) {
	        s = s.cloneNode(true);
	        templateStyle.parentNode.insertBefore(s, templateStyle);
	      } else {
	        templateStyleIndex++;
	      }
	      s.textContent = klass._processStyleText(s.textContent, baseURI);
	    }
	    if (window.ShadyCSS) {
	      window.ShadyCSS.prepareTemplate(template, is);
	    }
	  }

	  /**
	   * @polymer
	   * @mixinClass
	   * @unrestricted
	   * @implements {Polymer_ElementMixin}
	   */
	  class PolymerElement extends polymerElementBase {

	    /**
	     * Override of PropertiesMixin _finalizeClass to create observers and
	     * find the template.
	     * @return {void}
	     * @protected
	     * @override
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	   static _finalizeClass() {
	      super._finalizeClass();
	      if (this.hasOwnProperty(
	        JSCompiler_renameProperty('is', this)) &&  this.is) {
	        register(this.prototype);
	      }
	      const observers = ownObservers(this);
	      if (observers) {
	        this.createObservers(observers, this._properties);
	      }
	      // note: create "working" template that is finalized at instance time
	      let template = /** @type {PolymerElementConstructor} */ (this).template;
	      if (template) {
	        if (typeof template === 'string') {
	          console.error('template getter must return HTMLTemplateElement');
	          template = null;
	        } else {
	          template = template.cloneNode(true);
	        }
	      }

	      this.prototype._template = template;
	    }

	    /**
	     * Override of PropertiesChanged createProperties to create accessors
	     * and property effects for all of the properties.
	     * @return {void}
	     * @protected
	     * @override
	     */
	     static createProperties(props) {
	      for (let p in props) {
	        createPropertyFromConfig(this.prototype, p, props[p], props);
	      }
	    }

	    /**
	     * Creates observers for the given `observers` array.
	     * Leverages `PropertyEffects` to create observers.
	     * @param {Object} observers Array of observer descriptors for
	     *   this class
	     * @param {Object} dynamicFns Object containing keys for any properties
	     *   that are functions and should trigger the effect when the function
	     *   reference is changed
	     * @return {void}
	     * @protected
	     */
	    static createObservers(observers, dynamicFns) {
	      const proto = this.prototype;
	      for (let i=0; i < observers.length; i++) {
	        proto._createMethodObserver(observers[i], dynamicFns);
	      }
	    }

	    /**
	     * Returns the template that will be stamped into this element's shadow root.
	     *
	     * If a `static get is()` getter is defined, the default implementation
	     * will return the first `<template>` in a `dom-module` whose `id`
	     * matches this element's `is`.
	     *
	     * Users may override this getter to return an arbitrary template
	     * (in which case the `is` getter is unnecessary). The template returned
	     * must be an `HTMLTemplateElement`.
	     *
	     * Note that when subclassing, if the super class overrode the default
	     * implementation and the subclass would like to provide an alternate
	     * template via a `dom-module`, it should override this getter and
	     * return `DomModule.import(this.is, 'template')`.
	     *
	     * If a subclass would like to modify the super class template, it should
	     * clone it rather than modify it in place.  If the getter does expensive
	     * work such as cloning/modifying a template, it should memoize the
	     * template for maximum performance:
	     *
	     *   let memoizedTemplate;
	     *   class MySubClass extends MySuperClass {
	     *     static get template() {
	     *       if (!memoizedTemplate) {
	     *         memoizedTemplate = super.template.cloneNode(true);
	     *         let subContent = document.createElement('div');
	     *         subContent.textContent = 'This came from MySubClass';
	     *         memoizedTemplate.content.appendChild(subContent);
	     *       }
	     *       return memoizedTemplate;
	     *     }
	     *   }
	     *
	     * @return {HTMLTemplateElement|string} Template to be stamped
	     */
	    static get template() {
	      if (!this.hasOwnProperty(JSCompiler_renameProperty('_template', this))) {
	        this._template = DomModule && DomModule.import(
	          /** @type {PolymerElementConstructor}*/ (this).is, 'template') ||
	          // note: implemented so a subclass can retrieve the super
	          // template; call the super impl this way so that `this` points
	          // to the superclass.
	          Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.template;
	      }
	      return this._template;
	    }

	    /**
	     * Path matching the url from which the element was imported.
	     *
	     * This path is used to resolve url's in template style cssText.
	     * The `importPath` property is also set on element instances and can be
	     * used to create bindings relative to the import path.
	     *
	     * For elements defined in ES modules, users should implement
	     * `static get importMeta() { return import.meta; }`, and the default
	     * implementation of `importPath` will  return `import.meta.url`'s path.
	     * For elements defined in HTML imports, this getter will return the path
	     * to the document containing a `dom-module` element matching this
	     * element's static `is` property.
	     *
	     * Note, this path should contain a trailing `/`.
	     *
	     * @return {string} The import path for this element class
	     * @suppress {missingProperties}
	     */
	    static get importPath() {
	      if (!this.hasOwnProperty(JSCompiler_renameProperty('_importPath', this))) {
	        const meta = this.importMeta;
	        if (meta) {
	          this._importPath = pathFromUrl(meta.url);
	        } else {
	          const module = DomModule && DomModule.import(/** @type {PolymerElementConstructor} */ (this).is);
	          this._importPath = (module && module.assetpath) ||
	            Object.getPrototypeOf(/** @type {PolymerElementConstructor}*/ (this).prototype).constructor.importPath;
	        }
	      }
	      return this._importPath;
	    }

	    constructor() {
	      super();
	      /** @type {HTMLTemplateElement} */
	      this._template;
	      /** @type {string} */
	      this._importPath;
	      /** @type {string} */
	      this.rootPath;
	      /** @type {string} */
	      this.importPath;
	      /** @type {StampedTemplate | HTMLElement | ShadowRoot} */
	      this.root;
	      /** @type {!Object<string, !Element>} */
	      this.$;
	    }

	    /**
	     * Overrides the default `PropertyAccessors` to ensure class
	     * metaprogramming related to property accessors and effects has
	     * completed (calls `finalize`).
	     *
	     * It also initializes any property defaults provided via `value` in
	     * `properties` metadata.
	     *
	     * @return {void}
	     * @override
	     * @suppress {invalidCasts}
	     */
	    _initializeProperties() {
	      this.constructor.finalize();
	      // note: finalize template when we have access to `localName` to
	      // avoid dependence on `is` for polyfilling styling.
	      this.constructor._finalizeTemplate(/** @type {!HTMLElement} */(this).localName);
	      super._initializeProperties();
	      // set path defaults
	      this.rootPath = rootPath;
	      this.importPath = this.constructor.importPath;
	      // apply property defaults...
	      let p$ = propertyDefaults(this.constructor);
	      if (!p$) {
	        return;
	      }
	      for (let p in p$) {
	        let info = p$[p];
	        // Don't set default value if there is already an own property, which
	        // happens when a `properties` property with default but no effects had
	        // a property set (e.g. bound) by its host before upgrade
	        if (!this.hasOwnProperty(p)) {
	          let value = typeof info.value == 'function' ?
	            info.value.call(this) :
	            info.value;
	          // Set via `_setProperty` if there is an accessor, to enable
	          // initializing readOnly property defaults
	          if (this._hasAccessor(p)) {
	            this._setPendingProperty(p, value, true);
	          } else {
	            this[p] = value;
	          }
	        }
	      }
	    }

	    /**
	     * Gather style text for a style element in the template.
	     *
	     * @param {string} cssText Text containing styling to process
	     * @param {string} baseURI Base URI to rebase CSS paths against
	     * @return {string} The processed CSS text
	     * @protected
	     */
	    static _processStyleText(cssText, baseURI) {
	      return resolveCss(cssText, baseURI);
	    }

	    /**
	    * Configures an element `proto` to function with a given `template`.
	    * The element name `is` and extends `ext` must be specified for ShadyCSS
	    * style scoping.
	    *
	    * @param {string} is Tag name (or type extension name) for this element
	    * @return {void}
	    * @protected
	    */
	    static _finalizeTemplate(is) {
	      /** @const {HTMLTemplateElement} */
	      const template = this.prototype._template;
	      if (template && !template.__polymerFinalized) {
	        template.__polymerFinalized = true;
	        const importPath = this.importPath;
	        const baseURI = importPath ? resolveUrl(importPath) : '';
	        // e.g. support `include="module-name"`, and ShadyCSS
	        processElementStyles(this, template, is, baseURI);
	        this.prototype._bindTemplate(template);
	      }
	    }

	    /**
	     * Provides a default implementation of the standard Custom Elements
	     * `connectedCallback`.
	     *
	     * The default implementation enables the property effects system and
	     * flushes any pending properties, and updates shimmed CSS properties
	     * when using the ShadyCSS scoping/custom properties polyfill.
	     *
	     * @suppress {missingProperties, invalidCasts} Super may or may not implement the callback
	     * @return {void}
	     */
	    connectedCallback() {
	      if (window.ShadyCSS && this._template) {
	        window.ShadyCSS.styleElement(/** @type {!HTMLElement} */(this));
	      }
	      super.connectedCallback();
	    }

	    /**
	     * Stamps the element template.
	     *
	     * @return {void}
	     * @override
	     */
	    ready() {
	      if (this._template) {
	        this.root = this._stampTemplate(this._template);
	        this.$ = this.root.$;
	      }
	      super.ready();
	    }

	    /**
	     * Implements `PropertyEffects`'s `_readyClients` call. Attaches
	     * element dom by calling `_attachDom` with the dom stamped from the
	     * element's template via `_stampTemplate`. Note that this allows
	     * client dom to be attached to the element prior to any observers
	     * running.
	     *
	     * @return {void}
	     * @override
	     */
	    _readyClients() {
	      if (this._template) {
	        this.root = this._attachDom(/** @type {StampedTemplate} */(this.root));
	      }
	      // The super._readyClients here sets the clients initialized flag.
	      // We must wait to do this until after client dom is created/attached
	      // so that this flag can be checked to prevent notifications fired
	      // during this process from being handled before clients are ready.
	      super._readyClients();
	    }


	    /**
	     * Attaches an element's stamped dom to itself. By default,
	     * this method creates a `shadowRoot` and adds the dom to it.
	     * However, this method may be overridden to allow an element
	     * to put its dom in another location.
	     *
	     * @throws {Error}
	     * @suppress {missingReturn}
	     * @param {StampedTemplate} dom to attach to the element.
	     * @return {ShadowRoot} node to which the dom has been attached.
	     */
	    _attachDom(dom) {
	      if (this.attachShadow) {
	        if (dom) {
	          if (!this.shadowRoot) {
	            this.attachShadow({mode: 'open'});
	          }
	          this.shadowRoot.appendChild(dom);
	          return this.shadowRoot;
	        }
	        return null;
	      } else {
	        throw new Error('ShadowDOM not available. ' +
	          // TODO(sorvell): move to compile-time conditional when supported
	        'PolymerElement can create dom as children instead of in ' +
	        'ShadowDOM by setting `this.root = this;\` before \`ready\`.');
	      }
	    }

	    /**
	     * When using the ShadyCSS scoping and custom property shim, causes all
	     * shimmed styles in this element (and its subtree) to be updated
	     * based on current custom property values.
	     *
	     * The optional parameter overrides inline custom property styles with an
	     * object of properties where the keys are CSS properties, and the values
	     * are strings.
	     *
	     * Example: `this.updateStyles({'--color': 'blue'})`
	     *
	     * These properties are retained unless a value of `null` is set.
	     *
	     * Note: This function does not support updating CSS mixins.
	     * You can not dynamically change the value of an `@apply`.
	     *
	     * @param {Object=} properties Bag of custom property key/values to
	     *   apply to this element.
	     * @return {void}
	     * @suppress {invalidCasts}
	     */
	    updateStyles(properties) {
	      if (window.ShadyCSS) {
	        window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */(this), properties);
	      }
	    }

	    /**
	     * Rewrites a given URL relative to a base URL. The base URL defaults to
	     * the original location of the document containing the `dom-module` for
	     * this element. This method will return the same URL before and after
	     * bundling.
	     *
	     * Note that this function performs no resolution for URLs that start
	     * with `/` (absolute URLs) or `#` (hash identifiers).  For general purpose
	     * URL resolution, use `window.URL`.
	     *
	     * @param {string} url URL to resolve.
	     * @param {string=} base Optional base URL to resolve against, defaults
	     * to the element's `importPath`
	     * @return {string} Rewritten URL relative to base
	     */
	    resolveUrl(url, base) {
	      if (!base && this.importPath) {
	        base = resolveUrl(this.importPath);
	      }
	      return resolveUrl(url, base);
	    }

	    /**
	     * Overrides `PropertyAccessors` to add map of dynamic functions on
	     * template info, for consumption by `PropertyEffects` template binding
	     * code. This map determines which method templates should have accessors
	     * created for them.
	     *
	     * @override
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	    static _parseTemplateContent(template, templateInfo, nodeInfo) {
	      templateInfo.dynamicFns = templateInfo.dynamicFns || this._properties;
	      return super._parseTemplateContent(template, templateInfo, nodeInfo);
	    }

	  }

	  return PolymerElement;
	});

	/**
	 * Registers a class prototype for telemetry purposes.
	 * @param {HTMLElement} prototype Element prototype to register
	 * @this {this}
	 * @protected
	 */
	function register(prototype) {
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Class representing a static string value which can be used to filter
	 * strings by asseting that they have been created via this class. The
	 * `value` property returns the string passed to the constructor.
	 */
	class LiteralString {
	  constructor(string) {
	    /** @type {string} */
	    this.value = string.toString();
	  }
	  /**
	   * @return {string} LiteralString string value
	   * @override
	   */
	  toString() {
	    return this.value;
	  }
	}

	/**
	 * @param {*} value Object to stringify into HTML
	 * @return {string} HTML stringified form of `obj`
	 */
	function literalValue(value) {
	  if (value instanceof LiteralString) {
	    return /** @type {!LiteralString} */(value).value;
	  } else {
	    throw new Error(
	        `non-literal value passed to Polymer's htmlLiteral function: ${value}`
	    );
	  }
	}

	/**
	 * @param {*} value Object to stringify into HTML
	 * @return {string} HTML stringified form of `obj`
	 */
	function htmlValue(value) {
	  if (value instanceof HTMLTemplateElement) {
	    return /** @type {!HTMLTemplateElement } */(value).innerHTML;
	  } else if (value instanceof LiteralString) {
	    return literalValue(value);
	  } else {
	    throw new Error(
	        `non-template value passed to Polymer's html function: ${value}`);
	  }
	}

	/**
	 * A template literal tag that creates an HTML <template> element from the
	 * contents of the string.
	 *
	 * This allows you to write a Polymer Template in JavaScript.
	 *
	 * Templates can be composed by interpolating `HTMLTemplateElement`s in
	 * expressions in the JavaScript template literal. The nested template's
	 * `innerHTML` is included in the containing template.  The only other
	 * values allowed in expressions are those returned from `htmlLiteral`
	 * which ensures only literal values from JS source ever reach the HTML, to
	 * guard against XSS risks.
	 *
	 * All other values are disallowed in expressions to help prevent XSS
	 * attacks; however, `htmlLiteral` can be used to compose static
	 * string values into templates. This is useful to compose strings into
	 * places that do not accept html, like the css text of a `style`
	 * element.
	 *
	 * Example:
	 *
	 *     static get template() {
	 *       return html`
	 *         <style>:host{ content:"..." }</style>
	 *         <div class="shadowed">${this.partialTemplate}</div>
	 *         ${super.template}
	 *       `;
	 *     }
	 *     static get partialTemplate() { return html`<span>Partial!</span>`; }
	 *
	 * @param {!ITemplateArray} strings Constant parts of tagged template literal
	 * @param {...*} values Variable parts of tagged template literal
	 * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement
	 */
	const html = function html(strings, ...values) {
	  const template = /** @type {!HTMLTemplateElement} */(document.createElement('template'));
	  template.innerHTML = values.reduce((acc, v, idx) =>
	      acc + htmlValue(v) + strings[idx + 1], strings[0]);
	  return template;
	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Base class that provides the core API for Polymer's meta-programming
	 * features including template stamping, data-binding, attribute deserialization,
	 * and property change observation.
	 *
	 * @customElement
	 * @polymer
	 * @constructor
	 * @implements {Polymer_ElementMixin}
	 * @extends HTMLElement
	 * @appliesMixin ElementMixin
	 * @summary Custom element base class that provides the core API for Polymer's
	 *   key meta-programming features including template stamping, data-binding,
	 *   attribute deserialization, and property change observation
	 */
	const PolymerElement = ElementMixin(HTMLElement);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// Common implementation for mixin & behavior
	function mutablePropertyChange(inst, property, value, old, mutableData) {
	  let isObject;
	  if (mutableData) {
	    isObject = (typeof value === 'object' && value !== null);
	    // Pull `old` for Objects from temp cache, but treat `null` as a primitive
	    if (isObject) {
	      old = inst.__dataTemp[property];
	    }
	  }
	  // Strict equality check, but return false for NaN===NaN
	  let shouldChange = (old !== value && (old === old || value === value));
	  // Objects are stored in temporary cache (cleared at end of
	  // turn), which is used for dirty-checking
	  if (isObject && shouldChange) {
	    inst.__dataTemp[property] = value;
	  }
	  return shouldChange;
	}

	/**
	 * Element class mixin to skip strict dirty-checking for objects and arrays
	 * (always consider them to be "dirty"), for use on elements utilizing
	 * `PropertyEffects`
	 *
	 * By default, `PropertyEffects` performs strict dirty checking on
	 * objects, which means that any deep modifications to an object or array will
	 * not be propagated unless "immutable" data patterns are used (i.e. all object
	 * references from the root to the mutation were changed).
	 *
	 * Polymer also provides a proprietary data mutation and path notification API
	 * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
	 * mutation and notification of deep changes in an object graph to all elements
	 * bound to the same object graph.
	 *
	 * In cases where neither immutable patterns nor the data mutation API can be
	 * used, applying this mixin will cause Polymer to skip dirty checking for
	 * objects and arrays (always consider them to be "dirty").  This allows a
	 * user to make a deep modification to a bound object graph, and then either
	 * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
	 * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
	 * elements that wish to be updated based on deep mutations must apply this
	 * mixin or otherwise skip strict dirty checking for objects/arrays.
	 * Specifically, any elements in the binding tree between the source of a
	 * mutation and the consumption of it must apply this mixin or enable the
	 * `OptionalMutableData` mixin.
	 *
	 * In order to make the dirty check strategy configurable, see
	 * `OptionalMutableData`.
	 *
	 * Note, the performance characteristics of propagating large object graphs
	 * will be worse as opposed to using strict dirty checking with immutable
	 * patterns or Polymer's path notification API.
	 *
	 * @mixinFunction
	 * @polymer
	 * @summary Element class mixin to skip strict dirty-checking for objects
	 *   and arrays
	 */
	const MutableData = dedupingMixin(superClass => {

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_MutableData}
	   */
	  class MutableData extends superClass {
	    /**
	     * Overrides `PropertyEffects` to provide option for skipping
	     * strict equality checking for Objects and Arrays.
	     *
	     * This method pulls the value to dirty check against from the `__dataTemp`
	     * cache (rather than the normal `__data` cache) for Objects.  Since the temp
	     * cache is cleared at the end of a turn, this implementation allows
	     * side-effects of deep object changes to be processed by re-setting the
	     * same object (using the temp cache as an in-turn backstop to prevent
	     * cycles due to 2-way notification).
	     *
	     * @param {string} property Property name
	     * @param {*} value New property value
	     * @param {*} old Previous property value
	     * @return {boolean} Whether the property should be considered a change
	     * @protected
	     */
	    _shouldPropertyChange(property, value, old) {
	      return mutablePropertyChange(this, property, value, old, true);
	    }

	  }

	  return MutableData;

	});

	/**
	 * Element class mixin to add the optional ability to skip strict
	 * dirty-checking for objects and arrays (always consider them to be
	 * "dirty") by setting a `mutable-data` attribute on an element instance.
	 *
	 * By default, `PropertyEffects` performs strict dirty checking on
	 * objects, which means that any deep modifications to an object or array will
	 * not be propagated unless "immutable" data patterns are used (i.e. all object
	 * references from the root to the mutation were changed).
	 *
	 * Polymer also provides a proprietary data mutation and path notification API
	 * (e.g. `notifyPath`, `set`, and array mutation API's) that allow efficient
	 * mutation and notification of deep changes in an object graph to all elements
	 * bound to the same object graph.
	 *
	 * In cases where neither immutable patterns nor the data mutation API can be
	 * used, applying this mixin will allow Polymer to skip dirty checking for
	 * objects and arrays (always consider them to be "dirty").  This allows a
	 * user to make a deep modification to a bound object graph, and then either
	 * simply re-set the object (e.g. `this.items = this.items`) or call `notifyPath`
	 * (e.g. `this.notifyPath('items')`) to update the tree.  Note that all
	 * elements that wish to be updated based on deep mutations must apply this
	 * mixin or otherwise skip strict dirty checking for objects/arrays.
	 * Specifically, any elements in the binding tree between the source of a
	 * mutation and the consumption of it must enable this mixin or apply the
	 * `MutableData` mixin.
	 *
	 * While this mixin adds the ability to forgo Object/Array dirty checking,
	 * the `mutableData` flag defaults to false and must be set on the instance.
	 *
	 * Note, the performance characteristics of propagating large object graphs
	 * will be worse by relying on `mutableData: true` as opposed to using
	 * strict dirty checking with immutable patterns or Polymer's path notification
	 * API.
	 *
	 * @mixinFunction
	 * @polymer
	 * @summary Element class mixin to optionally skip strict dirty-checking
	 *   for objects and arrays
	 */
	const OptionalMutableData = dedupingMixin(superClass => {

	  /**
	   * @mixinClass
	   * @polymer
	   * @implements {Polymer_OptionalMutableData}
	   */
	  class OptionalMutableData extends superClass {

	    static get properties() {
	      return {
	        /**
	         * Instance-level flag for configuring the dirty-checking strategy
	         * for this element.  When true, Objects and Arrays will skip dirty
	         * checking, otherwise strict equality checking will be used.
	         */
	        mutableData: Boolean
	      };
	    }

	    /**
	     * Overrides `PropertyEffects` to provide option for skipping
	     * strict equality checking for Objects and Arrays.
	     *
	     * When `this.mutableData` is true on this instance, this method
	     * pulls the value to dirty check against from the `__dataTemp` cache
	     * (rather than the normal `__data` cache) for Objects.  Since the temp
	     * cache is cleared at the end of a turn, this implementation allows
	     * side-effects of deep object changes to be processed by re-setting the
	     * same object (using the temp cache as an in-turn backstop to prevent
	     * cycles due to 2-way notification).
	     *
	     * @param {string} property Property name
	     * @param {*} value New property value
	     * @param {*} old Previous property value
	     * @return {boolean} Whether the property should be considered a change
	     * @protected
	     */
	    _shouldPropertyChange(property, value, old) {
	      return mutablePropertyChange(this, property, value, old, this.mutableData);
	    }
	  }

	  return OptionalMutableData;

	});

	// Export for use by legacy behavior
	MutableData._mutablePropertyChange = mutablePropertyChange;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// Base class for HTMLTemplateElement extension that has property effects
	// machinery for propagating host properties to children. This is an ES5
	// class only because Babel (incorrectly) requires super() in the class
	// constructor even though no `this` is used and it returns an instance.
	let newInstance = null;

	/**
	 * @constructor
	 * @extends {HTMLTemplateElement}
	 * @private
	 */
	function HTMLTemplateElementExtension() { return newInstance; }
	HTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {
	  constructor: {
	    value: HTMLTemplateElementExtension,
	    writable: true
	  }
	});

	/**
	 * @constructor
	 * @implements {Polymer_PropertyEffects}
	 * @extends {HTMLTemplateElementExtension}
	 * @private
	 */
	const DataTemplate = PropertyEffects(HTMLTemplateElementExtension);

	/**
	 * @constructor
	 * @implements {Polymer_MutableData}
	 * @extends {DataTemplate}
	 * @private
	 */
	const MutableDataTemplate = MutableData(DataTemplate);

	// Applies a DataTemplate subclass to a <template> instance
	function upgradeTemplate(template, constructor) {
	  newInstance = template;
	  Object.setPrototypeOf(template, constructor.prototype);
	  new constructor();
	  newInstance = null;
	}

	/**
	 * Base class for TemplateInstance.
	 * @constructor
	 * @implements {Polymer_PropertyEffects}
	 * @private
	 */
	const base = PropertyEffects(class {});

	/**
	 * @polymer
	 * @customElement
	 * @appliesMixin PropertyEffects
	 * @unrestricted
	 */
	class TemplateInstanceBase extends base {
	  constructor(props) {
	    super();
	    this._configureProperties(props);
	    this.root = this._stampTemplate(this.__dataHost);
	    // Save list of stamped children
	    let children = this.children = [];
	    for (let n = this.root.firstChild; n; n=n.nextSibling) {
	      children.push(n);
	      n.__templatizeInstance = this;
	    }
	    if (this.__templatizeOwner &&
	      this.__templatizeOwner.__hideTemplateChildren__) {
	      this._showHideChildren(true);
	    }
	    // Flush props only when props are passed if instance props exist
	    // or when there isn't instance props.
	    let options = this.__templatizeOptions;
	    if ((props && options.instanceProps) || !options.instanceProps) {
	      this._enableProperties();
	    }
	  }
	  /**
	   * Configure the given `props` by calling `_setPendingProperty`. Also
	   * sets any properties stored in `__hostProps`.
	   * @private
	   * @param {Object} props Object of property name-value pairs to set.
	   * @return {void}
	   */
	  _configureProperties(props) {
	    let options = this.__templatizeOptions;
	    if (options.forwardHostProp) {
	      for (let hprop in this.__hostProps) {
	        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);
	      }
	    }
	    // Any instance props passed in the constructor will overwrite host props;
	    // normally this would be a user error but we don't specifically filter them
	    for (let iprop in props) {
	      this._setPendingProperty(iprop, props[iprop]);
	    }
	  }
	  /**
	   * Forwards a host property to this instance.  This method should be
	   * called on instances from the `options.forwardHostProp` callback
	   * to propagate changes of host properties to each instance.
	   *
	   * Note this method enqueues the change, which are flushed as a batch.
	   *
	   * @param {string} prop Property or path name
	   * @param {*} value Value of the property to forward
	   * @return {void}
	   */
	  forwardHostProp(prop, value) {
	    if (this._setPendingPropertyOrPath(prop, value, false, true)) {
	      this.__dataHost._enqueueClient(this);
	    }
	  }

	  /**
	   * Override point for adding custom or simulated event handling.
	   *
	   * @param {!Node} node Node to add event listener to
	   * @param {string} eventName Name of event
	   * @param {function(!Event):void} handler Listener function to add
	   * @return {void}
	   */
	  _addEventListenerToNode(node, eventName, handler) {
	    if (this._methodHost && this.__templatizeOptions.parentModel) {
	      // If this instance should be considered a parent model, decorate
	      // events this template instance as `model`
	      this._methodHost._addEventListenerToNode(node, eventName, (e) => {
	        e.model = this;
	        handler(e);
	      });
	    } else {
	      // Otherwise delegate to the template's host (which could be)
	      // another template instance
	      let templateHost = this.__dataHost.__dataHost;
	      if (templateHost) {
	        templateHost._addEventListenerToNode(node, eventName, handler);
	      }
	    }
	  }
	  /**
	   * Shows or hides the template instance top level child elements. For
	   * text nodes, `textContent` is removed while "hidden" and replaced when
	   * "shown."
	   * @param {boolean} hide Set to true to hide the children;
	   * set to false to show them.
	   * @return {void}
	   * @protected
	   */
	  _showHideChildren(hide) {
	    let c = this.children;
	    for (let i=0; i<c.length; i++) {
	      let n = c[i];
	      // Ignore non-changes
	      if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {
	        if (n.nodeType === Node.TEXT_NODE) {
	          if (hide) {
	            n.__polymerTextContent__ = n.textContent;
	            n.textContent = '';
	          } else {
	            n.textContent = n.__polymerTextContent__;
	          }
	        // remove and replace slot
	        } else if (n.localName === 'slot') {
	          if (hide) {
	            n.__polymerReplaced__ = document.createComment('hidden-slot');
	            n.parentNode.replaceChild(n.__polymerReplaced__, n);
	          } else {
	            const replace = n.__polymerReplaced__;
	            if (replace) {
	              replace.parentNode.replaceChild(n, replace);
	            }
	          }
	        }

	        else if (n.style) {
	          if (hide) {
	            n.__polymerDisplay__ = n.style.display;
	            n.style.display = 'none';
	          } else {
	            n.style.display = n.__polymerDisplay__;
	          }
	        }
	      }
	      n.__hideTemplateChildren__ = hide;
	      if (n._showHideChildren) {
	        n._showHideChildren(hide);
	      }
	    }
	  }
	  /**
	   * Overrides default property-effects implementation to intercept
	   * textContent bindings while children are "hidden" and cache in
	   * private storage for later retrieval.
	   *
	   * @param {!Node} node The node to set a property on
	   * @param {string} prop The property to set
	   * @param {*} value The value to set
	   * @return {void}
	   * @protected
	   */
	  _setUnmanagedPropertyToNode(node, prop, value) {
	    if (node.__hideTemplateChildren__ &&
	        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {
	      node.__polymerTextContent__ = value;
	    } else {
	      super._setUnmanagedPropertyToNode(node, prop, value);
	    }
	  }
	  /**
	   * Find the parent model of this template instance.  The parent model
	   * is either another templatize instance that had option `parentModel: true`,
	   * or else the host element.
	   *
	   * @return {!Polymer_PropertyEffects} The parent model of this instance
	   */
	  get parentModel() {
	    let model = this.__parentModel;
	    if (!model) {
	      let options;
	      model = this;
	      do {
	        // A template instance's `__dataHost` is a <template>
	        // `model.__dataHost.__dataHost` is the template's host
	        model = model.__dataHost.__dataHost;
	      } while ((options = model.__templatizeOptions) && !options.parentModel);
	      this.__parentModel = model;
	    }
	    return model;
	  }

	  /**
	   * Stub of HTMLElement's `dispatchEvent`, so that effects that may
	   * dispatch events safely no-op.
	   *
	   * @param {Event} event Event to dispatch
	   * @return {boolean} Always true.
	   */
	   dispatchEvent(event) { // eslint-disable-line no-unused-vars
	     return true;
	  }
	}

	/** @type {!DataTemplate} */
	TemplateInstanceBase.prototype.__dataHost;
	/** @type {!TemplatizeOptions} */
	TemplateInstanceBase.prototype.__templatizeOptions;
	/** @type {!Polymer_PropertyEffects} */
	TemplateInstanceBase.prototype._methodHost;
	/** @type {!Object} */
	TemplateInstanceBase.prototype.__templatizeOwner;
	/** @type {!Object} */
	TemplateInstanceBase.prototype.__hostProps;

	/**
	 * @constructor
	 * @extends {TemplateInstanceBase}
	 * @implements {Polymer_MutableData}
	 * @private
	 */
	const MutableTemplateInstanceBase = MutableData(TemplateInstanceBase);

	function findMethodHost(template) {
	  // Technically this should be the owner of the outermost template.
	  // In shadow dom, this is always getRootNode().host, but we can
	  // approximate this via cooperation with our dataHost always setting
	  // `_methodHost` as long as there were bindings (or id's) on this
	  // instance causing it to get a dataHost.
	  let templateHost = template.__dataHost;
	  return templateHost && templateHost._methodHost || templateHost;
	}

	/* eslint-disable valid-jsdoc */
	/**
	 * @suppress {missingProperties} class.prototype is not defined for some reason
	 */
	function createTemplatizerClass(template, templateInfo, options) {
	  // Anonymous class created by the templatize
	  let base = options.mutableData ?
	    MutableTemplateInstanceBase : TemplateInstanceBase;
	  /**
	   * @constructor
	   * @extends {base}
	   * @private
	   */
	  let klass = class extends base { };
	  klass.prototype.__templatizeOptions = options;
	  klass.prototype._bindTemplate(template);
	  addNotifyEffects(klass, template, templateInfo, options);
	  return klass;
	}

	/**
	 * @suppress {missingProperties} class.prototype is not defined for some reason
	 */
	function addPropagateEffects(template, templateInfo, options) {
	  let userForwardHostProp = options.forwardHostProp;
	  if (userForwardHostProp) {
	    // Provide data API and property effects on memoized template class
	    let klass = templateInfo.templatizeTemplateClass;
	    if (!klass) {
	      let base = options.mutableData ? MutableDataTemplate : DataTemplate;
	      /** @private */
	      klass = templateInfo.templatizeTemplateClass =
	        class TemplatizedTemplate extends base {};
	      // Add template - >instances effects
	      // and host <- template effects
	      let hostProps = templateInfo.hostProps;
	      for (let prop in hostProps) {
	        klass.prototype._addPropertyEffect('_host_' + prop,
	          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,
	          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});
	        klass.prototype._createNotifyingProperty('_host_' + prop);
	      }
	    }
	    upgradeTemplate(template, klass);
	    // Mix any pre-bound data into __data; no need to flush this to
	    // instances since they pull from the template at instance-time
	    if (template.__dataProto) {
	      // Note, generally `__dataProto` could be chained, but it's guaranteed
	      // to not be since this is a vanilla template we just added effects to
	      Object.assign(template.__data, template.__dataProto);
	    }
	    // Clear any pending data for performance
	    template.__dataTemp = {};
	    template.__dataPending = null;
	    template.__dataOld = null;
	    template._enableProperties();
	  }
	}
	/* eslint-enable valid-jsdoc */

	function createForwardHostPropEffect(hostProp, userForwardHostProp) {
	  return function forwardHostProp(template, prop, props) {
	    userForwardHostProp.call(template.__templatizeOwner,
	      prop.substring('_host_'.length), props[prop]);
	  };
	}

	function addNotifyEffects(klass, template, templateInfo, options) {
	  let hostProps = templateInfo.hostProps || {};
	  for (let iprop in options.instanceProps) {
	    delete hostProps[iprop];
	    let userNotifyInstanceProp = options.notifyInstanceProp;
	    if (userNotifyInstanceProp) {
	      klass.prototype._addPropertyEffect(iprop,
	        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
	        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});
	    }
	  }
	  if (options.forwardHostProp && template.__dataHost) {
	    for (let hprop in hostProps) {
	      klass.prototype._addPropertyEffect(hprop,
	        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,
	        {fn: createNotifyHostPropEffect()});
	    }
	  }
	}

	function createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {
	  return function notifyInstanceProp(inst, prop, props) {
	    userNotifyInstanceProp.call(inst.__templatizeOwner,
	      inst, prop, props[prop]);
	  };
	}

	function createNotifyHostPropEffect() {
	  return function notifyHostProp(inst, prop, props) {
	    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);
	  };
	}

	/**
	 * Returns an anonymous `PropertyEffects` class bound to the
	 * `<template>` provided.  Instancing the class will result in the
	 * template being stamped into a document fragment stored as the instance's
	 * `root` property, after which it can be appended to the DOM.
	 *
	 * Templates may utilize all Polymer data-binding features as well as
	 * declarative event listeners.  Event listeners and inline computing
	 * functions in the template will be called on the host of the template.
	 *
	 * The constructor returned takes a single argument dictionary of initial
	 * property values to propagate into template bindings.  Additionally
	 * host properties can be forwarded in, and instance properties can be
	 * notified out by providing optional callbacks in the `options` dictionary.
	 *
	 * Valid configuration in `options` are as follows:
	 *
	 * - `forwardHostProp(property, value)`: Called when a property referenced
	 *   in the template changed on the template's host. As this library does
	 *   not retain references to templates instanced by the user, it is the
	 *   templatize owner's responsibility to forward host property changes into
	 *   user-stamped instances.  The `instance.forwardHostProp(property, value)`
	 *    method on the generated class should be called to forward host
	 *   properties into the template to prevent unnecessary property-changed
	 *   notifications. Any properties referenced in the template that are not
	 *   defined in `instanceProps` will be notified up to the template's host
	 *   automatically.
	 * - `instanceProps`: Dictionary of property names that will be added
	 *   to the instance by the templatize owner.  These properties shadow any
	 *   host properties, and changes within the template to these properties
	 *   will result in `notifyInstanceProp` being called.
	 * - `mutableData`: When `true`, the generated class will skip strict
	 *   dirty-checking for objects and arrays (always consider them to be
	 *   "dirty").
	 * - `notifyInstanceProp(instance, property, value)`: Called when
	 *   an instance property changes.  Users may choose to call `notifyPath`
	 *   on e.g. the owner to notify the change.
	 * - `parentModel`: When `true`, events handled by declarative event listeners
	 *   (`on-event="handler"`) will be decorated with a `model` property pointing
	 *   to the template instance that stamped it.  It will also be returned
	 *   from `instance.parentModel` in cases where template instance nesting
	 *   causes an inner model to shadow an outer model.
	 *
	 * All callbacks are called bound to the `owner`. Any context
	 * needed for the callbacks (such as references to `instances` stamped)
	 * should be stored on the `owner` such that they can be retrieved via
	 * `this`.
	 *
	 * When `options.forwardHostProp` is declared as an option, any properties
	 * referenced in the template will be automatically forwarded from the host of
	 * the `<template>` to instances, with the exception of any properties listed in
	 * the `options.instanceProps` object.  `instanceProps` are assumed to be
	 * managed by the owner of the instances, either passed into the constructor
	 * or set after the fact.  Note, any properties passed into the constructor will
	 * always be set to the instance (regardless of whether they would normally
	 * be forwarded from the host).
	 *
	 * Note that `templatize()` can be run only once for a given `<template>`.
	 * Further calls will result in an error. Also, there is a special
	 * behavior if the template was duplicated through a mechanism such as
	 * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to
	 * `templatize()` return the same class for all duplicates of a template.
	 * The class returned from `templatize()` is generated only once using
	 * the `options` from the first call. This means that any `options`
	 * provided to subsequent calls will be ignored. Therefore, it is very
	 * important not to close over any variables inside the callbacks. Also,
	 * arrow functions must be avoided because they bind the outer `this`.
	 * Inside the callbacks, any contextual information can be accessed
	 * through `this`, which points to the `owner`.
	 *
	 * @param {!HTMLTemplateElement} template Template to templatize
	 * @param {Polymer_PropertyEffects=} owner Owner of the template instances;
	 *   any optional callbacks will be bound to this owner.
	 * @param {Object=} options Options dictionary (see summary for details)
	 * @return {function(new:TemplateInstanceBase)} Generated class bound to the template
	 *   provided
	 * @suppress {invalidCasts}
	 */
	function templatize(template, owner, options) {
	  options = /** @type {!TemplatizeOptions} */(options || {});
	  if (template.__templatizeOwner) {
	    throw new Error('A <template> can only be templatized once');
	  }
	  template.__templatizeOwner = owner;
	  const ctor = owner ? owner.constructor : TemplateInstanceBase;
	  let templateInfo = ctor._parseTemplate(template);
	  // Get memoized base class for the prototypical template, which
	  // includes property effects for binding template & forwarding
	  let baseClass = templateInfo.templatizeInstanceClass;
	  if (!baseClass) {
	    baseClass = createTemplatizerClass(template, templateInfo, options);
	    templateInfo.templatizeInstanceClass = baseClass;
	  }
	  // Host property forwarding must be installed onto template instance
	  addPropagateEffects(template, templateInfo, options);
	  // Subclass base class and add reference for this specific template
	  /** @private */
	  let klass = class TemplateInstance extends baseClass {};
	  klass.prototype._methodHost = findMethodHost(template);
	  klass.prototype.__dataHost = template;
	  klass.prototype.__templatizeOwner = owner;
	  klass.prototype.__hostProps = templateInfo.hostProps;
	  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign
	  return klass;
	}

	/**
	 * Returns the template "model" associated with a given element, which
	 * serves as the binding scope for the template instance the element is
	 * contained in. A template model is an instance of
	 * `TemplateInstanceBase`, and should be used to manipulate data
	 * associated with this template instance.
	 *
	 * Example:
	 *
	 *   let model = modelForElement(el);
	 *   if (model.index < 10) {
	 *     model.set('item.checked', true);
	 *   }
	 *
	 * @param {HTMLTemplateElement} template The model will be returned for
	 *   elements stamped from this template
	 * @param {Node=} node Node for which to return a template model.
	 * @return {TemplateInstanceBase} Template instance representing the
	 *   binding scope for the element
	 */
	function modelForElement(template, node) {
	  let model;
	  while (node) {
	    // An element with a __templatizeInstance marks the top boundary
	    // of a scope; walk up until we find one, and then ensure that
	    // its __dataHost matches `this`, meaning this dom-repeat stamped it
	    if ((model = node.__templatizeInstance)) {
	      // Found an element stamped by another template; keep walking up
	      // from its __dataHost
	      if (model.__dataHost != template) {
	        node = model.__dataHost;
	      } else {
	        return model;
	      }
	    } else {
	      // Still in a template scope, keep going up until
	      // a __templatizeInstance is found
	      node = node.parentNode;
	    }
	  }
	  return null;
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @summary Collapse multiple callbacks into one invocation after a timer.
	 */
	const Debouncer = class Debouncer {
	  constructor() {
	    this._asyncModule = null;
	    this._callback = null;
	    this._timer = null;
	  }
	  /**
	   * Sets the scheduler; that is, a module with the Async interface,
	   * a callback and optional arguments to be passed to the run function
	   * from the async module.
	   *
	   * @param {!AsyncInterface} asyncModule Object with Async interface.
	   * @param {function()} callback Callback to run.
	   * @return {void}
	   */
	  setConfig(asyncModule, callback) {
	    this._asyncModule = asyncModule;
	    this._callback = callback;
	    this._timer = this._asyncModule.run(() => {
	      this._timer = null;
	      this._callback();
	    });
	  }
	  /**
	   * Cancels an active debouncer and returns a reference to itself.
	   *
	   * @return {void}
	   */
	  cancel() {
	    if (this.isActive()) {
	      this._asyncModule.cancel(this._timer);
	      this._timer = null;
	    }
	  }
	  /**
	   * Flushes an active debouncer and returns a reference to itself.
	   *
	   * @return {void}
	   */
	  flush() {
	    if (this.isActive()) {
	      this.cancel();
	      this._callback();
	    }
	  }
	  /**
	   * Returns true if the debouncer is active.
	   *
	   * @return {boolean} True if active.
	   */
	  isActive() {
	    return this._timer != null;
	  }
	  /**
	   * Creates a debouncer if no debouncer is passed as a parameter
	   * or it cancels an active debouncer otherwise. The following
	   * example shows how a debouncer can be called multiple times within a
	   * microtask and "debounced" such that the provided callback function is
	   * called once. Add this method to a custom element:
	   *
	   * ```js
	   * import {microTask} from '@polymer/polymer/lib/utils/async.js';
	   * import {Debouncer} from '@polymer/polymer/lib/utils/debounce.js';
	   * // ...
	   *
	   * _debounceWork() {
	   *   this._debounceJob = Debouncer.debounce(this._debounceJob,
	   *       microTask, () => this._doWork());
	   * }
	   * ```
	   *
	   * If the `_debounceWork` method is called multiple times within the same
	   * microtask, the `_doWork` function will be called only once at the next
	   * microtask checkpoint.
	   *
	   * Note: In testing it is often convenient to avoid asynchrony. To accomplish
	   * this with a debouncer, you can use `enqueueDebouncer` and
	   * `flush`. For example, extend the above example by adding
	   * `enqueueDebouncer(this._debounceJob)` at the end of the
	   * `_debounceWork` method. Then in a test, call `flush` to ensure
	   * the debouncer has completed.
	   *
	   * @param {Debouncer?} debouncer Debouncer object.
	   * @param {!AsyncInterface} asyncModule Object with Async interface
	   * @param {function()} callback Callback to run.
	   * @return {!Debouncer} Returns a debouncer object.
	   */
	  static debounce(debouncer, asyncModule, callback) {
	    if (debouncer instanceof Debouncer) {
	      debouncer.cancel();
	    } else {
	      debouncer = new Debouncer();
	    }
	    debouncer.setConfig(asyncModule, callback);
	    return debouncer;
	  }
	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let debouncerQueue = [];

	/**
	 * Adds a `Debouncer` to a list of globally flushable tasks.
	 *
	 * @param {!Debouncer} debouncer Debouncer to enqueue
	 * @return {void}
	 */
	const enqueueDebouncer = function(debouncer) {
	  debouncerQueue.push(debouncer);
	};

	function flushDebouncers() {
	  const didFlush = Boolean(debouncerQueue.length);
	  while (debouncerQueue.length) {
	    try {
	      debouncerQueue.shift().flush();
	    } catch(e) {
	      setTimeout(() => {
	        throw e;
	      });
	    }
	  }
	  return didFlush;
	}

	/**
	 * Forces several classes of asynchronously queued tasks to flush:
	 * - Debouncers added via `enqueueDebouncer`
	 * - ShadyDOM distribution
	 *
	 * @return {void}
	 */
	const flush = function() {
	  let shadyDOM, debouncers;
	  do {
	    shadyDOM = window.ShadyDOM && ShadyDOM.flush();
	    if (window.ShadyCSS && window.ShadyCSS.ScopingShim) {
	      window.ShadyCSS.ScopingShim.flush();
	    }
	    debouncers = flushDebouncers();
	  } while (shadyDOM || debouncers);
	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @constructor
	 * @implements {Polymer_OptionalMutableData}
	 * @extends {PolymerElement}
	 * @private
	 */
	const domRepeatBase = OptionalMutableData(PolymerElement);

	/**
	 * The `<dom-repeat>` element will automatically stamp and binds one instance
	 * of template content to each object in a user-provided array.
	 * `dom-repeat` accepts an `items` property, and one instance of the template
	 * is stamped for each item into the DOM at the location of the `dom-repeat`
	 * element.  The `item` property will be set on each instance's binding
	 * scope, thus templates should bind to sub-properties of `item`.
	 *
	 * Example:
	 *
	 * ```html
	 * <dom-module id="employee-list">
	 *
	 *   <template>
	 *
	 *     <div> Employee list: </div>
	 *     <dom-repeat items="{{employees}}">
	 *       <template>
	 *         <div>First name: <span>{{item.first}}</span></div>
	 *         <div>Last name: <span>{{item.last}}</span></div>
	 *       </template>
	 *     </dom-repeat>
	 *
	 *   </template>
	 *
	 * </dom-module>
	 * ```
	 *
	 * With the following custom element definition:
	 *
	 * ```js
	 * class EmployeeList extends PolymerElement {
	 *   static get is() { return 'employee-list'; }
	 *   static get properties() {
	 *     return {
	 *       employees: {
	 *         value() {
	 *           return [
	 *             {first: 'Bob', last: 'Smith'},
	 *             {first: 'Sally', last: 'Johnson'},
	 *             ...
	 *           ];
	 *         }
	 *       }
	 *     };
	 *   }
	 * }
	 * ```
	 *
	 * Notifications for changes to items sub-properties will be forwarded to template
	 * instances, which will update via the normal structured data notification system.
	 *
	 * Mutations to the `items` array itself should be made using the Array
	 * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,
	 * `shift`, `unshift`), and template instances will be kept in sync with the
	 * data in the array.
	 *
	 * Events caught by event handlers within the `dom-repeat` template will be
	 * decorated with a `model` property, which represents the binding scope for
	 * each template instance.  The model should be used to manipulate data on the
	 * instance, for example `event.model.set('item.checked', true);`.
	 *
	 * Alternatively, the model for a template instance for an element stamped by
	 * a `dom-repeat` can be obtained using the `modelForElement` API on the
	 * `dom-repeat` that stamped it, for example
	 * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.
	 * This may be useful for manipulating instance data of event targets obtained
	 * by event handlers on parents of the `dom-repeat` (event delegation).
	 *
	 * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a
	 * `filter` and/or `sort` property.  This may be a string that names a function on
	 * the host, or a function may be assigned to the property directly.  The functions
	 * should implemented following the standard `Array` filter/sort API.
	 *
	 * In order to re-run the filter or sort functions based on changes to sub-fields
	 * of `items`, the `observe` property may be set as a space-separated list of
	 * `item` sub-fields that should cause a re-filter/sort when modified.  If
	 * the filter or sort function depends on properties not contained in `items`,
	 * the user should observe changes to those properties and call `render` to update
	 * the view based on the dependency change.
	 *
	 * For example, for an `dom-repeat` with a filter of the following:
	 *
	 * ```js
	 * isEngineer(item) {
	 *   return item.type == 'engineer' || item.manager.type == 'engineer';
	 * }
	 * ```
	 *
	 * Then the `observe` property should be configured as follows:
	 *
	 * ```html
	 * <dom-repeat items="{{employees}}" filter="isEngineer" observe="type manager.type">
	 * ```
	 *
	 * @customElement
	 * @polymer
	 * @extends {domRepeatBase}
	 * @appliesMixin OptionalMutableData
	 * @summary Custom element for stamping instance of a template bound to
	 *   items in an array.
	 */
	class DomRepeat extends domRepeatBase {

	  // Not needed to find template; can be removed once the analyzer
	  // can find the tag name from customElements.define call
	  static get is() { return 'dom-repeat'; }

	  static get template() { return null; }

	  static get properties() {

	    /**
	     * Fired whenever DOM is added or removed by this template (by
	     * default, rendering occurs lazily).  To force immediate rendering, call
	     * `render`.
	     *
	     * @event dom-change
	     */
	    return {

	      /**
	       * An array containing items determining how many instances of the template
	       * to stamp and that that each template instance should bind to.
	       */
	      items: {
	        type: Array
	      },

	      /**
	       * The name of the variable to add to the binding scope for the array
	       * element associated with a given template instance.
	       */
	      as: {
	        type: String,
	        value: 'item'
	      },

	      /**
	       * The name of the variable to add to the binding scope with the index
	       * of the instance in the sorted and filtered list of rendered items.
	       * Note, for the index in the `this.items` array, use the value of the
	       * `itemsIndexAs` property.
	       */
	      indexAs: {
	        type: String,
	        value: 'index'
	      },

	      /**
	       * The name of the variable to add to the binding scope with the index
	       * of the instance in the `this.items` array. Note, for the index of
	       * this instance in the sorted and filtered list of rendered items,
	       * use the value of the `indexAs` property.
	       */
	      itemsIndexAs: {
	        type: String,
	        value: 'itemsIndex'
	      },

	      /**
	       * A function that should determine the sort order of the items.  This
	       * property should either be provided as a string, indicating a method
	       * name on the element's host, or else be an actual function.  The
	       * function should match the sort function passed to `Array.sort`.
	       * Using a sort function has no effect on the underlying `items` array.
	       */
	      sort: {
	        type: Function,
	        observer: '__sortChanged'
	      },

	      /**
	       * A function that can be used to filter items out of the view.  This
	       * property should either be provided as a string, indicating a method
	       * name on the element's host, or else be an actual function.  The
	       * function should match the sort function passed to `Array.filter`.
	       * Using a filter function has no effect on the underlying `items` array.
	       */
	      filter: {
	        type: Function,
	        observer: '__filterChanged'
	      },

	      /**
	       * When using a `filter` or `sort` function, the `observe` property
	       * should be set to a space-separated list of the names of item
	       * sub-fields that should trigger a re-sort or re-filter when changed.
	       * These should generally be fields of `item` that the sort or filter
	       * function depends on.
	       */
	      observe: {
	        type: String,
	        observer: '__observeChanged'
	      },

	      /**
	       * When using a `filter` or `sort` function, the `delay` property
	       * determines a debounce time in ms after a change to observed item
	       * properties that must pass before the filter or sort is re-run.
	       * This is useful in rate-limiting shuffling of the view when
	       * item changes may be frequent.
	       */
	      delay: Number,

	      /**
	       * Count of currently rendered items after `filter` (if any) has been applied.
	       * If "chunking mode" is enabled, `renderedItemCount` is updated each time a
	       * set of template instances is rendered.
	       *
	       */
	      renderedItemCount: {
	        type: Number,
	        notify: true,
	        readOnly: true
	      },

	      /**
	       * Defines an initial count of template instances to render after setting
	       * the `items` array, before the next paint, and puts the `dom-repeat`
	       * into "chunking mode".  The remaining items will be created and rendered
	       * incrementally at each animation frame therof until all instances have
	       * been rendered.
	       */
	      initialCount: {
	        type: Number,
	        observer: '__initializeChunking'
	      },

	      /**
	       * When `initialCount` is used, this property defines a frame rate (in
	       * fps) to target by throttling the number of instances rendered each
	       * frame to not exceed the budget for the target frame rate.  The
	       * framerate is effectively the number of `requestAnimationFrame`s that
	       * it tries to allow to actually fire in a given second. It does this
	       * by measuring the time between `rAF`s and continuously adjusting the
	       * number of items created each `rAF` to maintain the target framerate.
	       * Setting this to a higher number allows lower latency and higher
	       * throughput for event handlers and other tasks, but results in a
	       * longer time for the remaining items to complete rendering.
	       */
	      targetFramerate: {
	        type: Number,
	        value: 20
	      },

	      _targetFrameTime: {
	        type: Number,
	        computed: '__computeFrameTime(targetFramerate)'
	      }

	    };

	  }

	  static get observers() {
	    return [ '__itemsChanged(items.*)' ];
	  }

	  constructor() {
	    super();
	    this.__instances = [];
	    this.__limit = Infinity;
	    this.__pool = [];
	    this.__renderDebouncer = null;
	    this.__itemsIdxToInstIdx = {};
	    this.__chunkCount = null;
	    this.__lastChunkTime = null;
	    this.__sortFn = null;
	    this.__filterFn = null;
	    this.__observePaths = null;
	    this.__ctor = null;
	    this.__isDetached = true;
	    this.template = null;
	  }

	  /**
	   * @return {void}
	   */
	  disconnectedCallback() {
	    super.disconnectedCallback();
	    this.__isDetached = true;
	    for (let i=0; i<this.__instances.length; i++) {
	      this.__detachInstance(i);
	    }
	  }

	  /**
	   * @return {void}
	   */
	  connectedCallback() {
	    super.connectedCallback();
	    this.style.display = 'none';
	    // only perform attachment if the element was previously detached.
	    if (this.__isDetached) {
	      this.__isDetached = false;
	      let parent = this.parentNode;
	      for (let i=0; i<this.__instances.length; i++) {
	        this.__attachInstance(i, parent);
	      }
	    }
	  }

	  __ensureTemplatized() {
	    // Templatizing (generating the instance constructor) needs to wait
	    // until ready, since won't have its template content handed back to
	    // it until then
	    if (!this.__ctor) {
	      let template = this.template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
	      if (!template) {
	        // // Wait until childList changes and template should be there by then
	        let observer = new MutationObserver(() => {
	          if (this.querySelector('template')) {
	            observer.disconnect();
	            this.__render();
	          } else {
	            throw new Error('dom-repeat requires a <template> child');
	          }
	        });
	        observer.observe(this, {childList: true});
	        return false;
	      }
	      // Template instance props that should be excluded from forwarding
	      let instanceProps = {};
	      instanceProps[this.as] = true;
	      instanceProps[this.indexAs] = true;
	      instanceProps[this.itemsIndexAs] = true;
	      this.__ctor = templatize(template, this, {
	        mutableData: this.mutableData,
	        parentModel: true,
	        instanceProps: instanceProps,
	        /**
	         * @this {this}
	         * @param {string} prop Property to set
	         * @param {*} value Value to set property to
	         */
	        forwardHostProp: function(prop, value) {
	          let i$ = this.__instances;
	          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {
	            inst.forwardHostProp(prop, value);
	          }
	        },
	        /**
	         * @this {this}
	         * @param {Object} inst Instance to notify
	         * @param {string} prop Property to notify
	         * @param {*} value Value to notify
	         */
	        notifyInstanceProp: function(inst, prop, value) {
	          if (matches(this.as, prop)) {
	            let idx = inst[this.itemsIndexAs];
	            if (prop == this.as) {
	              this.items[idx] = value;
	            }
	            let path = translate(this.as, 'items.' + idx, prop);
	            this.notifyPath(path, value);
	          }
	        }
	      });
	    }
	    return true;
	  }

	  __getMethodHost() {
	    // Technically this should be the owner of the outermost template.
	    // In shadow dom, this is always getRootNode().host, but we can
	    // approximate this via cooperation with our dataHost always setting
	    // `_methodHost` as long as there were bindings (or id's) on this
	    // instance causing it to get a dataHost.
	    return this.__dataHost._methodHost || this.__dataHost;
	  }

	  __functionFromPropertyValue(functionOrMethodName) {
	    if (typeof functionOrMethodName === 'string') {
	      let methodName = functionOrMethodName;
	      let obj = this.__getMethodHost();
	      return function() { return obj[methodName].apply(obj, arguments); };
	    }

	    return functionOrMethodName;
	  }

	  __sortChanged(sort) {
	    this.__sortFn = this.__functionFromPropertyValue(sort);
	    if (this.items) { this.__debounceRender(this.__render); }
	  }

	  __filterChanged(filter) {
	    this.__filterFn = this.__functionFromPropertyValue(filter);
	    if (this.items) { this.__debounceRender(this.__render); }
	  }

	  __computeFrameTime(rate) {
	    return Math.ceil(1000/rate);
	  }

	  __initializeChunking() {
	    if (this.initialCount) {
	      this.__limit = this.initialCount;
	      this.__chunkCount = this.initialCount;
	      this.__lastChunkTime = performance.now();
	    }
	  }

	  __tryRenderChunk() {
	    // Debounced so that multiple calls through `_render` between animation
	    // frames only queue one new rAF (e.g. array mutation & chunked render)
	    if (this.items && this.__limit < this.items.length) {
	      this.__debounceRender(this.__requestRenderChunk);
	    }
	  }

	  __requestRenderChunk() {
	    requestAnimationFrame(()=>this.__renderChunk());
	  }

	  __renderChunk() {
	    // Simple auto chunkSize throttling algorithm based on feedback loop:
	    // measure actual time between frames and scale chunk count by ratio
	    // of target/actual frame time
	    let currChunkTime = performance.now();
	    let ratio = this._targetFrameTime / (currChunkTime - this.__lastChunkTime);
	    this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;
	    this.__limit += this.__chunkCount;
	    this.__lastChunkTime = currChunkTime;
	    this.__debounceRender(this.__render);
	  }

	  __observeChanged() {
	    this.__observePaths = this.observe &&
	      this.observe.replace('.*', '.').split(' ');
	  }

	  __itemsChanged(change) {
	    if (this.items && !Array.isArray(this.items)) {
	      console.warn('dom-repeat expected array for `items`, found', this.items);
	    }
	    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the
	    // path to that instance synchronously (returns false for non-item paths)
	    if (!this.__handleItemPath(change.path, change.value)) {
	      // Otherwise, the array was reset ('items') or spliced ('items.splices'),
	      // so queue a full refresh
	      this.__initializeChunking();
	      this.__debounceRender(this.__render);
	    }
	  }

	  __handleObservedPaths(path) {
	    // Handle cases where path changes should cause a re-sort/filter
	    if (this.__sortFn || this.__filterFn) {
	      if (!path) {
	        // Always re-render if the item itself changed
	        this.__debounceRender(this.__render, this.delay);
	      } else if (this.__observePaths) {
	        // Otherwise, re-render if the path changed matches an observed path
	        let paths = this.__observePaths;
	        for (let i=0; i<paths.length; i++) {
	          if (path.indexOf(paths[i]) === 0) {
	            this.__debounceRender(this.__render, this.delay);
	          }
	        }
	      }
	    }
	  }

	  /**
	   * @param {function(this:DomRepeat)} fn Function to debounce.
	   * @param {number=} delay Delay in ms to debounce by.
	   */
	  __debounceRender(fn, delay = 0) {
	    this.__renderDebouncer = Debouncer.debounce(
	          this.__renderDebouncer
	        , delay > 0 ? timeOut.after(delay) : microTask
	        , fn.bind(this));
	    enqueueDebouncer(this.__renderDebouncer);
	  }

	  /**
	   * Forces the element to render its content. Normally rendering is
	   * asynchronous to a provoking change. This is done for efficiency so
	   * that multiple changes trigger only a single render. The render method
	   * should be called if, for example, template rendering is required to
	   * validate application state.
	   * @return {void}
	   */
	  render() {
	    // Queue this repeater, then flush all in order
	    this.__debounceRender(this.__render);
	    flush();
	  }

	  __render() {
	    if (!this.__ensureTemplatized()) {
	      // No template found yet
	      return;
	    }
	    this.__applyFullRefresh();
	    // Reset the pool
	    // TODO(kschaaf): Reuse pool across turns and nested templates
	    // Now that objects/arrays are re-evaluated when set, we can safely
	    // reuse pooled instances across turns, however we still need to decide
	    // semantics regarding how long to hold, how many to hold, etc.
	    this.__pool.length = 0;
	    // Set rendered item count
	    this._setRenderedItemCount(this.__instances.length);
	    // Notify users
	    this.dispatchEvent(new CustomEvent('dom-change', {
	      bubbles: true,
	      composed: true
	    }));
	    // Check to see if we need to render more items
	    this.__tryRenderChunk();
	  }

	  __applyFullRefresh() {
	    let items = this.items || [];
	    let isntIdxToItemsIdx = new Array(items.length);
	    for (let i=0; i<items.length; i++) {
	      isntIdxToItemsIdx[i] = i;
	    }
	    // Apply user filter
	    if (this.__filterFn) {
	      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>
	        this.__filterFn(items[i], idx, array));
	    }
	    // Apply user sort
	    if (this.__sortFn) {
	      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));
	    }
	    // items->inst map kept for item path forwarding
	    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};
	    let instIdx = 0;
	    // Generate instances and assign items
	    const limit = Math.min(isntIdxToItemsIdx.length, this.__limit);
	    for (; instIdx<limit; instIdx++) {
	      let inst = this.__instances[instIdx];
	      let itemIdx = isntIdxToItemsIdx[instIdx];
	      let item = items[itemIdx];
	      itemsIdxToInstIdx[itemIdx] = instIdx;
	      if (inst) {
	        inst._setPendingProperty(this.as, item);
	        inst._setPendingProperty(this.indexAs, instIdx);
	        inst._setPendingProperty(this.itemsIndexAs, itemIdx);
	        inst._flushProperties();
	      } else {
	        this.__insertInstance(item, instIdx, itemIdx);
	      }
	    }
	    // Remove any extra instances from previous state
	    for (let i=this.__instances.length-1; i>=instIdx; i--) {
	      this.__detachAndRemoveInstance(i);
	    }
	  }

	  __detachInstance(idx) {
	    let inst = this.__instances[idx];
	    for (let i=0; i<inst.children.length; i++) {
	      let el = inst.children[i];
	      inst.root.appendChild(el);
	    }
	    return inst;
	  }

	  __attachInstance(idx, parent) {
	    let inst = this.__instances[idx];
	    parent.insertBefore(inst.root, this);
	  }

	  __detachAndRemoveInstance(idx) {
	    let inst = this.__detachInstance(idx);
	    if (inst) {
	      this.__pool.push(inst);
	    }
	    this.__instances.splice(idx, 1);
	  }

	  __stampInstance(item, instIdx, itemIdx) {
	    let model = {};
	    model[this.as] = item;
	    model[this.indexAs] = instIdx;
	    model[this.itemsIndexAs] = itemIdx;
	    return new this.__ctor(model);
	  }

	  __insertInstance(item, instIdx, itemIdx) {
	    let inst = this.__pool.pop();
	    if (inst) {
	      // TODO(kschaaf): If the pool is shared across turns, hostProps
	      // need to be re-set to reused instances in addition to item
	      inst._setPendingProperty(this.as, item);
	      inst._setPendingProperty(this.indexAs, instIdx);
	      inst._setPendingProperty(this.itemsIndexAs, itemIdx);
	      inst._flushProperties();
	    } else {
	      inst = this.__stampInstance(item, instIdx, itemIdx);
	    }
	    let beforeRow = this.__instances[instIdx + 1];
	    let beforeNode = beforeRow ? beforeRow.children[0] : this;
	    this.parentNode.insertBefore(inst.root, beforeNode);
	    this.__instances[instIdx] = inst;
	    return inst;
	  }

	  // Implements extension point from Templatize mixin
	  /**
	   * Shows or hides the template instance top level child elements. For
	   * text nodes, `textContent` is removed while "hidden" and replaced when
	   * "shown."
	   * @param {boolean} hidden Set to true to hide the children;
	   * set to false to show them.
	   * @return {void}
	   * @protected
	   */
	  _showHideChildren(hidden) {
	    for (let i=0; i<this.__instances.length; i++) {
	      this.__instances[i]._showHideChildren(hidden);
	    }
	  }

	  // Called as a side effect of a host items.<key>.<path> path change,
	  // responsible for notifying item.<path> changes to inst for key
	  __handleItemPath(path, value) {
	    let itemsPath = path.slice(6); // 'items.'.length == 6
	    let dot = itemsPath.indexOf('.');
	    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);
	    // If path was index into array...
	    if (itemsIdx == parseInt(itemsIdx, 10)) {
	      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);
	      // If the path is observed, it will trigger a full refresh
	      this.__handleObservedPaths(itemSubPath);
	      // Note, even if a rull refresh is triggered, always do the path
	      // notification because unless mutableData is used for dom-repeat
	      // and all elements in the instance subtree, a full refresh may
	      // not trigger the proper update.
	      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];
	      let inst = this.__instances[instIdx];
	      if (inst) {
	        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');
	        // This is effectively `notifyPath`, but avoids some of the overhead
	        // of the public API
	        inst._setPendingPropertyOrPath(itemPath, value, false, true);
	        inst._flushProperties();
	      }
	      return true;
	    }
	  }

	  /**
	   * Returns the item associated with a given element stamped by
	   * this `dom-repeat`.
	   *
	   * Note, to modify sub-properties of the item,
	   * `modelForElement(el).set('item.<sub-prop>', value)`
	   * should be used.
	   *
	   * @param {!HTMLElement} el Element for which to return the item.
	   * @return {*} Item associated with the element.
	   */
	  itemForElement(el) {
	    let instance = this.modelForElement(el);
	    return instance && instance[this.as];
	  }

	  /**
	   * Returns the inst index for a given element stamped by this `dom-repeat`.
	   * If `sort` is provided, the index will reflect the sorted order (rather
	   * than the original array order).
	   *
	   * @param {!HTMLElement} el Element for which to return the index.
	   * @return {?number} Row index associated with the element (note this may
	   *   not correspond to the array index if a user `sort` is applied).
	   */
	  indexForElement(el) {
	    let instance = this.modelForElement(el);
	    return instance && instance[this.indexAs];
	  }

	  /**
	   * Returns the template "model" associated with a given element, which
	   * serves as the binding scope for the template instance the element is
	   * contained in. A template model
	   * should be used to manipulate data associated with this template instance.
	   *
	   * Example:
	   *
	   *   let model = modelForElement(el);
	   *   if (model.index < 10) {
	   *     model.set('item.checked', true);
	   *   }
	   *
	   * @param {!HTMLElement} el Element for which to return a template model.
	   * @return {TemplateInstanceBase} Model representing the binding scope for
	   *   the element.
	   */
	  modelForElement(el) {
	    return modelForElement(this.template, el);
	  }

	}

	customElements.define(DomRepeat.is, DomRepeat);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const nativeShadow = !(window['ShadyDOM'] && window['ShadyDOM']['inUse']);
	let nativeCssVariables_;

	/**
	 * @param {(ShadyCSSOptions | ShadyCSSInterface)=} settings
	 */
	function calcCssVariables(settings) {
	  if (settings && settings['shimcssproperties']) {
	    nativeCssVariables_ = false;
	  } else {
	    // chrome 49 has semi-working css vars, check if box-shadow works
	    // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782
	    // However, shim css custom properties are only supported with ShadyDOM enabled,
	    // so fall back on native if we do not detect ShadyDOM
	    // Edge 15: custom properties used in ::before and ::after will also be used in the parent element
	    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12414257/
	    nativeCssVariables_ = nativeShadow || Boolean(!navigator.userAgent.match(/AppleWebKit\/601|Edge\/15/) &&
	      window.CSS && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));
	  }
	}

	if (window.ShadyCSS && window.ShadyCSS.nativeCss !== undefined) {
	  nativeCssVariables_ = window.ShadyCSS.nativeCss;
	} else if (window.ShadyCSS) {
	  calcCssVariables(window.ShadyCSS);
	  // reset window variable to let ShadyCSS API take its place
	  window.ShadyCSS = undefined;
	} else {
	  calcCssVariables(window['WebComponents'] && window['WebComponents']['flags']);
	}

	// Hack for type error under new type inference which doesn't like that
	// nativeCssVariables is updated in a function and assigns the type
	// `function(): ?` instead of `boolean`.
	const nativeCssVariables = /** @type {boolean} */(nativeCssVariables_);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @unrestricted */
	class StyleNode {
	  constructor() {
	    /** @type {number} */
	    this['start'] = 0;
	    /** @type {number} */
	    this['end'] = 0;
	    /** @type {StyleNode} */
	    this['previous'] = null;
	    /** @type {StyleNode} */
	    this['parent'] = null;
	    /** @type {Array<StyleNode>} */
	    this['rules'] = null;
	    /** @type {string} */
	    this['parsedCssText'] = '';
	    /** @type {string} */
	    this['cssText'] = '';
	    /** @type {boolean} */
	    this['atRule'] = false;
	    /** @type {number} */
	    this['type'] = 0;
	    /** @type {string} */
	    this['keyframesName'] = '';
	    /** @type {string} */
	    this['selector'] = '';
	    /** @type {string} */
	    this['parsedSelector'] = '';
	  }
	}

	// given a string of css, return a simple rule tree
	/**
	 * @param {string} text
	 * @return {StyleNode}
	 */
	function parse(text) {
	  text = clean(text);
	  return parseCss(lex(text), text);
	}

	// remove stuff we don't care about that may hinder parsing
	/**
	 * @param {string} cssText
	 * @return {string}
	 */
	function clean(cssText) {
	  return cssText.replace(RX.comments, '').replace(RX.port, '');
	}

	// super simple {...} lexer that returns a node tree
	/**
	 * @param {string} text
	 * @return {StyleNode}
	 */
	function lex(text) {
	  let root = new StyleNode();
	  root['start'] = 0;
	  root['end'] = text.length;
	  let n = root;
	  for (let i = 0, l = text.length; i < l; i++) {
	    if (text[i] === OPEN_BRACE) {
	      if (!n['rules']) {
	        n['rules'] = [];
	      }
	      let p = n;
	      let previous = p['rules'][p['rules'].length - 1] || null;
	      n = new StyleNode();
	      n['start'] = i + 1;
	      n['parent'] = p;
	      n['previous'] = previous;
	      p['rules'].push(n);
	    } else if (text[i] === CLOSE_BRACE) {
	      n['end'] = i + 1;
	      n = n['parent'] || root;
	    }
	  }
	  return root;
	}

	// add selectors/cssText to node tree
	/**
	 * @param {StyleNode} node
	 * @param {string} text
	 * @return {StyleNode}
	 */
	function parseCss(node, text) {
	  let t = text.substring(node['start'], node['end'] - 1);
	  node['parsedCssText'] = node['cssText'] = t.trim();
	  if (node['parent']) {
	    let ss = node['previous'] ? node['previous']['end'] : node['parent']['start'];
	    t = text.substring(ss, node['start'] - 1);
	    t = _expandUnicodeEscapes(t);
	    t = t.replace(RX.multipleSpaces, ' ');
	    // TODO(sorvell): ad hoc; make selector include only after last ;
	    // helps with mixin syntax
	    t = t.substring(t.lastIndexOf(';') + 1);
	    let s = node['parsedSelector'] = node['selector'] = t.trim();
	    node['atRule'] = (s.indexOf(AT_START) === 0);
	    // note, support a subset of rule types...
	    if (node['atRule']) {
	      if (s.indexOf(MEDIA_START) === 0) {
	        node['type'] = types.MEDIA_RULE;
	      } else if (s.match(RX.keyframesRule)) {
	        node['type'] = types.KEYFRAMES_RULE;
	        node['keyframesName'] =
	          node['selector'].split(RX.multipleSpaces).pop();
	      }
	    } else {
	      if (s.indexOf(VAR_START) === 0) {
	        node['type'] = types.MIXIN_RULE;
	      } else {
	        node['type'] = types.STYLE_RULE;
	      }
	    }
	  }
	  let r$ = node['rules'];
	  if (r$) {
	    for (let i = 0, l = r$.length, r;
	      (i < l) && (r = r$[i]); i++) {
	      parseCss(r, text);
	    }
	  }
	  return node;
	}

	/**
	 * conversion of sort unicode escapes with spaces like `\33 ` (and longer) into
	 * expanded form that doesn't require trailing space `\000033`
	 * @param {string} s
	 * @return {string}
	 */
	function _expandUnicodeEscapes(s) {
	  return s.replace(/\\([0-9a-f]{1,6})\s/gi, function() {
	    let code = arguments[1],
	      repeat = 6 - code.length;
	    while (repeat--) {
	      code = '0' + code;
	    }
	    return '\\' + code;
	  });
	}

	/**
	 * stringify parsed css.
	 * @param {StyleNode} node
	 * @param {boolean=} preserveProperties
	 * @param {string=} text
	 * @return {string}
	 */
	function stringify(node, preserveProperties, text = '') {
	  // calc rule cssText
	  let cssText = '';
	  if (node['cssText'] || node['rules']) {
	    let r$ = node['rules'];
	    if (r$ && !_hasMixinRules(r$)) {
	      for (let i = 0, l = r$.length, r;
	        (i < l) && (r = r$[i]); i++) {
	        cssText = stringify(r, preserveProperties, cssText);
	      }
	    } else {
	      cssText = preserveProperties ? node['cssText'] :
	        removeCustomProps(node['cssText']);
	      cssText = cssText.trim();
	      if (cssText) {
	        cssText = '  ' + cssText + '\n';
	      }
	    }
	  }
	  // emit rule if there is cssText
	  if (cssText) {
	    if (node['selector']) {
	      text += node['selector'] + ' ' + OPEN_BRACE + '\n';
	    }
	    text += cssText;
	    if (node['selector']) {
	      text += CLOSE_BRACE + '\n\n';
	    }
	  }
	  return text;
	}

	/**
	 * @param {Array<StyleNode>} rules
	 * @return {boolean}
	 */
	function _hasMixinRules(rules) {
	  let r = rules[0];
	  return Boolean(r) && Boolean(r['selector']) && r['selector'].indexOf(VAR_START) === 0;
	}

	/**
	 * @param {string} cssText
	 * @return {string}
	 */
	function removeCustomProps(cssText) {
	  cssText = removeCustomPropAssignment(cssText);
	  return removeCustomPropApply(cssText);
	}

	/**
	 * @param {string} cssText
	 * @return {string}
	 */
	function removeCustomPropAssignment(cssText) {
	  return cssText
	    .replace(RX.customProp, '')
	    .replace(RX.mixinProp, '');
	}

	/**
	 * @param {string} cssText
	 * @return {string}
	 */
	function removeCustomPropApply(cssText) {
	  return cssText
	    .replace(RX.mixinApply, '')
	    .replace(RX.varApply, '');
	}

	/** @enum {number} */
	const types = {
	  STYLE_RULE: 1,
	  KEYFRAMES_RULE: 7,
	  MEDIA_RULE: 4,
	  MIXIN_RULE: 1000
	};

	const OPEN_BRACE = '{';
	const CLOSE_BRACE = '}';

	// helper regexp's
	const RX = {
	  comments: /\/\*[^*]*\*+([^/*][^*]*\*+)*\//gim,
	  port: /@import[^;]*;/gim,
	  customProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\n]|$)/gim,
	  mixinProp: /(?:^[^;\-\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\n]|$)?/gim,
	  mixinApply: /@apply\s*\(?[^);]*\)?\s*(?:[;\n]|$)?/gim,
	  varApply: /[^;:]*?:[^;]*?var\([^;]*\)(?:[;\n]|$)?/gim,
	  keyframesRule: /^@[^\s]*keyframes/,
	  multipleSpaces: /\s+/g
	};

	const VAR_START = '--';
	const MEDIA_START = '@media';
	const AT_START = '@';

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const VAR_ASSIGN = /(?:^|[;\s{]\s*)(--[\w-]*?)\s*:\s*(?:((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};{])+)|\{([^}]*)\}(?:(?=[;\s}])|$))/gi;
	const MIXIN_MATCH = /(?:^|\W+)@apply\s*\(?([^);\n]*)\)?/gi;
	const MEDIA_MATCH = /@media\s(.*)/;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @type {!Set<string>} */
	const styleTextSet = new Set();

	const scopingAttribute = 'shady-unscoped';

	/**
	 * Add a specifically-marked style to the document directly, and only one copy of that style.
	 *
	 * @param {!HTMLStyleElement} style
	 * @return {undefined}
	 */
	function processUnscopedStyle(style) {
	  const text = style.textContent;
	  if (!styleTextSet.has(text)) {
	    styleTextSet.add(text);
	    const newStyle = style.cloneNode(true);
	    document.head.appendChild(newStyle);
	  }
	}

	/**
	 * Check if a style is supposed to be unscoped
	 * @param {!HTMLStyleElement} style
	 * @return {boolean} true if the style has the unscoping attribute
	 */
	function isUnscopedStyle(style) {
	  return style.hasAttribute(scopingAttribute);
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @param {string|StyleNode} rules
	 * @param {function(StyleNode)=} callback
	 * @return {string}
	 */
	function toCssText (rules, callback) {
	  if (!rules) {
	    return '';
	  }
	  if (typeof rules === 'string') {
	    rules = parse(rules);
	  }
	  if (callback) {
	    forEachRule(rules, callback);
	  }
	  return stringify(rules, nativeCssVariables);
	}

	/**
	 * @param {HTMLStyleElement} style
	 * @return {StyleNode}
	 */
	function rulesForStyle(style) {
	  if (!style['__cssRules'] && style.textContent) {
	    style['__cssRules'] = parse(style.textContent);
	  }
	  return style['__cssRules'] || null;
	}

	/**
	 * @param {StyleNode} node
	 * @param {Function=} styleRuleCallback
	 * @param {Function=} keyframesRuleCallback
	 * @param {boolean=} onlyActiveRules
	 */
	function forEachRule(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {
	  if (!node) {
	    return;
	  }
	  let skipRules = false;
	  let type = node['type'];
	  if (onlyActiveRules) {
	    if (type === types.MEDIA_RULE) {
	      let matchMedia = node['selector'].match(MEDIA_MATCH);
	      if (matchMedia) {
	        // if rule is a non matching @media rule, skip subrules
	        if (!window.matchMedia(matchMedia[1]).matches) {
	          skipRules = true;
	        }
	      }
	    }
	  }
	  if (type === types.STYLE_RULE) {
	    styleRuleCallback(node);
	  } else if (keyframesRuleCallback &&
	    type === types.KEYFRAMES_RULE) {
	    keyframesRuleCallback(node);
	  } else if (type === types.MIXIN_RULE) {
	    skipRules = true;
	  }
	  let r$ = node['rules'];
	  if (r$ && !skipRules) {
	    for (let i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {
	      forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);
	    }
	  }
	}

	/**
	 * Walk from text[start] matching parens and
	 * returns position of the outer end paren
	 * @param {string} text
	 * @param {number} start
	 * @return {number}
	 */
	function findMatchingParen(text, start) {
	  let level = 0;
	  for (let i=start, l=text.length; i < l; i++) {
	    if (text[i] === '(') {
	      level++;
	    } else if (text[i] === ')') {
	      if (--level === 0) {
	        return i;
	      }
	    }
	  }
	  return -1;
	}

	/**
	 * @param {string} str
	 * @param {function(string, string, string, string)} callback
	 */
	function processVariableAndFallback(str, callback) {
	  // find 'var('
	  let start = str.indexOf('var(');
	  if (start === -1) {
	    // no var?, everything is prefix
	    return callback(str, '', '', '');
	  }
	  //${prefix}var(${inner})${suffix}
	  let end = findMatchingParen(str, start + 3);
	  let inner = str.substring(start + 4, end);
	  let prefix = str.substring(0, start);
	  // suffix may have other variables
	  let suffix = processVariableAndFallback(str.substring(end + 1), callback);
	  let comma = inner.indexOf(',');
	  // value and fallback args should be trimmed to match in property lookup
	  if (comma === -1) {
	    // variable, no fallback
	    return callback(prefix, inner.trim(), '', suffix);
	  }
	  // var(${value},${fallback})
	  let value = inner.substring(0, comma).trim();
	  let fallback = inner.substring(comma + 1).trim();
	  return callback(prefix, value, fallback, suffix);
	}

	/**
	 * @param {Element | {is: string, extends: string}} element
	 * @return {{is: string, typeExtension: string}}
	 */
	function getIsExtends(element) {
	  let localName = element['localName'];
	  let is = '', typeExtension = '';
	  /*
	  NOTE: technically, this can be wrong for certain svg elements
	  with `-` in the name like `<font-face>`
	  */
	  if (localName) {
	    if (localName.indexOf('-') > -1) {
	      is = localName;
	    } else {
	      typeExtension = localName;
	      is = (element.getAttribute && element.getAttribute('is')) || '';
	    }
	  } else {
	    is = /** @type {?} */(element).is;
	    typeExtension = /** @type {?} */(element).extends;
	  }
	  return {is, typeExtension};
	}

	/**
	 * @param {Element|DocumentFragment} element
	 * @return {string}
	 */
	function gatherStyleText(element) {
	  /** @type {!Array<string>} */
	  const styleTextParts = [];
	  const styles = /** @type {!NodeList<!HTMLStyleElement>} */(element.querySelectorAll('style'));
	  for (let i = 0; i < styles.length; i++) {
	    const style = styles[i];
	    if (isUnscopedStyle(style)) {
	      if (!nativeShadow) {
	        processUnscopedStyle(style);
	        style.parentNode.removeChild(style);
	      }
	    } else {
	      styleTextParts.push(style.textContent);
	      style.parentNode.removeChild(style);
	    }
	  }
	  return styleTextParts.join('').trim();
	}

	const CSS_BUILD_ATTR = 'css-build';

	/**
	 * Return the polymer-css-build "build type" applied to this element
	 *
	 * @param {!HTMLElement} element
	 * @return {string} Can be "", "shady", or "shadow"
	 */
	function getCssBuild(element) {
	  if (element.__cssBuild === undefined) {
	    // try attribute first, as it is the common case
	    const attrValue = element.getAttribute(CSS_BUILD_ATTR);
	    if (attrValue) {
	      element.__cssBuild = attrValue;
	    } else {
	      const buildComment = getBuildComment(element);
	      if (buildComment !== '') {
	        // remove build comment so it is not needlessly copied into every element instance
	        removeBuildComment(element);
	      }
	      element.__cssBuild = buildComment;
	    }
	  }
	  return element.__cssBuild || '';
	}

	/**
	 * Check if the given element, either a <template> or <style>, has been processed
	 * by polymer-css-build.
	 *
	 * If so, then we can make a number of optimizations:
	 * - polymer-css-build will decompose mixins into individual CSS Custom Properties,
	 * so the ApplyShim can be skipped entirely.
	 * - Under native ShadowDOM, the style text can just be copied into each instance
	 * without modification
	 * - If the build is "shady" and ShadyDOM is in use, the styling does not need
	 * scoping beyond the shimming of CSS Custom Properties
	 *
	 * @param {!HTMLElement} element
	 * @return {boolean}
	 */
	function elementHasBuiltCss(element) {
	  return getCssBuild(element) !== '';
	}

	/**
	 * For templates made with tagged template literals, polymer-css-build will
	 * insert a comment of the form `<!--css-build:shadow-->`
	 *
	 * @param {!HTMLElement} element
	 * @return {string}
	 */
	function getBuildComment(element) {
	  const buildComment = element.localName === 'template' ? element.content.firstChild : element.firstChild;
	  if (buildComment instanceof Comment) {
	    const commentParts = buildComment.textContent.trim().split(':');
	    if (commentParts[0] === CSS_BUILD_ATTR) {
	      return commentParts[1];
	    }
	  }
	  return '';
	}

	/**
	 * @param {!HTMLElement} element
	 */
	function removeBuildComment(element) {
	  const buildComment = element.localName === 'template' ? element.content.firstChild : element.firstChild;
	  buildComment.parentNode.removeChild(buildComment);
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @param {Element} element
	 * @param {Object=} properties
	 */
	function updateNativeProperties(element, properties) {
	  // remove previous properties
	  for (let p in properties) {
	    // NOTE: for bc with shim, don't apply null values.
	    if (p === null) {
	      element.style.removeProperty(p);
	    } else {
	      element.style.setProperty(p, properties[p]);
	    }
	  }
	}

	/**
	 * @param {Element} element
	 * @param {string} property
	 * @return {string}
	 */
	function getComputedStyleValue(element, property) {
	  /**
	   * @const {string}
	   */
	  const value = window.getComputedStyle(element).getPropertyValue(property);
	  if (!value) {
	    return '';
	  } else {
	    return value.trim();
	  }
	}

	/**
	 * return true if `cssText` contains a mixin definition or consumption
	 * @param {string} cssText
	 * @return {boolean}
	 */
	function detectMixin(cssText) {
	  const has = MIXIN_MATCH.test(cssText) || VAR_ASSIGN.test(cssText);
	  // reset state of the regexes
	  MIXIN_MATCH.lastIndex = 0;
	  VAR_ASSIGN.lastIndex = 0;
	  return has;
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const APPLY_NAME_CLEAN = /;\s*/m;
	const INITIAL_INHERIT = /^\s*(initial)|(inherit)\s*$/;
	const IMPORTANT = /\s*!important/;

	// separator used between mixin-name and mixin-property-name when producing properties
	// NOTE: plain '-' may cause collisions in user styles
	const MIXIN_VAR_SEP = '_-_';

	// map of mixin to property names
	// --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}
	class MixinMap {
	  constructor() {
	    /** @type {!Object<string, !MixinMapEntry>} */
	    this._map = {};
	  }
	  /**
	   * @param {string} name
	   * @param {!PropertyEntry} props
	   */
	  set(name, props) {
	    name = name.trim();
	    this._map[name] = {
	      properties: props,
	      dependants: {}
	    };
	  }
	  /**
	   * @param {string} name
	   * @return {MixinMapEntry}
	   */
	  get(name) {
	    name = name.trim();
	    return this._map[name] || null;
	  }
	}

	/**
	 * Callback for when an element is marked invalid
	 * @type {?function(string)}
	 */
	let invalidCallback = null;

	/** @unrestricted */
	class ApplyShim {
	  constructor() {
	    /** @type {?string} */
	    this._currentElement = null;
	    /** @type {HTMLMetaElement} */
	    this._measureElement = null;
	    this._map = new MixinMap();
	  }
	  /**
	   * return true if `cssText` contains a mixin definition or consumption
	   * @param {string} cssText
	   * @return {boolean}
	   */
	  detectMixin(cssText) {
	    return detectMixin(cssText);
	  }

	  /**
	   * Gather styles into one style for easier processing
	   * @param {!HTMLTemplateElement} template
	   * @return {HTMLStyleElement}
	   */
	  gatherStyles(template) {
	    const styleText = gatherStyleText(template.content);
	    if (styleText) {
	      const style = /** @type {!HTMLStyleElement} */(document.createElement('style'));
	      style.textContent = styleText;
	      template.content.insertBefore(style, template.content.firstChild);
	      return style;
	    }
	    return null;
	  }
	  /**
	   * @param {!HTMLTemplateElement} template
	   * @param {string} elementName
	   * @return {StyleNode}
	   */
	  transformTemplate(template, elementName) {
	    if (template._gatheredStyle === undefined) {
	      template._gatheredStyle = this.gatherStyles(template);
	    }
	    /** @type {HTMLStyleElement} */
	    const style = template._gatheredStyle;
	    return style ? this.transformStyle(style, elementName) : null;
	  }
	  /**
	   * @param {!HTMLStyleElement} style
	   * @param {string} elementName
	   * @return {StyleNode}
	   */
	  transformStyle(style, elementName = '') {
	    let ast = rulesForStyle(style);
	    this.transformRules(ast, elementName);
	    style.textContent = toCssText(ast);
	    return ast;
	  }
	  /**
	   * @param {!HTMLStyleElement} style
	   * @return {StyleNode}
	   */
	  transformCustomStyle(style) {
	    let ast = rulesForStyle(style);
	    forEachRule(ast, (rule) => {
	      if (rule['selector'] === ':root') {
	        rule['selector'] = 'html';
	      }
	      this.transformRule(rule);
	    });
	    style.textContent = toCssText(ast);
	    return ast;
	  }
	  /**
	   * @param {StyleNode} rules
	   * @param {string} elementName
	   */
	  transformRules(rules, elementName) {
	    this._currentElement = elementName;
	    forEachRule(rules, (r) => {
	      this.transformRule(r);
	    });
	    this._currentElement = null;
	  }
	  /**
	   * @param {!StyleNode} rule
	   */
	  transformRule(rule) {
	    rule['cssText'] = this.transformCssText(rule['parsedCssText'], rule);
	    // :root was only used for variable assignment in property shim,
	    // but generates invalid selectors with real properties.
	    // replace with `:host > *`, which serves the same effect
	    if (rule['selector'] === ':root') {
	      rule['selector'] = ':host > *';
	    }
	  }
	  /**
	   * @param {string} cssText
	   * @param {!StyleNode} rule
	   * @return {string}
	   */
	  transformCssText(cssText, rule) {
	    // produce variables
	    cssText = cssText.replace(VAR_ASSIGN, (matchText, propertyName, valueProperty, valueMixin) =>
	      this._produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule));
	    // consume mixins
	    return this._consumeCssProperties(cssText, rule);
	  }
	  /**
	   * @param {string} property
	   * @return {string}
	   */
	  _getInitialValueForProperty(property) {
	    if (!this._measureElement) {
	      this._measureElement = /** @type {HTMLMetaElement} */(document.createElement('meta'));
	      this._measureElement.setAttribute('apply-shim-measure', '');
	      this._measureElement.style.all = 'initial';
	      document.head.appendChild(this._measureElement);
	    }
	    return window.getComputedStyle(this._measureElement).getPropertyValue(property);
	  }
	  /**
	   * Walk over all rules before this rule to find fallbacks for mixins
	   *
	   * @param {!StyleNode} startRule
	   * @return {!Object}
	   */
	  _fallbacksFromPreviousRules(startRule) {
	    // find the "top" rule
	    let topRule = startRule;
	    while (topRule['parent']) {
	      topRule = topRule['parent'];
	    }
	    const fallbacks = {};
	    let seenStartRule = false;
	    forEachRule(topRule, (r) => {
	      // stop when we hit the input rule
	      seenStartRule = seenStartRule || r === startRule;
	      if (seenStartRule) {
	        return;
	      }
	      // NOTE: Only matching selectors are "safe" for this fallback processing
	      // It would be prohibitive to run `matchesSelector()` on each selector,
	      // so we cheat and only check if the same selector string is used, which
	      // guarantees things like specificity matching
	      if (r['selector'] === startRule['selector']) {
	        Object.assign(fallbacks, this._cssTextToMap(r['parsedCssText']));
	      }
	    });
	    return fallbacks;
	  }
	  /**
	   * replace mixin consumption with variable consumption
	   * @param {string} text
	   * @param {!StyleNode=} rule
	   * @return {string}
	   */
	  _consumeCssProperties(text, rule) {
	    /** @type {Array} */
	    let m = null;
	    // loop over text until all mixins with defintions have been applied
	    while((m = MIXIN_MATCH.exec(text))) {
	      let matchText = m[0];
	      let mixinName = m[1];
	      let idx = m.index;
	      // collect properties before apply to be "defaults" if mixin might override them
	      // match includes a "prefix", so find the start and end positions of @apply
	      let applyPos = idx + matchText.indexOf('@apply');
	      let afterApplyPos = idx + matchText.length;
	      // find props defined before this @apply
	      let textBeforeApply = text.slice(0, applyPos);
	      let textAfterApply = text.slice(afterApplyPos);
	      let defaults = rule ? this._fallbacksFromPreviousRules(rule) : {};
	      Object.assign(defaults, this._cssTextToMap(textBeforeApply));
	      let replacement = this._atApplyToCssProperties(mixinName, defaults);
	      // use regex match position to replace mixin, keep linear processing time
	      text = `${textBeforeApply}${replacement}${textAfterApply}`;
	      // move regex search to _after_ replacement
	      MIXIN_MATCH.lastIndex = idx + replacement.length;
	    }
	    return text;
	  }
	  /**
	   * produce variable consumption at the site of mixin consumption
	   * `@apply` --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))
	   * Example:
	   *  border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)
	   *
	   * @param {string} mixinName
	   * @param {Object} fallbacks
	   * @return {string}
	   */
	  _atApplyToCssProperties(mixinName, fallbacks) {
	    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');
	    let vars = [];
	    let mixinEntry = this._map.get(mixinName);
	    // if we depend on a mixin before it is created
	    // make a sentinel entry in the map to add this element as a dependency for when it is defined.
	    if (!mixinEntry) {
	      this._map.set(mixinName, {});
	      mixinEntry = this._map.get(mixinName);
	    }
	    if (mixinEntry) {
	      if (this._currentElement) {
	        mixinEntry.dependants[this._currentElement] = true;
	      }
	      let p, parts, f;
	      const properties = mixinEntry.properties;
	      for (p in properties) {
	        f = fallbacks && fallbacks[p];
	        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];
	        if (f) {
	          parts.push(',', f.replace(IMPORTANT, ''));
	        }
	        parts.push(')');
	        if (IMPORTANT.test(properties[p])) {
	          parts.push(' !important');
	        }
	        vars.push(parts.join(''));
	      }
	    }
	    return vars.join('; ');
	  }

	  /**
	   * @param {string} property
	   * @param {string} value
	   * @return {string}
	   */
	  _replaceInitialOrInherit(property, value) {
	    let match = INITIAL_INHERIT.exec(value);
	    if (match) {
	      if (match[1]) {
	        // initial
	        // replace `initial` with the concrete initial value for this property
	        value = this._getInitialValueForProperty(property);
	      } else {
	        // inherit
	        // with this purposfully illegal value, the variable will be invalid at
	        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)
	        // and for inheriting values, will behave similarly
	        // we cannot support the same behavior for non inheriting values like 'border'
	        value = 'apply-shim-inherit';
	      }
	    }
	    return value;
	  }

	  /**
	   * "parse" a mixin definition into a map of properties and values
	   * cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')
	   * @param {string} text
	   * @return {!Object<string, string>}
	   */
	  _cssTextToMap(text) {
	    let props = text.split(';');
	    let property, value;
	    let out = {};
	    for (let i = 0, p, sp; i < props.length; i++) {
	      p = props[i];
	      if (p) {
	        sp = p.split(':');
	        // ignore lines that aren't definitions like @media
	        if (sp.length > 1) {
	          property = sp[0].trim();
	          // some properties may have ':' in the value, like data urls
	          value = this._replaceInitialOrInherit(property, sp.slice(1).join(':'));
	          out[property] = value;
	        }
	      }
	    }
	    return out;
	  }

	  /**
	   * @param {MixinMapEntry} mixinEntry
	   */
	  _invalidateMixinEntry(mixinEntry) {
	    if (!invalidCallback) {
	      return;
	    }
	    for (let elementName in mixinEntry.dependants) {
	      if (elementName !== this._currentElement) {
	        invalidCallback(elementName);
	      }
	    }
	  }

	  /**
	   * @param {string} matchText
	   * @param {string} propertyName
	   * @param {?string} valueProperty
	   * @param {?string} valueMixin
	   * @param {!StyleNode} rule
	   * @return {string}
	   */
	  _produceCssProperties(matchText, propertyName, valueProperty, valueMixin, rule) {
	    // handle case where property value is a mixin
	    if (valueProperty) {
	      // form: --mixin2: var(--mixin1), where --mixin1 is in the map
	      processVariableAndFallback(valueProperty, (prefix, value) => {
	        if (value && this._map.get(value)) {
	          valueMixin = `@apply ${value};`;
	        }
	      });
	    }
	    if (!valueMixin) {
	      return matchText;
	    }
	    let mixinAsProperties = this._consumeCssProperties('' + valueMixin, rule);
	    let prefix = matchText.slice(0, matchText.indexOf('--'));
	    let mixinValues = this._cssTextToMap(mixinAsProperties);
	    let combinedProps = mixinValues;
	    let mixinEntry = this._map.get(propertyName);
	    let oldProps = mixinEntry && mixinEntry.properties;
	    if (oldProps) {
	      // NOTE: since we use mixin, the map of properties is updated here
	      // and this is what we want.
	      combinedProps = Object.assign(Object.create(oldProps), mixinValues);
	    } else {
	      this._map.set(propertyName, combinedProps);
	    }
	    let out = [];
	    let p, v;
	    // set variables defined by current mixin
	    let needToInvalidate = false;
	    for (p in combinedProps) {
	      v = mixinValues[p];
	      // if property not defined by current mixin, set initial
	      if (v === undefined) {
	        v = 'initial';
	      }
	      if (oldProps && !(p in oldProps)) {
	        needToInvalidate = true;
	      }
	      out.push(`${propertyName}${MIXIN_VAR_SEP}${p}: ${v}`);
	    }
	    if (needToInvalidate) {
	      this._invalidateMixinEntry(mixinEntry);
	    }
	    if (mixinEntry) {
	      mixinEntry.properties = combinedProps;
	    }
	    // because the mixinMap is global, the mixin might conflict with
	    // a different scope's simple variable definition:
	    // Example:
	    // some style somewhere:
	    // --mixin1:{ ... }
	    // --mixin2: var(--mixin1);
	    // some other element:
	    // --mixin1: 10px solid red;
	    // --foo: var(--mixin1);
	    // In this case, we leave the original variable definition in place.
	    if (valueProperty) {
	      prefix = `${matchText};${prefix}`;
	    }
	    return `${prefix}${out.join('; ')};`;
	  }
	}

	/* exports */
	ApplyShim.prototype['detectMixin'] = ApplyShim.prototype.detectMixin;
	ApplyShim.prototype['transformStyle'] = ApplyShim.prototype.transformStyle;
	ApplyShim.prototype['transformCustomStyle'] = ApplyShim.prototype.transformCustomStyle;
	ApplyShim.prototype['transformRules'] = ApplyShim.prototype.transformRules;
	ApplyShim.prototype['transformRule'] = ApplyShim.prototype.transformRule;
	ApplyShim.prototype['transformTemplate'] = ApplyShim.prototype.transformTemplate;
	ApplyShim.prototype['_separator'] = MIXIN_VAR_SEP;
	Object.defineProperty(ApplyShim.prototype, 'invalidCallback', {
	  /** @return {?function(string)} */
	  get() {
	    return invalidCallback;
	  },
	  /** @param {?function(string)} cb */
	  set(cb) {
	    invalidCallback = cb;
	  }
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @const {!Object<string, !HTMLTemplateElement>}
	 */
	const templateMap = {};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/*
	 * Utilities for handling invalidating apply-shim mixins for a given template.
	 *
	 * The invalidation strategy involves keeping track of the "current" version of a template's mixins, and updating that count when a mixin is invalidated.
	 * The template
	 */

	/** @const {string} */
	const CURRENT_VERSION = '_applyShimCurrentVersion';

	/** @const {string} */
	const NEXT_VERSION = '_applyShimNextVersion';

	/** @const {string} */
	const VALIDATING_VERSION = '_applyShimValidatingVersion';

	/**
	 * @const {Promise<void>}
	 */
	const promise = Promise.resolve();

	/**
	 * @param {string} elementName
	 */
	function invalidate(elementName){
	  let template = templateMap[elementName];
	  if (template) {
	    invalidateTemplate(template);
	  }
	}

	/**
	 * This function can be called multiple times to mark a template invalid
	 * and signal that the style inside must be regenerated.
	 *
	 * Use `startValidatingTemplate` to begin an asynchronous validation cycle.
	 * During that cycle, call `templateIsValidating` to see if the template must
	 * be revalidated
	 * @param {HTMLTemplateElement} template
	 */
	function invalidateTemplate(template) {
	  // default the current version to 0
	  template[CURRENT_VERSION] = template[CURRENT_VERSION] || 0;
	  // ensure the "validating for" flag exists
	  template[VALIDATING_VERSION] = template[VALIDATING_VERSION] || 0;
	  // increment the next version
	  template[NEXT_VERSION] = (template[NEXT_VERSION] || 0) + 1;
	}

	/**
	 * @param {HTMLTemplateElement} template
	 * @return {boolean}
	 */
	function templateIsValid(template) {
	  return template[CURRENT_VERSION] === template[NEXT_VERSION];
	}

	/**
	 * Returns true if the template is currently invalid and `startValidating` has been called since the last invalidation.
	 * If false, the template must be validated.
	 * @param {HTMLTemplateElement} template
	 * @return {boolean}
	 */
	function templateIsValidating(template) {
	  return !templateIsValid(template) && template[VALIDATING_VERSION] === template[NEXT_VERSION];
	}

	/**
	 * Begin an asynchronous invalidation cycle.
	 * This should be called after every validation of a template
	 *
	 * After one microtask, the template will be marked as valid until the next call to `invalidateTemplate`
	 * @param {HTMLTemplateElement} template
	 */
	function startValidatingTemplate(template) {
	  // remember that the current "next version" is the reason for this validation cycle
	  template[VALIDATING_VERSION] = template[NEXT_VERSION];
	  // however, there only needs to be one async task to clear the counters
	  if (!template._validating) {
	    template._validating = true;
	    promise.then(function() {
	      // sync the current version to let future invalidations cause a refresh cycle
	      template[CURRENT_VERSION] = template[NEXT_VERSION];
	      template._validating = false;
	    });
	  }
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @type {Promise<void>} */
	let readyPromise = null;

	/** @type {?function(?function())} */
	let whenReady = window['HTMLImports'] && window['HTMLImports']['whenReady'] || null;

	/** @type {function()} */
	let resolveFn;

	/**
	 * @param {?function()} callback
	 */
	function documentWait(callback) {
	  requestAnimationFrame(function() {
	    if (whenReady) {
	      whenReady(callback);
	    } else {
	      if (!readyPromise) {
	        readyPromise = new Promise((resolve) => {resolveFn = resolve;});
	        if (document.readyState === 'complete') {
	          resolveFn();
	        } else {
	          document.addEventListener('readystatechange', () => {
	            if (document.readyState === 'complete') {
	              resolveFn();
	            }
	          });
	        }
	      }
	      readyPromise.then(function(){ callback && callback(); });
	    }
	  });
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const SEEN_MARKER = '__seenByShadyCSS';
	const CACHED_STYLE = '__shadyCSSCachedStyle';

	/** @type {?function(!HTMLStyleElement)} */
	let transformFn = null;

	/** @type {?function()} */
	let validateFn = null;

	/**
	This interface is provided to add document-level <style> elements to ShadyCSS for processing.
	These styles must be processed by ShadyCSS to simulate ShadowRoot upper-bound encapsulation from outside styles
	In addition, these styles may also need to be processed for @apply rules and CSS Custom Properties

	To add document-level styles to ShadyCSS, one can call `ShadyCSS.addDocumentStyle(styleElement)` or `ShadyCSS.addDocumentStyle({getStyle: () => styleElement})`

	In addition, if the process used to discover document-level styles can be synchronously flushed, one should set `ShadyCSS.documentStyleFlush`.
	This function will be called when calculating styles.

	An example usage of the document-level styling api can be found in `examples/document-style-lib.js`

	@unrestricted
	*/
	class CustomStyleInterface {
	  constructor() {
	    /** @type {!Array<!CustomStyleProvider>} */
	    this['customStyles'] = [];
	    this['enqueued'] = false;
	    // NOTE(dfreedm): use quotes here to prevent closure inlining to `function(){}`;
	    documentWait(() => {
	      if (window['ShadyCSS']['flushCustomStyles']) {
	        window['ShadyCSS']['flushCustomStyles']();
	      }
	    });
	  }
	  /**
	   * Queue a validation for new custom styles to batch style recalculations
	   */
	  enqueueDocumentValidation() {
	    if (this['enqueued'] || !validateFn) {
	      return;
	    }
	    this['enqueued'] = true;
	    documentWait(validateFn);
	  }
	  /**
	   * @param {!HTMLStyleElement} style
	   */
	  addCustomStyle(style) {
	    if (!style[SEEN_MARKER]) {
	      style[SEEN_MARKER] = true;
	      this['customStyles'].push(style);
	      this.enqueueDocumentValidation();
	    }
	  }
	  /**
	   * @param {!CustomStyleProvider} customStyle
	   * @return {HTMLStyleElement}
	   */
	  getStyleForCustomStyle(customStyle) {
	    if (customStyle[CACHED_STYLE]) {
	      return customStyle[CACHED_STYLE];
	    }
	    let style;
	    if (customStyle['getStyle']) {
	      style = customStyle['getStyle']();
	    } else {
	      style = customStyle;
	    }
	    return style;
	  }
	  /**
	   * @return {!Array<!CustomStyleProvider>}
	   */
	  processStyles() {
	    const cs = this['customStyles'];
	    for (let i = 0; i < cs.length; i++) {
	      const customStyle = cs[i];
	      if (customStyle[CACHED_STYLE]) {
	        continue;
	      }
	      const style = this.getStyleForCustomStyle(customStyle);
	      if (style) {
	        // HTMLImports polyfill may have cloned the style into the main document,
	        // which is referenced with __appliedElement.
	        const styleToTransform = /** @type {!HTMLStyleElement} */(style['__appliedElement'] || style);
	        if (transformFn) {
	          transformFn(styleToTransform);
	        }
	        customStyle[CACHED_STYLE] = styleToTransform;
	      }
	    }
	    return cs;
	  }
	}

	CustomStyleInterface.prototype['addCustomStyle'] = CustomStyleInterface.prototype.addCustomStyle;
	CustomStyleInterface.prototype['getStyleForCustomStyle'] = CustomStyleInterface.prototype.getStyleForCustomStyle;
	CustomStyleInterface.prototype['processStyles'] = CustomStyleInterface.prototype.processStyles;

	Object.defineProperties(CustomStyleInterface.prototype, {
	  'transformCallback': {
	    /** @return {?function(!HTMLStyleElement)} */
	    get() {
	      return transformFn;
	    },
	    /** @param {?function(!HTMLStyleElement)} fn */
	    set(fn) {
	      transformFn = fn;
	    }
	  },
	  'validateCallback': {
	    /** @return {?function()} */
	    get() {
	      return validateFn;
	    },
	    /**
	     * @param {?function()} fn
	     * @this {CustomStyleInterface}
	     */
	    set(fn) {
	      let needsEnqueue = false;
	      if (!validateFn) {
	        needsEnqueue = true;
	      }
	      validateFn = fn;
	      if (needsEnqueue) {
	        this.enqueueDocumentValidation();
	      }
	    },
	  }
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/** @const {ApplyShim} */
	const applyShim = new ApplyShim();

	class ApplyShimInterface {
	  constructor() {
	    /** @type {?CustomStyleInterfaceInterface} */
	    this.customStyleInterface = null;
	    applyShim['invalidCallback'] = invalidate;
	  }
	  ensure() {
	    if (this.customStyleInterface) {
	      return;
	    }
	    this.customStyleInterface = window.ShadyCSS.CustomStyleInterface;
	    if (this.customStyleInterface) {
	      this.customStyleInterface['transformCallback'] = (style) => {
	        applyShim.transformCustomStyle(style);
	      };
	      this.customStyleInterface['validateCallback'] = () => {
	        requestAnimationFrame(() => {
	          if (this.customStyleInterface['enqueued']) {
	            this.flushCustomStyles();
	          }
	        });
	      };
	    }
	  }
	  /**
	   * @param {!HTMLTemplateElement} template
	   * @param {string} elementName
	   */
	  prepareTemplate(template, elementName) {
	    this.ensure();
	    if (elementHasBuiltCss(template)) {
	      return;
	    }
	    templateMap[elementName] = template;
	    let ast = applyShim.transformTemplate(template, elementName);
	    // save original style ast to use for revalidating instances
	    template['_styleAst'] = ast;
	  }
	  flushCustomStyles() {
	    this.ensure();
	    if (!this.customStyleInterface) {
	      return;
	    }
	    let styles = this.customStyleInterface['processStyles']();
	    if (!this.customStyleInterface['enqueued']) {
	      return;
	    }
	    for (let i = 0; i < styles.length; i++ ) {
	      let cs = styles[i];
	      let style = this.customStyleInterface['getStyleForCustomStyle'](cs);
	      if (style) {
	        applyShim.transformCustomStyle(style);
	      }
	    }
	    this.customStyleInterface['enqueued'] = false;
	  }
	  /**
	   * @param {HTMLElement} element
	   * @param {Object=} properties
	   */
	  styleSubtree(element, properties) {
	    this.ensure();
	    if (properties) {
	      updateNativeProperties(element, properties);
	    }
	    if (element.shadowRoot) {
	      this.styleElement(element);
	      let shadowChildren = element.shadowRoot.children || element.shadowRoot.childNodes;
	      for (let i = 0; i < shadowChildren.length; i++) {
	        this.styleSubtree(/** @type {HTMLElement} */(shadowChildren[i]));
	      }
	    } else {
	      let children = element.children || element.childNodes;
	      for (let i = 0; i < children.length; i++) {
	        this.styleSubtree(/** @type {HTMLElement} */(children[i]));
	      }
	    }
	  }
	  /**
	   * @param {HTMLElement} element
	   */
	  styleElement(element) {
	    this.ensure();
	    let {is} = getIsExtends(element);
	    let template = templateMap[is];
	    if (template && elementHasBuiltCss(template)) {
	      return;
	    }
	    if (template && !templateIsValid(template)) {
	      // only revalidate template once
	      if (!templateIsValidating(template)) {
	        this.prepareTemplate(template, is);
	        startValidatingTemplate(template);
	      }
	      // update this element instance
	      let root = element.shadowRoot;
	      if (root) {
	        let style = /** @type {HTMLStyleElement} */(root.querySelector('style'));
	        if (style) {
	          // reuse the template's style ast, it has all the original css text
	          style['__cssRules'] = template['_styleAst'];
	          style.textContent = toCssText(template['_styleAst']);
	        }
	      }
	    }
	  }
	  /**
	   * @param {Object=} properties
	   */
	  styleDocument(properties) {
	    this.ensure();
	    this.styleSubtree(document.body, properties);
	  }
	}

	if (!window.ShadyCSS || !window.ShadyCSS.ScopingShim) {
	  const applyShimInterface = new ApplyShimInterface();
	  let CustomStyleInterface$$1 = window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;

	  /** @suppress {duplicate} */
	  window.ShadyCSS = {
	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     * @param {string=} elementExtends
	     */
	    prepareTemplate(template, elementName, elementExtends) { // eslint-disable-line no-unused-vars
	      applyShimInterface.flushCustomStyles();
	      applyShimInterface.prepareTemplate(template, elementName);
	    },

	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     * @param {string=} elementExtends
	     */
	    prepareTemplateStyles(template, elementName, elementExtends) {
	      this.prepareTemplate(template, elementName, elementExtends);
	    },

	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     */
	    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars

	    /**
	     * @param {!HTMLElement} element
	     * @param {Object=} properties
	     */
	    styleSubtree(element, properties) {
	      applyShimInterface.flushCustomStyles();
	      applyShimInterface.styleSubtree(element, properties);
	    },

	    /**
	     * @param {!HTMLElement} element
	     */
	    styleElement(element) {
	      applyShimInterface.flushCustomStyles();
	      applyShimInterface.styleElement(element);
	    },

	    /**
	     * @param {Object=} properties
	     */
	    styleDocument(properties) {
	      applyShimInterface.flushCustomStyles();
	      applyShimInterface.styleDocument(properties);
	    },

	    /**
	     * @param {Element} element
	     * @param {string} property
	     * @return {string}
	     */
	    getComputedStyleValue(element, property) {
	      return getComputedStyleValue(element, property);
	    },

	    flushCustomStyles() {
	      applyShimInterface.flushCustomStyles();
	    },

	    nativeCss: nativeCssVariables,
	    nativeShadow: nativeShadow
	  };

	  if (CustomStyleInterface$$1) {
	    window.ShadyCSS.CustomStyleInterface = CustomStyleInterface$$1;
	  }
	}

	window.ShadyCSS.ApplyShim = applyShim;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// detect native touch action support
	let HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';
	let GESTURE_KEY = '__polymerGestures';
	let HANDLED_OBJ = '__polymerGesturesHandled';
	let TOUCH_ACTION = '__polymerGesturesTouchAction';
	// radius for tap and track
	let TAP_DISTANCE = 25;
	let TRACK_DISTANCE = 5;
	// number of last N track positions to keep
	let TRACK_LENGTH = 2;

	// Disabling "mouse" handlers for 2500ms is enough
	let MOUSE_TIMEOUT = 2500;
	let MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];
	// an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons
	let MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];
	let MOUSE_HAS_BUTTONS = (function() {
	  try {
	    return new MouseEvent('test', {buttons: 1}).buttons === 1;
	  } catch (e) {
	    return false;
	  }
	})();

	/**
	 * @param {string} name Possible mouse event name
	 * @return {boolean} true if mouse event, false if not
	 */
	function isMouseEvent(name) {
	  return MOUSE_EVENTS.indexOf(name) > -1;
	}

	/* eslint no-empty: ["error", { "allowEmptyCatch": true }] */
	// check for passive event listeners
	let SUPPORTS_PASSIVE = false;
	(function() {
	  try {
	    let opts = Object.defineProperty({}, 'passive', {get() {SUPPORTS_PASSIVE = true;}});
	    window.addEventListener('test', null, opts);
	    window.removeEventListener('test', null, opts);
	  } catch(e) {}
	})();

	/**
	 * Generate settings for event listeners, dependant on `passiveTouchGestures`
	 *
	 * @param {string} eventName Event name to determine if `{passive}` option is
	 *   needed
	 * @return {{passive: boolean} | undefined} Options to use for addEventListener
	 *   and removeEventListener
	 */
	function PASSIVE_TOUCH(eventName) {
	  if (isMouseEvent(eventName) || eventName === 'touchend') {
	    return;
	  }
	  if (HAS_NATIVE_TA && SUPPORTS_PASSIVE && passiveTouchGestures) {
	    return {passive: true};
	  } else {
	    return;
	  }
	}

	// Check for touch-only devices
	let IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);

	// keep track of any labels hit by the mouseCanceller
	/** @type {!Array<!HTMLLabelElement>} */
	const clickedLabels = [];

	/** @type {!Object<boolean>} */
	const labellable = {
	  'button': true,
	  'input': true,
	  'keygen': true,
	  'meter': true,
	  'output': true,
	  'textarea': true,
	  'progress': true,
	  'select': true
	};

	// Defined at https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#enabling-and-disabling-form-controls:-the-disabled-attribute
	/** @type {!Object<boolean>} */
	const canBeDisabled = {
	  'button': true,
	  'command': true,
	  'fieldset': true,
	  'input': true,
	  'keygen': true,
	  'optgroup': true,
	  'option': true,
	  'select': true,
	  'textarea': true
	};

	/**
	 * @param {HTMLElement} el Element to check labelling status
	 * @return {boolean} element can have labels
	 */
	function canBeLabelled(el) {
	  return labellable[el.localName] || false;
	}

	/**
	 * @param {HTMLElement} el Element that may be labelled.
	 * @return {!Array<!HTMLLabelElement>} Relevant label for `el`
	 */
	function matchingLabels(el) {
	  let labels = Array.prototype.slice.call(/** @type {HTMLInputElement} */(el).labels || []);
	  // IE doesn't have `labels` and Safari doesn't populate `labels`
	  // if element is in a shadowroot.
	  // In this instance, finding the non-ancestor labels is enough,
	  // as the mouseCancellor code will handle ancstor labels
	  if (!labels.length) {
	    labels = [];
	    let root = el.getRootNode();
	    // if there is an id on `el`, check for all labels with a matching `for` attribute
	    if (el.id) {
	      let matching = root.querySelectorAll(`label[for = ${el.id}]`);
	      for (let i = 0; i < matching.length; i++) {
	        labels.push(/** @type {!HTMLLabelElement} */(matching[i]));
	      }
	    }
	  }
	  return labels;
	}

	// touch will make synthetic mouse events
	// `preventDefault` on touchend will cancel them,
	// but this breaks `<input>` focus and link clicks
	// disable mouse handlers for MOUSE_TIMEOUT ms after
	// a touchend to ignore synthetic mouse events
	let mouseCanceller = function(mouseEvent) {
	  // Check for sourceCapabilities, used to distinguish synthetic events
	  // if mouseEvent did not come from a device that fires touch events,
	  // it was made by a real mouse and should be counted
	  // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents
	  let sc = mouseEvent.sourceCapabilities;
	  if (sc && !sc.firesTouchEvents) {
	    return;
	  }
	  // skip synthetic mouse events
	  mouseEvent[HANDLED_OBJ] = {skip: true};
	  // disable "ghost clicks"
	  if (mouseEvent.type === 'click') {
	    let clickFromLabel = false;
	    let path = mouseEvent.composedPath && mouseEvent.composedPath();
	    if (path) {
	      for (let i = 0; i < path.length; i++) {
	        if (path[i].nodeType === Node.ELEMENT_NODE) {
	          if (path[i].localName === 'label') {
	            clickedLabels.push(path[i]);
	          } else if (canBeLabelled(path[i])) {
	            let ownerLabels = matchingLabels(path[i]);
	            // check if one of the clicked labels is labelling this element
	            for (let j = 0; j < ownerLabels.length; j++) {
	              clickFromLabel = clickFromLabel || clickedLabels.indexOf(ownerLabels[j]) > -1;
	            }
	          }
	        }
	        if (path[i] === POINTERSTATE.mouse.target) {
	          return;
	        }
	      }
	    }
	    // if one of the clicked labels was labelling the target element,
	    // this is not a ghost click
	    if (clickFromLabel) {
	      return;
	    }
	    mouseEvent.preventDefault();
	    mouseEvent.stopPropagation();
	  }
	};

	/**
	 * @param {boolean=} setup True to add, false to remove.
	 * @return {void}
	 */
	function setupTeardownMouseCanceller(setup) {
	  let events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;
	  for (let i = 0, en; i < events.length; i++) {
	    en = events[i];
	    if (setup) {
	      // reset clickLabels array
	      clickedLabels.length = 0;
	      document.addEventListener(en, mouseCanceller, true);
	    } else {
	      document.removeEventListener(en, mouseCanceller, true);
	    }
	  }
	}

	function ignoreMouse(e) {
	  if (!POINTERSTATE.mouse.mouseIgnoreJob) {
	    setupTeardownMouseCanceller(true);
	  }
	  let unset = function() {
	    setupTeardownMouseCanceller();
	    POINTERSTATE.mouse.target = null;
	    POINTERSTATE.mouse.mouseIgnoreJob = null;
	  };
	  POINTERSTATE.mouse.target = e.composedPath()[0];
	  POINTERSTATE.mouse.mouseIgnoreJob = Debouncer.debounce(
	        POINTERSTATE.mouse.mouseIgnoreJob
	      , timeOut.after(MOUSE_TIMEOUT)
	      , unset);
	}

	/**
	 * @param {MouseEvent} ev event to test for left mouse button down
	 * @return {boolean} has left mouse button down
	 */
	function hasLeftMouseButton(ev) {
	  let type = ev.type;
	  // exit early if the event is not a mouse event
	  if (!isMouseEvent(type)) {
	    return false;
	  }
	  // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)
	  // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)
	  if (type === 'mousemove') {
	    // allow undefined for testing events
	    let buttons = ev.buttons === undefined ? 1 : ev.buttons;
	    if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {
	      buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;
	    }
	    // buttons is a bitmask, check that the left button bit is set (1)
	    return Boolean(buttons & 1);
	  } else {
	    // allow undefined for testing events
	    let button = ev.button === undefined ? 0 : ev.button;
	    // ev.button is 0 in mousedown/mouseup/click for left button activation
	    return button === 0;
	  }
	}

	function isSyntheticClick(ev) {
	  if (ev.type === 'click') {
	    // ev.detail is 0 for HTMLElement.click in most browsers
	    if (ev.detail === 0) {
	      return true;
	    }
	    // in the worst case, check that the x/y position of the click is within
	    // the bounding box of the target of the event
	    // Thanks IE 10 >:(
	    let t = _findOriginalTarget(ev);
	    // make sure the target of the event is an element so we can use getBoundingClientRect,
	    // if not, just assume it is a synthetic click
	    if (!t.nodeType || /** @type {Element} */(t).nodeType !== Node.ELEMENT_NODE) {
	      return true;
	    }
	    let bcr = /** @type {Element} */(t).getBoundingClientRect();
	    // use page x/y to account for scrolling
	    let x = ev.pageX, y = ev.pageY;
	    // ev is a synthetic click if the position is outside the bounding box of the target
	    return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));
	  }
	  return false;
	}

	let POINTERSTATE = {
	  mouse: {
	    target: null,
	    mouseIgnoreJob: null
	  },
	  touch: {
	    x: 0,
	    y: 0,
	    id: -1,
	    scrollDecided: false
	  }
	};

	function firstTouchAction(ev) {
	  let ta = 'auto';
	  let path = ev.composedPath && ev.composedPath();
	  if (path) {
	    for (let i = 0, n; i < path.length; i++) {
	      n = path[i];
	      if (n[TOUCH_ACTION]) {
	        ta = n[TOUCH_ACTION];
	        break;
	      }
	    }
	  }
	  return ta;
	}

	function trackDocument(stateObj, movefn, upfn) {
	  stateObj.movefn = movefn;
	  stateObj.upfn = upfn;
	  document.addEventListener('mousemove', movefn);
	  document.addEventListener('mouseup', upfn);
	}

	function untrackDocument(stateObj) {
	  document.removeEventListener('mousemove', stateObj.movefn);
	  document.removeEventListener('mouseup', stateObj.upfn);
	  stateObj.movefn = null;
	  stateObj.upfn = null;
	}

	// use a document-wide touchend listener to start the ghost-click prevention mechanism
	// Use passive event listeners, if supported, to not affect scrolling performance
	document.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? {passive: true} : false);

	const gestures = {};
	const recognizers = [];

	/**
	 * Finds the element rendered on the screen at the provided coordinates.
	 *
	 * Similar to `document.elementFromPoint`, but pierces through
	 * shadow roots.
	 *
	 * @param {number} x Horizontal pixel coordinate
	 * @param {number} y Vertical pixel coordinate
	 * @return {Element} Returns the deepest shadowRoot inclusive element
	 * found at the screen position given.
	 */
	function deepTargetFind(x, y) {
	  let node = document.elementFromPoint(x, y);
	  let next = node;
	  // this code path is only taken when native ShadowDOM is used
	  // if there is a shadowroot, it may have a node at x/y
	  // if there is not a shadowroot, exit the loop
	  while (next && next.shadowRoot && !window.ShadyDOM) {
	    // if there is a node at x/y in the shadowroot, look deeper
	    let oldNext = next;
	    next = next.shadowRoot.elementFromPoint(x, y);
	    // on Safari, elementFromPoint may return the shadowRoot host
	    if (oldNext === next) {
	      break;
	    }
	    if (next) {
	      node = next;
	    }
	  }
	  return node;
	}

	/**
	 * a cheaper check than ev.composedPath()[0];
	 *
	 * @private
	 * @param {Event|Touch} ev Event.
	 * @return {EventTarget} Returns the event target.
	 */
	function _findOriginalTarget(ev) {
	  // shadowdom
	  if (ev.composedPath) {
	    const targets = /** @type {!Array<!EventTarget>} */(ev.composedPath());
	    // It shouldn't be, but sometimes targets is empty (window on Safari).
	    return targets.length > 0 ? targets[0] : ev.target;
	  }
	  // shadydom
	  return ev.target;
	}

	/**
	 * @private
	 * @param {Event} ev Event.
	 * @return {void}
	 */
	function _handleNative(ev) {
	  let handled;
	  let type = ev.type;
	  let node = ev.currentTarget;
	  let gobj = node[GESTURE_KEY];
	  if (!gobj) {
	    return;
	  }
	  let gs = gobj[type];
	  if (!gs) {
	    return;
	  }
	  if (!ev[HANDLED_OBJ]) {
	    ev[HANDLED_OBJ] = {};
	    if (type.slice(0, 5) === 'touch') {
	      ev = /** @type {TouchEvent} */(ev); // eslint-disable-line no-self-assign
	      let t = ev.changedTouches[0];
	      if (type === 'touchstart') {
	        // only handle the first finger
	        if (ev.touches.length === 1) {
	          POINTERSTATE.touch.id = t.identifier;
	        }
	      }
	      if (POINTERSTATE.touch.id !== t.identifier) {
	        return;
	      }
	      if (!HAS_NATIVE_TA) {
	        if (type === 'touchstart' || type === 'touchmove') {
	          _handleTouchAction(ev);
	        }
	      }
	    }
	  }
	  handled = ev[HANDLED_OBJ];
	  // used to ignore synthetic mouse events
	  if (handled.skip) {
	    return;
	  }
	  // reset recognizer state
	  for (let i = 0, r; i < recognizers.length; i++) {
	    r = recognizers[i];
	    if (gs[r.name] && !handled[r.name]) {
	      if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {
	        r.reset();
	      }
	    }
	  }
	  // enforce gesture recognizer order
	  for (let i = 0, r; i < recognizers.length; i++) {
	    r = recognizers[i];
	    if (gs[r.name] && !handled[r.name]) {
	      handled[r.name] = true;
	      r[type](ev);
	    }
	  }
	}

	/**
	 * @private
	 * @param {TouchEvent} ev Event.
	 * @return {void}
	 */
	function _handleTouchAction(ev) {
	  let t = ev.changedTouches[0];
	  let type = ev.type;
	  if (type === 'touchstart') {
	    POINTERSTATE.touch.x = t.clientX;
	    POINTERSTATE.touch.y = t.clientY;
	    POINTERSTATE.touch.scrollDecided = false;
	  } else if (type === 'touchmove') {
	    if (POINTERSTATE.touch.scrollDecided) {
	      return;
	    }
	    POINTERSTATE.touch.scrollDecided = true;
	    let ta = firstTouchAction(ev);
	    let shouldPrevent = false;
	    let dx = Math.abs(POINTERSTATE.touch.x - t.clientX);
	    let dy = Math.abs(POINTERSTATE.touch.y - t.clientY);
	    if (!ev.cancelable) ; else if (ta === 'none') {
	      shouldPrevent = true;
	    } else if (ta === 'pan-x') {
	      shouldPrevent = dy > dx;
	    } else if (ta === 'pan-y') {
	      shouldPrevent = dx > dy;
	    }
	    if (shouldPrevent) {
	      ev.preventDefault();
	    } else {
	      prevent('track');
	    }
	  }
	}

	/**
	 * Adds an event listener to a node for the given gesture type.
	 *
	 * @param {!Node} node Node to add listener on
	 * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
	 * @param {!function(!Event):void} handler Event listener function to call
	 * @return {boolean} Returns true if a gesture event listener was added.
	 */
	function addListener(node, evType, handler) {
	  if (gestures[evType]) {
	    _add(node, evType, handler);
	    return true;
	  }
	  return false;
	}

	/**
	 * Removes an event listener from a node for the given gesture type.
	 *
	 * @param {!Node} node Node to remove listener from
	 * @param {string} evType Gesture type: `down`, `up`, `track`, or `tap`
	 * @param {!function(!Event):void} handler Event listener function previously passed to
	 *  `addListener`.
	 * @return {boolean} Returns true if a gesture event listener was removed.
	 */
	function removeListener(node, evType, handler) {
	  if (gestures[evType]) {
	    _remove(node, evType, handler);
	    return true;
	  }
	  return false;
	}

	/**
	 * automate the event listeners for the native events
	 *
	 * @private
	 * @param {!Node} node Node on which to add the event.
	 * @param {string} evType Event type to add.
	 * @param {function(!Event)} handler Event handler function.
	 * @return {void}
	 */
	function _add(node, evType, handler) {
	  let recognizer = gestures[evType];
	  let deps = recognizer.deps;
	  let name = recognizer.name;
	  let gobj = node[GESTURE_KEY];
	  if (!gobj) {
	    node[GESTURE_KEY] = gobj = {};
	  }
	  for (let i = 0, dep, gd; i < deps.length; i++) {
	    dep = deps[i];
	    // don't add mouse handlers on iOS because they cause gray selection overlays
	    if (IS_TOUCH_ONLY && isMouseEvent(dep) && dep !== 'click') {
	      continue;
	    }
	    gd = gobj[dep];
	    if (!gd) {
	      gobj[dep] = gd = {_count: 0};
	    }
	    if (gd._count === 0) {
	      node.addEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));
	    }
	    gd[name] = (gd[name] || 0) + 1;
	    gd._count = (gd._count || 0) + 1;
	  }
	  node.addEventListener(evType, handler);
	  if (recognizer.touchAction) {
	    setTouchAction(node, recognizer.touchAction);
	  }
	}

	/**
	 * automate event listener removal for native events
	 *
	 * @private
	 * @param {!Node} node Node on which to remove the event.
	 * @param {string} evType Event type to remove.
	 * @param {function(!Event): void} handler Event handler function.
	 * @return {void}
	 */
	function _remove(node, evType, handler) {
	  let recognizer = gestures[evType];
	  let deps = recognizer.deps;
	  let name = recognizer.name;
	  let gobj = node[GESTURE_KEY];
	  if (gobj) {
	    for (let i = 0, dep, gd; i < deps.length; i++) {
	      dep = deps[i];
	      gd = gobj[dep];
	      if (gd && gd[name]) {
	        gd[name] = (gd[name] || 1) - 1;
	        gd._count = (gd._count || 1) - 1;
	        if (gd._count === 0) {
	          node.removeEventListener(dep, _handleNative, PASSIVE_TOUCH(dep));
	        }
	      }
	    }
	  }
	  node.removeEventListener(evType, handler);
	}

	/**
	 * Registers a new gesture event recognizer for adding new custom
	 * gesture event types.
	 *
	 * @param {!GestureRecognizer} recog Gesture recognizer descriptor
	 * @return {void}
	 */
	function register$1(recog) {
	  recognizers.push(recog);
	  for (let i = 0; i < recog.emits.length; i++) {
	    gestures[recog.emits[i]] = recog;
	  }
	}

	/**
	 * @private
	 * @param {string} evName Event name.
	 * @return {Object} Returns the gesture for the given event name.
	 */
	function _findRecognizerByEvent(evName) {
	  for (let i = 0, r; i < recognizers.length; i++) {
	    r = recognizers[i];
	    for (let j = 0, n; j < r.emits.length; j++) {
	      n = r.emits[j];
	      if (n === evName) {
	        return r;
	      }
	    }
	  }
	  return null;
	}

	/**
	 * Sets scrolling direction on node.
	 *
	 * This value is checked on first move, thus it should be called prior to
	 * adding event listeners.
	 *
	 * @param {!Node} node Node to set touch action setting on
	 * @param {string} value Touch action value
	 * @return {void}
	 */
	function setTouchAction(node, value) {
	  if (HAS_NATIVE_TA) {
	    // NOTE: add touchAction async so that events can be added in
	    // custom element constructors. Otherwise we run afoul of custom
	    // elements restriction against settings attributes (style) in the
	    // constructor.
	    microTask.run(() => {
	      node.style.touchAction = value;
	    });
	  }
	  node[TOUCH_ACTION] = value;
	}

	/**
	 * Dispatches an event on the `target` element of `type` with the given
	 * `detail`.
	 * @private
	 * @param {!EventTarget} target The element on which to fire an event.
	 * @param {string} type The type of event to fire.
	 * @param {!Object=} detail The detail object to populate on the event.
	 * @return {void}
	 */
	function _fire(target, type, detail) {
	  let ev = new Event(type, { bubbles: true, cancelable: true, composed: true });
	  ev.detail = detail;
	  target.dispatchEvent(ev);
	  // forward `preventDefault` in a clean way
	  if (ev.defaultPrevented) {
	    let preventer = detail.preventer || detail.sourceEvent;
	    if (preventer && preventer.preventDefault) {
	      preventer.preventDefault();
	    }
	  }
	}

	/**
	 * Prevents the dispatch and default action of the given event name.
	 *
	 * @param {string} evName Event name.
	 * @return {void}
	 */
	function prevent(evName) {
	  let recognizer = _findRecognizerByEvent(evName);
	  if (recognizer.info) {
	    recognizer.info.prevent = true;
	  }
	}

	/**
	 * Reset the 2500ms timeout on processing mouse input after detecting touch input.
	 *
	 * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.
	 * This method should only be called during testing with simulated touch inputs.
	 * Calling this method in production may cause duplicate taps or other Gestures.
	 *
	 * @return {void}
	 */
	function resetMouseCanceller() {
	  if (POINTERSTATE.mouse.mouseIgnoreJob) {
	    POINTERSTATE.mouse.mouseIgnoreJob.flush();
	  }
	}

	/* eslint-disable valid-jsdoc */

	register$1({
	  name: 'downup',
	  deps: ['mousedown', 'touchstart', 'touchend'],
	  flow: {
	    start: ['mousedown', 'touchstart'],
	    end: ['mouseup', 'touchend']
	  },
	  emits: ['down', 'up'],

	  info: {
	    movefn: null,
	    upfn: null
	  },

	  /**
	   * @this {GestureRecognizer}
	   * @return {void}
	   */
	  reset: function() {
	    untrackDocument(this.info);
	  },

	  /**
	   * @this {GestureRecognizer}
	   * @param {MouseEvent} e
	   * @return {void}
	   */
	  mousedown: function(e) {
	    if (!hasLeftMouseButton(e)) {
	      return;
	    }
	    let t = _findOriginalTarget(e);
	    let self = this;
	    let movefn = function movefn(e) {
	      if (!hasLeftMouseButton(e)) {
	        downupFire('up', t, e);
	        untrackDocument(self.info);
	      }
	    };
	    let upfn = function upfn(e) {
	      if (hasLeftMouseButton(e)) {
	        downupFire('up', t, e);
	      }
	      untrackDocument(self.info);
	    };
	    trackDocument(this.info, movefn, upfn);
	    downupFire('down', t, e);
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchstart: function(e) {
	    downupFire('down', _findOriginalTarget(e), e.changedTouches[0], e);
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchend: function(e) {
	    downupFire('up', _findOriginalTarget(e), e.changedTouches[0], e);
	  }
	});

	/**
	 * @param {string} type
	 * @param {EventTarget} target
	 * @param {Event|Touch} event
	 * @param {Event=} preventer
	 * @return {void}
	 */
	function downupFire(type, target, event, preventer) {
	  if (!target) {
	    return;
	  }
	  _fire(target, type, {
	    x: event.clientX,
	    y: event.clientY,
	    sourceEvent: event,
	    preventer: preventer,
	    prevent: function(e) {
	      return prevent(e);
	    }
	  });
	}

	register$1({
	  name: 'track',
	  touchAction: 'none',
	  deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],
	  flow: {
	    start: ['mousedown', 'touchstart'],
	    end: ['mouseup', 'touchend']
	  },
	  emits: ['track'],

	  info: {
	    x: 0,
	    y: 0,
	    state: 'start',
	    started: false,
	    moves: [],
	    /** @this {GestureInfo} */
	    addMove: function(move) {
	      if (this.moves.length > TRACK_LENGTH) {
	        this.moves.shift();
	      }
	      this.moves.push(move);
	    },
	    movefn: null,
	    upfn: null,
	    prevent: false
	  },

	  /**
	   * @this {GestureRecognizer}
	   * @return {void}
	   */
	  reset: function() {
	    this.info.state = 'start';
	    this.info.started = false;
	    this.info.moves = [];
	    this.info.x = 0;
	    this.info.y = 0;
	    this.info.prevent = false;
	    untrackDocument(this.info);
	  },

	  /**
	   * @this {GestureRecognizer}
	   * @param {MouseEvent} e
	   * @return {void}
	   */
	  mousedown: function(e) {
	    if (!hasLeftMouseButton(e)) {
	      return;
	    }
	    let t = _findOriginalTarget(e);
	    let self = this;
	    let movefn = function movefn(e) {
	      let x = e.clientX, y = e.clientY;
	      if (trackHasMovedEnough(self.info, x, y)) {
	        // first move is 'start', subsequent moves are 'move', mouseup is 'end'
	        self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';
	        if (self.info.state === 'start') {
	          // if and only if tracking, always prevent tap
	          prevent('tap');
	        }
	        self.info.addMove({x: x, y: y});
	        if (!hasLeftMouseButton(e)) {
	          // always fire "end"
	          self.info.state = 'end';
	          untrackDocument(self.info);
	        }
	        if (t) {
	          trackFire(self.info, t, e);
	        }
	        self.info.started = true;
	      }
	    };
	    let upfn = function upfn(e) {
	      if (self.info.started) {
	        movefn(e);
	      }

	      // remove the temporary listeners
	      untrackDocument(self.info);
	    };
	    // add temporary document listeners as mouse retargets
	    trackDocument(this.info, movefn, upfn);
	    this.info.x = e.clientX;
	    this.info.y = e.clientY;
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchstart: function(e) {
	    let ct = e.changedTouches[0];
	    this.info.x = ct.clientX;
	    this.info.y = ct.clientY;
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchmove: function(e) {
	    let t = _findOriginalTarget(e);
	    let ct = e.changedTouches[0];
	    let x = ct.clientX, y = ct.clientY;
	    if (trackHasMovedEnough(this.info, x, y)) {
	      if (this.info.state === 'start') {
	        // if and only if tracking, always prevent tap
	        prevent('tap');
	      }
	      this.info.addMove({x: x, y: y});
	      trackFire(this.info, t, ct);
	      this.info.state = 'track';
	      this.info.started = true;
	    }
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchend: function(e) {
	    let t = _findOriginalTarget(e);
	    let ct = e.changedTouches[0];
	    // only trackend if track was started and not aborted
	    if (this.info.started) {
	      // reset started state on up
	      this.info.state = 'end';
	      this.info.addMove({x: ct.clientX, y: ct.clientY});
	      trackFire(this.info, t, ct);
	    }
	  }
	});

	/**
	 * @param {!GestureInfo} info
	 * @param {number} x
	 * @param {number} y
	 * @return {boolean}
	 */
	function trackHasMovedEnough(info, x, y) {
	  if (info.prevent) {
	    return false;
	  }
	  if (info.started) {
	    return true;
	  }
	  let dx = Math.abs(info.x - x);
	  let dy = Math.abs(info.y - y);
	  return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);
	}

	/**
	 * @param {!GestureInfo} info
	 * @param {?EventTarget} target
	 * @param {Touch} touch
	 * @return {void}
	 */
	function trackFire(info, target, touch) {
	  if (!target) {
	    return;
	  }
	  let secondlast = info.moves[info.moves.length - 2];
	  let lastmove = info.moves[info.moves.length - 1];
	  let dx = lastmove.x - info.x;
	  let dy = lastmove.y - info.y;
	  let ddx, ddy = 0;
	  if (secondlast) {
	    ddx = lastmove.x - secondlast.x;
	    ddy = lastmove.y - secondlast.y;
	  }
	  _fire(target, 'track', {
	    state: info.state,
	    x: touch.clientX,
	    y: touch.clientY,
	    dx: dx,
	    dy: dy,
	    ddx: ddx,
	    ddy: ddy,
	    sourceEvent: touch,
	    hover: function() {
	      return deepTargetFind(touch.clientX, touch.clientY);
	    }
	  });
	}

	register$1({
	  name: 'tap',
	  deps: ['mousedown', 'click', 'touchstart', 'touchend'],
	  flow: {
	    start: ['mousedown', 'touchstart'],
	    end: ['click', 'touchend']
	  },
	  emits: ['tap'],
	  info: {
	    x: NaN,
	    y: NaN,
	    prevent: false
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @return {void}
	   */
	  reset: function() {
	    this.info.x = NaN;
	    this.info.y = NaN;
	    this.info.prevent = false;
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {MouseEvent} e
	   * @return {void}
	   */
	  mousedown: function(e) {
	    if (hasLeftMouseButton(e)) {
	      this.info.x = e.clientX;
	      this.info.y = e.clientY;
	    }
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {MouseEvent} e
	   * @return {void}
	   */
	  click: function(e) {
	    if (hasLeftMouseButton(e)) {
	      trackForward(this.info, e);
	    }
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchstart: function(e) {
	    const touch = e.changedTouches[0];
	    this.info.x = touch.clientX;
	    this.info.y = touch.clientY;
	  },
	  /**
	   * @this {GestureRecognizer}
	   * @param {TouchEvent} e
	   * @return {void}
	   */
	  touchend: function(e) {
	    trackForward(this.info, e.changedTouches[0], e);
	  }
	});

	/**
	 * @param {!GestureInfo} info
	 * @param {Event | Touch} e
	 * @param {Event=} preventer
	 * @return {void}
	 */
	function trackForward(info, e, preventer) {
	  let dx = Math.abs(e.clientX - info.x);
	  let dy = Math.abs(e.clientY - info.y);
	  // find original target from `preventer` for TouchEvents, or `e` for MouseEvents
	  let t = _findOriginalTarget((preventer || e));
	  if (!t || (canBeDisabled[/** @type {!HTMLElement} */(t).localName] && t.hasAttribute('disabled'))) {
	    return;
	  }
	  // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`
	  if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {
	    // prevent taps from being generated if an event has canceled them
	    if (!info.prevent) {
	      _fire(t, 'tap', {
	        x: e.clientX,
	        y: e.clientY,
	        sourceEvent: e,
	        preventer: preventer
	      });
	    }
	  }
	}

	/* eslint-enable valid-jsdoc */

	/** @deprecated */
	const findOriginalTarget = _findOriginalTarget;

	/** @deprecated */
	const add = addListener;

	/** @deprecated */
	const remove = removeListener;

	var gestures$0 = /*#__PURE__*/Object.freeze({
		gestures: gestures,
		recognizers: recognizers,
		deepTargetFind: deepTargetFind,
		addListener: addListener,
		removeListener: removeListener,
		register: register$1,
		setTouchAction: setTouchAction,
		prevent: prevent,
		resetMouseCanceller: resetMouseCanceller,
		findOriginalTarget: findOriginalTarget,
		add: add,
		remove: remove
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const gestures$1 = gestures$0;

	/**
	 * Element class mixin that provides API for adding Polymer's cross-platform
	 * gesture events to nodes.
	 *
	 * The API is designed to be compatible with override points implemented
	 * in `TemplateStamp` such that declarative event listeners in
	 * templates will support gesture events when this mixin is applied along with
	 * `TemplateStamp`.
	 *
	 * @mixinFunction
	 * @polymer
	 * @summary Element class mixin that provides API for adding Polymer's
	 *   cross-platform
	 * gesture events to nodes
	 */
	const GestureEventListeners = dedupingMixin(
	    /**
	     * @template T
	     * @param {function(new:T)} superClass Class to apply mixin to.
	     * @return {function(new:T)} superClass with mixin applied.
	     */
	    (superClass) => {
	      /**
	       * @polymer
	       * @mixinClass
	       * @implements {Polymer_GestureEventListeners}
	       */
	      class GestureEventListeners extends superClass {
	        /**
	         * Add the event listener to the node if it is a gestures event.
	         *
	         * @param {!Node} node Node to add event listener to
	         * @param {string} eventName Name of event
	         * @param {function(!Event):void} handler Listener function to add
	         * @return {void}
	         * @override
	         */
	        _addEventListenerToNode(node, eventName, handler) {
	          if (!gestures$1.addListener(node, eventName, handler)) {
	            super._addEventListenerToNode(node, eventName, handler);
	          }
	        }

	        /**
	         * Remove the event listener to the node if it is a gestures event.
	         *
	         * @param {!Node} node Node to remove event listener from
	         * @param {string} eventName Name of event
	         * @param {function(!Event):void} handler Listener function to remove
	         * @return {void}
	         * @override
	         */
	        _removeEventListenerFromNode(node, eventName, handler) {
	          if (!gestures$1.removeListener(node, eventName, handler)) {
	            super._removeEventListenerFromNode(node, eventName, handler);
	          }
	        }
	      }

	      return GestureEventListeners;
	    });

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const HOST_DIR = /:host\(:dir\((ltr|rtl)\)\)/g;
	const HOST_DIR_REPLACMENT = ':host([dir="$1"])';

	const EL_DIR = /([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g;
	const EL_DIR_REPLACMENT = ':host([dir="$2"]) $1';

	/**
	 * @type {!Array<!Polymer_DirMixin>}
	 */
	const DIR_INSTANCES = [];

	/** @type {MutationObserver} */
	let observer = null;

	let DOCUMENT_DIR = '';

	function getRTL() {
	  DOCUMENT_DIR = document.documentElement.getAttribute('dir');
	}

	/**
	 * @param {!Polymer_DirMixin} instance Instance to set RTL status on
	 */
	function setRTL(instance) {
	  if (!instance.__autoDirOptOut) {
	    const el = /** @type {!HTMLElement} */(instance);
	    el.setAttribute('dir', DOCUMENT_DIR);
	  }
	}

	function updateDirection() {
	  getRTL();
	  DOCUMENT_DIR = document.documentElement.getAttribute('dir');
	  for (let i = 0; i < DIR_INSTANCES.length; i++) {
	    setRTL(DIR_INSTANCES[i]);
	  }
	}

	function takeRecords() {
	  if (observer && observer.takeRecords().length) {
	    updateDirection();
	  }
	}

	/**
	 * Element class mixin that allows elements to use the `:dir` CSS Selector to
	 * have text direction specific styling.
	 *
	 * With this mixin, any stylesheet provided in the template will transform
	 * `:dir` into `:host([dir])` and sync direction with the page via the
	 * element's `dir` attribute.
	 *
	 * Elements can opt out of the global page text direction by setting the `dir`
	 * attribute directly in `ready()` or in HTML.
	 *
	 * Caveats:
	 * - Applications must set `<html dir="ltr">` or `<html dir="rtl">` to sync
	 *   direction
	 * - Automatic left-to-right or right-to-left styling is sync'd with the
	 *   `<html>` element only.
	 * - Changing `dir` at runtime is supported.
	 * - Opting out of the global direction styling is permanent
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin PropertyAccessors
	 */
	const DirMixin = dedupingMixin((base) => {

	  if (!observer) {
	    getRTL();
	    observer = new MutationObserver(updateDirection);
	    observer.observe(document.documentElement, {attributes: true, attributeFilter: ['dir']});
	  }

	  /**
	   * @constructor
	   * @extends {base}
	   * @implements {Polymer_PropertyAccessors}
	   * @private
	   */
	  const elementBase = PropertyAccessors(base);

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_DirMixin}
	   */
	  class Dir extends elementBase {

	    /**
	     * @override
	     * @suppress {missingProperties} Interfaces in closure do not inherit statics, but classes do
	     */
	    static _processStyleText(cssText, baseURI) {
	      cssText = super._processStyleText(cssText, baseURI);
	      cssText = this._replaceDirInCssText(cssText);
	      return cssText;
	    }

	    /**
	     * Replace `:dir` in the given CSS text
	     *
	     * @param {string} text CSS text to replace DIR
	     * @return {string} Modified CSS
	     */
	    static _replaceDirInCssText(text) {
	      let replacedText = text;
	      replacedText = replacedText.replace(HOST_DIR, HOST_DIR_REPLACMENT);
	      replacedText = replacedText.replace(EL_DIR, EL_DIR_REPLACMENT);
	      if (text !== replacedText) {
	        this.__activateDir = true;
	      }
	      return replacedText;
	    }

	    constructor() {
	      super();
	      /** @type {boolean} */
	      this.__autoDirOptOut = false;
	    }

	    /**
	     * @suppress {invalidCasts} Closure doesn't understand that `this` is an HTMLElement
	     * @return {void}
	     */
	    ready() {
	      super.ready();
	      this.__autoDirOptOut = /** @type {!HTMLElement} */(this).hasAttribute('dir');
	    }

	    /**
	     * @suppress {missingProperties} If it exists on elementBase, it can be super'd
	     * @return {void}
	     */
	    connectedCallback() {
	      if (elementBase.prototype.connectedCallback) {
	        super.connectedCallback();
	      }
	      if (this.constructor.__activateDir) {
	        takeRecords();
	        DIR_INSTANCES.push(this);
	        setRTL(this);
	      }
	    }

	    /**
	     * @suppress {missingProperties} If it exists on elementBase, it can be super'd
	     * @return {void}
	     */
	    disconnectedCallback() {
	      if (elementBase.prototype.disconnectedCallback) {
	        super.disconnectedCallback();
	      }
	      if (this.constructor.__activateDir) {
	        const idx = DIR_INSTANCES.indexOf(this);
	        if (idx > -1) {
	          DIR_INSTANCES.splice(idx, 1);
	        }
	      }
	    }
	  }

	  Dir.__activateDir = false;

	  return Dir;
	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	function resolve() {
	  document.body.removeAttribute('unresolved');
	}

	if (document.readyState === 'interactive' || document.readyState === 'complete') {
	  resolve();
	} else {
	  window.addEventListener('DOMContentLoaded', resolve);
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	function newSplice(index, removed, addedCount) {
	  return {
	    index: index,
	    removed: removed,
	    addedCount: addedCount
	  };
	}

	const EDIT_LEAVE = 0;
	const EDIT_UPDATE = 1;
	const EDIT_ADD = 2;
	const EDIT_DELETE = 3;

	// Note: This function is *based* on the computation of the Levenshtein
	// "edit" distance. The one change is that "updates" are treated as two
	// edits - not one. With Array splices, an update is really a delete
	// followed by an add. By retaining this, we optimize for "keeping" the
	// maximum array items in the original array. For example:
	//
	//   'xxxx123' -> '123yyyy'
	//
	// With 1-edit updates, the shortest path would be just to update all seven
	// characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
	// leaves the substring '123' intact.
	function calcEditDistances(current, currentStart, currentEnd,
	                            old, oldStart, oldEnd) {
	  // "Deletion" columns
	  let rowCount = oldEnd - oldStart + 1;
	  let columnCount = currentEnd - currentStart + 1;
	  let distances = new Array(rowCount);

	  // "Addition" rows. Initialize null column.
	  for (let i = 0; i < rowCount; i++) {
	    distances[i] = new Array(columnCount);
	    distances[i][0] = i;
	  }

	  // Initialize null row
	  for (let j = 0; j < columnCount; j++)
	    distances[0][j] = j;

	  for (let i = 1; i < rowCount; i++) {
	    for (let j = 1; j < columnCount; j++) {
	      if (equals(current[currentStart + j - 1], old[oldStart + i - 1]))
	        distances[i][j] = distances[i - 1][j - 1];
	      else {
	        let north = distances[i - 1][j] + 1;
	        let west = distances[i][j - 1] + 1;
	        distances[i][j] = north < west ? north : west;
	      }
	    }
	  }

	  return distances;
	}

	// This starts at the final weight, and walks "backward" by finding
	// the minimum previous weight recursively until the origin of the weight
	// matrix.
	function spliceOperationsFromEditDistances(distances) {
	  let i = distances.length - 1;
	  let j = distances[0].length - 1;
	  let current = distances[i][j];
	  let edits = [];
	  while (i > 0 || j > 0) {
	    if (i == 0) {
	      edits.push(EDIT_ADD);
	      j--;
	      continue;
	    }
	    if (j == 0) {
	      edits.push(EDIT_DELETE);
	      i--;
	      continue;
	    }
	    let northWest = distances[i - 1][j - 1];
	    let west = distances[i - 1][j];
	    let north = distances[i][j - 1];

	    let min;
	    if (west < north)
	      min = west < northWest ? west : northWest;
	    else
	      min = north < northWest ? north : northWest;

	    if (min == northWest) {
	      if (northWest == current) {
	        edits.push(EDIT_LEAVE);
	      } else {
	        edits.push(EDIT_UPDATE);
	        current = northWest;
	      }
	      i--;
	      j--;
	    } else if (min == west) {
	      edits.push(EDIT_DELETE);
	      i--;
	      current = west;
	    } else {
	      edits.push(EDIT_ADD);
	      j--;
	      current = north;
	    }
	  }

	  edits.reverse();
	  return edits;
	}

	/**
	 * Splice Projection functions:
	 *
	 * A splice map is a representation of how a previous array of items
	 * was transformed into a new array of items. Conceptually it is a list of
	 * tuples of
	 *
	 *   <index, removed, addedCount>
	 *
	 * which are kept in ascending index order of. The tuple represents that at
	 * the |index|, |removed| sequence of items were removed, and counting forward
	 * from |index|, |addedCount| items were added.
	 */

	/**
	 * Lacking individual splice mutation information, the minimal set of
	 * splices can be synthesized given the previous state and final state of an
	 * array. The basic approach is to calculate the edit distance matrix and
	 * choose the shortest path through it.
	 *
	 * Complexity: O(l * p)
	 *   l: The length of the current array
	 *   p: The length of the old array
	 *
	 * @param {!Array} current The current "changed" array for which to
	 * calculate splices.
	 * @param {number} currentStart Starting index in the `current` array for
	 * which splices are calculated.
	 * @param {number} currentEnd Ending index in the `current` array for
	 * which splices are calculated.
	 * @param {!Array} old The original "unchanged" array to compare `current`
	 * against to determine splices.
	 * @param {number} oldStart Starting index in the `old` array for
	 * which splices are calculated.
	 * @param {number} oldEnd Ending index in the `old` array for
	 * which splices are calculated.
	 * @return {!Array} Returns an array of splice record objects. Each of these
	 * contains: `index` the location where the splice occurred; `removed`
	 * the array of removed items from this location; `addedCount` the number
	 * of items added at this location.
	 */
	function calcSplices(current, currentStart, currentEnd,
	                      old, oldStart, oldEnd) {
	  let prefixCount = 0;
	  let suffixCount = 0;
	  let splice;

	  let minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
	  if (currentStart == 0 && oldStart == 0)
	    prefixCount = sharedPrefix(current, old, minLength);

	  if (currentEnd == current.length && oldEnd == old.length)
	    suffixCount = sharedSuffix(current, old, minLength - prefixCount);

	  currentStart += prefixCount;
	  oldStart += prefixCount;
	  currentEnd -= suffixCount;
	  oldEnd -= suffixCount;

	  if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)
	    return [];

	  if (currentStart == currentEnd) {
	    splice = newSplice(currentStart, [], 0);
	    while (oldStart < oldEnd)
	      splice.removed.push(old[oldStart++]);

	    return [ splice ];
	  } else if (oldStart == oldEnd)
	    return [ newSplice(currentStart, [], currentEnd - currentStart) ];

	  let ops = spliceOperationsFromEditDistances(
	      calcEditDistances(current, currentStart, currentEnd,
	                             old, oldStart, oldEnd));

	  splice = undefined;
	  let splices = [];
	  let index = currentStart;
	  let oldIndex = oldStart;
	  for (let i = 0; i < ops.length; i++) {
	    switch(ops[i]) {
	      case EDIT_LEAVE:
	        if (splice) {
	          splices.push(splice);
	          splice = undefined;
	        }

	        index++;
	        oldIndex++;
	        break;
	      case EDIT_UPDATE:
	        if (!splice)
	          splice = newSplice(index, [], 0);

	        splice.addedCount++;
	        index++;

	        splice.removed.push(old[oldIndex]);
	        oldIndex++;
	        break;
	      case EDIT_ADD:
	        if (!splice)
	          splice = newSplice(index, [], 0);

	        splice.addedCount++;
	        index++;
	        break;
	      case EDIT_DELETE:
	        if (!splice)
	          splice = newSplice(index, [], 0);

	        splice.removed.push(old[oldIndex]);
	        oldIndex++;
	        break;
	    }
	  }

	  if (splice) {
	    splices.push(splice);
	  }
	  return splices;
	}

	function sharedPrefix(current, old, searchLength) {
	  for (let i = 0; i < searchLength; i++)
	    if (!equals(current[i], old[i]))
	      return i;
	  return searchLength;
	}

	function sharedSuffix(current, old, searchLength) {
	  let index1 = current.length;
	  let index2 = old.length;
	  let count = 0;
	  while (count < searchLength && equals(current[--index1], old[--index2]))
	    count++;

	  return count;
	}

	/**
	 * Returns an array of splice records indicating the minimum edits required
	 * to transform the `previous` array into the `current` array.
	 *
	 * Splice records are ordered by index and contain the following fields:
	 * - `index`: index where edit started
	 * - `removed`: array of removed items from this index
	 * - `addedCount`: number of items added at this index
	 *
	 * This function is based on the Levenshtein "minimum edit distance"
	 * algorithm. Note that updates are treated as removal followed by addition.
	 *
	 * The worst-case time complexity of this algorithm is `O(l * p)`
	 *   l: The length of the current array
	 *   p: The length of the previous array
	 *
	 * However, the worst-case complexity is reduced by an `O(n)` optimization
	 * to detect any shared prefix & suffix between the two arrays and only
	 * perform the more expensive minimum edit distance calculation over the
	 * non-shared portions of the arrays.
	 *
	 * @function
	 * @param {!Array} current The "changed" array for which splices will be
	 * calculated.
	 * @param {!Array} previous The "unchanged" original array to compare
	 * `current` against to determine the splices.
	 * @return {!Array} Returns an array of splice record objects. Each of these
	 * contains: `index` the location where the splice occurred; `removed`
	 * the array of removed items from this location; `addedCount` the number
	 * of items added at this location.
	 */
	function calculateSplices(current, previous) {
	  return calcSplices(current, 0, current.length, previous, 0,
	                          previous.length);
	}

	function equals(currentValue, previousValue) {
	  return currentValue === previousValue;
	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Returns true if `node` is a slot element
	 * @param {Node} node Node to test.
	 * @return {boolean} Returns true if the given `node` is a slot
	 * @private
	 */
	function isSlot(node) {
	  return (node.localName === 'slot');
	}

	/**
	 * Class that listens for changes (additions or removals) to
	 * "flattened nodes" on a given `node`. The list of flattened nodes consists
	 * of a node's children and, for any children that are `<slot>` elements,
	 * the expanded flattened list of `assignedNodes`.
	 * For example, if the observed node has children `<a></a><slot></slot><b></b>`
	 * and the `<slot>` has one `<div>` assigned to it, then the flattened
	 * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
	 * `<slot>` elements assigned to it, these are flattened as well.
	 *
	 * The provided `callback` is called whenever any change to this list
	 * of flattened nodes occurs, where an addition or removal of a node is
	 * considered a change. The `callback` is called with one argument, an object
	 * containing an array of any `addedNodes` and `removedNodes`.
	 *
	 * Note: the callback is called asynchronous to any changes
	 * at a microtask checkpoint. This is because observation is performed using
	 * `MutationObserver` and the `<slot>` element's `slotchange` event which
	 * are asynchronous.
	 *
	 * An example:
	 * ```js
	 * class TestSelfObserve extends PolymerElement {
	 *   static get is() { return 'test-self-observe';}
	 *   connectedCallback() {
	 *     super.connectedCallback();
	 *     this._observer = new FlattenedNodesObserver(this, (info) => {
	 *       this.info = info;
	 *     });
	 *   }
	 *   disconnectedCallback() {
	 *     super.disconnectedCallback();
	 *     this._observer.disconnect();
	 *   }
	 * }
	 * customElements.define(TestSelfObserve.is, TestSelfObserve);
	 * ```
	 *
	 * @summary Class that listens for changes (additions or removals) to
	 * "flattened nodes" on a given `node`.
	 */
	class FlattenedNodesObserver {

	  /**
	   * Returns the list of flattened nodes for the given `node`.
	   * This list consists of a node's children and, for any children
	   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.
	   * For example, if the observed node has children `<a></a><slot></slot><b></b>`
	   * and the `<slot>` has one `<div>` assigned to it, then the flattened
	   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other
	   * `<slot>` elements assigned to it, these are flattened as well.
	   *
	   * @param {HTMLElement|HTMLSlotElement} node The node for which to return the list of flattened nodes.
	   * @return {Array} The list of flattened nodes for the given `node`.
	  */
	  static getFlattenedNodes(node) {
	    if (isSlot(node)) {
	      node = /** @type {HTMLSlotElement} */(node); // eslint-disable-line no-self-assign
	      return node.assignedNodes({flatten: true});
	    } else {
	      return Array.from(node.childNodes).map((node) => {
	        if (isSlot(node)) {
	          node = /** @type {HTMLSlotElement} */(node); // eslint-disable-line no-self-assign
	          return node.assignedNodes({flatten: true});
	        } else {
	          return [node];
	        }
	      }).reduce((a, b) => a.concat(b), []);
	    }
	  }

	  /**
	   * @param {Element} target Node on which to listen for changes.
	   * @param {?function(!Element, { target: !Element, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions
	   * or removals from the target's list of flattened nodes.
	  */
	  constructor(target, callback) {
	    /**
	     * @type {MutationObserver}
	     * @private
	     */
	    this._shadyChildrenObserver = null;
	    /**
	     * @type {MutationObserver}
	     * @private
	     */
	    this._nativeChildrenObserver = null;
	    this._connected = false;
	    /**
	     * @type {Element}
	     * @private
	     */
	    this._target = target;
	    this.callback = callback;
	    this._effectiveNodes = [];
	    this._observer = null;
	    this._scheduled = false;
	    /**
	     * @type {function()}
	     * @private
	     */
	    this._boundSchedule = () => {
	      this._schedule();
	    };
	    this.connect();
	    this._schedule();
	  }

	  /**
	   * Activates an observer. This method is automatically called when
	   * a `FlattenedNodesObserver` is created. It should only be called to
	   * re-activate an observer that has been deactivated via the `disconnect` method.
	   *
	   * @return {void}
	   */
	  connect() {
	    if (isSlot(this._target)) {
	      this._listenSlots([this._target]);
	    } else if (this._target.children) {
	      this._listenSlots(this._target.children);
	      if (window.ShadyDOM) {
	        this._shadyChildrenObserver =
	          ShadyDOM.observeChildren(this._target, (mutations) => {
	            this._processMutations(mutations);
	          });
	      } else {
	        this._nativeChildrenObserver =
	          new MutationObserver((mutations) => {
	            this._processMutations(mutations);
	          });
	        this._nativeChildrenObserver.observe(this._target, {childList: true});
	      }
	    }
	    this._connected = true;
	  }

	  /**
	   * Deactivates the flattened nodes observer. After calling this method
	   * the observer callback will not be called when changes to flattened nodes
	   * occur. The `connect` method may be subsequently called to reactivate
	   * the observer.
	   *
	   * @return {void}
	   */
	  disconnect() {
	    if (isSlot(this._target)) {
	      this._unlistenSlots([this._target]);
	    } else if (this._target.children) {
	      this._unlistenSlots(this._target.children);
	      if (window.ShadyDOM && this._shadyChildrenObserver) {
	        ShadyDOM.unobserveChildren(this._shadyChildrenObserver);
	        this._shadyChildrenObserver = null;
	      } else if (this._nativeChildrenObserver) {
	        this._nativeChildrenObserver.disconnect();
	        this._nativeChildrenObserver = null;
	      }
	    }
	    this._connected = false;
	  }

	  /**
	   * @return {void}
	   * @private
	   */
	  _schedule() {
	    if (!this._scheduled) {
	      this._scheduled = true;
	      microTask.run(() => this.flush());
	    }
	  }

	  /**
	   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
	   * @return {void}
	   * @private
	   */
	  _processMutations(mutations) {
	    this._processSlotMutations(mutations);
	    this.flush();
	  }

	  /**
	   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer
	   * @return {void}
	   * @private
	   */
	  _processSlotMutations(mutations) {
	    if (mutations) {
	      for (let i=0; i < mutations.length; i++) {
	        let mutation = mutations[i];
	        if (mutation.addedNodes) {
	          this._listenSlots(mutation.addedNodes);
	        }
	        if (mutation.removedNodes) {
	          this._unlistenSlots(mutation.removedNodes);
	        }
	      }
	    }
	  }

	  /**
	   * Flushes the observer causing any pending changes to be immediately
	   * delivered the observer callback. By default these changes are delivered
	   * asynchronously at the next microtask checkpoint.
	   *
	   * @return {boolean} Returns true if any pending changes caused the observer
	   * callback to run.
	   */
	  flush() {
	    if (!this._connected) {
	      return false;
	    }
	    if (window.ShadyDOM) {
	      ShadyDOM.flush();
	    }
	    if (this._nativeChildrenObserver) {
	      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());
	    } else if (this._shadyChildrenObserver) {
	      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());
	    }
	    this._scheduled = false;
	    let info = {
	      target: this._target,
	      addedNodes: [],
	      removedNodes: []
	    };
	    let newNodes = this.constructor.getFlattenedNodes(this._target);
	    let splices = calculateSplices(newNodes,
	      this._effectiveNodes);
	    // process removals
	    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {
	      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {
	        info.removedNodes.push(n);
	      }
	    }
	    // process adds
	    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {
	      for (let j=s.index; j < s.index + s.addedCount; j++) {
	        info.addedNodes.push(newNodes[j]);
	      }
	    }
	    // update cache
	    this._effectiveNodes = newNodes;
	    let didFlush = false;
	    if (info.addedNodes.length || info.removedNodes.length) {
	      didFlush = true;
	      this.callback.call(this._target, info);
	    }
	    return didFlush;
	  }

	  /**
	   * @param {!Array<Element|Node>|!NodeList<Node>} nodeList Nodes that could change
	   * @return {void}
	   * @private
	   */
	  _listenSlots(nodeList) {
	    for (let i=0; i < nodeList.length; i++) {
	      let n = nodeList[i];
	      if (isSlot(n)) {
	        n.addEventListener('slotchange', this._boundSchedule);
	      }
	    }
	  }

	  /**
	   * @param {!Array<Element|Node>|!NodeList<Node>} nodeList Nodes that could change
	   * @return {void}
	   * @private
	   */
	  _unlistenSlots(nodeList) {
	    for (let i=0; i < nodeList.length; i++) {
	      let n = nodeList[i];
	      if (isSlot(n)) {
	        n.removeEventListener('slotchange', this._boundSchedule);
	      }
	    }
	  }

	}

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const p = Element.prototype;
	/**
	 * @const {function(this:Node, string): boolean}
	 */
	const normalizedMatchesSelector = p.matches || p.matchesSelector ||
	  p.mozMatchesSelector || p.msMatchesSelector ||
	  p.oMatchesSelector || p.webkitMatchesSelector;

	/**
	 * Cross-platform `element.matches` shim.
	 *
	 * @function matchesSelector
	 * @param {!Node} node Node to check selector against
	 * @param {string} selector Selector to match
	 * @return {boolean} True if node matched selector
	 */
	const matchesSelector = function(node, selector) {
	  return normalizedMatchesSelector.call(node, selector);
	};

	/**
	 * Node API wrapper class returned from `Polymer.dom.(target)` when
	 * `target` is a `Node`.
	 *
	 */
	class DomApi {

	  /**
	   * @param {Node} node Node for which to create a Polymer.dom helper object.
	   */
	  constructor(node) {
	    this.node = node;
	  }

	  /**
	   * Returns an instance of `Polymer.FlattenedNodesObserver` that
	   * listens for node changes on this element.
	   *
	   * @param {function(!Element, { target: !Element, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Called when direct or distributed children
	   *   of this element changes
	   * @return {!FlattenedNodesObserver} Observer instance
	   */
	  observeNodes(callback) {
	    return new FlattenedNodesObserver(this.node, callback);
	  }

	  /**
	   * Disconnects an observer previously created via `observeNodes`
	   *
	   * @param {!FlattenedNodesObserver} observerHandle Observer instance
	   *   to disconnect.
	   * @return {void}
	   */
	  unobserveNodes(observerHandle) {
	    observerHandle.disconnect();
	  }

	  /**
	   * Provided as a backwards-compatible API only.  This method does nothing.
	   * @return {void}
	   */
	  notifyObserver() {}

	  /**
	   * Returns true if the provided node is contained with this element's
	   * light-DOM children or shadow root, including any nested shadow roots
	   * of children therein.
	   *
	   * @param {Node} node Node to test
	   * @return {boolean} Returns true if the given `node` is contained within
	   *   this element's light or shadow DOM.
	   */
	  deepContains(node) {
	    if (this.node.contains(node)) {
	      return true;
	    }
	    let n = node;
	    let doc = node.ownerDocument;
	    // walk from node to `this` or `document`
	    while (n && n !== doc && n !== this.node) {
	      // use logical parentnode, or native ShadowRoot host
	      n = n.parentNode || n.host;
	    }
	    return n === this.node;
	  }

	  /**
	   * Returns the root node of this node.  Equivalent to `getRootNode()`.
	   *
	   * @return {Node} Top most element in the dom tree in which the node
	   * exists. If the node is connected to a document this is either a
	   * shadowRoot or the document; otherwise, it may be the node
	   * itself or a node or document fragment containing it.
	   */
	  getOwnerRoot() {
	    return this.node.getRootNode();
	  }

	  /**
	   * For slot elements, returns the nodes assigned to the slot; otherwise
	   * an empty array. It is equivalent to `<slot>.addignedNodes({flatten:true})`.
	   *
	   * @return {!Array<!Node>} Array of assigned nodes
	   */
	  getDistributedNodes() {
	    return (this.node.localName === 'slot') ?
	      this.node.assignedNodes({flatten: true}) :
	      [];
	  }

	  /**
	   * Returns an array of all slots this element was distributed to.
	   *
	   * @return {!Array<!HTMLSlotElement>} Description
	   */
	  getDestinationInsertionPoints() {
	    let ip$ = [];
	    let n = this.node.assignedSlot;
	    while (n) {
	      ip$.push(n);
	      n = n.assignedSlot;
	    }
	    return ip$;
	  }

	  /**
	   * Calls `importNode` on the `ownerDocument` for this node.
	   *
	   * @param {!Node} node Node to import
	   * @param {boolean} deep True if the node should be cloned deeply during
	   *   import
	   * @return {Node} Clone of given node imported to this owner document
	   */
	  importNode(node, deep) {
	    let doc = this.node instanceof Document ? this.node :
	      this.node.ownerDocument;
	    return doc.importNode(node, deep);
	  }

	  /**
	   * @return {!Array<!Node>} Returns a flattened list of all child nodes and
	   * nodes assigned to child slots.
	   */
	  getEffectiveChildNodes() {
	    return FlattenedNodesObserver.getFlattenedNodes(this.node);
	  }

	  /**
	   * Returns a filtered list of flattened child elements for this element based
	   * on the given selector.
	   *
	   * @param {string} selector Selector to filter nodes against
	   * @return {!Array<!HTMLElement>} List of flattened child elements
	   */
	  queryDistributedElements(selector) {
	    let c$ = this.getEffectiveChildNodes();
	    let list = [];
	    for (let i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {
	      if ((c.nodeType === Node.ELEMENT_NODE) &&
	          matchesSelector(c, selector)) {
	        list.push(c);
	      }
	    }
	    return list;
	  }

	  /**
	   * For shadow roots, returns the currently focused element within this
	   * shadow root.
	   *
	   * @return {Node|undefined} Currently focused element
	   */
	  get activeElement() {
	    let node = this.node;
	    return node._activeElement !== undefined ? node._activeElement : node.activeElement;
	  }
	}

	function forwardMethods(proto, methods) {
	  for (let i=0; i < methods.length; i++) {
	    let method = methods[i];
	    /* eslint-disable valid-jsdoc */
	    proto[method] = /** @this {DomApi} */ function() {
	      return this.node[method].apply(this.node, arguments);
	    };
	    /* eslint-enable */
	  }
	}

	function forwardReadOnlyProperties(proto, properties) {
	  for (let i=0; i < properties.length; i++) {
	    let name = properties[i];
	    Object.defineProperty(proto, name, {
	      get: function() {
	        const domApi = /** @type {DomApi} */(this);
	        return domApi.node[name];
	      },
	      configurable: true
	    });
	  }
	}

	function forwardProperties(proto, properties) {
	  for (let i=0; i < properties.length; i++) {
	    let name = properties[i];
	    Object.defineProperty(proto, name, {
	      get: function() {
	        const domApi = /** @type {DomApi} */(this);
	        return domApi.node[name];
	      },
	      set: function(value) {
	        /** @type {DomApi} */ (this).node[name] = value;
	      },
	      configurable: true
	    });
	  }
	}


	/**
	 * Event API wrapper class returned from `Polymer.dom.(target)` when
	 * `target` is an `Event`.
	 */
	class EventApi {
	  constructor(event) {
	    this.event = event;
	  }

	  /**
	   * Returns the first node on the `composedPath` of this event.
	   *
	   * @return {!EventTarget} The node this event was dispatched to
	   */
	  get rootTarget() {
	    return this.event.composedPath()[0];
	  }

	  /**
	   * Returns the local (re-targeted) target for this event.
	   *
	   * @return {!EventTarget} The local (re-targeted) target for this event.
	   */
	  get localTarget() {
	    return this.event.target;
	  }

	  /**
	   * Returns the `composedPath` for this event.
	   * @return {!Array<!EventTarget>} The nodes this event propagated through
	   */
	  get path() {
	    return this.event.composedPath();
	  }
	}

	/**
	 * @function
	 * @param {boolean=} deep
	 * @return {!Node}
	 */
	DomApi.prototype.cloneNode;
	/**
	 * @function
	 * @param {!Node} node
	 * @return {!Node}
	 */
	DomApi.prototype.appendChild;
	/**
	 * @function
	 * @param {!Node} newChild
	 * @param {Node} refChild
	 * @return {!Node}
	 */
	DomApi.prototype.insertBefore;
	/**
	 * @function
	 * @param {!Node} node
	 * @return {!Node}
	 */
	DomApi.prototype.removeChild;
	/**
	 * @function
	 * @param {!Node} oldChild
	 * @param {!Node} newChild
	 * @return {!Node}
	 */
	DomApi.prototype.replaceChild;
	/**
	 * @function
	 * @param {string} name
	 * @param {string} value
	 * @return {void}
	 */
	DomApi.prototype.setAttribute;
	/**
	 * @function
	 * @param {string} name
	 * @return {void}
	 */
	DomApi.prototype.removeAttribute;
	/**
	 * @function
	 * @param {string} selector
	 * @return {?Element}
	 */
	DomApi.prototype.querySelector;
	/**
	 * @function
	 * @param {string} selector
	 * @return {!NodeList<!Element>}
	 */
	DomApi.prototype.querySelectorAll;

	/** @type {?Node} */
	DomApi.prototype.parentNode;
	/** @type {?Node} */
	DomApi.prototype.firstChild;
	/** @type {?Node} */
	DomApi.prototype.lastChild;
	/** @type {?Node} */
	DomApi.prototype.nextSibling;
	/** @type {?Node} */
	DomApi.prototype.previousSibling;
	/** @type {?HTMLElement} */
	DomApi.prototype.firstElementChild;
	/** @type {?HTMLElement} */
	DomApi.prototype.lastElementChild;
	/** @type {?HTMLElement} */
	DomApi.prototype.nextElementSibling;
	/** @type {?HTMLElement} */
	DomApi.prototype.previousElementSibling;
	/** @type {!Array<!Node>} */
	DomApi.prototype.childNodes;
	/** @type {!Array<!HTMLElement>} */
	DomApi.prototype.children;
	/** @type {?DOMTokenList} */
	DomApi.prototype.classList;

	/** @type {string} */
	DomApi.prototype.textContent;
	/** @type {string} */
	DomApi.prototype.innerHTML;

	forwardMethods(DomApi.prototype, [
	  'cloneNode', 'appendChild', 'insertBefore', 'removeChild',
	  'replaceChild', 'setAttribute', 'removeAttribute',
	  'querySelector', 'querySelectorAll'
	]);

	forwardReadOnlyProperties(DomApi.prototype, [
	  'parentNode', 'firstChild', 'lastChild',
	  'nextSibling', 'previousSibling', 'firstElementChild',
	  'lastElementChild', 'nextElementSibling', 'previousElementSibling',
	  'childNodes', 'children', 'classList'
	]);

	forwardProperties(DomApi.prototype, [
	  'textContent', 'innerHTML'
	]);

	/**
	 * Legacy DOM and Event manipulation API wrapper factory used to abstract
	 * differences between native Shadow DOM and "Shady DOM" when polyfilling on
	 * older browsers.
	 *
	 * Note that in Polymer 2.x use of `Polymer.dom` is no longer required and
	 * in the majority of cases simply facades directly to the standard native
	 * API.
	 *
	 * @summary Legacy DOM and Event manipulation API wrapper factory used to
	 * abstract differences between native Shadow DOM and "Shady DOM."
	 * @param {(Node|Event)=} obj Node or event to operate on
	 * @return {!DomApi|!EventApi} Wrapper providing either node API or event API
	 */
	const dom = function(obj) {
	  obj = obj || document;
	  if (!obj.__domApi) {
	    let helper;
	    if (obj instanceof Event) {
	      helper = new EventApi(obj);
	    } else {
	      helper = new DomApi(obj);
	    }
	    obj.__domApi = helper;
	  }
	  return obj.__domApi;
	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let styleInterface = window.ShadyCSS;

	/**
	 * Element class mixin that provides Polymer's "legacy" API intended to be
	 * backward-compatible to the greatest extent possible with the API
	 * found on the Polymer 1.x `Polymer.Base` prototype applied to all elements
	 * defined using the `Polymer({...})` function.
	 *
	 * @mixinFunction
	 * @polymer
	 * @appliesMixin ElementMixin
	 * @appliesMixin GestureEventListeners
	 * @property isAttached {boolean} Set to `true` in this element's
	 *   `connectedCallback` and `false` in `disconnectedCallback`
	 * @summary Element class mixin that provides Polymer's "legacy" API
	 */
	const LegacyElementMixin = dedupingMixin((base) => {

	  /**
	   * @constructor
	   * @extends {base}
	   * @implements {Polymer_ElementMixin}
	   * @implements {Polymer_GestureEventListeners}
	   * @implements {Polymer_DirMixin}
	   * @private
	   */
	  const legacyElementBase = DirMixin(GestureEventListeners(ElementMixin(base)));

	  /**
	   * Map of simple names to touch action names
	   * @dict
	   */
	  const DIRECTION_MAP = {
	    'x': 'pan-x',
	    'y': 'pan-y',
	    'none': 'none',
	    'all': 'auto'
	  };

	  /**
	   * @polymer
	   * @mixinClass
	   * @extends {legacyElementBase}
	   * @implements {Polymer_LegacyElementMixin}
	   * @unrestricted
	   */
	  class LegacyElement extends legacyElementBase {

	    constructor() {
	      super();
	      /** @type {boolean} */
	      this.isAttached;
	      /** @type {WeakMap<!Element, !Object<string, !Function>>} */
	      this.__boundListeners;
	      /** @type {Object<string, Function>} */
	      this._debouncers;
	      // Ensure listeners are applied immediately so that they are
	      // added before declarative event listeners. This allows an element to
	      // decorate itself via an event prior to any declarative listeners
	      // seeing the event. Note, this ensures compatibility with 1.x ordering.
	      this._applyListeners();
	    }

	    /**
	     * Forwards `importMeta` from the prototype (i.e. from the info object
	     * passed to `Polymer({...})`) to the static API.
	     *
	     * @return {!Object} The `import.meta` object set on the prototype
	     * @suppress {missingProperties} `this` is always in the instance in
	     *  closure for some reason even in a static method, rather than the class
	     */
	    static get importMeta() {
	      return this.prototype.importMeta;
	    }

	    /**
	     * Legacy callback called during the `constructor`, for overriding
	     * by the user.
	     * @return {void}
	     */
	    created() {}

	    /**
	     * Provides an implementation of `connectedCallback`
	     * which adds Polymer legacy API's `attached` method.
	     * @return {void}
	     * @override
	     */
	    connectedCallback() {
	      super.connectedCallback();
	      this.isAttached = true;
	      this.attached();
	    }

	    /**
	     * Legacy callback called during `connectedCallback`, for overriding
	     * by the user.
	     * @return {void}
	     */
	    attached() {}

	    /**
	     * Provides an implementation of `disconnectedCallback`
	     * which adds Polymer legacy API's `detached` method.
	     * @return {void}
	     * @override
	     */
	    disconnectedCallback() {
	      super.disconnectedCallback();
	      this.isAttached = false;
	      this.detached();
	    }

	    /**
	     * Legacy callback called during `disconnectedCallback`, for overriding
	     * by the user.
	     * @return {void}
	     */
	    detached() {}

	    /**
	     * Provides an override implementation of `attributeChangedCallback`
	     * which adds the Polymer legacy API's `attributeChanged` method.
	     * @param {string} name Name of attribute.
	     * @param {?string} old Old value of attribute.
	     * @param {?string} value Current value of attribute.
	     * @param {?string} namespace Attribute namespace.
	     * @return {void}
	     * @override
	     */
	    attributeChangedCallback(name, old, value, namespace) {
	      if (old !== value) {
	        super.attributeChangedCallback(name, old, value, namespace);
	        this.attributeChanged(name, old, value);
	      }
	    }

	    /**
	     * Legacy callback called during `attributeChangedChallback`, for overriding
	     * by the user.
	     * @param {string} name Name of attribute.
	     * @param {?string} old Old value of attribute.
	     * @param {?string} value Current value of attribute.
	     * @return {void}
	     */
	    attributeChanged(name, old, value) {} // eslint-disable-line no-unused-vars

	    /**
	     * Overrides the default `Polymer.PropertyEffects` implementation to
	     * add support for class initialization via the `_registered` callback.
	     * This is called only when the first instance of the element is created.
	     *
	     * @return {void}
	     * @override
	     * @suppress {invalidCasts}
	     */
	    _initializeProperties() {
	      let proto = Object.getPrototypeOf(this);
	      if (!proto.hasOwnProperty('__hasRegisterFinished')) {
	        proto.__hasRegisterFinished = true;
	        this._registered();
	      }
	      super._initializeProperties();
	      this.root = /** @type {HTMLElement} */(this);
	      this.created();
	    }

	    /**
	     * Called automatically when an element is initializing.
	     * Users may override this method to perform class registration time
	     * work. The implementation should ensure the work is performed
	     * only once for the class.
	     * @protected
	     * @return {void}
	     */
	    _registered() {}

	    /**
	     * Overrides the default `Polymer.PropertyEffects` implementation to
	     * add support for installing `hostAttributes` and `listeners`.
	     *
	     * @return {void}
	     * @override
	     */
	    ready() {
	      this._ensureAttributes();
	      super.ready();
	    }

	    /**
	     * Ensures an element has required attributes. Called when the element
	     * is being readied via `ready`. Users should override to set the
	     * element's required attributes. The implementation should be sure
	     * to check and not override existing attributes added by
	     * the user of the element. Typically, setting attributes should be left
	     * to the element user and not done here; reasonable exceptions include
	     * setting aria roles and focusability.
	     * @protected
	     * @return {void}
	     */
	    _ensureAttributes() {}

	    /**
	     * Adds element event listeners. Called when the element
	     * is being readied via `ready`. Users should override to
	     * add any required element event listeners.
	     * In performance critical elements, the work done here should be kept
	     * to a minimum since it is done before the element is rendered. In
	     * these elements, consider adding listeners asynchronously so as not to
	     * block render.
	     * @protected
	     * @return {void}
	     */
	    _applyListeners() {}

	    /**
	     * Converts a typed JavaScript value to a string.
	     *
	     * Note this method is provided as backward-compatible legacy API
	     * only.  It is not directly called by any Polymer features. To customize
	     * how properties are serialized to attributes for attribute bindings and
	     * `reflectToAttribute: true` properties as well as this method, override
	     * the `_serializeValue` method provided by `Polymer.PropertyAccessors`.
	     *
	     * @param {*} value Value to deserialize
	     * @return {string | undefined} Serialized value
	     */
	    serialize(value) {
	      return this._serializeValue(value);
	    }

	    /**
	     * Converts a string to a typed JavaScript value.
	     *
	     * Note this method is provided as backward-compatible legacy API
	     * only.  It is not directly called by any Polymer features.  To customize
	     * how attributes are deserialized to properties for in
	     * `attributeChangedCallback`, override `_deserializeValue` method
	     * provided by `Polymer.PropertyAccessors`.
	     *
	     * @param {string} value String to deserialize
	     * @param {*} type Type to deserialize the string to
	     * @return {*} Returns the deserialized value in the `type` given.
	     */
	    deserialize(value, type) {
	      return this._deserializeValue(value, type);
	    }

	    /**
	     * Serializes a property to its associated attribute.
	     *
	     * Note this method is provided as backward-compatible legacy API
	     * only.  It is not directly called by any Polymer features.
	     *
	     * @param {string} property Property name to reflect.
	     * @param {string=} attribute Attribute name to reflect.
	     * @param {*=} value Property value to reflect.
	     * @return {void}
	     */
	    reflectPropertyToAttribute(property, attribute, value) {
	      this._propertyToAttribute(property, attribute, value);
	    }

	    /**
	     * Sets a typed value to an HTML attribute on a node.
	     *
	     * Note this method is provided as backward-compatible legacy API
	     * only.  It is not directly called by any Polymer features.
	     *
	     * @param {*} value Value to serialize.
	     * @param {string} attribute Attribute name to serialize to.
	     * @param {Element} node Element to set attribute to.
	     * @return {void}
	     */
	    serializeValueToAttribute(value, attribute, node) {
	      this._valueToNodeAttribute(/** @type {Element} */ (node || this), value, attribute);
	    }

	    /**
	     * Copies own properties (including accessor descriptors) from a source
	     * object to a target object.
	     *
	     * @param {Object} prototype Target object to copy properties to.
	     * @param {Object} api Source object to copy properties from.
	     * @return {Object} prototype object that was passed as first argument.
	     */
	    extend(prototype, api) {
	      if (!(prototype && api)) {
	        return prototype || api;
	      }
	      let n$ = Object.getOwnPropertyNames(api);
	      for (let i=0, n; (i<n$.length) && (n=n$[i]); i++) {
	        let pd = Object.getOwnPropertyDescriptor(api, n);
	        if (pd) {
	          Object.defineProperty(prototype, n, pd);
	        }
	      }
	      return prototype;
	    }

	    /**
	     * Copies props from a source object to a target object.
	     *
	     * Note, this method uses a simple `for...in` strategy for enumerating
	     * properties.  To ensure only `ownProperties` are copied from source
	     * to target and that accessor implementations are copied, use `extend`.
	     *
	     * @param {!Object} target Target object to copy properties to.
	     * @param {!Object} source Source object to copy properties from.
	     * @return {!Object} Target object that was passed as first argument.
	     */
	    mixin(target, source) {
	      for (let i in source) {
	        target[i] = source[i];
	      }
	      return target;
	    }

	    /**
	     * Sets the prototype of an object.
	     *
	     * Note this method is provided as backward-compatible legacy API
	     * only.  It is not directly called by any Polymer features.
	     * @param {Object} object The object on which to set the prototype.
	     * @param {Object} prototype The prototype that will be set on the given
	     * `object`.
	     * @return {Object} Returns the given `object` with its prototype set
	     * to the given `prototype` object.
	     */
	    chainObject(object, prototype) {
	      if (object && prototype && object !== prototype) {
	        object.__proto__ = prototype;
	      }
	      return object;
	    }

	    /* **** Begin Template **** */

	    /**
	     * Calls `importNode` on the `content` of the `template` specified and
	     * returns a document fragment containing the imported content.
	     *
	     * @param {HTMLTemplateElement} template HTML template element to instance.
	     * @return {!DocumentFragment} Document fragment containing the imported
	     *   template content.
	    */
	    instanceTemplate(template) {
	      let content = this.constructor._contentForTemplate(template);
	      let dom$$1 = /** @type {!DocumentFragment} */
	        (document.importNode(content, true));
	      return dom$$1;
	    }

	    /* **** Begin Events **** */



	    /**
	     * Dispatches a custom event with an optional detail value.
	     *
	     * @param {string} type Name of event type.
	     * @param {*=} detail Detail value containing event-specific
	     *   payload.
	     * @param {{ bubbles: (boolean|undefined), cancelable: (boolean|undefined), composed: (boolean|undefined) }=}
	     *  options Object specifying options.  These may include:
	     *  `bubbles` (boolean, defaults to `true`),
	     *  `cancelable` (boolean, defaults to false), and
	     *  `node` on which to fire the event (HTMLElement, defaults to `this`).
	     * @return {!Event} The new event that was fired.
	     */
	    fire(type, detail, options) {
	      options = options || {};
	      detail = (detail === null || detail === undefined) ? {} : detail;
	      let event = new Event(type, {
	        bubbles: options.bubbles === undefined ? true : options.bubbles,
	        cancelable: Boolean(options.cancelable),
	        composed: options.composed === undefined ? true: options.composed
	      });
	      event.detail = detail;
	      let node = options.node || this;
	      node.dispatchEvent(event);
	      return event;
	    }

	    /**
	     * Convenience method to add an event listener on a given element,
	     * late bound to a named method on this element.
	     *
	     * @param {Element} node Element to add event listener to.
	     * @param {string} eventName Name of event to listen for.
	     * @param {string} methodName Name of handler method on `this` to call.
	     * @return {void}
	     */
	    listen(node, eventName, methodName) {
	      node = /** @type {!Element} */ (node || this);
	      let hbl = this.__boundListeners ||
	        (this.__boundListeners = new WeakMap());
	      let bl = hbl.get(node);
	      if (!bl) {
	        bl = {};
	        hbl.set(node, bl);
	      }
	      let key = eventName + methodName;
	      if (!bl[key]) {
	        bl[key] = this._addMethodEventListenerToNode(
	          node, eventName, methodName, this);
	      }
	    }

	    /**
	     * Convenience method to remove an event listener from a given element,
	     * late bound to a named method on this element.
	     *
	     * @param {Element} node Element to remove event listener from.
	     * @param {string} eventName Name of event to stop listening to.
	     * @param {string} methodName Name of handler method on `this` to not call
	     anymore.
	     * @return {void}
	     */
	    unlisten(node, eventName, methodName) {
	      node = /** @type {!Element} */ (node || this);
	      let bl = this.__boundListeners && this.__boundListeners.get(node);
	      let key = eventName + methodName;
	      let handler = bl && bl[key];
	      if (handler) {
	        this._removeEventListenerFromNode(node, eventName, handler);
	        bl[key] = null;
	      }
	    }

	    /**
	     * Override scrolling behavior to all direction, one direction, or none.
	     *
	     * Valid scroll directions:
	     *   - 'all': scroll in any direction
	     *   - 'x': scroll only in the 'x' direction
	     *   - 'y': scroll only in the 'y' direction
	     *   - 'none': disable scrolling for this node
	     *
	     * @param {string=} direction Direction to allow scrolling
	     * Defaults to `all`.
	     * @param {Element=} node Element to apply scroll direction setting.
	     * Defaults to `this`.
	     * @return {void}
	     */
	    setScrollDirection(direction, node) {
	      setTouchAction(/** @type {Element} */ (node || this), DIRECTION_MAP[direction] || 'auto');
	    }
	    /* **** End Events **** */

	    /**
	     * Convenience method to run `querySelector` on this local DOM scope.
	     *
	     * This function calls `Polymer.dom(this.root).querySelector(slctr)`.
	     *
	     * @param {string} slctr Selector to run on this local DOM scope
	     * @return {Element} Element found by the selector, or null if not found.
	     */
	    $$(slctr) {
	      return this.root.querySelector(slctr);
	    }

	    /**
	     * Return the element whose local dom within which this element
	     * is contained. This is a shorthand for
	     * `this.getRootNode().host`.
	     * @this {Element}
	     */
	    get domHost() {
	      let root$$1 = this.getRootNode();
	      return (root$$1 instanceof DocumentFragment) ? /** @type {ShadowRoot} */ (root$$1).host : root$$1;
	    }

	    /**
	     * Force this element to distribute its children to its local dom.
	     * This should not be necessary as of Polymer 2.0.2 and is provided only
	     * for backwards compatibility.
	     * @return {void}
	     */
	    distributeContent() {
	      if (window.ShadyDOM && this.shadowRoot) {
	        ShadyDOM.flush();
	      }
	    }

	    /**
	     * Returns a list of nodes that are the effective childNodes. The effective
	     * childNodes list is the same as the element's childNodes except that
	     * any `<content>` elements are replaced with the list of nodes distributed
	     * to the `<content>`, the result of its `getDistributedNodes` method.
	     * @return {!Array<!Node>} List of effective child nodes.
	     * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
	     */
	    getEffectiveChildNodes() {
	      const thisEl = /** @type {Element} */ (this);
	      const domApi = /** @type {DomApi} */(dom(thisEl));
	      return domApi.getEffectiveChildNodes();
	    }

	    /**
	     * Returns a list of nodes distributed within this element that match
	     * `selector`. These can be dom children or elements distributed to
	     * children that are insertion points.
	     * @param {string} selector Selector to run.
	     * @return {!Array<!Node>} List of distributed elements that match selector.
	     * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
	     */
	    queryDistributedElements(selector) {
	      const thisEl = /** @type {Element} */ (this);
	      const domApi = /** @type {DomApi} */(dom(thisEl));
	      return domApi.queryDistributedElements(selector);
	    }

	    /**
	     * Returns a list of elements that are the effective children. The effective
	     * children list is the same as the element's children except that
	     * any `<content>` elements are replaced with the list of elements
	     * distributed to the `<content>`.
	     *
	     * @return {!Array<!Node>} List of effective children.
	     */
	    getEffectiveChildren() {
	      let list = this.getEffectiveChildNodes();
	      return list.filter(function(/** @type {!Node} */ n) {
	        return (n.nodeType === Node.ELEMENT_NODE);
	      });
	    }

	    /**
	     * Returns a string of text content that is the concatenation of the
	     * text content's of the element's effective childNodes (the elements
	     * returned by <a href="#getEffectiveChildNodes>getEffectiveChildNodes</a>.
	     *
	     * @return {string} List of effective children.
	     */
	    getEffectiveTextContent() {
	      let cn = this.getEffectiveChildNodes();
	      let tc = [];
	      for (let i=0, c; (c = cn[i]); i++) {
	        if (c.nodeType !== Node.COMMENT_NODE) {
	          tc.push(c.textContent);
	        }
	      }
	      return tc.join('');
	    }

	    /**
	     * Returns the first effective childNode within this element that
	     * match `selector`. These can be dom child nodes or elements distributed
	     * to children that are insertion points.
	     * @param {string} selector Selector to run.
	     * @return {Node} First effective child node that matches selector.
	     */
	    queryEffectiveChildren(selector) {
	      let e$ = this.queryDistributedElements(selector);
	      return e$ && e$[0];
	    }

	    /**
	     * Returns a list of effective childNodes within this element that
	     * match `selector`. These can be dom child nodes or elements distributed
	     * to children that are insertion points.
	     * @param {string} selector Selector to run.
	     * @return {!Array<!Node>} List of effective child nodes that match selector.
	     */
	    queryAllEffectiveChildren(selector) {
	      return this.queryDistributedElements(selector);
	    }

	    /**
	     * Returns a list of nodes distributed to this element's `<slot>`.
	     *
	     * If this element contains more than one `<slot>` in its local DOM,
	     * an optional selector may be passed to choose the desired content.
	     *
	     * @param {string=} slctr CSS selector to choose the desired
	     *   `<slot>`.  Defaults to `content`.
	     * @return {!Array<!Node>} List of distributed nodes for the `<slot>`.
	     */
	    getContentChildNodes(slctr) {
	      let content = this.root.querySelector(slctr || 'slot');
	      return content ? /** @type {DomApi} */(dom(content)).getDistributedNodes() : [];
	    }

	    /**
	     * Returns a list of element children distributed to this element's
	     * `<slot>`.
	     *
	     * If this element contains more than one `<slot>` in its
	     * local DOM, an optional selector may be passed to choose the desired
	     * content.  This method differs from `getContentChildNodes` in that only
	     * elements are returned.
	     *
	     * @param {string=} slctr CSS selector to choose the desired
	     *   `<content>`.  Defaults to `content`.
	     * @return {!Array<!HTMLElement>} List of distributed nodes for the
	     *   `<slot>`.
	     * @suppress {invalidCasts}
	     */
	    getContentChildren(slctr) {
	      let children = /** @type {!Array<!HTMLElement>} */(this.getContentChildNodes(slctr).filter(function(n) {
	        return (n.nodeType === Node.ELEMENT_NODE);
	      }));
	      return children;
	    }

	    /**
	     * Checks whether an element is in this element's light DOM tree.
	     *
	     * @param {?Node} node The element to be checked.
	     * @return {boolean} true if node is in this element's light DOM tree.
	     * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
	     */
	    isLightDescendant(node) {
	      const thisNode = /** @type {Node} */ (this);
	      return thisNode !== node && thisNode.contains(node) &&
	        thisNode.getRootNode() === node.getRootNode();
	    }

	    /**
	     * Checks whether an element is in this element's local DOM tree.
	     *
	     * @param {!Element} node The element to be checked.
	     * @return {boolean} true if node is in this element's local DOM tree.
	     */
	    isLocalDescendant(node) {
	      return this.root === node.getRootNode();
	    }

	    /**
	     * No-op for backwards compatibility. This should now be handled by
	     * ShadyCss library.
	     * @param  {*} container Unused
	     * @param  {*} shouldObserve Unused
	     * @return {void}
	     */
	    scopeSubtree(container, shouldObserve) { // eslint-disable-line no-unused-vars
	    }

	    /**
	     * Returns the computed style value for the given property.
	     * @param {string} property The css property name.
	     * @return {string} Returns the computed css property value for the given
	     * `property`.
	     * @suppress {invalidCasts} LegacyElementMixin must be applied to an HTMLElement
	     */
	    getComputedStyleValue(property) {
	      return styleInterface.getComputedStyleValue(/** @type {!Element} */(this), property);
	    }

	    // debounce

	    /**
	     * Call `debounce` to collapse multiple requests for a named task into
	     * one invocation which is made after the wait time has elapsed with
	     * no new request.  If no wait time is given, the callback will be called
	     * at microtask timing (guaranteed before paint).
	     *
	     *     debouncedClickAction(e) {
	     *       // will not call `processClick` more than once per 100ms
	     *       this.debounce('click', function() {
	     *        this.processClick();
	     *       } 100);
	     *     }
	     *
	     * @param {string} jobName String to identify the debounce job.
	     * @param {function():void} callback Function that is called (with `this`
	     *   context) when the wait time elapses.
	     * @param {number} wait Optional wait time in milliseconds (ms) after the
	     *   last signal that must elapse before invoking `callback`
	     * @return {!Object} Returns a debouncer object on which exists the
	     * following methods: `isActive()` returns true if the debouncer is
	     * active; `cancel()` cancels the debouncer if it is active;
	     * `flush()` immediately invokes the debounced callback if the debouncer
	     * is active.
	     */
	    debounce(jobName, callback, wait) {
	      this._debouncers = this._debouncers || {};
	      return this._debouncers[jobName] = Debouncer.debounce(
	            this._debouncers[jobName]
	          , wait > 0 ? timeOut.after(wait) : microTask
	          , callback.bind(this));
	    }

	    /**
	     * Returns whether a named debouncer is active.
	     *
	     * @param {string} jobName The name of the debouncer started with `debounce`
	     * @return {boolean} Whether the debouncer is active (has not yet fired).
	     */
	    isDebouncerActive(jobName) {
	      this._debouncers = this._debouncers || {};
	      let debouncer = this._debouncers[jobName];
	      return !!(debouncer && debouncer.isActive());
	    }

	    /**
	     * Immediately calls the debouncer `callback` and inactivates it.
	     *
	     * @param {string} jobName The name of the debouncer started with `debounce`
	     * @return {void}
	     */
	    flushDebouncer(jobName) {
	      this._debouncers = this._debouncers || {};
	      let debouncer = this._debouncers[jobName];
	      if (debouncer) {
	        debouncer.flush();
	      }
	    }

	    /**
	     * Cancels an active debouncer.  The `callback` will not be called.
	     *
	     * @param {string} jobName The name of the debouncer started with `debounce`
	     * @return {void}
	     */
	    cancelDebouncer(jobName) {
	      this._debouncers = this._debouncers || {};
	      let debouncer = this._debouncers[jobName];
	      if (debouncer) {
	        debouncer.cancel();
	      }
	    }

	    /**
	     * Runs a callback function asynchronously.
	     *
	     * By default (if no waitTime is specified), async callbacks are run at
	     * microtask timing, which will occur before paint.
	     *
	     * @param {!Function} callback The callback function to run, bound to `this`.
	     * @param {number=} waitTime Time to wait before calling the
	     *   `callback`.  If unspecified or 0, the callback will be run at microtask
	     *   timing (before paint).
	     * @return {number} Handle that may be used to cancel the async job.
	     */
	    async(callback, waitTime) {
	      return waitTime > 0 ? timeOut.run(callback.bind(this), waitTime) :
	          ~microTask.run(callback.bind(this));
	    }

	    /**
	     * Cancels an async operation started with `async`.
	     *
	     * @param {number} handle Handle returned from original `async` call to
	     *   cancel.
	     * @return {void}
	     */
	    cancelAsync(handle) {
	      handle < 0 ? microTask.cancel(~handle) :
	          timeOut.cancel(handle);
	    }

	    // other

	    /**
	     * Convenience method for creating an element and configuring it.
	     *
	     * @param {string} tag HTML element tag to create.
	     * @param {Object=} props Object of properties to configure on the
	     *    instance.
	     * @return {!Element} Newly created and configured element.
	     */
	    create(tag, props) {
	      let elt = document.createElement(tag);
	      if (props) {
	        if (elt.setProperties) {
	          elt.setProperties(props);
	        } else {
	          for (let n in props) {
	            elt[n] = props[n];
	          }
	        }
	      }
	      return elt;
	    }

	    /**
	     * Polyfill for Element.prototype.matches, which is sometimes still
	     * prefixed.
	     *
	     * @param {string} selector Selector to test.
	     * @param {!Element=} node Element to test the selector against.
	     * @return {boolean} Whether the element matches the selector.
	     */
	    elementMatches(selector, node) {
	      return matchesSelector( (node || this), selector);
	    }

	    /**
	     * Toggles an HTML attribute on or off.
	     *
	     * @param {string} name HTML attribute name
	     * @param {boolean=} bool Boolean to force the attribute on or off.
	     *    When unspecified, the state of the attribute will be reversed.
	     * @param {Element=} node Node to target.  Defaults to `this`.
	     * @return {void}
	     */
	    toggleAttribute(name, bool, node) {
	      node = /** @type {Element} */ (node || this);
	      if (arguments.length == 1) {
	        bool = !node.hasAttribute(name);
	      }
	      if (bool) {
	        node.setAttribute(name, '');
	      } else {
	        node.removeAttribute(name);
	      }
	    }


	    /**
	     * Toggles a CSS class on or off.
	     *
	     * @param {string} name CSS class name
	     * @param {boolean=} bool Boolean to force the class on or off.
	     *    When unspecified, the state of the class will be reversed.
	     * @param {Element=} node Node to target.  Defaults to `this`.
	     * @return {void}
	     */
	    toggleClass(name, bool, node) {
	      node = /** @type {Element} */ (node || this);
	      if (arguments.length == 1) {
	        bool = !node.classList.contains(name);
	      }
	      if (bool) {
	        node.classList.add(name);
	      } else {
	        node.classList.remove(name);
	      }
	    }

	    /**
	     * Cross-platform helper for setting an element's CSS `transform` property.
	     *
	     * @param {string} transformText Transform setting.
	     * @param {Element=} node Element to apply the transform to.
	     * Defaults to `this`
	     * @return {void}
	     */
	    transform(transformText, node) {
	      node = /** @type {Element} */ (node || this);
	      node.style.webkitTransform = transformText;
	      node.style.transform = transformText;
	    }

	    /**
	     * Cross-platform helper for setting an element's CSS `translate3d`
	     * property.
	     *
	     * @param {number} x X offset.
	     * @param {number} y Y offset.
	     * @param {number} z Z offset.
	     * @param {Element=} node Element to apply the transform to.
	     * Defaults to `this`.
	     * @return {void}
	     */
	    translate3d(x, y, z, node) {
	      node = /** @type {Element} */ (node || this);
	      this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);
	    }

	    /**
	     * Removes an item from an array, if it exists.
	     *
	     * If the array is specified by path, a change notification is
	     * generated, so that observers, data bindings and computed
	     * properties watching that path can update.
	     *
	     * If the array is passed directly, **no change
	     * notification is generated**.
	     *
	     * @param {string | !Array<number|string>} arrayOrPath Path to array from which to remove the item
	     *   (or the array itself).
	     * @param {*} item Item to remove.
	     * @return {Array} Array containing item removed.
	     */
	    arrayDelete(arrayOrPath, item) {
	      let index;
	      if (Array.isArray(arrayOrPath)) {
	        index = arrayOrPath.indexOf(item);
	        if (index >= 0) {
	          return arrayOrPath.splice(index, 1);
	        }
	      } else {
	        let arr = get(this, arrayOrPath);
	        index = arr.indexOf(item);
	        if (index >= 0) {
	          return this.splice(arrayOrPath, index, 1);
	        }
	      }
	      return null;
	    }

	    // logging

	    /**
	     * Facades `console.log`/`warn`/`error` as override point.
	     *
	     * @param {string} level One of 'log', 'warn', 'error'
	     * @param {Array} args Array of strings or objects to log
	     * @return {void}
	     */
	    _logger(level, args) {
	      // accept ['foo', 'bar'] and [['foo', 'bar']]
	      if (Array.isArray(args) && args.length === 1 && Array.isArray(args[0])) {
	        args = args[0];
	      }
	      switch(level) {
	        case 'log':
	        case 'warn':
	        case 'error':
	          console[level](...args);
	      }
	    }

	    /**
	     * Facades `console.log` as an override point.
	     *
	     * @param {...*} args Array of strings or objects to log
	     * @return {void}
	     */
	    _log(...args) {
	      this._logger('log', args);
	    }

	    /**
	     * Facades `console.warn` as an override point.
	     *
	     * @param {...*} args Array of strings or objects to log
	     * @return {void}
	     */
	    _warn(...args) {
	      this._logger('warn', args);
	    }

	    /**
	     * Facades `console.error` as an override point.
	     *
	     * @param {...*} args Array of strings or objects to log
	     * @return {void}
	     */
	    _error(...args) {
	      this._logger('error', args);
	    }

	    /**
	     * Formats a message using the element type an a method name.
	     *
	     * @param {string} methodName Method name to associate with message
	     * @param {...*} args Array of strings or objects to log
	     * @return {Array} Array with formatting information for `console`
	     *   logging.
	     */
	    _logf(methodName, ...args) {
	      return ['[%s::%s]', this.is, methodName, ...args];
	    }

	  }

	  LegacyElement.prototype.is = '';

	  return LegacyElement;

	});

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	let metaProps = {
	  attached: true,
	  detached: true,
	  ready: true,
	  created: true,
	  beforeRegister: true,
	  registered: true,
	  attributeChanged: true,
	  // meta objects
	  behaviors: true
	};

	/**
	 * Applies a "legacy" behavior or array of behaviors to the provided class.
	 *
	 * Note: this method will automatically also apply the `LegacyElementMixin`
	 * to ensure that any legacy behaviors can rely on legacy Polymer API on
	 * the underlying element.
	 *
	 * @function
	 * @template T
	 * @param {!Object|!Array<!Object>} behaviors Behavior object or array of behaviors.
	 * @param {function(new:T)} klass Element class.
	 * @return {function(new:T)} Returns a new Element class extended by the
	 * passed in `behaviors` and also by `LegacyElementMixin`.
	 * @suppress {invalidCasts, checkTypes}
	 */
	function mixinBehaviors(behaviors, klass) {
	  if (!behaviors) {
	    klass = /** @type {HTMLElement} */(klass); // eslint-disable-line no-self-assign
	    return klass;
	  }
	  // NOTE: ensure the behavior is extending a class with
	  // legacy element api. This is necessary since behaviors expect to be able
	  // to access 1.x legacy api.
	  klass = LegacyElementMixin(klass);
	  if (!Array.isArray(behaviors)) {
	    behaviors = [behaviors];
	  }
	  let superBehaviors = klass.prototype.behaviors;
	  // get flattened, deduped list of behaviors *not* already on super class
	  behaviors = flattenBehaviors(behaviors, null, superBehaviors);
	  // mixin new behaviors
	  klass = _mixinBehaviors(behaviors, klass);
	  if (superBehaviors) {
	    behaviors = superBehaviors.concat(behaviors);
	  }
	  // Set behaviors on prototype for BC...
	  klass.prototype.behaviors = behaviors;
	  return klass;
	}

	// NOTE:
	// 1.x
	// Behaviors were mixed in *in reverse order* and de-duped on the fly.
	// The rule was that behavior properties were copied onto the element
	// prototype if and only if the property did not already exist.
	// Given: Polymer{ behaviors: [A, B, C, A, B]}, property copy order was:
	// (1), B, (2), A, (3) C. This means prototype properties win over
	// B properties win over A win over C. This mirrors what would happen
	// with inheritance if element extended B extended A extended C.
	//
	// Again given, Polymer{ behaviors: [A, B, C, A, B]}, the resulting
	// `behaviors` array was [C, A, B].
	// Behavior lifecycle methods were called in behavior array order
	// followed by the element, e.g. (1) C.created, (2) A.created,
	// (3) B.created, (4) element.created. There was no support for
	// super, and "super-behavior" methods were callable only by name).
	//
	// 2.x
	// Behaviors are made into proper mixins which live in the
	// element's prototype chain. Behaviors are placed in the element prototype
	// eldest to youngest and de-duped youngest to oldest:
	// So, first [A, B, C, A, B] becomes [C, A, B] then,
	// the element prototype becomes (oldest) (1) PolymerElement, (2) class(C),
	// (3) class(A), (4) class(B), (5) class(Polymer({...})).
	// Result:
	// This means element properties win over B properties win over A win
	// over C. (same as 1.x)
	// If lifecycle is called (super then me), order is
	// (1) C.created, (2) A.created, (3) B.created, (4) element.created
	// (again same as 1.x)
	function _mixinBehaviors(behaviors, klass) {
	  for (let i=0; i<behaviors.length; i++) {
	    let b = behaviors[i];
	    if (b) {
	      klass = Array.isArray(b) ? _mixinBehaviors(b, klass) :
	        GenerateClassFromInfo(b, klass);
	    }
	  }
	  return klass;
	}

	/**
	 * @param {Array} behaviors List of behaviors to flatten.
	 * @param {Array=} list Target list to flatten behaviors into.
	 * @param {Array=} exclude List of behaviors to exclude from the list.
	 * @return {!Array} Returns the list of flattened behaviors.
	 */
	function flattenBehaviors(behaviors, list, exclude) {
	  list = list || [];
	  for (let i=behaviors.length-1; i >= 0; i--) {
	    let b = behaviors[i];
	    if (b) {
	      if (Array.isArray(b)) {
	        flattenBehaviors(b, list);
	      } else {
	        // dedup
	        if (list.indexOf(b) < 0 && (!exclude || exclude.indexOf(b) < 0)) {
	          list.unshift(b);
	        }
	      }
	    } else {
	      console.warn('behavior is null, check for missing or 404 import');
	    }
	  }
	  return list;
	}

	/**
	 * @param {!PolymerInit} info Polymer info object
	 * @param {function(new:HTMLElement)} Base base class to extend with info object
	 * @return {function(new:HTMLElement)} Generated class
	 * @suppress {checkTypes}
	 * @private
	 */
	function GenerateClassFromInfo(info, Base) {

	  /** @private */
	  class PolymerGenerated extends Base {

	    static get properties() {
	      return info.properties;
	    }

	    static get observers() {
	      return info.observers;
	    }

	    /**
	     * @return {HTMLTemplateElement} template for this class
	     */
	    static get template() {
	      // get template first from any imperative set in `info._template`
	      return info._template ||
	        // next look in dom-module associated with this element's is.
	        DomModule && DomModule.import(this.is, 'template') ||
	        // next look for superclass template (note: use superclass symbol
	        // to ensure correct `this.is`)
	        Base.template ||
	        // finally fall back to `_template` in element's prototype.
	        this.prototype._template ||
	        null;
	    }

	    /**
	     * @return {void}
	     */
	    created() {
	      super.created();
	      if (info.created) {
	        info.created.call(this);
	      }
	    }

	    /**
	     * @return {void}
	     */
	    _registered() {
	      super._registered();
	      /* NOTE: `beforeRegister` is called here for bc, but the behavior
	       is different than in 1.x. In 1.0, the method was called *after*
	       mixing prototypes together but *before* processing of meta-objects.
	       However, dynamic effects can still be set here and can be done either
	       in `beforeRegister` or `registered`. It is no longer possible to set
	       `is` in `beforeRegister` as you could in 1.x.
	      */
	      if (info.beforeRegister) {
	        info.beforeRegister.call(Object.getPrototypeOf(this));
	      }
	      if (info.registered) {
	        info.registered.call(Object.getPrototypeOf(this));
	      }
	    }

	    /**
	     * @return {void}
	     */
	    _applyListeners() {
	      super._applyListeners();
	      if (info.listeners) {
	        for (let l in info.listeners) {
	          this._addMethodEventListenerToNode(this, l, info.listeners[l]);
	        }
	      }
	    }

	    // note: exception to "super then me" rule;
	    // do work before calling super so that super attributes
	    // only apply if not already set.
	    /**
	     * @return {void}
	     */
	    _ensureAttributes() {
	      if (info.hostAttributes) {
	        for (let a in info.hostAttributes) {
	          this._ensureAttribute(a, info.hostAttributes[a]);
	        }
	      }
	      super._ensureAttributes();
	    }

	    /**
	     * @return {void}
	     */
	    ready() {
	      super.ready();
	      if (info.ready) {
	        info.ready.call(this);
	      }
	    }

	    /**
	     * @return {void}
	     */
	    attached() {
	      super.attached();
	      if (info.attached) {
	        info.attached.call(this);
	      }
	    }

	    /**
	     * @return {void}
	     */
	    detached() {
	      super.detached();
	      if (info.detached) {
	        info.detached.call(this);
	      }
	    }

	    /**
	     * Implements native Custom Elements `attributeChangedCallback` to
	     * set an attribute value to a property via `_attributeToProperty`.
	     *
	     * @param {string} name Name of attribute that changed
	     * @param {?string} old Old attribute value
	     * @param {?string} value New attribute value
	     * @return {void}
	     */
	    attributeChanged(name, old, value) {
	      super.attributeChanged(name, old, value);
	      if (info.attributeChanged) {
	        info.attributeChanged.call(this, name, old, value);
	      }
	   }
	  }

	  PolymerGenerated.generatedFrom = info;

	  for (let p in info) {
	    // NOTE: cannot copy `metaProps` methods onto prototype at least because
	    // `super.ready` must be called and is not included in the user fn.
	    if (!(p in metaProps)) {
	      let pd = Object.getOwnPropertyDescriptor(info, p);
	      if (pd) {
	        Object.defineProperty(PolymerGenerated.prototype, p, pd);
	      }
	    }
	  }

	  return PolymerGenerated;
	}

	/**
	 * Generates a class that extends `LegacyElement` based on the
	 * provided info object.  Metadata objects on the `info` object
	 * (`properties`, `observers`, `listeners`, `behaviors`, `is`) are used
	 * for Polymer's meta-programming systems, and any functions are copied
	 * to the generated class.
	 *
	 * Valid "metadata" values are as follows:
	 *
	 * `is`: String providing the tag name to register the element under. In
	 * addition, if a `dom-module` with the same id exists, the first template
	 * in that `dom-module` will be stamped into the shadow root of this element,
	 * with support for declarative event listeners (`on-...`), Polymer data
	 * bindings (`[[...]]` and `{{...}}`), and id-based node finding into
	 * `this.$`.
	 *
	 * `properties`: Object describing property-related metadata used by Polymer
	 * features (key: property names, value: object containing property metadata).
	 * Valid keys in per-property metadata include:
	 * - `type` (String|Number|Object|Array|...): Used by
	 *   `attributeChangedCallback` to determine how string-based attributes
	 *   are deserialized to JavaScript property values.
	 * - `notify` (boolean): Causes a change in the property to fire a
	 *   non-bubbling event called `<property>-changed`. Elements that have
	 *   enabled two-way binding to the property use this event to observe changes.
	 * - `readOnly` (boolean): Creates a getter for the property, but no setter.
	 *   To set a read-only property, use the private setter method
	 *   `_setProperty(property, value)`.
	 * - `observer` (string): Observer method name that will be called when
	 *   the property changes. The arguments of the method are
	 *   `(value, previousValue)`.
	 * - `computed` (string): String describing method and dependent properties
	 *   for computing the value of this property (e.g. `'computeFoo(bar, zot)'`).
	 *   Computed properties are read-only by default and can only be changed
	 *   via the return value of the computing method.
	 *
	 * `observers`: Array of strings describing multi-property observer methods
	 *  and their dependent properties (e.g. `'observeABC(a, b, c)'`).
	 *
	 * `listeners`: Object describing event listeners to be added to each
	 *  instance of this element (key: event name, value: method name).
	 *
	 * `behaviors`: Array of additional `info` objects containing metadata
	 * and callbacks in the same format as the `info` object here which are
	 * merged into this element.
	 *
	 * `hostAttributes`: Object listing attributes to be applied to the host
	 *  once created (key: attribute name, value: attribute value).  Values
	 *  are serialized based on the type of the value.  Host attributes should
	 *  generally be limited to attributes such as `tabIndex` and `aria-...`.
	 *  Attributes in `hostAttributes` are only applied if a user-supplied
	 *  attribute is not already present (attributes in markup override
	 *  `hostAttributes`).
	 *
	 * In addition, the following Polymer-specific callbacks may be provided:
	 * - `registered`: called after first instance of this element,
	 * - `created`: called during `constructor`
	 * - `attached`: called during `connectedCallback`
	 * - `detached`: called during `disconnectedCallback`
	 * - `ready`: called before first `attached`, after all properties of
	 *   this element have been propagated to its template and all observers
	 *   have run
	 *
	 * @param {!PolymerInit} info Object containing Polymer metadata and functions
	 *   to become class methods.
	 * @return {function(new:HTMLElement)} Generated class
	 */
	const Class = function(info) {
	  if (!info) {
	    console.warn(`Polymer's Class function requires \`info\` argument`);
	  }
	  let klass = GenerateClassFromInfo(info, info.behaviors ?
	    // note: mixinBehaviors ensures `LegacyElementMixin`.
	    mixinBehaviors(info.behaviors, HTMLElement) :
	    LegacyElementMixin(HTMLElement));
	  // decorate klass with registration info
	  klass.is = info.is;
	  return klass;
	};

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Legacy class factory and registration helper for defining Polymer
	 * elements.
	 *
	 * This method is equivalent to
	 *
	 *     import {Class} from '@polymer/polymer/lib/legacy/class.js';
	 *     customElements.define(info.is, Class(info));
	 *
	 * See `Class` for details on valid legacy metadata format for `info`.
	 *
	 * @global
	 * @override
	 * @function
	 * @param {!PolymerInit} info Object containing Polymer metadata and functions
	 *   to become class methods.
	 * @return {function(new: HTMLElement)} Generated class
	 * @suppress {duplicate, invalidCasts, checkTypes}
	 */
	const Polymer = function(info) {
	  // if input is a `class` (aka a function with a prototype), use the prototype
	  // remember that the `constructor` will never be called
	  let klass;
	  if (typeof info === 'function') {
	    klass = info;
	  } else {
	    klass = Polymer.Class(info);
	  }
	  customElements.define(klass.is, /** @type {!HTMLElement} */(klass));
	  return klass;
	};

	Polymer.Class = Class;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @constructor
	 * @extends {HTMLElement}
	 * @implements {Polymer_PropertyEffects}
	 * @implements {Polymer_OptionalMutableData}
	 * @implements {Polymer_GestureEventListeners}
	 * @private
	 */
	const domBindBase =
	  GestureEventListeners(
	    OptionalMutableData(
	      PropertyEffects(HTMLElement)));

	/**
	 * Custom element to allow using Polymer's template features (data binding,
	 * declarative event listeners, etc.) in the main document without defining
	 * a new custom element.
	 *
	 * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`
	 * element, which will immediately stamp the wrapped template into the main
	 * document and bind elements to the `dom-bind` element itself as the
	 * binding scope.
	 *
	 * @polymer
	 * @customElement
	 * @appliesMixin PropertyEffects
	 * @appliesMixin OptionalMutableData
	 * @appliesMixin GestureEventListeners
	 * @extends {domBindBase}
	 * @summary Custom element to allow using Polymer's template features (data
	 *   binding, declarative event listeners, etc.) in the main document.
	 */
	class DomBind extends domBindBase {

	  static get observedAttributes() { return ['mutable-data']; }

	  constructor() {
	    super();
	    this.root = null;
	    this.$ = null;
	    this.__children = null;
	  }

	  /** @return {void} */
	  attributeChangedCallback() {
	    // assumes only one observed attribute
	    this.mutableData = true;
	  }

	  /** @return {void} */
	  connectedCallback() {
	    this.style.display = 'none';
	    this.render();
	  }

	  /** @return {void} */
	  disconnectedCallback() {
	    this.__removeChildren();
	  }

	  __insertChildren() {
	    this.parentNode.insertBefore(this.root, this);
	  }

	  __removeChildren() {
	    if (this.__children) {
	      for (let i=0; i<this.__children.length; i++) {
	        this.root.appendChild(this.__children[i]);
	      }
	    }
	  }

	  /**
	   * Forces the element to render its content. This is typically only
	   * necessary to call if HTMLImports with the async attribute are used.
	   * @return {void}
	   */
	  render() {
	    let template;
	    if (!this.__children) {
	      template = /** @type {HTMLTemplateElement} */(template || this.querySelector('template'));
	      if (!template) {
	        // Wait until childList changes and template should be there by then
	        let observer = new MutationObserver(() => {
	          template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
	          if (template) {
	            observer.disconnect();
	            this.render();
	          } else {
	            throw new Error('dom-bind requires a <template> child');
	          }
	        });
	        observer.observe(this, {childList: true});
	        return;
	      }
	      this.root = this._stampTemplate(template);
	      this.$ = this.root.$;
	      this.__children = [];
	      for (let n=this.root.firstChild; n; n=n.nextSibling) {
	        this.__children[this.__children.length] = n;
	      }
	      this._enableProperties();
	    }
	    this.__insertChildren();
	    this.dispatchEvent(new CustomEvent('dom-change', {
	      bubbles: true,
	      composed: true
	    }));
	  }

	}

	customElements.define('dom-bind', DomBind);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * The `<dom-if>` element will stamp a light-dom `<template>` child when
	 * the `if` property becomes truthy, and the template can use Polymer
	 * data-binding and declarative event features when used in the context of
	 * a Polymer element's template.
	 *
	 * When `if` becomes falsy, the stamped content is hidden but not
	 * removed from dom. When `if` subsequently becomes truthy again, the content
	 * is simply re-shown. This approach is used due to its favorable performance
	 * characteristics: the expense of creating template content is paid only
	 * once and lazily.
	 *
	 * Set the `restamp` property to true to force the stamped content to be
	 * created / destroyed when the `if` condition changes.
	 *
	 * @customElement
	 * @polymer
	 * @extends PolymerElement
	 * @summary Custom element that conditionally stamps and hides or removes
	 *   template content based on a boolean flag.
	 */
	class DomIf extends PolymerElement {

	  // Not needed to find template; can be removed once the analyzer
	  // can find the tag name from customElements.define call
	  static get is() { return 'dom-if'; }

	  static get template() { return null; }

	  static get properties() {

	    return {

	      /**
	       * Fired whenever DOM is added or removed/hidden by this template (by
	       * default, rendering occurs lazily).  To force immediate rendering, call
	       * `render`.
	       *
	       * @event dom-change
	       */

	      /**
	       * A boolean indicating whether this template should stamp.
	       */
	      if: {
	        type: Boolean,
	        observer: '__debounceRender'
	      },

	      /**
	       * When true, elements will be removed from DOM and discarded when `if`
	       * becomes false and re-created and added back to the DOM when `if`
	       * becomes true.  By default, stamped elements will be hidden but left
	       * in the DOM when `if` becomes false, which is generally results
	       * in better performance.
	       */
	      restamp: {
	        type: Boolean,
	        observer: '__debounceRender'
	      }

	    };

	  }

	  constructor() {
	    super();
	    this.__renderDebouncer = null;
	    this.__invalidProps = null;
	    this.__instance = null;
	    this._lastIf = false;
	    this.__ctor = null;
	  }

	  __debounceRender() {
	    // Render is async for 2 reasons:
	    // 1. To eliminate dom creation trashing if user code thrashes `if` in the
	    //    same turn. This was more common in 1.x where a compound computed
	    //    property could result in the result changing multiple times, but is
	    //    mitigated to a large extent by batched property processing in 2.x.
	    // 2. To avoid double object propagation when a bag including values bound
	    //    to the `if` property as well as one or more hostProps could enqueue
	    //    the <dom-if> to flush before the <template>'s host property
	    //    forwarding. In that scenario creating an instance would result in
	    //    the host props being set once, and then the enqueued changes on the
	    //    template would set properties a second time, potentially causing an
	    //    object to be set to an instance more than once.  Creating the
	    //    instance async from flushing data ensures this doesn't happen. If
	    //    we wanted a sync option in the future, simply having <dom-if> flush
	    //    (or clear) its template's pending host properties before creating
	    //    the instance would also avoid the problem.
	    this.__renderDebouncer = Debouncer.debounce(
	          this.__renderDebouncer
	        , microTask
	        , () => this.__render());
	    enqueueDebouncer(this.__renderDebouncer);
	  }

	  /**
	   * @return {void}
	   */
	  disconnectedCallback() {
	    super.disconnectedCallback();
	    if (!this.parentNode ||
	        (this.parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&
	         !this.parentNode.host)) {
	      this.__teardownInstance();
	    }
	  }

	  /**
	   * @return {void}
	   */
	  connectedCallback() {
	    super.connectedCallback();
	    this.style.display = 'none';
	    if (this.if) {
	      this.__debounceRender();
	    }
	  }

	  /**
	   * Forces the element to render its content. Normally rendering is
	   * asynchronous to a provoking change. This is done for efficiency so
	   * that multiple changes trigger only a single render. The render method
	   * should be called if, for example, template rendering is required to
	   * validate application state.
	   * @return {void}
	   */
	  render() {
	    flush();
	  }

	  __render() {
	    if (this.if) {
	      if (!this.__ensureInstance()) {
	        // No template found yet
	        return;
	      }
	      this._showHideChildren();
	    } else if (this.restamp) {
	      this.__teardownInstance();
	    }
	    if (!this.restamp && this.__instance) {
	      this._showHideChildren();
	    }
	    if (this.if != this._lastIf) {
	      this.dispatchEvent(new CustomEvent('dom-change', {
	        bubbles: true,
	        composed: true
	      }));
	      this._lastIf = this.if;
	    }
	  }

	  __ensureInstance() {
	    let parentNode = this.parentNode;
	    // Guard against element being detached while render was queued
	    if (parentNode) {
	      if (!this.__ctor) {
	        let template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));
	        if (!template) {
	          // Wait until childList changes and template should be there by then
	          let observer = new MutationObserver(() => {
	            if (this.querySelector('template')) {
	              observer.disconnect();
	              this.__render();
	            } else {
	              throw new Error('dom-if requires a <template> child');
	            }
	          });
	          observer.observe(this, {childList: true});
	          return false;
	        }
	        this.__ctor = templatize(template, this, {
	          // dom-if templatizer instances require `mutable: true`, as
	          // `__syncHostProperties` relies on that behavior to sync objects
	          mutableData: true,
	          /**
	           * @param {string} prop Property to forward
	           * @param {*} value Value of property
	           * @this {this}
	           */
	          forwardHostProp: function(prop, value) {
	            if (this.__instance) {
	              if (this.if) {
	                this.__instance.forwardHostProp(prop, value);
	              } else {
	                // If we have an instance but are squelching host property
	                // forwarding due to if being false, note the invalidated
	                // properties so `__syncHostProperties` can sync them the next
	                // time `if` becomes true
	                this.__invalidProps = this.__invalidProps || Object.create(null);
	                this.__invalidProps[root(prop)] = true;
	              }
	            }
	          }
	        });
	      }
	      if (!this.__instance) {
	        this.__instance = new this.__ctor();
	        parentNode.insertBefore(this.__instance.root, this);
	      } else {
	        this.__syncHostProperties();
	        let c$ = this.__instance.children;
	        if (c$ && c$.length) {
	          // Detect case where dom-if was re-attached in new position
	          let lastChild = this.previousSibling;
	          if (lastChild !== c$[c$.length-1]) {
	            for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {
	              parentNode.insertBefore(n, this);
	            }
	          }
	        }
	      }
	    }
	    return true;
	  }

	  __syncHostProperties() {
	    let props = this.__invalidProps;
	    if (props) {
	      for (let prop in props) {
	        this.__instance._setPendingProperty(prop, this.__dataHost[prop]);
	      }
	      this.__invalidProps = null;
	      this.__instance._flushProperties();
	    }
	  }

	  __teardownInstance() {
	    if (this.__instance) {
	      let c$ = this.__instance.children;
	      if (c$ && c$.length) {
	        // use first child parent, for case when dom-if may have been detached
	        let parent = c$[0].parentNode;
	        for (let i=0, n; (i<c$.length) && (n=c$[i]); i++) {
	          parent.removeChild(n);
	        }
	      }
	      this.__instance = null;
	      this.__invalidProps = null;
	    }
	  }

	  /**
	   * Shows or hides the template instance top level child elements. For
	   * text nodes, `textContent` is removed while "hidden" and replaced when
	   * "shown."
	   * @return {void}
	   * @protected
	   */
	  _showHideChildren() {
	    let hidden = this.__hideTemplateChildren__ || !this.if;
	    if (this.__instance) {
	      this.__instance._showHideChildren(hidden);
	    }
	  }

	}

	customElements.define(DomIf.is, DomIf);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Element mixin for recording dynamic associations between item paths in a
	 * master `items` array and a `selected` array such that path changes to the
	 * master array (at the host) element or elsewhere via data-binding) are
	 * correctly propagated to items in the selected array and vice-versa.
	 *
	 * The `items` property accepts an array of user data, and via the
	 * `select(item)` and `deselect(item)` API, updates the `selected` property
	 * which may be bound to other parts of the application, and any changes to
	 * sub-fields of `selected` item(s) will be kept in sync with items in the
	 * `items` array.  When `multi` is false, `selected` is a property
	 * representing the last selected item.  When `multi` is true, `selected`
	 * is an array of multiply selected items.
	 *
	 * @polymer
	 * @mixinFunction
	 * @appliesMixin ElementMixin
	 * @summary Element mixin for recording dynamic associations between item paths in a
	 * master `items` array and a `selected` array
	 */
	let ArraySelectorMixin = dedupingMixin(superClass => {

	  /**
	   * @constructor
	   * @extends {superClass}
	   * @implements {Polymer_ElementMixin}
	   * @private
	   */
	  let elementBase = ElementMixin(superClass);

	  /**
	   * @polymer
	   * @mixinClass
	   * @implements {Polymer_ArraySelectorMixin}
	   * @unrestricted
	   */
	  class ArraySelectorMixin extends elementBase {

	    static get properties() {

	      return {

	        /**
	         * An array containing items from which selection will be made.
	         */
	        items: {
	          type: Array,
	        },

	        /**
	         * When `true`, multiple items may be selected at once (in this case,
	         * `selected` is an array of currently selected items).  When `false`,
	         * only one item may be selected at a time.
	         */
	        multi: {
	          type: Boolean,
	          value: false,
	        },

	        /**
	         * When `multi` is true, this is an array that contains any selected.
	         * When `multi` is false, this is the currently selected item, or `null`
	         * if no item is selected.
	         * @type {?(Object|Array<!Object>)}
	         */
	        selected: {
	          type: Object,
	          notify: true
	        },

	        /**
	         * When `multi` is false, this is the currently selected item, or `null`
	         * if no item is selected.
	         * @type {?Object}
	         */
	        selectedItem: {
	          type: Object,
	          notify: true
	        },

	        /**
	         * When `true`, calling `select` on an item that is already selected
	         * will deselect the item.
	         */
	        toggle: {
	          type: Boolean,
	          value: false
	        }

	      };
	    }

	    static get observers() {
	      return ['__updateSelection(multi, items.*)'];
	    }

	    constructor() {
	      super();
	      this.__lastItems = null;
	      this.__lastMulti = null;
	      this.__selectedMap = null;
	    }

	    __updateSelection(multi, itemsInfo) {
	      let path = itemsInfo.path;
	      if (path == 'items') {
	        // Case 1 - items array changed, so diff against previous array and
	        // deselect any removed items and adjust selected indices
	        let newItems = itemsInfo.base || [];
	        let lastItems = this.__lastItems;
	        let lastMulti = this.__lastMulti;
	        if (multi !== lastMulti) {
	          this.clearSelection();
	        }
	        if (lastItems) {
	          let splices = calculateSplices(newItems, lastItems);
	          this.__applySplices(splices);
	        }
	        this.__lastItems = newItems;
	        this.__lastMulti = multi;
	      } else if (itemsInfo.path == 'items.splices') {
	        // Case 2 - got specific splice information describing the array mutation:
	        // deselect any removed items and adjust selected indices
	        this.__applySplices(itemsInfo.value.indexSplices);
	      } else {
	        // Case 3 - an array element was changed, so deselect the previous
	        // item for that index if it was previously selected
	        let part = path.slice('items.'.length);
	        let idx = parseInt(part, 10);
	        if ((part.indexOf('.') < 0) && part == idx) {
	          this.__deselectChangedIdx(idx);
	        }
	      }
	    }

	    __applySplices(splices) {
	      let selected = this.__selectedMap;
	      // Adjust selected indices and mark removals
	      for (let i=0; i<splices.length; i++) {
	        let s = splices[i];
	        selected.forEach((idx, item) => {
	          if (idx < s.index) ; else if (idx >= s.index + s.removed.length) {
	            // adjust index
	            selected.set(item, idx + s.addedCount - s.removed.length);
	          } else {
	            // remove index
	            selected.set(item, -1);
	          }
	        });
	        for (let j=0; j<s.addedCount; j++) {
	          let idx = s.index + j;
	          if (selected.has(this.items[idx])) {
	            selected.set(this.items[idx], idx);
	          }
	        }
	      }
	      // Update linked paths
	      this.__updateLinks();
	      // Remove selected items that were removed from the items array
	      let sidx = 0;
	      selected.forEach((idx, item) => {
	        if (idx < 0) {
	          if (this.multi) {
	            this.splice('selected', sidx, 1);
	          } else {
	            this.selected = this.selectedItem = null;
	          }
	          selected.delete(item);
	        } else {
	          sidx++;
	        }
	      });
	    }

	    __updateLinks() {
	      this.__dataLinkedPaths = {};
	      if (this.multi) {
	        let sidx = 0;
	        this.__selectedMap.forEach(idx => {
	          if (idx >= 0) {
	            this.linkPaths('items.' + idx, 'selected.' + sidx++);
	          }
	        });
	      } else {
	        this.__selectedMap.forEach(idx => {
	          this.linkPaths('selected', 'items.' + idx);
	          this.linkPaths('selectedItem', 'items.' + idx);
	        });
	      }
	    }

	    /**
	     * Clears the selection state.
	     * @return {void}
	     */
	    clearSelection() {
	      // Unbind previous selection
	      this.__dataLinkedPaths = {};
	      // The selected map stores 3 pieces of information:
	      // key: items array object
	      // value: items array index
	      // order: selected array index
	      this.__selectedMap = new Map();
	      // Initialize selection
	      this.selected = this.multi ? [] : null;
	      this.selectedItem = null;
	    }

	    /**
	     * Returns whether the item is currently selected.
	     *
	     * @param {*} item Item from `items` array to test
	     * @return {boolean} Whether the item is selected
	     */
	    isSelected(item) {
	      return this.__selectedMap.has(item);
	    }

	    /**
	     * Returns whether the item is currently selected.
	     *
	     * @param {number} idx Index from `items` array to test
	     * @return {boolean} Whether the item is selected
	     */
	    isIndexSelected(idx) {
	      return this.isSelected(this.items[idx]);
	    }

	    __deselectChangedIdx(idx) {
	      let sidx = this.__selectedIndexForItemIndex(idx);
	      if (sidx >= 0) {
	        let i = 0;
	        this.__selectedMap.forEach((idx, item) => {
	          if (sidx == i++) {
	            this.deselect(item);
	          }
	        });
	      }
	    }

	    __selectedIndexForItemIndex(idx) {
	      let selected = this.__dataLinkedPaths['items.' + idx];
	      if (selected) {
	        return parseInt(selected.slice('selected.'.length), 10);
	      }
	    }

	    /**
	     * Deselects the given item if it is already selected.
	     *
	     * @param {*} item Item from `items` array to deselect
	     * @return {void}
	     */
	    deselect(item) {
	      let idx = this.__selectedMap.get(item);
	      if (idx >= 0) {
	        this.__selectedMap.delete(item);
	        let sidx;
	        if (this.multi) {
	          sidx = this.__selectedIndexForItemIndex(idx);
	        }
	        this.__updateLinks();
	        if (this.multi) {
	          this.splice('selected', sidx, 1);
	        } else {
	          this.selected = this.selectedItem = null;
	        }
	      }
	    }

	    /**
	     * Deselects the given index if it is already selected.
	     *
	     * @param {number} idx Index from `items` array to deselect
	     * @return {void}
	     */
	    deselectIndex(idx) {
	      this.deselect(this.items[idx]);
	    }

	    /**
	     * Selects the given item.  When `toggle` is true, this will automatically
	     * deselect the item if already selected.
	     *
	     * @param {*} item Item from `items` array to select
	     * @return {void}
	     */
	    select(item) {
	      this.selectIndex(this.items.indexOf(item));
	    }

	    /**
	     * Selects the given index.  When `toggle` is true, this will automatically
	     * deselect the item if already selected.
	     *
	     * @param {number} idx Index from `items` array to select
	     * @return {void}
	     */
	    selectIndex(idx) {
	      let item = this.items[idx];
	      if (!this.isSelected(item)) {
	        if (!this.multi) {
	          this.__selectedMap.clear();
	        }
	        this.__selectedMap.set(item, idx);
	        this.__updateLinks();
	        if (this.multi) {
	          this.push('selected', item);
	        } else {
	          this.selected = this.selectedItem = item;
	        }
	      } else if (this.toggle) {
	        this.deselectIndex(idx);
	      }
	    }

	  }

	  return ArraySelectorMixin;

	});

	/**
	 * @constructor
	 * @extends {PolymerElement}
	 * @implements {Polymer_ArraySelectorMixin}
	 * @private
	 */
	let baseArraySelector = ArraySelectorMixin(PolymerElement);

	/**
	 * Element implementing the `ArraySelector` mixin, which records
	 * dynamic associations between item paths in a master `items` array and a
	 * `selected` array such that path changes to the master array (at the host)
	 * element or elsewhere via data-binding) are correctly propagated to items
	 * in the selected array and vice-versa.
	 *
	 * The `items` property accepts an array of user data, and via the
	 * `select(item)` and `deselect(item)` API, updates the `selected` property
	 * which may be bound to other parts of the application, and any changes to
	 * sub-fields of `selected` item(s) will be kept in sync with items in the
	 * `items` array.  When `multi` is false, `selected` is a property
	 * representing the last selected item.  When `multi` is true, `selected`
	 * is an array of multiply selected items.
	 *
	 * Example:
	 *
	 * ```js
	 * import {PolymerElement} from '@polymer/polymer';
	 * import '@polymer/polymer/lib/elements/array-selector.js';
	 *
	 * class EmployeeList extends PolymerElement {
	 *   static get _template() {
	 *     return html`
	 *         <div> Employee list: </div>
	 *         <dom-repeat id="employeeList" items="{{employees}}">
	 *           <template>
	 *             <div>First name: <span>{{item.first}}</span></div>
	 *               <div>Last name: <span>{{item.last}}</span></div>
	 *               <button on-click="toggleSelection">Select</button>
	 *           </template>
	 *         </dom-repeat>
	 *
	 *         <array-selector id="selector"
	 *                         items="{{employees}}"
	 *                         selected="{{selected}}"
	 *                         multi toggle></array-selector>
	 *
	 *         <div> Selected employees: </div>
	 *         <dom-repeat items="{{selected}}">
	 *           <template>
	 *             <div>First name: <span>{{item.first}}</span></div>
	 *             <div>Last name: <span>{{item.last}}</span></div>
	 *           </template>
	 *         </dom-repeat>`;
	 *   }
	 *   static get is() { return 'employee-list'; }
	 *   static get properties() {
	 *     return {
	 *       employees: {
	 *         value() {
	 *           return [
	 *             {first: 'Bob', last: 'Smith'},
	 *             {first: 'Sally', last: 'Johnson'},
	 *             ...
	 *           ];
	 *         }
	 *       }
	 *     };
	 *   }
	 *   toggleSelection(e) {
	 *     const item = this.$.employeeList.itemForElement(e.target);
	 *     this.$.selector.select(item);
	 *   }
	 * }
	 * ```
	 *
	 * @polymer
	 * @customElement
	 * @extends {baseArraySelector}
	 * @appliesMixin ArraySelectorMixin
	 * @summary Custom element that links paths between an input `items` array and
	 *   an output `selected` item or array based on calls to its selection API.
	 */
	class ArraySelector extends baseArraySelector {
	  // Not needed to find template; can be removed once the analyzer
	  // can find the tag name from customElements.define call
	  static get is() { return 'array-selector'; }
	}
	customElements.define(ArraySelector.is, ArraySelector);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const customStyleInterface = new CustomStyleInterface();

	if (!window.ShadyCSS) {
	  window.ShadyCSS = {
	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     * @param {string=} elementExtends
	     */
	    prepareTemplate(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars

	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     */
	    prepareTemplateDom(template, elementName) {}, // eslint-disable-line no-unused-vars

	    /**
	     * @param {!HTMLTemplateElement} template
	     * @param {string} elementName
	     * @param {string=} elementExtends
	     */
	    prepareTemplateStyles(template, elementName, elementExtends) {}, // eslint-disable-line no-unused-vars

	    /**
	     * @param {Element} element
	     * @param {Object=} properties
	     */
	    styleSubtree(element, properties) {
	      customStyleInterface.processStyles();
	      updateNativeProperties(element, properties);
	    },

	    /**
	     * @param {Element} element
	     */
	    styleElement(element) { // eslint-disable-line no-unused-vars
	      customStyleInterface.processStyles();
	    },

	    /**
	     * @param {Object=} properties
	     */
	    styleDocument(properties) {
	      customStyleInterface.processStyles();
	      updateNativeProperties(document.body, properties);
	    },

	    /**
	     * @param {Element} element
	     * @param {string} property
	     * @return {string}
	     */
	    getComputedStyleValue(element, property) {
	      return getComputedStyleValue(element, property);
	    },

	    flushCustomStyles() {},
	    nativeCss: nativeCssVariables,
	    nativeShadow: nativeShadow
	  };
	}

	window.ShadyCSS.CustomStyleInterface = customStyleInterface;

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	const attr = 'include';

	const CustomStyleInterface$1 = window.ShadyCSS.CustomStyleInterface;

	/**
	 * Custom element for defining styles in the main document that can take
	 * advantage of [shady DOM](https://github.com/webcomponents/shadycss) shims
	 * for style encapsulation, custom properties, and custom mixins.
	 *
	 * - Document styles defined in a `<custom-style>` are shimmed to ensure they
	 *   do not leak into local DOM when running on browsers without native
	 *   Shadow DOM.
	 * - Custom properties can be defined in a `<custom-style>`. Use the `html` selector
	 *   to define custom properties that apply to all custom elements.
	 * - Custom mixins can be defined in a `<custom-style>`, if you import the optional
	 *   [apply shim](https://github.com/webcomponents/shadycss#about-applyshim)
	 *   (`shadycss/apply-shim.html`).
	 *
	 * To use:
	 *
	 * - Import `custom-style.html`.
	 * - Place a `<custom-style>` element in the main document, wrapping an inline `<style>` tag that
	 *   contains the CSS rules you want to shim.
	 *
	 * For example:
	 *
	 * ```html
	 * <!-- import apply shim--only required if using mixins -->
	 * <link rel="import" href="bower_components/shadycss/apply-shim.html">
	 * <!-- import custom-style element -->
	 * <link rel="import" href="bower_components/polymer/lib/elements/custom-style.html">
	 *
	 * <custom-style>
	 *   <style>
	 *     html {
	 *       --custom-color: blue;
	 *       --custom-mixin: {
	 *         font-weight: bold;
	 *         color: red;
	 *       };
	 *     }
	 *   </style>
	 * </custom-style>
	 * ```
	 *
	 * @customElement
	 * @extends HTMLElement
	 * @summary Custom element for defining styles in the main document that can
	 *   take advantage of Polymer's style scoping and custom properties shims.
	 */
	class CustomStyle extends HTMLElement {
	  constructor() {
	    super();
	    this._style = null;
	    CustomStyleInterface$1.addCustomStyle(this);
	  }
	  /**
	   * Returns the light-DOM `<style>` child this element wraps.  Upon first
	   * call any style modules referenced via the `include` attribute will be
	   * concatenated to this element's `<style>`.
	   *
	   * @return {HTMLStyleElement} This element's light-DOM `<style>`
	   */
	  getStyle() {
	    if (this._style) {
	      return this._style;
	    }
	    const style = /** @type {HTMLStyleElement} */(this.querySelector('style'));
	    if (!style) {
	      return null;
	    }
	    this._style = style;
	    const include = style.getAttribute(attr);
	    if (include) {
	      style.removeAttribute(attr);
	      style.textContent = cssFromModules(include) + style.textContent;
	    }
	    /*
	    HTML Imports styling the main document are deprecated in Chrome
	    https://crbug.com/523952

	    If this element is not in the main document, then it must be in an HTML Import document.
	    In that case, move the custom style to the main document.

	    The ordering of `<custom-style>` should stay the same as when loaded by HTML Imports, but there may be odd
	    cases of ordering w.r.t the main document styles.
	    */
	    if (this.ownerDocument !== window.document) {
	      window.document.head.appendChild(this);
	    }
	    return this._style;
	  }
	}

	window.customElements.define('custom-style', CustomStyle);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	// bc
	const Base = LegacyElementMixin(HTMLElement).prototype;

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	/**

	The `iron-location` element manages binding to and from the current URL.

	iron-location is the first, and lowest level element in the Polymer team's
	routing system. This is a beta release of iron-location as we continue work
	on higher level elements, and as such iron-location may undergo breaking
	changes.

	#### Properties

	When the URL is: `/search?query=583#details` iron-location's properties will be:

	  - path: `'/search'`
	  - query: `'query=583'`
	  - hash: `'details'`

	These bindings are bidirectional. Modifying them will in turn modify the URL.

	iron-location is only active while it is attached to the document.

	#### Links

	While iron-location is active in the document it will intercept clicks on links
	within your site, updating the URL pushing the updated URL out through the
	databinding system. iron-location only intercepts clicks with the intent to
	open in the same window, so middle mouse clicks and ctrl/cmd clicks work fine.

	You can customize this behavior with the `urlSpaceRegex`.

	#### Dwell Time

	iron-location protects against accidental history spamming by only adding
	entries to the user's history if the URL stays unchanged for `dwellTime`
	milliseconds.

	@demo demo/index.html

	 */
	Polymer({
	  is: 'iron-location',

	  properties: {
	    /**
	     * The pathname component of the URL.
	     */
	    path: {
	      type: String,
	      notify: true,
	      value: function() {
	        return window.decodeURIComponent(window.location.pathname);
	      }
	    },

	    /**
	     * The query string portion of the URL.
	     */
	    query: {
	      type: String,
	      notify: true,
	      value: function() {
	        return window.location.search.slice(1);
	      }
	    },

	    /**
	     * The hash component of the URL.
	     */
	    hash: {
	      type: String,
	      notify: true,
	      value: function() {
	        return window.decodeURIComponent(window.location.hash.slice(1));
	      }
	    },

	    /**
	     * If the user was on a URL for less than `dwellTime` milliseconds, it
	     * won't be added to the browser's history, but instead will be replaced
	     * by the next entry.
	     *
	     * This is to prevent large numbers of entries from clogging up the user's
	     * browser history. Disable by setting to a negative number.
	     */
	    dwellTime: {type: Number, value: 2000},

	    /**
	     * A regexp that defines the set of URLs that should be considered part
	     * of this web app.
	     *
	     * Clicking on a link that matches this regex won't result in a full page
	     * navigation, but will instead just update the URL state in place.
	     *
	     * This regexp is given everything after the origin in an absolute
	     * URL. So to match just URLs that start with /search/ do:
	     *     url-space-regex="^/search/"
	     *
	     * @type {string|RegExp}
	     */
	    urlSpaceRegex: {type: String, value: ''},

	    /**
	     * A flag that specifies whether the spaces in query that would normally be
	     * encoded as %20 should be encoded as +.
	     *
	     * Given an example text "hello world", it is encoded in query as
	     * - "hello%20world" without the parameter
	     * - "hello+world" with the parameter
	     */
	    encodeSpaceAsPlusInQuery: {type: Boolean, value: false},

	    /**
	     * urlSpaceRegex, but coerced into a regexp.
	     *
	     * @type {RegExp}
	     */
	    _urlSpaceRegExp: {computed: '_makeRegExp(urlSpaceRegex)'},

	    _lastChangedAt: {type: Number},

	    _initialized: {type: Boolean, value: false}
	  },

	  hostAttributes: {hidden: true},

	  observers: ['_updateUrl(path, query, hash)'],

	  created: function() {
	    this.__location = window.location;
	  },

	  attached: function() {
	    this.listen(window, 'hashchange', '_hashChanged');
	    this.listen(window, 'location-changed', '_urlChanged');
	    this.listen(window, 'popstate', '_urlChanged');
	    this.listen(
	        /** @type {!HTMLBodyElement} */ (document.body),
	        'click',
	        '_globalOnClick');
	    // Give a 200ms grace period to make initial redirects without any
	    // additions to the user's history.
	    this._lastChangedAt = window.performance.now() - (this.dwellTime - 200);
	    this._initialized = true;

	    this._urlChanged();
	  },

	  detached: function() {
	    this.unlisten(window, 'hashchange', '_hashChanged');
	    this.unlisten(window, 'location-changed', '_urlChanged');
	    this.unlisten(window, 'popstate', '_urlChanged');
	    this.unlisten(
	        /** @type {!HTMLBodyElement} */ (document.body),
	        'click',
	        '_globalOnClick');
	    this._initialized = false;
	  },

	  _hashChanged: function() {
	    this.hash = window.decodeURIComponent(this.__location.hash.substring(1));
	  },

	  _urlChanged: function() {
	    // We want to extract all info out of the updated URL before we
	    // try to write anything back into it.
	    //
	    // i.e. without _dontUpdateUrl we'd overwrite the new path with the old
	    // one when we set this.hash. Likewise for query.
	    this._dontUpdateUrl = true;
	    this._hashChanged();
	    this.path = window.decodeURIComponent(this.__location.pathname);
	    this.query = this.__location.search.substring(1);
	    this._dontUpdateUrl = false;
	    this._updateUrl();
	  },

	  _getUrl: function() {
	    var partiallyEncodedPath =
	        window.encodeURI(this.path).replace(/\#/g, '%23').replace(/\?/g, '%3F');
	    var partiallyEncodedQuery = '';
	    if (this.query) {
	      partiallyEncodedQuery = '?' + this.query.replace(/\#/g, '%23');
	      if (this.encodeSpaceAsPlusInQuery) {
	        partiallyEncodedQuery = partiallyEncodedQuery.replace(/\+/g, '%2B')
	                                    .replace(/ /g, '+')
	                                    .replace(/%20/g, '+');
	      } else {
	        // required for edge
	        partiallyEncodedQuery =
	            partiallyEncodedQuery.replace(/\+/g, '%2B').replace(/ /g, '%20');
	      }
	    }
	    var partiallyEncodedHash = '';
	    if (this.hash) {
	      partiallyEncodedHash = '#' + window.encodeURI(this.hash);
	    }
	    return (
	        partiallyEncodedPath + partiallyEncodedQuery + partiallyEncodedHash);
	  },

	  _updateUrl: function() {
	    if (this._dontUpdateUrl || !this._initialized) {
	      return;
	    }

	    if (this.path === window.decodeURIComponent(this.__location.pathname) &&
	        this.query === this.__location.search.substring(1) &&
	        this.hash ===
	            window.decodeURIComponent(this.__location.hash.substring(1))) {
	      // Nothing to do, the current URL is a representation of our properties.
	      return;
	    }

	    var newUrl = this._getUrl();
	    // Need to use a full URL in case the containing page has a base URI.
	    var fullNewUrl =
	        new URL(newUrl, this.__location.protocol + '//' + this.__location.host)
	            .href;
	    var now = window.performance.now();
	    var shouldReplace = this._lastChangedAt + this.dwellTime > now;
	    this._lastChangedAt = now;

	    if (shouldReplace) {
	      window.history.replaceState({}, '', fullNewUrl);
	    } else {
	      window.history.pushState({}, '', fullNewUrl);
	    }

	    this.fire('location-changed', {}, {node: window});
	  },

	  /**
	   * A necessary evil so that links work as expected. Does its best to
	   * bail out early if possible.
	   *
	   * @param {MouseEvent} event .
	   */
	  _globalOnClick: function(event) {
	    // If another event handler has stopped this event then there's nothing
	    // for us to do. This can happen e.g. when there are multiple
	    // iron-location elements in a page.
	    if (event.defaultPrevented) {
	      return;
	    }

	    var href = this._getSameOriginLinkHref(event);

	    if (!href) {
	      return;
	    }

	    event.preventDefault();

	    // If the navigation is to the current page we shouldn't add a history
	    // entry or fire a change event.
	    if (href === this.__location.href) {
	      return;
	    }

	    window.history.pushState({}, '', href);
	    this.fire('location-changed', {}, {node: window});
	  },

	  /**
	   * Returns the absolute URL of the link (if any) that this click event
	   * is clicking on, if we can and should override the resulting full
	   * page navigation. Returns null otherwise.
	   *
	   * @param {MouseEvent} event .
	   * @return {string?} .
	   */
	  _getSameOriginLinkHref: function(event) {
	    // We only care about left-clicks.
	    if (event.button !== 0) {
	      return null;
	    }

	    // We don't want modified clicks, where the intent is to open the page
	    // in a new tab.
	    if (event.metaKey || event.ctrlKey) {
	      return null;
	    }

	    var eventPath = dom(event).path;
	    var anchor = null;

	    for (var i = 0; i < eventPath.length; i++) {
	      var element = eventPath[i];

	      if (element.tagName === 'A' && element.href) {
	        anchor = element;
	        break;
	      }
	    }

	    // If there's no link there's nothing to do.
	    if (!anchor) {
	      return null;
	    }

	    // Target blank is a new tab, don't intercept.
	    if (anchor.target === '_blank') {
	      return null;
	    }

	    // If the link is for an existing parent frame, don't intercept.
	    if ((anchor.target === '_top' || anchor.target === '_parent') &&
	        window.top !== window) {
	      return null;
	    }

	    // If the link is a download, don't intercept.
	    if (anchor.download) {
	      return null;
	    }

	    var href = anchor.href;

	    // It only makes sense for us to intercept same-origin navigations.
	    // pushState/replaceState don't work with cross-origin links.
	    var url;

	    if (document.baseURI != null) {
	      url = new URL(href, /** @type {string} */ (document.baseURI));
	    } else {
	      url = new URL(href);
	    }

	    var origin;

	    // IE Polyfill
	    if (this.__location.origin) {
	      origin = this.__location.origin;
	    } else {
	      origin = this.__location.protocol + '//' + this.__location.host;
	    }

	    var urlOrigin;

	    if (url.origin) {
	      urlOrigin = url.origin;
	    } else {
	      // IE always adds port number on HTTP and HTTPS on <a>.host but not on
	      // window.location.host
	      var urlHost = url.host;
	      var urlPort = url.port;
	      var urlProtocol = url.protocol;
	      var isExtraneousHTTPS = urlProtocol === 'https:' && urlPort === '443';
	      var isExtraneousHTTP = urlProtocol === 'http:' && urlPort === '80';

	      if (isExtraneousHTTPS || isExtraneousHTTP) {
	        urlHost = url.hostname;
	      }
	      urlOrigin = urlProtocol + '//' + urlHost;
	    }

	    if (urlOrigin !== origin) {
	      return null;
	    }

	    var normalizedHref = url.pathname + url.search + url.hash;

	    // pathname should start with '/', but may not if `new URL` is not supported
	    if (normalizedHref[0] !== '/') {
	      normalizedHref = '/' + normalizedHref;
	    }

	    // If we've been configured not to handle this url... don't handle it!
	    if (this._urlSpaceRegExp && !this._urlSpaceRegExp.test(normalizedHref)) {
	      return null;
	    }

	    // Need to use a full URL in case the containing page has a base URI.
	    var fullNormalizedHref = new URL(normalizedHref, this.__location.href).href;
	    return fullNormalizedHref;
	  },

	  _makeRegExp: function(urlSpaceRegex) {
	    return RegExp(urlSpaceRegex);
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	/**
	 * @demo demo/iron-query-params.html
	 */
	Polymer({
	  is: 'iron-query-params',

	  properties: {
	    /**
	     * @type{string|undefined}
	     */
	    paramsString: {
	      type: String,
	      notify: true,
	      observer: 'paramsStringChanged',
	    },

	    /**
	     * @type{Object|undefined}
	     */
	    paramsObject: {
	      type: Object,
	      notify: true,
	    },

	    _dontReact: {type: Boolean, value: false}
	  },

	  hostAttributes: {hidden: true},

	  observers: ['paramsObjectChanged(paramsObject.*)'],

	  paramsStringChanged: function() {
	    this._dontReact = true;
	    this.paramsObject = this._decodeParams(this.paramsString);
	    this._dontReact = false;
	  },

	  paramsObjectChanged: function() {
	    if (this._dontReact) {
	      return;
	    }
	    this.paramsString = this._encodeParams(this.paramsObject)
	                            .replace(/%3F/g, '?')
	                            .replace(/%2F/g, '/')
	                            .replace(/'/g, '%27');
	  },

	  _encodeParams: function(params) {
	    var encodedParams = [];

	    for (var key in params) {
	      var value = params[key];

	      if (value === '') {
	        encodedParams.push(encodeURIComponent(key));

	      } else if (value) {
	        encodedParams.push(
	            encodeURIComponent(key) + '=' +
	            encodeURIComponent(value.toString()));
	      }
	    }
	    return encodedParams.join('&');
	  },

	  _decodeParams: function(paramString) {
	    var params = {};
	    // Work around a bug in decodeURIComponent where + is not
	    // converted to spaces:
	    paramString = (paramString || '').replace(/\+/g, '%20');
	    var paramList = paramString.split('&');
	    for (var i = 0; i < paramList.length; i++) {
	      var param = paramList[i].split('=');
	      if (param[0]) {
	        params[decodeURIComponent(param[0])] =
	            decodeURIComponent(param[1] || '');
	      }
	    }
	    return params;
	  }
	});

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Provides bidirectional mapping between `path` and `queryParams` and a
	 * app-route compatible `route` object.
	 *
	 * For more information, see the docs for `app-route-converter`.
	 *
	 * @polymerBehavior
	 */
	const AppRouteConverterBehavior = {
	  properties: {
	    /**
	     * A model representing the deserialized path through the route tree, as
	     * well as the current queryParams.
	     *
	     * A route object is the kernel of the routing system. It is intended to
	     * be fed into consuming elements such as `app-route`.
	     *
	     * @type {?Object|undefined}
	     */
	    route: {
	      type: Object,
	      notify: true,
	    },

	    /**
	     * A set of key/value pairs that are universally accessible to branches of
	     * the route tree.
	     *
	     * @type {?Object}
	     */
	    queryParams: {
	      type: Object,
	      notify: true,
	    },

	    /**
	     * The serialized path through the route tree. This corresponds to the
	     * `window.location.pathname` value, and will update to reflect changes
	     * to that value.
	     */
	    path: {
	      type: String,
	      notify: true,
	    }
	  },

	  observers: [
	    '_locationChanged(path, queryParams)',
	    '_routeChanged(route.prefix, route.path)',
	    '_routeQueryParamsChanged(route.__queryParams)'
	  ],

	  created: function() {
	    this.linkPaths('route.__queryParams', 'queryParams');
	    this.linkPaths('queryParams', 'route.__queryParams');
	  },

	  /**
	   * Handler called when the path or queryParams change.
	   */
	  _locationChanged: function() {
	    if (this.route && this.route.path === this.path &&
	        this.queryParams === this.route.__queryParams) {
	      return;
	    }
	    this.route = {prefix: '', path: this.path, __queryParams: this.queryParams};
	  },

	  /**
	   * Handler called when the route prefix and route path change.
	   */
	  _routeChanged: function() {
	    if (!this.route) {
	      return;
	    }

	    this.path = this.route.prefix + this.route.path;
	  },

	  /**
	   * Handler called when the route queryParams change.
	   *
	   * @param  {Object} queryParams A set of key/value pairs that are
	   * universally accessible to branches of the route tree.
	   */
	  _routeQueryParamsChanged: function(queryParams) {
	    if (!this.route) {
	      return;
	    }
	    this.queryParams = queryParams;
	  }
	};

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`app-location` is an element that provides synchronization between the
	browser location bar and the state of an app. When created, `app-location`
	elements will automatically watch the global location for changes. As changes
	occur, `app-location` produces and updates an object called `route`. This
	`route` object is suitable for passing into a `app-route`, and other similar
	elements.

	An example of the public API of a route object that describes the URL
	`https://elements.polymer-project.org/elements/app-location`:

	    {
	      prefix: '',
	      path: '/elements/app-location'
	    }

	Example Usage:

	    <app-location route="{{route}}"></app-location>
	    <app-route route="{{route}}" pattern="/:page" data="{{data}}"></app-route>

	As you can see above, the `app-location` element produces a `route` and that
	property is then bound into the `app-route` element. The bindings are two-
	directional, so when changes to the `route` object occur within `app-route`,
	they automatically reflect back to the global location.

	### Hashes vs Paths

	By default `app-location` routes using the pathname portion of the URL. This has
	broad browser support but it does require cooperation of the backend server. An
	`app-location` can be configured to use the hash part of a URL instead using
	the `use-hash-as-path` attribute, like so:

	    <app-location route="{{route}}" use-hash-as-path></app-location>

	### Integrating with other routing code

	There is no standard event that is fired when window.location is modified.
	`app-location` fires a `location-changed` event on `window` when it updates the
	location. It also listens for that same event, and re-reads the URL when it's
	fired. This makes it very easy to interop with other routing code.

	So for example if you want to navigate to `/new_path` imperatively you could
	call `window.location.pushState` or `window.location.replaceState` followed by
	firing a `location-changed` event on `window`. i.e.

	    window.history.pushState({}, null, '/new_path');
	    window.dispatchEvent(new CustomEvent('location-changed'));

	@element app-location
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <iron-query-params params-string="{{__query}}" params-object="{{queryParams}}">
    </iron-query-params>
    <iron-location path="{{__path}}" query="{{__query}}" hash="{{__hash}}" url-space-regex="[[urlSpaceRegex]]" dwell-time="[[dwellTime]]">
    </iron-location>
  `,

	  is: 'app-location',

	  properties: {
	    /**
	     * A model representing the deserialized path through the route tree, as
	     * well as the current queryParams.
	     */
	    route: {
	      type: Object,
	      notify: true,
	    },

	    /**
	     * In many scenarios, it is convenient to treat the `hash` as a stand-in
	     * alternative to the `path`. For example, if deploying an app to a static
	     * web server (e.g., Github Pages) - where one does not have control over
	     * server-side routing - it is usually a better experience to use the hash
	     * to represent paths through one's app.
	     *
	     * When this property is set to true, the `hash` will be used in place of

	     * the `path` for generating a `route`.
	     */
	    useHashAsPath: {
	      type: Boolean,
	      value: false,
	    },

	    /**
	     * A regexp that defines the set of URLs that should be considered part
	     * of this web app.
	     *
	     * Clicking on a link that matches this regex won't result in a full page
	     * navigation, but will instead just update the URL state in place.
	     *
	     * This regexp is given everything after the origin in an absolute
	     * URL. So to match just URLs that start with /search/ do:
	     *     url-space-regex="^/search/"
	     *
	     * @type {string|RegExp}
	     */
	    urlSpaceRegex: {
	      type: String,
	      notify: true,
	    },

	    /**
	     * A set of key/value pairs that are universally accessible to branches
	     * of the route tree.
	     */
	    __queryParams: {
	      type: Object,
	    },

	    /**
	     * The pathname component of the current URL.
	     */
	    __path: {
	      type: String,
	    },

	    /**
	     * The query string portion of the current URL.
	     */
	    __query: {
	      type: String,
	    },

	    /**
	     * The hash portion of the current URL.
	     */
	    __hash: {
	      type: String,
	    },

	    /**
	     * The route path, which will be either the hash or the path, depending
	     * on useHashAsPath.
	     */
	    path: {
	      type: String,
	      observer: '__onPathChanged',
	    },

	    /**
	     * Whether or not the ready function has been called.
	     */
	    _isReady: {
	      type: Boolean,
	    },

	    /**
	     * If the user was on a URL for less than `dwellTime` milliseconds, it
	     * won't be added to the browser's history, but instead will be
	     * replaced by the next entry.
	     *
	     * This is to prevent large numbers of entries from clogging up the
	     * user's browser history. Disable by setting to a negative number.
	     *
	     * See `iron-location` for more information.
	     */
	    dwellTime: {
	      type: Number,
	    }
	  },

	  behaviors: [AppRouteConverterBehavior],
	  observers: ['__computeRoutePath(useHashAsPath, __hash, __path)'],

	  ready: function() {
	    this._isReady = true;
	  },

	  __computeRoutePath: function() {
	    this.path = this.useHashAsPath ? this.__hash : this.__path;
	  },

	  __onPathChanged: function() {
	    if (!this._isReady) {
	      return;
	    }

	    if (this.useHashAsPath) {
	      this.__hash = this.path;
	    } else {
	      this.__path = this.path;
	    }
	  }
	});

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`app-route` is an element that enables declarative, self-describing routing
	for a web app.

	In its typical usage, a `app-route` element consumes an object that describes
	some state about the current route, via the `route` property. It then parses
	that state using the `pattern` property, and produces two artifacts: some `data`
	related to the `route`, and a `tail` that contains the rest of the `route` that
	did not match.

	Here is a basic example, when used with `app-location`:

	    <app-location route="{{route}}"></app-location>
	    <app-route
	        route="{{route}}"
	        pattern="/:page"
	        data="{{data}}"
	        tail="{{tail}}">
	    </app-route>

	In the above example, the `app-location` produces a `route` value. Then, the
	`route.path` property is matched by comparing it to the `pattern` property. If
	the `pattern` property matches `route.path`, the `app-route` will set or update
	its `data` property with an object whose properties correspond to the parameters
	in `pattern`. So, in the above example, if `route.path` was `'/about'`, the
	value of `data` would be `{"page": "about"}`.

	The `tail` property represents the remaining part of the route state after the
	`pattern` has been applied to a matching `route`.

	Here is another example, where `tail` is used:

	    <app-location route="{{route}}"></app-location>
	    <app-route
	        route="{{route}}"
	        pattern="/:page"
	        data="{{routeData}}"
	        tail="{{subroute}}">
	    </app-route>
	    <app-route
	        route="{{subroute}}"
	        pattern="/:id"
	        data="{{subrouteData}}">
	    </app-route>

	In the above example, there are two `app-route` elements. The first
	`app-route` consumes a `route`. When the `route` is matched, the first
	`app-route` also produces `routeData` from its `data`, and `subroute` from
	its `tail`. The second `app-route` consumes the `subroute`, and when it
	matches, it produces an object called `subrouteData` from its `data`.

	So, when `route.path` is `'/about'`, the `routeData` object will look like
	this: `{ page: 'about' }`

	And `subrouteData` will be null. However, if `route.path` changes to
	`'/article/123'`, the `routeData` object will look like this:
	`{ page: 'article' }`

	And the `subrouteData` will look like this: `{ id: '123' }`

	`app-route` is responsive to bi-directional changes to the `data` objects
	they produce. So, if `routeData.page` changed from `'article'` to `'about'`,
	the `app-route` will update `route.path`. This in-turn will update the
	`app-location`, and cause the global location bar to change its value.

	@element app-route
	@demo demo/index.html
	@demo demo/data-loading-demo.html
	@demo demo/simple-demo.html
	*/
	Polymer({
	  is: 'app-route',

	  properties: {
	    /**
	     * The URL component managed by this element.
	     */
	    route: {
	      type: Object,
	      notify: true,
	    },

	    /**
	     * The pattern of slash-separated segments to match `route.path` against.
	     *
	     * For example the pattern "/foo" will match "/foo" or "/foo/bar"
	     * but not "/foobar".
	     *
	     * Path segments like `/:named` are mapped to properties on the `data`
	     * object.
	     */
	    pattern: {
	      type: String,
	    },

	    /**
	     * The parameterized values that are extracted from the route as
	     * described by `pattern`.
	     */
	    data: {
	      type: Object,
	      value: function() {
	        return {};
	      },
	      notify: true,
	    },

	    /**
	     * Auto activate route if path empty
	     */
	    autoActivate: {
	      type: Boolean,
	      value: false,
	    },

	    _queryParamsUpdating: {
	      type: Boolean,
	      value: false,
	    },

	    /**
	     * @type {?Object}
	     */
	    queryParams: {
	      type: Object,
	      value: function() {
	        return {};
	      },
	      notify: true,
	    },

	    /**
	     * The part of `route.path` NOT consumed by `pattern`.
	     */
	    tail: {
	      type: Object,
	      value: function() {
	        return {
	          path: null,
	          prefix: null,
	          __queryParams: null,
	        };
	      },
	      notify: true,
	    },

	    /**
	     * Whether the current route is active. True if `route.path` matches the
	     * `pattern`, false otherwise.
	     */
	    active: {
	      type: Boolean,
	      notify: true,
	      readOnly: true,
	    },

	    /**
	     * @type {?string}
	     */
	    _matched: {
	      type: String,
	      value: '',
	    }
	  },

	  observers: [
	    '__tryToMatch(route.path, pattern)',
	    '__updatePathOnDataChange(data.*)',
	    '__tailPathChanged(tail.path)',
	    '__routeQueryParamsChanged(route.__queryParams)',
	    '__tailQueryParamsChanged(tail.__queryParams)',
	    '__queryParamsChanged(queryParams.*)'
	  ],

	  created: function() {
	    this.linkPaths('route.__queryParams', 'tail.__queryParams');
	    this.linkPaths('tail.__queryParams', 'route.__queryParams');
	  },

	  /**
	   * Deal with the query params object being assigned to wholesale.
	   */
	  __routeQueryParamsChanged: function(queryParams) {
	    if (queryParams && this.tail) {
	      if (this.tail.__queryParams !== queryParams) {
	        this.set('tail.__queryParams', queryParams);
	      }

	      if (!this.active || this._queryParamsUpdating) {
	        return;
	      }

	      // Copy queryParams and track whether there are any differences compared
	      // to the existing query params.
	      var copyOfQueryParams = {};
	      var anythingChanged = false;
	      for (var key in queryParams) {
	        copyOfQueryParams[key] = queryParams[key];
	        if (anythingChanged || !this.queryParams ||
	            queryParams[key] !== this.queryParams[key]) {
	          anythingChanged = true;
	        }
	      }
	      // Need to check whether any keys were deleted
	      for (var key in this.queryParams) {
	        if (anythingChanged || !(key in queryParams)) {
	          anythingChanged = true;
	          break;
	        }
	      }

	      if (!anythingChanged) {
	        return;
	      }
	      this._queryParamsUpdating = true;
	      this.set('queryParams', copyOfQueryParams);
	      this._queryParamsUpdating = false;
	    }
	  },

	  __tailQueryParamsChanged: function(queryParams) {
	    if (queryParams && this.route && this.route.__queryParams != queryParams) {
	      this.set('route.__queryParams', queryParams);
	    }
	  },

	  __queryParamsChanged: function(changes) {
	    if (!this.active || this._queryParamsUpdating) {
	      return;
	    }

	    this.set('route.__' + changes.path, changes.value);
	  },

	  __resetProperties: function() {
	    this._setActive(false);
	    this._matched = null;
	  },

	  __tryToMatch: function() {
	    if (!this.route) {
	      return;
	    }

	    var path = this.route.path;
	    var pattern = this.pattern;

	    if (this.autoActivate && path === '') {
	      path = '/';
	    }

	    if (!pattern) {
	      return;
	    }

	    if (!path) {
	      this.__resetProperties();
	      return;
	    }

	    var remainingPieces = path.split('/');
	    var patternPieces = pattern.split('/');

	    var matched = [];
	    var namedMatches = {};

	    for (var i = 0; i < patternPieces.length; i++) {
	      var patternPiece = patternPieces[i];
	      if (!patternPiece && patternPiece !== '') {
	        break;
	      }
	      var pathPiece = remainingPieces.shift();

	      // We don't match this path.
	      if (!pathPiece && pathPiece !== '') {
	        this.__resetProperties();
	        return;
	      }
	      matched.push(pathPiece);

	      if (patternPiece.charAt(0) == ':') {
	        namedMatches[patternPiece.slice(1)] = pathPiece;
	      } else if (patternPiece !== pathPiece) {
	        this.__resetProperties();
	        return;
	      }
	    }

	    this._matched = matched.join('/');

	    // Properties that must be updated atomically.
	    var propertyUpdates = {};

	    // this.active
	    if (!this.active) {
	      propertyUpdates.active = true;
	    }

	    // this.tail
	    var tailPrefix = this.route.prefix + this._matched;
	    var tailPath = remainingPieces.join('/');
	    if (remainingPieces.length > 0) {
	      tailPath = '/' + tailPath;
	    }
	    if (!this.tail || this.tail.prefix !== tailPrefix ||
	        this.tail.path !== tailPath) {
	      propertyUpdates.tail = {
	        prefix: tailPrefix,
	        path: tailPath,
	        __queryParams: this.route.__queryParams
	      };
	    }

	    // this.data
	    propertyUpdates.data = namedMatches;
	    this._dataInUrl = {};
	    for (var key in namedMatches) {
	      this._dataInUrl[key] = namedMatches[key];
	    }

	    if (this.setProperties) {
	      // atomic update
	      this.setProperties(propertyUpdates, true);
	    } else {
	      this.__setMulti(propertyUpdates);
	    }
	  },

	  __tailPathChanged: function(path) {
	    if (!this.active) {
	      return;
	    }
	    var tailPath = path;
	    var newPath = this._matched;
	    if (tailPath) {
	      if (tailPath.charAt(0) !== '/') {
	        tailPath = '/' + tailPath;
	      }
	      newPath += tailPath;
	    }
	    this.set('route.path', newPath);
	  },

	  __updatePathOnDataChange: function() {
	    if (!this.route || !this.active) {
	      return;
	    }
	    var newPath = this.__getLink({});
	    var oldPath = this.__getLink(this._dataInUrl);
	    if (newPath === oldPath) {
	      return;
	    }
	    this.set('route.path', newPath);
	  },

	  __getLink: function(overrideValues) {
	    var values = {tail: null};
	    for (var key in this.data) {
	      values[key] = this.data[key];
	    }
	    for (var key in overrideValues) {
	      values[key] = overrideValues[key];
	    }
	    var patternPieces = this.pattern.split('/');
	    var interp = patternPieces.map(function(value) {
	      if (value[0] == ':') {
	        value = values[value.slice(1)];
	      }
	      return value;
	    }, this);
	    if (values.tail && values.tail.path) {
	      if (interp.length > 0 && values.tail.path.charAt(0) === '/') {
	        interp.push(values.tail.path.slice(1));
	      } else {
	        interp.push(values.tail.path);
	      }
	    }
	    return interp.join('/');
	  },

	  __setMulti: function(setObj) {
	    // HACK(rictic): skirting around 1.0's lack of a setMulti by poking at
	    //     internal data structures. I would not advise that you copy this
	    //     example.
	    //
	    //     In the future this will be a feature of Polymer itself.
	    //     See: https://github.com/Polymer/polymer/issues/3640
	    //
	    //     Hacking around with private methods like this is juggling footguns,
	    //     and is likely to have unexpected and unsupported rough edges.
	    //
	    //     Be ye so warned.
	    for (var property in setObj) {
	      this._propertySetter(property, setObj[property]);
	    }
	    // notify in a specific order
	    if (setObj.data !== undefined) {
	      this._pathEffector('data', this.data);
	      this._notifyChange('data');
	    }
	    if (setObj.active !== undefined) {
	      this._pathEffector('active', this.active);
	      this._notifyChange('active');
	    }
	    if (setObj.tail !== undefined) {
	      this._pathEffector('tail', this.tail);
	      this._notifyChange('tail');
	    }
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	// Contains all connected resizables that do not have a parent.
	var ORPHANS = new Set();

	/**
	 * `IronResizableBehavior` is a behavior that can be used in Polymer elements to
	 * coordinate the flow of resize events between "resizers" (elements that
	 *control the size or hidden state of their children) and "resizables" (elements
	 *that need to be notified when they are resized or un-hidden by their parents
	 *in order to take action on their new measurements).
	 *
	 * Elements that perform measurement should add the `IronResizableBehavior`
	 *behavior to their element definition and listen for the `iron-resize` event on
	 *themselves. This event will be fired when they become showing after having
	 *been hidden, when they are resized explicitly by another resizable, or when
	 *the window has been resized.
	 *
	 * Note, the `iron-resize` event is non-bubbling.
	 *
	 * @polymerBehavior
	 * @demo demo/index.html
	 **/
	const IronResizableBehavior = {
	  properties: {
	    /**
	     * The closest ancestor element that implements `IronResizableBehavior`.
	     */
	    _parentResizable: {
	      type: Object,
	      observer: '_parentResizableChanged',
	    },

	    /**
	     * True if this element is currently notifying its descendant elements of
	     * resize.
	     */
	    _notifyingDescendant: {
	      type: Boolean,
	      value: false,
	    }
	  },

	  listeners: {
	    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'
	  },

	  created: function() {
	    // We don't really need property effects on these, and also we want them
	    // to be created before the `_parentResizable` observer fires:
	    this._interestedResizables = [];
	    this._boundNotifyResize = this.notifyResize.bind(this);
	    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);
	  },

	  attached: function() {
	    this._requestResizeNotifications();
	  },

	  detached: function() {
	    if (this._parentResizable) {
	      this._parentResizable.stopResizeNotificationsFor(this);
	    } else {
	      ORPHANS.delete(this);
	      window.removeEventListener('resize', this._boundNotifyResize);
	    }

	    this._parentResizable = null;
	  },

	  /**
	   * Can be called to manually notify a resizable and its descendant
	   * resizables of a resize change.
	   */
	  notifyResize: function() {
	    if (!this.isAttached) {
	      return;
	    }

	    this._interestedResizables.forEach(function(resizable) {
	      if (this.resizerShouldNotify(resizable)) {
	        this._notifyDescendant(resizable);
	      }
	    }, this);

	    this._fireResize();
	  },

	  /**
	   * Used to assign the closest resizable ancestor to this resizable
	   * if the ancestor detects a request for notifications.
	   */
	  assignParentResizable: function(parentResizable) {
	    if (this._parentResizable) {
	      this._parentResizable.stopResizeNotificationsFor(this);
	    }

	    this._parentResizable = parentResizable;

	    if (parentResizable &&
	        parentResizable._interestedResizables.indexOf(this) === -1) {
	      parentResizable._interestedResizables.push(this);
	      parentResizable._subscribeIronResize(this);
	    }
	  },

	  /**
	   * Used to remove a resizable descendant from the list of descendants
	   * that should be notified of a resize change.
	   */
	  stopResizeNotificationsFor: function(target) {
	    var index = this._interestedResizables.indexOf(target);

	    if (index > -1) {
	      this._interestedResizables.splice(index, 1);
	      this._unsubscribeIronResize(target);
	    }
	  },

	  /**
	   * Subscribe this element to listen to iron-resize events on the given target.
	   *
	   * Preferred over target.listen because the property renamer does not
	   * understand to rename when the target is not specifically "this"
	   *
	   * @param {!HTMLElement} target Element to listen to for iron-resize events.
	   */
	  _subscribeIronResize: function(target) {
	    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);
	  },

	  /**
	   * Unsubscribe this element from listening to to iron-resize events on the
	   * given target.
	   *
	   * Preferred over target.unlisten because the property renamer does not
	   * understand to rename when the target is not specifically "this"
	   *
	   * @param {!HTMLElement} target Element to listen to for iron-resize events.
	   */
	  _unsubscribeIronResize: function(target) {
	    target.removeEventListener(
	        'iron-resize', this._boundOnDescendantIronResize);
	  },

	  /**
	   * This method can be overridden to filter nested elements that should or
	   * should not be notified by the current element. Return true if an element
	   * should be notified, or false if it should not be notified.
	   *
	   * @param {HTMLElement} element A candidate descendant element that
	   * implements `IronResizableBehavior`.
	   * @return {boolean} True if the `element` should be notified of resize.
	   */
	  resizerShouldNotify: function(element) {
	    return true;
	  },

	  _onDescendantIronResize: function(event) {
	    if (this._notifyingDescendant) {
	      event.stopPropagation();
	      return;
	    }

	    // no need to use this during shadow dom because of event retargeting
	    if (!useShadow) {
	      this._fireResize();
	    }
	  },

	  _fireResize: function() {
	    this.fire('iron-resize', null, {node: this, bubbles: false});
	  },

	  _onIronRequestResizeNotifications: function(event) {
	    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);
	    if (target === this) {
	      return;
	    }

	    target.assignParentResizable(this);
	    this._notifyDescendant(target);

	    event.stopPropagation();
	  },

	  _parentResizableChanged: function(parentResizable) {
	    if (parentResizable) {
	      window.removeEventListener('resize', this._boundNotifyResize);
	    }
	  },

	  _notifyDescendant: function(descendant) {
	    // NOTE(cdata): In IE10, attached is fired on children first, so it's
	    // important not to notify them if the parent is not attached yet (or
	    // else they will get redundantly notified when the parent attaches).
	    if (!this.isAttached) {
	      return;
	    }

	    this._notifyingDescendant = true;
	    descendant.notifyResize();
	    this._notifyingDescendant = false;
	  },

	  _requestResizeNotifications: function() {
	    if (!this.isAttached) {
	      return;
	    }

	    if (document.readyState === 'loading') {
	      var _requestResizeNotifications =
	          this._requestResizeNotifications.bind(this);
	      document.addEventListener(
	          'readystatechange', function readystatechanged() {
	            document.removeEventListener('readystatechange', readystatechanged);
	            _requestResizeNotifications();
	          });
	    } else {
	      this._findParent();

	      if (!this._parentResizable) {
	        // If this resizable is an orphan, tell other orphans to try to find
	        // their parent again, in case it's this resizable.
	        ORPHANS.forEach(function(orphan) {
	          if (orphan !== this) {
	            orphan._findParent();
	          }
	        }, this);

	        window.addEventListener('resize', this._boundNotifyResize);
	        this.notifyResize();
	      } else {
	        // If this resizable has a parent, tell other child resizables of
	        // that parent to try finding their parent again, in case it's this
	        // resizable.
	        this._parentResizable._interestedResizables
	            .forEach(function(resizable) {
	              if (resizable !== this) {
	                resizable._findParent();
	              }
	            }, this);
	      }
	    }
	  },

	  _findParent: function() {
	    this.assignParentResizable(null);
	    this.fire(
	        'iron-request-resize-notifications',
	        null,
	        {node: this, bubbles: true, cancelable: true});

	    if (!this._parentResizable) {
	      ORPHANS.add(this);
	    } else {
	      ORPHANS.delete(this);
	    }
	  }
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	class IronSelection {
	  /**
	   * @param {!Function} selectCallback
	   * @suppress {missingProvide}
	   */
	  constructor(selectCallback) {
	    this.selection = [];
	    this.selectCallback = selectCallback;
	  }

	  /**
	   * Retrieves the selected item(s).
	   *
	   * @returns Returns the selected item(s). If the multi property is true,
	   * `get` will return an array, otherwise it will return
	   * the selected item or undefined if there is no selection.
	   */
	  get() {
	    return this.multi ? this.selection.slice() : this.selection[0];
	  }

	  /**
	   * Clears all the selection except the ones indicated.
	   *
	   * @param {Array} excludes items to be excluded.
	   */
	  clear(excludes) {
	    this.selection.slice().forEach(function(item) {
	      if (!excludes || excludes.indexOf(item) < 0) {
	        this.setItemSelected(item, false);
	      }
	    }, this);
	  }

	  /**
	   * Indicates if a given item is selected.
	   *
	   * @param {*} item The item whose selection state should be checked.
	   * @return {boolean} Returns true if `item` is selected.
	   */
	  isSelected(item) {
	    return this.selection.indexOf(item) >= 0;
	  }

	  /**
	   * Sets the selection state for a given item to either selected or deselected.
	   *
	   * @param {*} item The item to select.
	   * @param {boolean} isSelected True for selected, false for deselected.
	   */
	  setItemSelected(item, isSelected) {
	    if (item != null) {
	      if (isSelected !== this.isSelected(item)) {
	        // proceed to update selection only if requested state differs from
	        // current
	        if (isSelected) {
	          this.selection.push(item);
	        } else {
	          var i = this.selection.indexOf(item);
	          if (i >= 0) {
	            this.selection.splice(i, 1);
	          }
	        }
	        if (this.selectCallback) {
	          this.selectCallback(item, isSelected);
	        }
	      }
	    }
	  }

	  /**
	   * Sets the selection state for a given item. If the `multi` property
	   * is true, then the selected state of `item` will be toggled; otherwise
	   * the `item` will be selected.
	   *
	   * @param {*} item The item to select.
	   */
	  select(item) {
	    if (this.multi) {
	      this.toggle(item);
	    } else if (this.get() !== item) {
	      this.setItemSelected(this.get(), false);
	      this.setItemSelected(item, true);
	    }
	  }

	  /**
	   * Toggles the selection state for `item`.
	   *
	   * @param {*} item The item to toggle.
	   */
	  toggle(item) {
	    this.setItemSelected(item, !this.isSelected(item));
	  }
	}

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @polymerBehavior
	 */
	const IronSelectableBehavior = {

	  /**
	   * Fired when iron-selector is activated (selected or deselected).
	   * It is fired before the selected items are changed.
	   * Cancel the event to abort selection.
	   *
	   * @event iron-activate
	   */

	  /**
	   * Fired when an item is selected
	   *
	   * @event iron-select
	   */

	  /**
	   * Fired when an item is deselected
	   *
	   * @event iron-deselect
	   */

	  /**
	   * Fired when the list of selectable items changes (e.g., items are
	   * added or removed). The detail of the event is a mutation record that
	   * describes what changed.
	   *
	   * @event iron-items-changed
	   */

	  properties: {

	    /**
	     * If you want to use an attribute value or property of an element for
	     * `selected` instead of the index, set this to the name of the attribute
	     * or property. Hyphenated values are converted to camel case when used to
	     * look up the property of a selectable element. Camel cased values are
	     * *not* converted to hyphenated values for attribute lookup. It's
	     * recommended that you provide the hyphenated form of the name so that
	     * selection works in both cases. (Use `attr-or-property-name` instead of
	     * `attrOrPropertyName`.)
	     */
	    attrForSelected: {type: String, value: null},

	    /**
	     * Gets or sets the selected element. The default is to use the index of the
	     * item.
	     * @type {string|number}
	     */
	    selected: {type: String, notify: true},

	    /**
	     * Returns the currently selected item.
	     *
	     * @type {?Object}
	     */
	    selectedItem: {type: Object, readOnly: true, notify: true},

	    /**
	     * The event that fires from items when they are selected. Selectable
	     * will listen for this event from items and update the selection state.
	     * Set to empty string to listen to no events.
	     */
	    activateEvent:
	        {type: String, value: 'tap', observer: '_activateEventChanged'},

	    /**
	     * This is a CSS selector string.  If this is set, only items that match the
	     * CSS selector are selectable.
	     */
	    selectable: String,

	    /**
	     * The class to set on elements when selected.
	     */
	    selectedClass: {type: String, value: 'iron-selected'},

	    /**
	     * The attribute to set on elements when selected.
	     */
	    selectedAttribute: {type: String, value: null},

	    /**
	     * Default fallback if the selection based on selected with
	     * `attrForSelected` is not found.
	     */
	    fallbackSelection: {type: String, value: null},

	    /**
	     * The list of items from which a selection can be made.
	     */
	    items: {
	      type: Array,
	      readOnly: true,
	      notify: true,
	      value: function() {
	        return [];
	      }
	    },

	    /**
	     * The set of excluded elements where the key is the `localName`
	     * of the element that will be ignored from the item list.
	     *
	     * @default {template: 1}
	     */
	    _excludedLocalNames: {
	      type: Object,
	      value: function() {
	        return {
	          'template': 1,
	          'dom-bind': 1,
	          'dom-if': 1,
	          'dom-repeat': 1,
	        };
	      }
	    }
	  },

	  observers: [
	    '_updateAttrForSelected(attrForSelected)',
	    '_updateSelected(selected)',
	    '_checkFallback(fallbackSelection)'
	  ],

	  created: function() {
	    this._bindFilterItem = this._filterItem.bind(this);
	    this._selection = new IronSelection(this._applySelection.bind(this));
	  },

	  attached: function() {
	    this._observer = this._observeItems(this);
	    this._addListener(this.activateEvent);
	  },

	  detached: function() {
	    if (this._observer) {
	      dom(this).unobserveNodes(this._observer);
	    }
	    this._removeListener(this.activateEvent);
	  },

	  /**
	   * Returns the index of the given item.
	   *
	   * @method indexOf
	   * @param {Object} item
	   * @returns Returns the index of the item
	   */
	  indexOf: function(item) {
	    return this.items ? this.items.indexOf(item) : -1;
	  },

	  /**
	   * Selects the given value.
	   *
	   * @method select
	   * @param {string|number} value the value to select.
	   */
	  select: function(value) {
	    this.selected = value;
	  },

	  /**
	   * Selects the previous item.
	   *
	   * @method selectPrevious
	   */
	  selectPrevious: function() {
	    var length = this.items.length;
	    var index = length - 1;
	    if (this.selected !== undefined) {
	      index = (Number(this._valueToIndex(this.selected)) - 1 + length) % length;
	    }
	    this.selected = this._indexToValue(index);
	  },

	  /**
	   * Selects the next item.
	   *
	   * @method selectNext
	   */
	  selectNext: function() {
	    var index = 0;
	    if (this.selected !== undefined) {
	      index =
	          (Number(this._valueToIndex(this.selected)) + 1) % this.items.length;
	    }
	    this.selected = this._indexToValue(index);
	  },

	  /**
	   * Selects the item at the given index.
	   *
	   * @method selectIndex
	   */
	  selectIndex: function(index) {
	    this.select(this._indexToValue(index));
	  },

	  /**
	   * Force a synchronous update of the `items` property.
	   *
	   * NOTE: Consider listening for the `iron-items-changed` event to respond to
	   * updates to the set of selectable items after updates to the DOM list and
	   * selection state have been made.
	   *
	   * WARNING: If you are using this method, you should probably consider an
	   * alternate approach. Synchronously querying for items is potentially
	   * slow for many use cases. The `items` property will update asynchronously
	   * on its own to reflect selectable items in the DOM.
	   */
	  forceSynchronousItemUpdate: function() {
	    if (this._observer && typeof this._observer.flush === 'function') {
	      // NOTE(bicknellr): `dom.flush` above is no longer sufficient to trigger
	      // `observeNodes` callbacks. Polymer 2.x returns an object from
	      // `observeNodes` with a `flush` that synchronously gives the callback any
	      // pending MutationRecords (retrieved with `takeRecords`). Any case where
	      // ShadyDOM flushes were expected to synchronously trigger item updates
	      // will now require calling `forceSynchronousItemUpdate`.
	      this._observer.flush();
	    } else {
	      this._updateItems();
	    }
	  },

	  // UNUSED, FOR API COMPATIBILITY
	  get _shouldUpdateSelection() {
	    return this.selected != null;
	  },

	  _checkFallback: function() {
	    this._updateSelected();
	  },

	  _addListener: function(eventName) {
	    this.listen(this, eventName, '_activateHandler');
	  },

	  _removeListener: function(eventName) {
	    this.unlisten(this, eventName, '_activateHandler');
	  },

	  _activateEventChanged: function(eventName, old) {
	    this._removeListener(old);
	    this._addListener(eventName);
	  },

	  _updateItems: function() {
	    var nodes = dom(this).queryDistributedElements(this.selectable || '*');
	    nodes = Array.prototype.filter.call(nodes, this._bindFilterItem);
	    this._setItems(nodes);
	  },

	  _updateAttrForSelected: function() {
	    if (this.selectedItem) {
	      this.selected = this._valueForItem(this.selectedItem);
	    }
	  },

	  _updateSelected: function() {
	    this._selectSelected(this.selected);
	  },

	  _selectSelected: function(selected) {
	    if (!this.items) {
	      return;
	    }

	    var item = this._valueToItem(this.selected);
	    if (item) {
	      this._selection.select(item);
	    } else {
	      this._selection.clear();
	    }
	    // Check for items, since this array is populated only when attached
	    // Since Number(0) is falsy, explicitly check for undefined
	    if (this.fallbackSelection && this.items.length &&
	        (this._selection.get() === undefined)) {
	      this.selected = this.fallbackSelection;
	    }
	  },

	  _filterItem: function(node) {
	    return !this._excludedLocalNames[node.localName];
	  },

	  _valueToItem: function(value) {
	    return (value == null) ? null : this.items[this._valueToIndex(value)];
	  },

	  _valueToIndex: function(value) {
	    if (this.attrForSelected) {
	      for (var i = 0, item; item = this.items[i]; i++) {
	        if (this._valueForItem(item) == value) {
	          return i;
	        }
	      }
	    } else {
	      return Number(value);
	    }
	  },

	  _indexToValue: function(index) {
	    if (this.attrForSelected) {
	      var item = this.items[index];
	      if (item) {
	        return this._valueForItem(item);
	      }
	    } else {
	      return index;
	    }
	  },

	  _valueForItem: function(item) {
	    if (!item) {
	      return null;
	    }
	    if (!this.attrForSelected) {
	      var i = this.indexOf(item);
	      return i === -1 ? null : i;
	    }
	    var propValue = item[dashToCamelCase(this.attrForSelected)];
	    return propValue != undefined ? propValue :
	                                    item.getAttribute(this.attrForSelected);
	  },

	  _applySelection: function(item, isSelected) {
	    if (this.selectedClass) {
	      this.toggleClass(this.selectedClass, isSelected, item);
	    }
	    if (this.selectedAttribute) {
	      this.toggleAttribute(this.selectedAttribute, isSelected, item);
	    }
	    this._selectionChange();
	    this.fire('iron-' + (isSelected ? 'select' : 'deselect'), {item: item});
	  },

	  _selectionChange: function() {
	    this._setSelectedItem(this._selection.get());
	  },

	  // observe items change under the given node.
	  _observeItems: function(node) {
	    return dom(node).observeNodes(function(mutation) {
	      this._updateItems();
	      this._updateSelected();

	      // Let other interested parties know about the change so that
	      // we don't have to recreate mutation observers everywhere.
	      this.fire(
	          'iron-items-changed', mutation, {bubbles: false, cancelable: false});
	    });
	  },

	  _activateHandler: function(e) {
	    var t = e.target;
	    var items = this.items;
	    while (t && t != this) {
	      var i = items.indexOf(t);
	      if (i >= 0) {
	        var value = this._indexToValue(i);
	        this._itemActivate(value, t);
	        return;
	      }
	      t = t.parentNode;
	    }
	  },

	  _itemActivate: function(value, item) {
	    if (!this.fire('iron-activate', {selected: value, item: item}, {
	               cancelable: true
	             })
	             .defaultPrevented) {
	      this.select(value);
	    }
	  }

	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`iron-pages` is used to select one of its children to show. One use is to cycle
	through a list of children "pages".

	Example:

	    <iron-pages selected="0">
	      <div>One</div>
	      <div>Two</div>
	      <div>Three</div>
	    </iron-pages>

	    <script>
	      document.addEventListener('click', function(e) {
	        var pages = document.querySelector('iron-pages');
	        pages.selectNext();
	      });
	    </script>

	@group Iron Elements
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
      }

      :host > ::slotted(:not(slot):not(.iron-selected)) {
        display: none !important;
      }
    </style>

    <slot></slot>
`,

	  is: 'iron-pages',
	  behaviors: [IronResizableBehavior, IronSelectableBehavior],

	  properties: {

	    // as the selected page is the only one visible, activateEvent
	    // is both non-sensical and problematic; e.g. in cases where a user
	    // handler attempts to change the page and the activateEvent
	    // handler immediately changes it back
	    activateEvent: {type: String, value: null}

	  },

	  observers: ['_selectedPageChanged(selected)'],

	  _selectedPageChanged: function(selected, old) {
	    this.async(this.notifyResize);
	  }
	});

	const styleElement = document.createElement('dom-module');

	// Regular palette
	// Color palette: https://coolors.co/ffffff-00171f-003459-007ea7-00a8e8

	styleElement.innerHTML = `
<template>
   <style>
    :host {    
      --vivid-cerulean: #00A8E8;
      --white: #FFFFFF;
      --cerulean: #007EA7;
      --rich-black: #00171F;
      --prusian-blue: #003459;

      --light: var(--vivid-cerulean);
      --lighter: var(--white);
      --dark: var(--cerulean);
      --darker: var(--prusian-blue);
      --darkest: var(--rich-black);
    }
    
    h1, h2, h3, h4, h5, h6 {
      font-weight: 300;
    }
   </style>
 </template>
`;

	styleElement.register('common-styles');

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @polymerBehavior IronMultiSelectableBehavior
	 */
	const IronMultiSelectableBehaviorImpl = {
	  properties: {

	    /**
	     * If true, multiple selections are allowed.
	     */
	    multi: {type: Boolean, value: false, observer: 'multiChanged'},

	    /**
	     * Gets or sets the selected elements. This is used instead of `selected`
	     * when `multi` is true.
	     */
	    selectedValues: {
	      type: Array,
	      notify: true,
	      value: function() {
	        return [];
	      }
	    },

	    /**
	     * Returns an array of currently selected items.
	     */
	    selectedItems: {
	      type: Array,
	      readOnly: true,
	      notify: true,
	      value: function() {
	        return [];
	      }
	    },

	  },

	  observers: ['_updateSelected(selectedValues.splices)'],

	  /**
	   * Selects the given value. If the `multi` property is true, then the selected
	   * state of the `value` will be toggled; otherwise the `value` will be
	   * selected.
	   *
	   * @method select
	   * @param {string|number} value the value to select.
	   */
	  select: function(value) {
	    if (this.multi) {
	      this._toggleSelected(value);
	    } else {
	      this.selected = value;
	    }
	  },

	  multiChanged: function(multi) {
	    this._selection.multi = multi;
	    this._updateSelected();
	  },

	  // UNUSED, FOR API COMPATIBILITY
	  get _shouldUpdateSelection() {
	    return this.selected != null ||
	        (this.selectedValues != null && this.selectedValues.length);
	  },

	  _updateAttrForSelected: function() {
	    if (!this.multi) {
	      IronSelectableBehavior._updateAttrForSelected.apply(this);
	    } else if (this.selectedItems && this.selectedItems.length > 0) {
	      this.selectedValues =
	          this.selectedItems
	              .map(
	                  function(selectedItem) {
	                    return this._indexToValue(this.indexOf(selectedItem));
	                  },
	                  this)
	              .filter(function(unfilteredValue) {
	                return unfilteredValue != null;
	              }, this);
	    }
	  },

	  _updateSelected: function() {
	    if (this.multi) {
	      this._selectMulti(this.selectedValues);
	    } else {
	      this._selectSelected(this.selected);
	    }
	  },

	  _selectMulti: function(values) {
	    values = values || [];

	    var selectedItems =
	        (this._valuesToItems(values) || []).filter(function(item) {
	          return item !== null && item !== undefined;
	        });

	    // clear all but the current selected items
	    this._selection.clear(selectedItems);

	    // select only those not selected yet
	    for (var i = 0; i < selectedItems.length; i++) {
	      this._selection.setItemSelected(selectedItems[i], true);
	    }

	    // Check for items, since this array is populated only when attached
	    if (this.fallbackSelection && !this._selection.get().length) {
	      var fallback = this._valueToItem(this.fallbackSelection);
	      if (fallback) {
	        this.select(this.fallbackSelection);
	      }
	    }
	  },

	  _selectionChange: function() {
	    var s = this._selection.get();
	    if (this.multi) {
	      this._setSelectedItems(s);
	      this._setSelectedItem(s.length ? s[0] : null);
	    } else {
	      if (s !== null && s !== undefined) {
	        this._setSelectedItems([s]);
	        this._setSelectedItem(s);
	      } else {
	        this._setSelectedItems([]);
	        this._setSelectedItem(null);
	      }
	    }
	  },

	  _toggleSelected: function(value) {
	    var i = this.selectedValues.indexOf(value);
	    var unselected = i < 0;
	    if (unselected) {
	      this.push('selectedValues', value);
	    } else {
	      this.splice('selectedValues', i, 1);
	    }
	  },

	  _valuesToItems: function(values) {
	    return (values == null) ? null : values.map(function(value) {
	      return this._valueToItem(value);
	    }, this);
	  }
	};

	/** @polymerBehavior */
	const IronMultiSelectableBehavior =
	    [IronSelectableBehavior, IronMultiSelectableBehaviorImpl];

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`iron-selector` is an element which can be used to manage a list of elements
	that can be selected.  Tapping on the item will make the item selected.  The
	`selected` indicates which item is being selected.  The default is to use the
	index of the item.

	Example:

	    <iron-selector selected="0">
	      <div>Item 1</div>
	      <div>Item 2</div>
	      <div>Item 3</div>
	    </iron-selector>

	If you want to use the attribute value of an element for `selected` instead of
	the index, set `attrForSelected` to the name of the attribute.  For example, if
	you want to select item by `name`, set `attrForSelected` to `name`.

	Example:

	    <iron-selector attr-for-selected="name" selected="foo">
	      <div name="foo">Foo</div>
	      <div name="bar">Bar</div>
	      <div name="zot">Zot</div>
	    </iron-selector>

	You can specify a default fallback with `fallbackSelection` in case the
	`selected` attribute does not match the `attrForSelected` attribute of any
	elements.

	Example:

	      <iron-selector attr-for-selected="name" selected="non-existing"
	                     fallback-selection="default">
	        <div name="foo">Foo</div>
	        <div name="bar">Bar</div>
	        <div name="default">Default</div>
	      </iron-selector>

	Note: When the selector is multi, the selection will set to `fallbackSelection`
	iff the number of matching elements is zero.

	`iron-selector` is not styled. Use the `iron-selected` CSS class to style the
	selected element.

	Example:

	    <style>
	      .iron-selected {
	        background: #eee;
	      }
	    </style>

	    ...

	    <iron-selector selected="0">
	      <div>Item 1</div>
	      <div>Item 2</div>
	      <div>Item 3</div>
	    </iron-selector>

	@demo demo/index.html
	*/

	Polymer({

	  is: 'iron-selector',

	  behaviors: [IronMultiSelectableBehavior]

	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	The `<iron-flex-layout>` component provides simple ways to use
	[CSS flexible box
	layout](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes),
	also known as flexbox. Note that this is an old element, that was written
	before all modern browsers had non-prefixed flex styles. As such, nowadays you
	don't really need to use this element anymore, and can use CSS flex styles
	directly in your code.

	This component provides two different ways to use flexbox:

	1. [Layout
	classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).
	The layout class stylesheet provides a simple set of class-based flexbox rules,
	that let you specify layout properties directly in markup. You must include this
	file in every element that needs to use them.

	    Sample use:

	    ```
	    <custom-element-demo>
	      <template>
	        <script src="../webcomponentsjs/webcomponents-lite.js"></script>
	        <next-code-block></next-code-block>
	      </template>
	    </custom-element-demo>
	    ```

	    ```js
	    import {html} from '@polymer/polymer/lib/utils/html-tag.js';
	    import '@polymer/iron-flex-layout/iron-flex-layout-classes.js';

	    const template = html`
	      <style is="custom-style" include="iron-flex iron-flex-alignment"></style>
	      <style>
	        .test { width: 100px; }
	      </style>
	      <div class="layout horizontal center-center">
	        <div class="test">horizontal layout center alignment</div>
	      </div>
	    `;
	    document.body.appendChild(template.content);
	    ```

	2. [Custom CSS
	mixins](https://github.com/PolymerElements/iron-flex-layout/blob/master/iron-flex-layout.html).
	The mixin stylesheet includes custom CSS mixins that can be applied inside a CSS
	rule using the `@apply` function.

	Please note that the old [/deep/ layout
	classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/classes)
	are deprecated, and should not be used. To continue using layout properties
	directly in markup, please switch to using the new `dom-module`-based
	[layout
	classes](https://github.com/PolymerElements/iron-flex-layout/tree/master/iron-flex-layout-classes.html).
	Please note that the new version does not use `/deep/`, and therefore requires
	you to import the `dom-modules` in every element that needs to use them.

	@group Iron Elements
	@pseudoElement iron-flex-layout
	@demo demo/index.html
	*/
	const template = html`
<custom-style>
  <style is="custom-style">
    [hidden] {
      display: none !important;
    }
  </style>
</custom-style>
<custom-style>
  <style is="custom-style">
    html {

      --layout: {
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
      };

      --layout-inline: {
        display: -ms-inline-flexbox;
        display: -webkit-inline-flex;
        display: inline-flex;
      };

      --layout-horizontal: {
        @apply --layout;

        -ms-flex-direction: row;
        -webkit-flex-direction: row;
        flex-direction: row;
      };

      --layout-horizontal-reverse: {
        @apply --layout;

        -ms-flex-direction: row-reverse;
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
      };

      --layout-vertical: {
        @apply --layout;

        -ms-flex-direction: column;
        -webkit-flex-direction: column;
        flex-direction: column;
      };

      --layout-vertical-reverse: {
        @apply --layout;

        -ms-flex-direction: column-reverse;
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
      };

      --layout-wrap: {
        -ms-flex-wrap: wrap;
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
      };

      --layout-wrap-reverse: {
        -ms-flex-wrap: wrap-reverse;
        -webkit-flex-wrap: wrap-reverse;
        flex-wrap: wrap-reverse;
      };

      --layout-flex-auto: {
        -ms-flex: 1 1 auto;
        -webkit-flex: 1 1 auto;
        flex: 1 1 auto;
      };

      --layout-flex-none: {
        -ms-flex: none;
        -webkit-flex: none;
        flex: none;
      };

      --layout-flex: {
        -ms-flex: 1 1 0.000000001px;
        -webkit-flex: 1;
        flex: 1;
        -webkit-flex-basis: 0.000000001px;
        flex-basis: 0.000000001px;
      };

      --layout-flex-2: {
        -ms-flex: 2;
        -webkit-flex: 2;
        flex: 2;
      };

      --layout-flex-3: {
        -ms-flex: 3;
        -webkit-flex: 3;
        flex: 3;
      };

      --layout-flex-4: {
        -ms-flex: 4;
        -webkit-flex: 4;
        flex: 4;
      };

      --layout-flex-5: {
        -ms-flex: 5;
        -webkit-flex: 5;
        flex: 5;
      };

      --layout-flex-6: {
        -ms-flex: 6;
        -webkit-flex: 6;
        flex: 6;
      };

      --layout-flex-7: {
        -ms-flex: 7;
        -webkit-flex: 7;
        flex: 7;
      };

      --layout-flex-8: {
        -ms-flex: 8;
        -webkit-flex: 8;
        flex: 8;
      };

      --layout-flex-9: {
        -ms-flex: 9;
        -webkit-flex: 9;
        flex: 9;
      };

      --layout-flex-10: {
        -ms-flex: 10;
        -webkit-flex: 10;
        flex: 10;
      };

      --layout-flex-11: {
        -ms-flex: 11;
        -webkit-flex: 11;
        flex: 11;
      };

      --layout-flex-12: {
        -ms-flex: 12;
        -webkit-flex: 12;
        flex: 12;
      };

      /* alignment in cross axis */

      --layout-start: {
        -ms-flex-align: start;
        -webkit-align-items: flex-start;
        align-items: flex-start;
      };

      --layout-center: {
        -ms-flex-align: center;
        -webkit-align-items: center;
        align-items: center;
      };

      --layout-end: {
        -ms-flex-align: end;
        -webkit-align-items: flex-end;
        align-items: flex-end;
      };

      --layout-baseline: {
        -ms-flex-align: baseline;
        -webkit-align-items: baseline;
        align-items: baseline;
      };

      /* alignment in main axis */

      --layout-start-justified: {
        -ms-flex-pack: start;
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
      };

      --layout-center-justified: {
        -ms-flex-pack: center;
        -webkit-justify-content: center;
        justify-content: center;
      };

      --layout-end-justified: {
        -ms-flex-pack: end;
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
      };

      --layout-around-justified: {
        -ms-flex-pack: distribute;
        -webkit-justify-content: space-around;
        justify-content: space-around;
      };

      --layout-justified: {
        -ms-flex-pack: justify;
        -webkit-justify-content: space-between;
        justify-content: space-between;
      };

      --layout-center-center: {
        @apply --layout-center;
        @apply --layout-center-justified;
      };

      /* self alignment */

      --layout-self-start: {
        -ms-align-self: flex-start;
        -webkit-align-self: flex-start;
        align-self: flex-start;
      };

      --layout-self-center: {
        -ms-align-self: center;
        -webkit-align-self: center;
        align-self: center;
      };

      --layout-self-end: {
        -ms-align-self: flex-end;
        -webkit-align-self: flex-end;
        align-self: flex-end;
      };

      --layout-self-stretch: {
        -ms-align-self: stretch;
        -webkit-align-self: stretch;
        align-self: stretch;
      };

      --layout-self-baseline: {
        -ms-align-self: baseline;
        -webkit-align-self: baseline;
        align-self: baseline;
      };

      /* multi-line alignment in main axis */

      --layout-start-aligned: {
        -ms-flex-line-pack: start;  /* IE10 */
        -ms-align-content: flex-start;
        -webkit-align-content: flex-start;
        align-content: flex-start;
      };

      --layout-end-aligned: {
        -ms-flex-line-pack: end;  /* IE10 */
        -ms-align-content: flex-end;
        -webkit-align-content: flex-end;
        align-content: flex-end;
      };

      --layout-center-aligned: {
        -ms-flex-line-pack: center;  /* IE10 */
        -ms-align-content: center;
        -webkit-align-content: center;
        align-content: center;
      };

      --layout-between-aligned: {
        -ms-flex-line-pack: justify;  /* IE10 */
        -ms-align-content: space-between;
        -webkit-align-content: space-between;
        align-content: space-between;
      };

      --layout-around-aligned: {
        -ms-flex-line-pack: distribute;  /* IE10 */
        -ms-align-content: space-around;
        -webkit-align-content: space-around;
        align-content: space-around;
      };

      /*******************************
                Other Layout
      *******************************/

      --layout-block: {
        display: block;
      };

      --layout-invisible: {
        visibility: hidden !important;
      };

      --layout-relative: {
        position: relative;
      };

      --layout-fit: {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-scroll: {
        -webkit-overflow-scrolling: touch;
        overflow: auto;
      };

      --layout-fullbleed: {
        margin: 0;
        height: 100vh;
      };

      /* fixed position */

      --layout-fixed-top: {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
      };

      --layout-fixed-right: {
        position: fixed;
        top: 0;
        right: 0;
        bottom: 0;
      };

      --layout-fixed-bottom: {
        position: fixed;
        right: 0;
        bottom: 0;
        left: 0;
      };

      --layout-fixed-left: {
        position: fixed;
        top: 0;
        bottom: 0;
        left: 0;
      };

    }
  </style>
</custom-style>`;

	template.setAttribute('style', 'display: none;');
	document.head.appendChild(template.content);

	var style = document.createElement('style');
	style.textContent = '[hidden] { display: none !important; }';
	document.head.appendChild(style);

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	class IronMeta {
	  /**
	   * @param {{
	   *   type: (string|null|undefined),
	   *   key: (string|null|undefined),
	   *   value: *,
	   * }=} options
	   */
	  constructor(options) {
	    IronMeta[' '](options);

	    /** @type {string} */
	    this.type = (options && options.type) || 'default';
	    /** @type {string|null|undefined} */
	    this.key = options && options.key;
	    if (options && 'value' in options) {
	      /** @type {*} */
	      this.value = options.value;
	    }
	  }

	  /** @return {*} */
	  get value() {
	    var type = this.type;
	    var key = this.key;

	    if (type && key) {
	      return IronMeta.types[type] && IronMeta.types[type][key];
	    }
	  }

	  /** @param {*} value */
	  set value(value) {
	    var type = this.type;
	    var key = this.key;

	    if (type && key) {
	      type = IronMeta.types[type] = IronMeta.types[type] || {};
	      if (value == null) {
	        delete type[key];
	      } else {
	        type[key] = value;
	      }
	    }
	  }

	  /** @return {!Array<*>} */
	  get list() {
	    var type = this.type;

	    if (type) {
	      var items = IronMeta.types[this.type];
	      if (!items) {
	        return [];
	      }

	      return Object.keys(items).map(function(key) {
	        return metaDatas[this.type][key];
	      }, this);
	    }
	  }

	  /**
	   * @param {string} key
	   * @return {*}
	   */
	  byKey(key) {
	    this.key = key;
	    return this.value;
	  }
	}
	// This function is used to convince Closure not to remove constructor calls
	// for instances that are not held anywhere. For example, when
	// `new IronMeta({...})` is used only for the side effect of adding a value.
	IronMeta[' '] = function() {};

	IronMeta.types = {};

	var metaDatas = IronMeta.types;

	/**
	`iron-meta` is a generic element you can use for sharing information across the
	DOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)
	such that any instance of iron-meta has access to the shared information. You
	can use `iron-meta` to share whatever you want (or create an extension [like
	x-meta] for enhancements).

	The `iron-meta` instances containing your actual data can be loaded in an
	import, or constructed in any way you see fit. The only requirement is that you
	create them before you try to access them.

	Examples:

	If I create an instance like this:

	    <iron-meta key="info" value="foo/bar"></iron-meta>

	Note that value="foo/bar" is the metadata I've defined. I could define more
	attributes or use child nodes to define additional metadata.

	Now I can access that element (and it's metadata) from any iron-meta instance
	via the byKey method, e.g.

	    meta.byKey('info');

	Pure imperative form would be like:

	    document.createElement('iron-meta').byKey('info');

	Or, in a Polymer element, you can include a meta in your template:

	    <iron-meta id="meta"></iron-meta>
	    ...
	    this.$.meta.byKey('info');

	@group Iron Elements
	@demo demo/index.html
	@element iron-meta
	*/
	Polymer({

	  is: 'iron-meta',

	  properties: {

	    /**
	     * The type of meta-data.  All meta-data of the same type is stored
	     * together.
	     * @type {string}
	     */
	    type: {
	      type: String,
	      value: 'default',
	    },

	    /**
	     * The key used to store `value` under the `type` namespace.
	     * @type {?string}
	     */
	    key: {
	      type: String,
	    },

	    /**
	     * The meta-data to store or retrieve.
	     * @type {*}
	     */
	    value: {
	      type: String,
	      notify: true,
	    },

	    /**
	     * If true, `value` is set to the iron-meta instance itself.
	     */
	    self: {type: Boolean, observer: '_selfChanged'},

	    __meta: {type: Boolean, computed: '__computeMeta(type, key, value)'}
	  },

	  hostAttributes: {hidden: true},

	  __computeMeta: function(type, key, value) {
	    var meta = new IronMeta({type: type, key: key});

	    if (value !== undefined && value !== meta.value) {
	      meta.value = value;
	    } else if (this.value !== meta.value) {
	      this.value = meta.value;
	    }

	    return meta;
	  },

	  get list() {
	    return this.__meta && this.__meta.list;
	  },

	  _selfChanged: function(self) {
	    if (self) {
	      this.value = this;
	    }
	  },

	  /**
	   * Retrieves meta data value by key.
	   *
	   * @method byKey
	   * @param {string} key The key of the meta-data to be returned.
	   * @return {*}
	   */
	  byKey: function(key) {
	    return new IronMeta({type: this.type, key: key}).value;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**

	The `iron-icon` element displays an icon. By default an icon renders as a 24px
	square.

	Example using src:

	    <iron-icon src="star.png"></iron-icon>

	Example setting size to 32px x 32px:

	    <iron-icon class="big" src="big_star.png"></iron-icon>

	    <style is="custom-style">
	      .big {
	        --iron-icon-height: 32px;
	        --iron-icon-width: 32px;
	      }
	    </style>

	The iron elements include several sets of icons. To use the default set of
	icons, import `iron-icons.js` and use the `icon` attribute to specify an icon:

	    <script type="module">
	      import "@polymer/iron-icons/iron-icons.js";
	    </script>

	    <iron-icon icon="menu"></iron-icon>

	To use a different built-in set of icons, import the specific
	`iron-icons/<iconset>-icons.js`, and specify the icon as `<iconset>:<icon>`.
	For example, to use a communication icon, you would use:

	    <script type="module">
	      import "@polymer/iron-icons/communication-icons.js";
	    </script>

	    <iron-icon icon="communication:email"></iron-icon>

	You can also create custom icon sets of bitmap or SVG icons.

	Example of using an icon named `cherry` from a custom iconset with the ID
	`fruit`:

	    <iron-icon icon="fruit:cherry"></iron-icon>

	See `<iron-iconset>` and `<iron-iconset-svg>` for more information about how to
	create a custom iconset.

	See the `iron-icons` demo to see the icons available in the various iconsets.

	### Styling

	The following custom properties are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--iron-icon` | Mixin applied to the icon | {}
	`--iron-icon-width` | Width of the icon | `24px`
	`--iron-icon-height` | Height of the icon | `24px`
	`--iron-icon-fill-color` | Fill color of the svg icon | `currentcolor`
	`--iron-icon-stroke-color` | Stroke color of the svg icon | none

	@group Iron Elements
	@element iron-icon
	@demo demo/index.html
	@hero hero.svg
	@homepage polymer.github.io
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        @apply --layout-inline;
        @apply --layout-center-center;
        position: relative;

        vertical-align: middle;

        fill: var(--iron-icon-fill-color, currentcolor);
        stroke: var(--iron-icon-stroke-color, none);

        width: var(--iron-icon-width, 24px);
        height: var(--iron-icon-height, 24px);
        @apply --iron-icon;
      }

      :host([hidden]) {
        display: none;
      }
    </style>
`,

	  is: 'iron-icon',

	  properties: {

	    /**
	     * The name of the icon to use. The name should be of the form:
	     * `iconset_name:icon_name`.
	     */
	    icon: {type: String},

	    /**
	     * The name of the theme to used, if one is specified by the
	     * iconset.
	     */
	    theme: {type: String},

	    /**
	     * If using iron-icon without an iconset, you can set the src to be
	     * the URL of an individual icon image file. Note that this will take
	     * precedence over a given icon attribute.
	     */
	    src: {type: String},

	    /**
	     * @type {!IronMeta}
	     */
	    _meta: {value: Base.create('iron-meta', {type: 'iconset'})}

	  },

	  observers: [
	    '_updateIcon(_meta, isAttached)',
	    '_updateIcon(theme, isAttached)',
	    '_srcChanged(src, isAttached)',
	    '_iconChanged(icon, isAttached)'
	  ],

	  _DEFAULT_ICONSET: 'icons',

	  _iconChanged: function(icon) {
	    var parts = (icon || '').split(':');
	    this._iconName = parts.pop();
	    this._iconsetName = parts.pop() || this._DEFAULT_ICONSET;
	    this._updateIcon();
	  },

	  _srcChanged: function(src) {
	    this._updateIcon();
	  },

	  _usesIconset: function() {
	    return this.icon || !this.src;
	  },

	  /** @suppress {visibility} */
	  _updateIcon: function() {
	    if (this._usesIconset()) {
	      if (this._img && this._img.parentNode) {
	        dom(this.root).removeChild(this._img);
	      }
	      if (this._iconName === '') {
	        if (this._iconset) {
	          this._iconset.removeIcon(this);
	        }
	      } else if (this._iconsetName && this._meta) {
	        this._iconset = /** @type {?Polymer.Iconset} */ (
	            this._meta.byKey(this._iconsetName));
	        if (this._iconset) {
	          this._iconset.applyIcon(this, this._iconName, this.theme);
	          this.unlisten(window, 'iron-iconset-added', '_updateIcon');
	        } else {
	          this.listen(window, 'iron-iconset-added', '_updateIcon');
	        }
	      }
	    } else {
	      if (this._iconset) {
	        this._iconset.removeIcon(this);
	      }
	      if (!this._img) {
	        this._img = document.createElement('img');
	        this._img.style.width = '100%';
	        this._img.style.height = '100%';
	        this._img.draggable = false;
	      }
	      this._img.src = this.src;
	      dom(this.root).appendChild(this._img);
	    }
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	/**
	 * The `iron-iconset-svg` element allows users to define their own icon sets
	 * that contain svg icons. The svg icon elements should be children of the
	 * `iron-iconset-svg` element. Multiple icons should be given distinct id's.
	 *
	 * Using svg elements to create icons has a few advantages over traditional
	 * bitmap graphics like jpg or png. Icons that use svg are vector based so
	 * they are resolution independent and should look good on any device. They
	 * are stylable via css. Icons can be themed, colorized, and even animated.
	 *
	 * Example:
	 *
	 *     <iron-iconset-svg name="my-svg-icons" size="24">
	 *       <svg>
	 *         <defs>
	 *           <g id="shape">
	 *             <rect x="12" y="0" width="12" height="24" />
	 *             <circle cx="12" cy="12" r="12" />
	 *           </g>
	 *         </defs>
	 *       </svg>
	 *     </iron-iconset-svg>
	 *
	 * This will automatically register the icon set "my-svg-icons" to the iconset
	 * database.  To use these icons from within another element, make a
	 * `iron-iconset` element and call the `byId` method
	 * to retrieve a given iconset. To apply a particular icon inside an
	 * element use the `applyIcon` method. For example:
	 *
	 *     iconset.applyIcon(iconNode, 'car');
	 *
	 * @element iron-iconset-svg
	 * @demo demo/index.html
	 * @implements {Polymer.Iconset}
	 */
	Polymer({
	  is: 'iron-iconset-svg',

	  properties: {

	    /**
	     * The name of the iconset.
	     */
	    name: {type: String, observer: '_nameChanged'},

	    /**
	     * The size of an individual icon. Note that icons must be square.
	     */
	    size: {type: Number, value: 24},

	    /**
	     * Set to true to enable mirroring of icons where specified when they are
	     * stamped. Icons that should be mirrored should be decorated with a
	     * `mirror-in-rtl` attribute.
	     *
	     * NOTE: For performance reasons, direction will be resolved once per
	     * document per iconset, so moving icons in and out of RTL subtrees will
	     * not cause their mirrored state to change.
	     */
	    rtlMirroring: {type: Boolean, value: false},

	    /**
	     * Set to true to measure RTL based on the dir attribute on the body or
	     * html elements (measured on document.body or document.documentElement as
	     * available).
	     */
	    useGlobalRtlAttribute: {type: Boolean, value: false}
	  },

	  created: function() {
	    this._meta = new IronMeta({type: 'iconset', key: null, value: null});
	  },

	  attached: function() {
	    this.style.display = 'none';
	  },

	  /**
	   * Construct an array of all icon names in this iconset.
	   *
	   * @return {!Array} Array of icon names.
	   */
	  getIconNames: function() {
	    this._icons = this._createIconMap();
	    return Object.keys(this._icons).map(function(n) {
	      return this.name + ':' + n;
	    }, this);
	  },

	  /**
	   * Applies an icon to the given element.
	   *
	   * An svg icon is prepended to the element's shadowRoot if it exists,
	   * otherwise to the element itself.
	   *
	   * If RTL mirroring is enabled, and the icon is marked to be mirrored in
	   * RTL, the element will be tested (once and only once ever for each
	   * iconset) to determine the direction of the subtree the element is in.
	   * This direction will apply to all future icon applications, although only
	   * icons marked to be mirrored will be affected.
	   *
	   * @method applyIcon
	   * @param {Element} element Element to which the icon is applied.
	   * @param {string} iconName Name of the icon to apply.
	   * @return {?Element} The svg element which renders the icon.
	   */
	  applyIcon: function(element, iconName) {
	    // Remove old svg element
	    this.removeIcon(element);
	    // install new svg element
	    var svg = this._cloneIcon(
	        iconName, this.rtlMirroring && this._targetIsRTL(element));
	    if (svg) {
	      // insert svg element into shadow root, if it exists
	      var pde = dom(element.root || element);
	      pde.insertBefore(svg, pde.childNodes[0]);
	      return element._svgIcon = svg;
	    }
	    return null;
	  },

	  /**
	   * Remove an icon from the given element by undoing the changes effected
	   * by `applyIcon`.
	   *
	   * @param {Element} element The element from which the icon is removed.
	   */
	  removeIcon: function(element) {
	    // Remove old svg element
	    if (element._svgIcon) {
	      dom(element.root || element).removeChild(element._svgIcon);
	      element._svgIcon = null;
	    }
	  },

	  /**
	   * Measures and memoizes the direction of the element. Note that this
	   * measurement is only done once and the result is memoized for future
	   * invocations.
	   */
	  _targetIsRTL: function(target) {
	    if (this.__targetIsRTL == null) {
	      if (this.useGlobalRtlAttribute) {
	        var globalElement =
	            (document.body && document.body.hasAttribute('dir')) ?
	            document.body :
	            document.documentElement;

	        this.__targetIsRTL = globalElement.getAttribute('dir') === 'rtl';
	      } else {
	        if (target && target.nodeType !== Node.ELEMENT_NODE) {
	          target = target.host;
	        }

	        this.__targetIsRTL =
	            target && window.getComputedStyle(target)['direction'] === 'rtl';
	      }
	    }

	    return this.__targetIsRTL;
	  },

	  /**
	   *
	   * When name is changed, register iconset metadata
	   *
	   */
	  _nameChanged: function() {
	    this._meta.value = null;
	    this._meta.key = this.name;
	    this._meta.value = this;

	    this.async(function() {
	      this.fire('iron-iconset-added', this, {node: window});
	    });
	  },

	  /**
	   * Create a map of child SVG elements by id.
	   *
	   * @return {!Object} Map of id's to SVG elements.
	   */
	  _createIconMap: function() {
	    // Objects chained to Object.prototype (`{}`) have members. Specifically,
	    // on FF there is a `watch` method that confuses the icon map, so we
	    // need to use a null-based object here.
	    var icons = Object.create(null);
	    dom(this).querySelectorAll('[id]').forEach(function(icon) {
	      icons[icon.id] = icon;
	    });
	    return icons;
	  },

	  /**
	   * Produce installable clone of the SVG element matching `id` in this
	   * iconset, or `undefined` if there is no matching element.
	   *
	   * @return {Element} Returns an installable clone of the SVG element
	   * matching `id`.
	   */
	  _cloneIcon: function(id, mirrorAllowed) {
	    // create the icon map on-demand, since the iconset itself has no discrete
	    // signal to know when it's children are fully parsed
	    this._icons = this._icons || this._createIconMap();
	    return this._prepareSvgClone(this._icons[id], this.size, mirrorAllowed);
	  },

	  /**
	   * @param {Element} sourceSvg
	   * @param {number} size
	   * @param {Boolean} mirrorAllowed
	   * @return {Element}
	   */
	  _prepareSvgClone: function(sourceSvg, size, mirrorAllowed) {
	    if (sourceSvg) {
	      var content = sourceSvg.cloneNode(true),
	          svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),
	          viewBox =
	              content.getAttribute('viewBox') || '0 0 ' + size + ' ' + size,
	          cssText =
	              'pointer-events: none; display: block; width: 100%; height: 100%;';

	      if (mirrorAllowed && content.hasAttribute('mirror-in-rtl')) {
	        cssText +=
	            '-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;';
	      }

	      svg.setAttribute('viewBox', viewBox);
	      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
	      svg.setAttribute('focusable', 'false');
	      // TODO(dfreedm): `pointer-events: none` works around
	      // https://crbug.com/370136
	      // TODO(sjmiles): inline style may not be ideal, but avoids requiring a
	      // shadow-root
	      svg.style.cssText = cssText;
	      svg.appendChild(content).removeAttribute('id');
	      return svg;
	    }
	    return null;
	  }

	});

	/**
	@license
	Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**

	`iron-icons` is a utility import that includes the definition for the
	`iron-icon` element, `iron-iconset-svg` element, as well as an import for the
	default icon set.

	The `iron-icons` directory also includes imports for additional icon sets that
	can be loaded into your project.

	Example loading icon set:

	    <script type="module">
	      import '@polymer/iron-icons/maps-icons.js';
	    </script>

	To use an icon from one of these sets, first prefix your `iron-icon` with the
	icon set name, followed by a colon, ":", and then the icon id.

	Example using the directions-bus icon from the maps icon set:

	    <iron-icon icon="maps:directions-bus"></iron-icon>

	See [iron-icon](https://www.webcomponents.org/element/@polymer/iron-icon) for
	more information about working with icons.

	See [iron-iconset](https://www.webcomponents.org/element/@polymer/iron-iconset)
	and
	[iron-iconset-svg](https://www.webcomponents.org/element/@polymer/iron-iconset-svg)
	for more information about how to create a custom iconset.

	@group Iron Elements
	@pseudoElement iron-icons
	@demo demo/index.html
	*/

	const template$1 = html`<iron-iconset-svg name="icons" size="24">
<svg><defs>
<g id="3d-rotation"><path d="M7.52 21.48C4.25 19.94 1.91 16.76 1.55 13H.05C.56 19.16 5.71 24 12 24l.66-.03-3.81-3.81-1.33 1.32zm.89-6.52c-.19 0-.37-.03-.52-.08-.16-.06-.29-.13-.4-.24-.11-.1-.2-.22-.26-.37-.06-.14-.09-.3-.09-.47h-1.3c0 .36.07.68.21.95.14.27.33.5.56.69.24.18.51.32.82.41.3.1.62.15.96.15.37 0 .72-.05 1.03-.15.32-.1.6-.25.83-.44s.42-.43.55-.72c.13-.29.2-.61.2-.97 0-.19-.02-.38-.07-.56-.05-.18-.12-.35-.23-.51-.1-.16-.24-.3-.4-.43-.17-.13-.37-.23-.61-.31.2-.09.37-.2.52-.33.15-.13.27-.27.37-.42.1-.15.17-.3.22-.46.05-.16.07-.32.07-.48 0-.36-.06-.68-.18-.96-.12-.28-.29-.51-.51-.69-.2-.19-.47-.33-.77-.43C9.1 8.05 8.76 8 8.39 8c-.36 0-.69.05-1 .16-.3.11-.57.26-.79.45-.21.19-.38.41-.51.67-.12.26-.18.54-.18.85h1.3c0-.17.03-.32.09-.45s.14-.25.25-.34c.11-.09.23-.17.38-.22.15-.05.3-.08.48-.08.4 0 .7.1.89.31.19.2.29.49.29.86 0 .18-.03.34-.08.49-.05.15-.14.27-.25.37-.11.1-.25.18-.41.24-.16.06-.36.09-.58.09H7.5v1.03h.77c.22 0 .42.02.6.07s.33.13.45.23c.12.11.22.24.29.4.07.16.1.35.1.57 0 .41-.12.72-.35.93-.23.23-.55.33-.95.33zm8.55-5.92c-.32-.33-.7-.59-1.14-.77-.43-.18-.92-.27-1.46-.27H12v8h2.3c.55 0 1.06-.09 1.51-.27.45-.18.84-.43 1.16-.76.32-.33.57-.73.74-1.19.17-.47.26-.99.26-1.57v-.4c0-.58-.09-1.1-.26-1.57-.18-.47-.43-.87-.75-1.2zm-.39 3.16c0 .42-.05.79-.14 1.13-.1.33-.24.62-.43.85-.19.23-.43.41-.71.53-.29.12-.62.18-.99.18h-.91V9.12h.97c.72 0 1.27.23 1.64.69.38.46.57 1.12.57 1.99v.4zM12 0l-.66.03 3.81 3.81 1.33-1.33c3.27 1.55 5.61 4.72 5.96 8.48h1.5C23.44 4.84 18.29 0 12 0z"></path></g>
<g id="accessibility"><path d="M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z"></path></g>
<g id="accessible"><circle cx="12" cy="4" r="2"></circle><path d="M19 13v-2c-1.54.02-3.09-.75-4.07-1.83l-1.29-1.43c-.17-.19-.38-.34-.61-.45-.01 0-.01-.01-.02-.01H13c-.35-.2-.75-.3-1.19-.26C10.76 7.11 10 8.04 10 9.09V15c0 1.1.9 2 2 2h5v5h2v-5.5c0-1.1-.9-2-2-2h-3v-3.45c1.29 1.07 3.25 1.94 5 1.95zm-6.17 5c-.41 1.16-1.52 2-2.83 2-1.66 0-3-1.34-3-3 0-1.31.84-2.41 2-2.83V12.1c-2.28.46-4 2.48-4 4.9 0 2.76 2.24 5 5 5 2.42 0 4.44-1.72 4.9-4h-2.07z"></path></g>
<g id="account-balance"><path d="M4 10v7h3v-7H4zm6 0v7h3v-7h-3zM2 22h19v-3H2v3zm14-12v7h3v-7h-3zm-4.5-9L2 6v2h19V6l-9.5-5z"></path></g>
<g id="account-balance-wallet"><path d="M21 18v1c0 1.1-.9 2-2 2H5c-1.11 0-2-.9-2-2V5c0-1.1.89-2 2-2h14c1.1 0 2 .9 2 2v1h-9c-1.11 0-2 .9-2 2v8c0 1.1.89 2 2 2h9zm-9-2h10V8H12v8zm4-2.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="account-box"><path d="M3 5v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5c-1.11 0-2 .9-2 2zm12 4c0 1.66-1.34 3-3 3s-3-1.34-3-3 1.34-3 3-3 3 1.34 3 3zm-9 8c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1H6v-1z"></path></g>
<g id="account-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"></path></g>
<g id="add"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path></g>
<g id="add-alert"><path d="M10.01 21.01c0 1.1.89 1.99 1.99 1.99s1.99-.89 1.99-1.99h-3.98zm8.87-4.19V11c0-3.25-2.25-5.97-5.29-6.69v-.72C13.59 2.71 12.88 2 12 2s-1.59.71-1.59 1.59v.72C7.37 5.03 5.12 7.75 5.12 11v5.82L3 18.94V20h18v-1.06l-2.12-2.12zM16 13.01h-3v3h-2v-3H8V11h3V8h2v3h3v2.01z"></path></g>
<g id="add-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z"></path></g>
<g id="add-circle-outline"><path d="M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="add-shopping-cart"><path d="M11 9h2V6h3V4h-3V1h-2v3H8v2h3v3zm-4 9c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zm10 0c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2zm-9.83-3.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.86-7.01L19.42 4h-.01l-1.1 2-2.76 5H8.53l-.13-.27L6.16 6l-.95-2-.94-2H1v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.13 0-.25-.11-.25-.25z"></path></g>
<g id="alarm"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"></path></g>
<g id="alarm-add"><path d="M7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm1-11h-2v3H8v2h3v3h2v-3h3v-2h-3V9z"></path></g>
<g id="alarm-off"><path d="M12 6c3.87 0 7 3.13 7 7 0 .84-.16 1.65-.43 2.4l1.52 1.52c.58-1.19.91-2.51.91-3.92 0-4.97-4.03-9-9-9-1.41 0-2.73.33-3.92.91L9.6 6.43C10.35 6.16 11.16 6 12 6zm10-.28l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM2.92 2.29L1.65 3.57 2.98 4.9l-1.11.93 1.42 1.42 1.11-.94.8.8C3.83 8.69 3 10.75 3 13c0 4.97 4.02 9 9 9 2.25 0 4.31-.83 5.89-2.2l2.2 2.2 1.27-1.27L3.89 3.27l-.97-.98zm13.55 16.1C15.26 19.39 13.7 20 12 20c-3.87 0-7-3.13-7-7 0-1.7.61-3.26 1.61-4.47l9.86 9.86zM8.02 3.28L6.6 1.86l-.86.71 1.42 1.42.86-.71z"></path></g>
<g id="alarm-on"><path d="M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7zm-1.46-5.47L8.41 12.4l-1.06 1.06 3.18 3.18 6-6-1.06-1.06-4.93 4.95z"></path></g>
<g id="all-out"><path d="M16.21 4.16l4 4v-4zm4 12l-4 4h4zm-12 4l-4-4v4zm-4-12l4-4h-4zm12.95-.95c-2.73-2.73-7.17-2.73-9.9 0s-2.73 7.17 0 9.9 7.17 2.73 9.9 0 2.73-7.16 0-9.9zm-1.1 8.8c-2.13 2.13-5.57 2.13-7.7 0s-2.13-5.57 0-7.7 5.57-2.13 7.7 0 2.13 5.57 0 7.7z"></path></g>
<g id="android"><path d="M6 18c0 .55.45 1 1 1h1v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h2v3.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5V19h1c.55 0 1-.45 1-1V8H6v10zM3.5 8C2.67 8 2 8.67 2 9.5v7c0 .83.67 1.5 1.5 1.5S5 17.33 5 16.5v-7C5 8.67 4.33 8 3.5 8zm17 0c-.83 0-1.5.67-1.5 1.5v7c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5v-7c0-.83-.67-1.5-1.5-1.5zm-4.97-5.84l1.3-1.3c.2-.2.2-.51 0-.71-.2-.2-.51-.2-.71 0l-1.48 1.48C13.85 1.23 12.95 1 12 1c-.96 0-1.86.23-2.66.63L7.85.15c-.2-.2-.51-.2-.71 0-.2.2-.2.51 0 .71l1.31 1.31C6.97 3.26 6 5.01 6 7h12c0-1.99-.97-3.75-2.47-4.84zM10 5H9V4h1v1zm5 0h-1V4h1v1z"></path></g>
<g id="announcement"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 9h-2V5h2v6zm0 4h-2v-2h2v2z"></path></g>
<g id="apps"><path d="M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z"></path></g>
<g id="archive"><path d="M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z"></path></g>
<g id="arrow-back"><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></g>
<g id="arrow-downward"><path d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"></path></g>
<g id="arrow-drop-down"><path d="M7 10l5 5 5-5z"></path></g>
<g id="arrow-drop-down-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 12l-4-4h8l-4 4z"></path></g>
<g id="arrow-drop-up"><path d="M7 14l5-5 5 5z"></path></g>
<g id="arrow-forward"><path d="M12 4l-1.41 1.41L16.17 11H4v2h12.17l-5.58 5.59L12 20l8-8z"></path></g>
<g id="arrow-upward"><path d="M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"></path></g>
<g id="aspect-ratio"><path d="M19 12h-2v3h-3v2h5v-5zM7 9h3V7H5v5h2V9zm14-6H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="assessment"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z"></path></g>
<g id="assignment"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"></path></g>
<g id="assignment-ind"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z"></path></g>
<g id="assignment-late"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-6 15h-2v-2h2v2zm0-4h-2V8h2v6zm-1-9c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1z"></path></g>
<g id="assignment-return"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm4 12h-4v3l-5-5 5-5v3h4v4z"></path></g>
<g id="assignment-returned"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 15l-5-5h3V9h4v4h3l-5 5z"></path></g>
<g id="assignment-turned-in"><path d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm-2 14l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="attachment"><path d="M2 12.5C2 9.46 4.46 7 7.5 7H18c2.21 0 4 1.79 4 4s-1.79 4-4 4H9.5C8.12 15 7 13.88 7 12.5S8.12 10 9.5 10H17v2H9.41c-.55 0-.55 1 0 1H18c1.1 0 2-.9 2-2s-.9-2-2-2H7.5C5.57 9 4 10.57 4 12.5S5.57 16 7.5 16H17v2H7.5C4.46 18 2 15.54 2 12.5z"></path></g>
<g id="autorenew"><path d="M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z"></path></g>
<g id="backspace"><path d="M22 3H7c-.69 0-1.23.35-1.59.88L0 12l5.41 8.11c.36.53.9.89 1.59.89h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-3 12.59L17.59 17 14 13.41 10.41 17 9 15.59 12.59 12 9 8.41 10.41 7 14 10.59 17.59 7 19 8.41 15.41 12 19 15.59z"></path></g>
<g id="backup"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="block"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM4 12c0-4.42 3.58-8 8-8 1.85 0 3.55.63 4.9 1.69L5.69 16.9C4.63 15.55 4 13.85 4 12zm8 8c-1.85 0-3.55-.63-4.9-1.69L18.31 7.1C19.37 8.45 20 10.15 20 12c0 4.42-3.58 8-8 8z"></path></g>
<g id="book"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="bookmark"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="bookmark-border"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="bug-report"><path d="M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 3l-2.17 2.17C12.96 5.06 12.49 5 12 5c-.49 0-.96.06-1.41.17L8.41 3 7 4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.34-.04-.67-.09-1H20V8zm-6 8h-4v-2h4v2zm0-4h-4v-2h4v2z"></path></g>
<g id="build"><path d="M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z"></path></g>
<g id="cached"><path d="M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z"></path></g>
<g id="camera-enhance"><path d="M9 3L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2h-3.17L15 3H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-1l1.25-2.75L16 13l-2.75-1.25L12 9l-1.25 2.75L8 13l2.75 1.25z"></path></g>
<g id="cancel"><path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"></path></g>
<g id="card-giftcard"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="card-membership"><path d="M20 2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h4v5l4-2 4 2v-5h4c1.11 0 2-.89 2-2V4c0-1.11-.89-2-2-2zm0 13H4v-2h16v2zm0-5H4V4h16v6z"></path></g>
<g id="card-travel"><path d="M20 6h-3V4c0-1.11-.89-2-2-2H9c-1.11 0-2 .89-2 2v2H4c-1.11 0-2 .89-2 2v11c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zM9 4h6v2H9V4zm11 15H4v-2h16v2zm0-5H4V8h3v2h2V8h6v2h2V8h3v6z"></path></g>
<g id="change-history"><path d="M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z"></path></g>
<g id="check"><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"></path></g>
<g id="check-box"><path d="M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="check-box-outline-blank"><path d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="check-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"></path></g>
<g id="chevron-left"><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"></path></g>
<g id="chevron-right"><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"></path></g>
<g id="chrome-reader-mode"><path d="M13 12h7v1.5h-7zm0-2.5h7V11h-7zm0 5h7V16h-7zM21 4H3c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 15h-9V6h9v13z"></path></g>
<g id="class"><path d="M18 2H6c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 4h5v8l-2.5-1.5L6 12V4z"></path></g>
<g id="clear"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="close"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path></g>
<g id="cloud"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96z"></path></g>
<g id="cloud-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm4.5 14H8c-1.66 0-3-1.34-3-3s1.34-3 3-3l.14.01C8.58 8.28 10.13 7 12 7c2.21 0 4 1.79 4 4h.5c1.38 0 2.5 1.12 2.5 2.5S17.88 16 16.5 16z"></path></g>
<g id="cloud-done"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM10 17l-3.5-3.5 1.41-1.41L10 14.17 15.18 9l1.41 1.41L10 17z"></path></g>
<g id="cloud-download"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"></path></g>
<g id="cloud-off"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4c-1.48 0-2.85.43-4.01 1.17l1.46 1.46C10.21 6.23 11.08 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3 0 1.13-.64 2.11-1.56 2.62l1.45 1.45C23.16 18.16 24 16.68 24 15c0-2.64-2.05-4.78-4.65-4.96zM3 5.27l2.75 2.74C2.56 8.15 0 10.77 0 14c0 3.31 2.69 6 6 6h11.73l2 2L21 20.73 4.27 4 3 5.27zM7.73 10l8 8H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h1.73z"></path></g>
<g id="cloud-queue"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM19 18H6c-2.21 0-4-1.79-4-4s1.79-4 4-4h.71C7.37 7.69 9.48 6 12 6c3.04 0 5.5 2.46 5.5 5.5v.5H19c1.66 0 3 1.34 3 3s-1.34 3-3 3z"></path></g>
<g id="cloud-upload"><path d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z"></path></g>
<g id="code"><path d="M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z"></path></g>
<g id="compare-arrows"><path d="M9.01 14H2v2h7.01v3L13 15l-3.99-4v3zm5.98-1v-3H22V8h-7.01V5L11 9l3.99 4z"></path></g>
<g id="content-copy"><path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"></path></g>
<g id="content-cut"><path d="M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z"></path></g>
<g id="content-paste"><path d="M19 2h-4.18C14.4.84 13.3 0 12 0c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm7 18H5V4h2v3h10V4h2v16z"></path></g>
<g id="copyright"><path d="M10.08 10.86c.05-.33.16-.62.3-.87s.34-.46.59-.62c.24-.15.54-.22.91-.23.23.01.44.05.63.13.2.09.38.21.52.36s.25.33.34.53.13.42.14.64h1.79c-.02-.47-.11-.9-.28-1.29s-.4-.73-.7-1.01-.66-.5-1.08-.66-.88-.23-1.39-.23c-.65 0-1.22.11-1.7.34s-.88.53-1.2.92-.56.84-.71 1.36S8 11.29 8 11.87v.27c0 .58.08 1.12.23 1.64s.39.97.71 1.35.72.69 1.2.91 1.05.34 1.7.34c.47 0 .91-.08 1.32-.23s.77-.36 1.08-.63.56-.58.74-.94.29-.74.3-1.15h-1.79c-.01.21-.06.4-.15.58s-.21.33-.36.46-.32.23-.52.3c-.19.07-.39.09-.6.1-.36-.01-.66-.08-.89-.23-.25-.16-.45-.37-.59-.62s-.25-.55-.3-.88-.08-.67-.08-1v-.27c0-.35.03-.68.08-1.01zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="create"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"></path></g>
<g id="create-new-folder"><path d="M20 6h-8l-2-2H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-1 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z"></path></g>
<g id="credit-card"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="dashboard"><path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"></path></g>
<g id="date-range"><path d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"></path></g>
<g id="delete"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-forever"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"></path></g>
<g id="delete-sweep"><path d="M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z"></path></g>
<g id="description"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"></path></g>
<g id="dns"><path d="M20 13H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zM7 19c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM20 3H4c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h16c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1zM7 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="done"><path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"></path></g>
<g id="done-all"><path d="M18 7l-1.41-1.41-6.34 6.34 1.41 1.41L18 7zm4.24-1.41L11.66 16.17 7.48 12l-1.41 1.41L11.66 19l12-12-1.42-1.41zM.41 13.41L6 19l1.41-1.41L1.83 12 .41 13.41z"></path></g>
<g id="donut-large"><path d="M11 5.08V2c-5 .5-9 4.81-9 10s4 9.5 9 10v-3.08c-3-.48-6-3.4-6-6.92s3-6.44 6-6.92zM18.97 11H22c-.47-5-4-8.53-9-9v3.08C16 5.51 18.54 8 18.97 11zM13 18.92V22c5-.47 8.53-4 9-9h-3.03c-.43 3-2.97 5.49-5.97 5.92z"></path></g>
<g id="donut-small"><path d="M11 9.16V2c-5 .5-9 4.79-9 10s4 9.5 9 10v-7.16c-1-.41-2-1.52-2-2.84s1-2.43 2-2.84zM14.86 11H22c-.48-4.75-4-8.53-9-9v7.16c1 .3 1.52.98 1.86 1.84zM13 14.84V22c5-.47 8.52-4.25 9-9h-7.14c-.34.86-.86 1.54-1.86 1.84z"></path></g>
<g id="drafts"><path d="M21.99 8c0-.72-.37-1.35-.94-1.7L12 1 2.95 6.3C2.38 6.65 2 7.28 2 8v10c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2l-.01-10zM12 13L3.74 7.84 12 3l8.26 4.84L12 13z"></path></g>
<g id="eject"><path d="M5 17h14v2H5zm7-12L5.33 15h13.34z"></path></g>
<g id="error"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path></g>
<g id="error-outline"><path d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="euro-symbol"><path d="M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z"></path></g>
<g id="event"><path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"></path></g>
<g id="event-seat"><path d="M4 18v3h3v-3h10v3h3v-6H4zm15-8h3v3h-3zM2 10h3v3H2zm15 3H7V5c0-1.1.9-2 2-2h6c1.1 0 2 .9 2 2v8z"></path></g>
<g id="exit-to-app"><path d="M10.09 15.59L11.5 17l5-5-5-5-1.41 1.41L12.67 11H3v2h9.67l-2.58 2.59zM19 3H5c-1.11 0-2 .9-2 2v4h2V5h14v14H5v-4H3v4c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"></path></g>
<g id="expand-less"><path d="M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"></path></g>
<g id="expand-more"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"></path></g>
<g id="explore"><path d="M12 10.9c-.61 0-1.1.49-1.1 1.1s.49 1.1 1.1 1.1c.61 0 1.1-.49 1.1-1.1s-.49-1.1-1.1-1.1zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm2.19 12.19L6 18l3.81-8.19L18 6l-3.81 8.19z"></path></g>
<g id="extension"><path d="M20.5 11H19V7c0-1.1-.9-2-2-2h-4V3.5C13 2.12 11.88 1 10.5 1S8 2.12 8 3.5V5H4c-1.1 0-1.99.9-1.99 2v3.8H3.5c1.49 0 2.7 1.21 2.7 2.7s-1.21 2.7-2.7 2.7H2V20c0 1.1.9 2 2 2h3.8v-1.5c0-1.49 1.21-2.7 2.7-2.7 1.49 0 2.7 1.21 2.7 2.7V22H17c1.1 0 2-.9 2-2v-4h1.5c1.38 0 2.5-1.12 2.5-2.5S21.88 11 20.5 11z"></path></g>
<g id="face"><path d="M9 11.75c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zm6 0c-.69 0-1.25.56-1.25 1.25s.56 1.25 1.25 1.25 1.25-.56 1.25-1.25-.56-1.25-1.25-1.25zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8 0-.29.02-.58.05-.86 2.36-1.05 4.23-2.98 5.21-5.37C11.07 8.33 14.05 10 17.42 10c.78 0 1.53-.09 2.25-.26.21.71.33 1.47.33 2.26 0 4.41-3.59 8-8 8z"></path></g>
<g id="favorite"><path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"></path></g>
<g id="favorite-border"><path d="M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55l-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z"></path></g>
<g id="feedback"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z"></path></g>
<g id="file-download"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="file-upload"><path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"></path></g>
<g id="filter-list"><path d="M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"></path></g>
<g id="find-in-page"><path d="M20 19.59V8l-6-6H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c.45 0 .85-.15 1.19-.4l-4.43-4.43c-.8.52-1.74.83-2.76.83-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5c0 1.02-.31 1.96-.83 2.75L20 19.59zM9 13c0 1.66 1.34 3 3 3s3-1.34 3-3-1.34-3-3-3-3 1.34-3 3z"></path></g>
<g id="find-replace"><path d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"></path></g>
<g id="fingerprint"><path d="M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z"></path></g>
<g id="first-page"><path d="M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"></path></g>
<g id="flag"><path d="M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z"></path></g>
<g id="flight-land"><path d="M2.5 19h19v2h-19zm7.18-5.73l4.35 1.16 5.31 1.42c.8.21 1.62-.26 1.84-1.06.21-.8-.26-1.62-1.06-1.84l-5.31-1.42-2.76-9.02L10.12 2v8.28L5.15 8.95l-.93-2.32-1.45-.39v5.17l1.6.43 5.31 1.43z"></path></g>
<g id="flight-takeoff"><path d="M2.5 19h19v2h-19zm19.57-9.36c-.21-.8-1.04-1.28-1.84-1.06L14.92 10l-6.9-6.43-1.93.51 4.14 7.17-4.97 1.33-1.97-1.54-1.45.39 1.82 3.16.77 1.33 1.6-.43 5.31-1.42 4.35-1.16L21 11.49c.81-.23 1.28-1.05 1.07-1.85z"></path></g>
<g id="flip-to-back"><path d="M9 7H7v2h2V7zm0 4H7v2h2v-2zm0-8c-1.11 0-2 .9-2 2h2V3zm4 12h-2v2h2v-2zm6-12v2h2c0-1.1-.9-2-2-2zm-6 0h-2v2h2V3zM9 17v-2H7c0 1.1.89 2 2 2zm10-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zM5 7H3v12c0 1.1.89 2 2 2h12v-2H5V7zm10-2h2V3h-2v2zm0 12h2v-2h-2v2z"></path></g>
<g id="flip-to-front"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm2 4v-2H3c0 1.1.89 2 2 2zM3 9h2V7H3v2zm12 12h2v-2h-2v2zm4-18H9c-1.11 0-2 .9-2 2v10c0 1.1.89 2 2 2h10c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12H9V5h10v10zm-8 6h2v-2h-2v2zm-4 0h2v-2H7v2z"></path></g>
<g id="folder"><path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"></path></g>
<g id="folder-open"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 12H4V8h16v10z"></path></g>
<g id="folder-shared"><path d="M20 6h-8l-2-2H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-5 3c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm4 8h-8v-1c0-1.33 2.67-2 4-2s4 .67 4 2v1z"></path></g>
<g id="font-download"><path d="M9.93 13.5h4.14L12 7.98zM20 2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-4.05 16.5l-1.14-3H9.17l-1.12 3H5.96l5.11-13h1.86l5.11 13h-2.09z"></path></g>
<g id="forward"><path d="M12 8V4l8 8-8 8v-4H4V8z"></path></g>
<g id="fullscreen"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"></path></g>
<g id="fullscreen-exit"><path d="M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z"></path></g>
<g id="g-translate"><path d="M20 5h-9.12L10 2H4c-1.1 0-2 .9-2 2v13c0 1.1.9 2 2 2h7l1 3h8c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zM7.17 14.59c-2.25 0-4.09-1.83-4.09-4.09s1.83-4.09 4.09-4.09c1.04 0 1.99.37 2.74 1.07l.07.06-1.23 1.18-.06-.05c-.29-.27-.78-.59-1.52-.59-1.31 0-2.38 1.09-2.38 2.42s1.07 2.42 2.38 2.42c1.37 0 1.96-.87 2.12-1.46H7.08V9.91h3.95l.01.07c.04.21.05.4.05.61 0 2.35-1.61 4-3.92 4zm6.03-1.71c.33.6.74 1.18 1.19 1.7l-.54.53-.65-2.23zm.77-.76h-.99l-.31-1.04h3.99s-.34 1.31-1.56 2.74c-.52-.62-.89-1.23-1.13-1.7zM21 20c0 .55-.45 1-1 1h-7l2-2-.81-2.77.92-.92L17.79 18l.73-.73-2.71-2.68c.9-1.03 1.6-2.25 1.92-3.51H19v-1.04h-3.64V9h-1.04v1.04h-1.96L11.18 6H20c.55 0 1 .45 1 1v13z"></path></g>
<g id="gavel"><path d="M1 21h12v2H1zM5.245 8.07l2.83-2.827 14.14 14.142-2.828 2.828zM12.317 1l5.657 5.656-2.83 2.83-5.654-5.66zM3.825 9.485l5.657 5.657-2.828 2.828-5.657-5.657z"></path></g>
<g id="gesture"><path d="M4.59 6.89c.7-.71 1.4-1.35 1.71-1.22.5.2 0 1.03-.3 1.52-.25.42-2.86 3.89-2.86 6.31 0 1.28.48 2.34 1.34 2.98.75.56 1.74.73 2.64.46 1.07-.31 1.95-1.4 3.06-2.77 1.21-1.49 2.83-3.44 4.08-3.44 1.63 0 1.65 1.01 1.76 1.79-3.78.64-5.38 3.67-5.38 5.37 0 1.7 1.44 3.09 3.21 3.09 1.63 0 4.29-1.33 4.69-6.1H21v-2.5h-2.47c-.15-1.65-1.09-4.2-4.03-4.2-2.25 0-4.18 1.91-4.94 2.84-.58.73-2.06 2.48-2.29 2.72-.25.3-.68.84-1.11.84-.45 0-.72-.83-.36-1.92.35-1.09 1.4-2.86 1.85-3.52.78-1.14 1.3-1.92 1.3-3.28C8.95 3.69 7.31 3 6.44 3 5.12 3 3.97 4 3.72 4.25c-.36.36-.66.66-.88.93l1.75 1.71zm9.29 11.66c-.31 0-.74-.26-.74-.72 0-.6.73-2.2 2.87-2.76-.3 2.69-1.43 3.48-2.13 3.48z"></path></g>
<g id="get-app"><path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path></g>
<g id="gif"><path d="M11.5 9H13v6h-1.5zM9 9H6c-.6 0-1 .5-1 1v4c0 .5.4 1 1 1h3c.6 0 1-.5 1-1v-2H8.5v1.5h-2v-3H10V10c0-.5-.4-1-1-1zm10 1.5V9h-4.5v6H16v-2h2v-1.5h-2v-1z"></path></g>
<g id="grade"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="group-work"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM8 17.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5zM9.5 8c0-1.38 1.12-2.5 2.5-2.5s2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5S9.5 9.38 9.5 8zm6.5 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="help"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"></path></g>
<g id="help-outline"><path d="M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z"></path></g>
<g id="highlight-off"><path d="M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="history"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="home"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></g>
<g id="hourglass-empty"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6zm10 14.5V20H8v-3.5l4-4 4 4zm-4-5l-4-4V4h8v3.5l-4 4z"></path></g>
<g id="hourglass-full"><path d="M6 2v6h.01L6 8.01 10 12l-4 4 .01.01H6V22h12v-5.99h-.01L18 16l-4-4 4-3.99-.01-.01H18V2H6z"></path></g>
<g id="http"><path d="M4.5 11h-2V9H1v6h1.5v-2.5h2V15H6V9H4.5v2zm2.5-.5h1.5V15H10v-4.5h1.5V9H7v1.5zm5.5 0H14V15h1.5v-4.5H17V9h-4.5v1.5zm9-1.5H18v6h1.5v-2h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm0 2.5h-2v-1h2v1z"></path></g>
<g id="https"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="important-devices"><path d="M23 11.01L18 11c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5c.55 0 1-.45 1-1v-9c0-.55-.45-.99-1-.99zM23 20h-5v-7h5v7zM20 2H2C.89 2 0 2.89 0 4v12c0 1.1.89 2 2 2h7v2H7v2h8v-2h-2v-2h2v-2H2V4h18v5h2V4c0-1.11-.9-2-2-2zm-8.03 7L11 6l-.97 3H7l2.47 1.76-.94 2.91 2.47-1.8 2.47 1.8-.94-2.91L15 9h-3.03z"></path></g>
<g id="inbox"><path d="M19 3H4.99c-1.11 0-1.98.89-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.11-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10z"></path></g>
<g id="indeterminate-check-box"><path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"></path></g>
<g id="info"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"></path></g>
<g id="info-outline"><path d="M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z"></path></g>
<g id="input"><path d="M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z"></path></g>
<g id="invert-colors"><path d="M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"></path></g>
<g id="label"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16z"></path></g>
<g id="label-outline"><path d="M17.63 5.84C17.27 5.33 16.67 5 16 5L5 5.01C3.9 5.01 3 5.9 3 7v10c0 1.1.9 1.99 2 1.99L16 19c.67 0 1.27-.33 1.63-.84L22 12l-4.37-6.16zM16 17H5V7h11l3.55 5L16 17z"></path></g>
<g id="language"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"></path></g>
<g id="last-page"><path d="M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"></path></g>
<g id="launch"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="lightbulb-outline"><path d="M9 21c0 .55.45 1 1 1h4c.55 0 1-.45 1-1v-1H9v1zm3-19C8.14 2 5 5.14 5 9c0 2.38 1.19 4.47 3 5.74V17c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2.26c1.81-1.27 3-3.36 3-5.74 0-3.86-3.14-7-7-7zm2.85 11.1l-.85.6V16h-4v-2.3l-.85-.6C7.8 12.16 7 10.63 7 9c0-2.76 2.24-5 5-5s5 2.24 5 5c0 1.63-.8 3.16-2.15 4.1z"></path></g>
<g id="line-style"><path d="M3 16h5v-2H3v2zm6.5 0h5v-2h-5v2zm6.5 0h5v-2h-5v2zM3 20h2v-2H3v2zm4 0h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 12h8v-2H3v2zm10 0h8v-2h-8v2zM3 4v4h18V4H3z"></path></g>
<g id="line-weight"><path d="M3 17h18v-2H3v2zm0 3h18v-1H3v1zm0-7h18v-3H3v3zm0-9v4h18V4H3z"></path></g>
<g id="link"><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"></path></g>
<g id="list"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"></path></g>
<g id="lock"><path d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"></path></g>
<g id="lock-open"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"></path></g>
<g id="lock-outline"><path d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zM8.9 6c0-1.71 1.39-3.1 3.1-3.1s3.1 1.39 3.1 3.1v2H8.9V6zM18 20H6V10h12v10z"></path></g>
<g id="low-priority"><path d="M14 5h8v2h-8zm0 5.5h8v2h-8zm0 5.5h8v2h-8zM2 11.5C2 15.08 4.92 18 8.5 18H9v2l3-3-3-3v2h-.5C6.02 16 4 13.98 4 11.5S6.02 7 8.5 7H12V5H8.5C4.92 5 2 7.92 2 11.5z"></path></g>
<g id="loyalty"><path d="M21.41 11.58l-9-9C12.05 2.22 11.55 2 11 2H4c-1.1 0-2 .9-2 2v7c0 .55.22 1.05.59 1.42l9 9c.36.36.86.58 1.41.58.55 0 1.05-.22 1.41-.59l7-7c.37-.36.59-.86.59-1.41 0-.55-.23-1.06-.59-1.42zM5.5 7C4.67 7 4 6.33 4 5.5S4.67 4 5.5 4 7 4.67 7 5.5 6.33 7 5.5 7zm11.77 8.27L13 19.54l-4.27-4.27C8.28 14.81 8 14.19 8 13.5c0-1.38 1.12-2.5 2.5-2.5.69 0 1.32.28 1.77.74l.73.72.73-.73c.45-.45 1.08-.73 1.77-.73 1.38 0 2.5 1.12 2.5 2.5 0 .69-.28 1.32-.73 1.77z"></path></g>
<g id="mail"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread"><path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"></path></g>
<g id="markunread-mailbox"><path d="M20 6H10v6H8V4h6V0H6v6H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2z"></path></g>
<g id="menu"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></g>
<g id="more-horiz"><path d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="more-vert"><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="motorcycle"><path d="M19.44 9.03L15.41 5H11v2h3.59l2 2H5c-2.8 0-5 2.2-5 5s2.2 5 5 5c2.46 0 4.45-1.69 4.9-4h1.65l2.77-2.77c-.21.54-.32 1.14-.32 1.77 0 2.8 2.2 5 5 5s5-2.2 5-5c0-2.65-1.97-4.77-4.56-4.97zM7.82 15C7.4 16.15 6.28 17 5 17c-1.63 0-3-1.37-3-3s1.37-3 3-3c1.28 0 2.4.85 2.82 2H5v2h2.82zM19 17c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"></path></g>
<g id="move-to-inbox"><path d="M19 3H4.99c-1.11 0-1.98.9-1.98 2L3 19c0 1.1.88 2 1.99 2H19c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 12h-4c0 1.66-1.35 3-3 3s-3-1.34-3-3H4.99V5H19v10zm-3-5h-2V7h-4v3H8l4 4 4-4z"></path></g>
<g id="next-week"><path d="M20 7h-4V5c0-.55-.22-1.05-.59-1.41C15.05 3.22 14.55 3 14 3h-4c-1.1 0-2 .9-2 2v2H4c-1.1 0-2 .9-2 2v11c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V9c0-1.1-.9-2-2-2zM10 5h4v2h-4V5zm1 13.5l-1-1 3-3-3-3 1-1 4 4-4 4z"></path></g>
<g id="note-add"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z"></path></g>
<g id="offline-pin"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z"></path></g>
<g id="opacity"><path d="M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z"></path></g>
<g id="open-in-browser"><path d="M19 4H5c-1.11 0-2 .9-2 2v12c0 1.1.89 2 2 2h4v-2H5V8h14v10h-4v2h4c1.1 0 2-.9 2-2V6c0-1.1-.89-2-2-2zm-7 6l-4 4h3v6h2v-6h3l-4-4z"></path></g>
<g id="open-in-new"><path d="M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z"></path></g>
<g id="open-with"><path d="M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z"></path></g>
<g id="pageview"><path d="M11.5 9C10.12 9 9 10.12 9 11.5s1.12 2.5 2.5 2.5 2.5-1.12 2.5-2.5S12.88 9 11.5 9zM20 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-3.21 14.21l-2.91-2.91c-.69.44-1.51.7-2.39.7C9.01 16 7 13.99 7 11.5S9.01 7 11.5 7 16 9.01 16 11.5c0 .88-.26 1.69-.7 2.39l2.91 2.9-1.42 1.42z"></path></g>
<g id="pan-tool"><path d="M23 5.5V20c0 2.2-1.8 4-4 4h-7.3c-1.08 0-2.1-.43-2.85-1.19L1 14.83s1.26-1.23 1.3-1.25c.22-.19.49-.29.79-.29.22 0 .42.06.6.16.04.01 4.31 2.46 4.31 2.46V4c0-.83.67-1.5 1.5-1.5S11 3.17 11 4v7h1V1.5c0-.83.67-1.5 1.5-1.5S15 .67 15 1.5V11h1V2.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5V11h1V5.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5z"></path></g>
<g id="payment"><path d="M20 4H4c-1.11 0-1.99.89-1.99 2L2 18c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6c0-1.11-.89-2-2-2zm0 14H4v-6h16v6zm0-10H4V6h16v2z"></path></g>
<g id="perm-camera-mic"><path d="M20 5h-3.17L15 3H9L7.17 5H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h7v-2.09c-2.83-.48-5-2.94-5-5.91h2c0 2.21 1.79 4 4 4s4-1.79 4-4h2c0 2.97-2.17 5.43-5 5.91V21h7c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-6 8c0 1.1-.9 2-2 2s-2-.9-2-2V9c0-1.1.9-2 2-2s2 .9 2 2v4z"></path></g>
<g id="perm-contact-calendar"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1c0-2 4-3.1 6-3.1s6 1.1 6 3.1v1z"></path></g>
<g id="perm-data-setting"><path d="M18.99 11.5c.34 0 .67.03 1 .07L20 0 0 20h11.56c-.04-.33-.07-.66-.07-1 0-4.14 3.36-7.5 7.5-7.5zm3.71 7.99c.02-.16.04-.32.04-.49 0-.17-.01-.33-.04-.49l1.06-.83c.09-.08.12-.21.06-.32l-1-1.73c-.06-.11-.19-.15-.31-.11l-1.24.5c-.26-.2-.54-.37-.85-.49l-.19-1.32c-.01-.12-.12-.21-.24-.21h-2c-.12 0-.23.09-.25.21l-.19 1.32c-.3.13-.59.29-.85.49l-1.24-.5c-.11-.04-.24 0-.31.11l-1 1.73c-.06.11-.04.24.06.32l1.06.83c-.02.16-.03.32-.03.49 0 .17.01.33.03.49l-1.06.83c-.09.08-.12.21-.06.32l1 1.73c.06.11.19.15.31.11l1.24-.5c.26.2.54.37.85.49l.19 1.32c.02.12.12.21.25.21h2c.12 0 .23-.09.25-.21l.19-1.32c.3-.13.59-.29.84-.49l1.25.5c.11.04.24 0 .31-.11l1-1.73c.06-.11.03-.24-.06-.32l-1.07-.83zm-3.71 1.01c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path></g>
<g id="perm-device-information"><path d="M13 7h-2v2h2V7zm0 4h-2v6h2v-6zm4-9.99L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z"></path></g>
<g id="perm-identity"><path d="M12 5.9c1.16 0 2.1.94 2.1 2.1s-.94 2.1-2.1 2.1S9.9 9.16 9.9 8s.94-2.1 2.1-2.1m0 9c2.97 0 6.1 1.46 6.1 2.1v1.1H5.9V17c0-.64 3.13-2.1 6.1-2.1M12 4C9.79 4 8 5.79 8 8s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 9c-2.67 0-8 1.34-8 4v3h16v-3c0-2.66-5.33-4-8-4z"></path></g>
<g id="perm-media"><path d="M2 6H0v5h.01L0 20c0 1.1.9 2 2 2h18v-2H2V6zm20-2h-8l-2-2H6c-1.1 0-1.99.9-1.99 2L4 16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7 15l4.5-6 3.5 4.51 2.5-3.01L21 15H7z"></path></g>
<g id="perm-phone-msg"><path d="M20 15.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM12 3v10l3-3h6V3h-9z"></path></g>
<g id="perm-scan-wifi"><path d="M12 3C6.95 3 3.15 4.85 0 7.23L12 22 24 7.25C20.85 4.87 17.05 3 12 3zm1 13h-2v-6h2v6zm-2-8V6h2v2h-2z"></path></g>
<g id="pets"><circle cx="4.5" cy="9.5" r="2.5"></circle><circle cx="9" cy="5.5" r="2.5"></circle><circle cx="15" cy="5.5" r="2.5"></circle><circle cx="19.5" cy="9.5" r="2.5"></circle><path d="M17.34 14.86c-.87-1.02-1.6-1.89-2.48-2.91-.46-.54-1.05-1.08-1.75-1.32-.11-.04-.22-.07-.33-.09-.25-.04-.52-.04-.78-.04s-.53 0-.79.05c-.11.02-.22.05-.33.09-.7.24-1.28.78-1.75 1.32-.87 1.02-1.6 1.89-2.48 2.91-1.31 1.31-2.92 2.76-2.62 4.79.29 1.02 1.02 2.03 2.33 2.32.73.15 3.06-.44 5.54-.44h.18c2.48 0 4.81.58 5.54.44 1.31-.29 2.04-1.31 2.33-2.32.31-2.04-1.3-3.49-2.61-4.8z"></path></g>
<g id="picture-in-picture"><path d="M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z"></path></g>
<g id="picture-in-picture-alt"><path d="M19 11h-8v6h8v-6zm4 8V4.98C23 3.88 22.1 3 21 3H3c-1.1 0-2 .88-2 1.98V19c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2zm-2 .02H3V4.97h18v14.05z"></path></g>
<g id="play-for-work"><path d="M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z"></path></g>
<g id="polymer"><path d="M19 4h-4L7.11 16.63 4.5 12 9 4H5L.5 12 5 20h4l7.89-12.63L19.5 12 15 20h4l4.5-8z"></path></g>
<g id="power-settings-new"><path d="M13 3h-2v10h2V3zm4.83 2.17l-1.42 1.42C17.99 7.86 19 9.81 19 12c0 3.87-3.13 7-7 7s-7-3.13-7-7c0-2.19 1.01-4.14 2.58-5.42L6.17 5.17C4.23 6.82 3 9.26 3 12c0 4.97 4.03 9 9 9s9-4.03 9-9c0-2.74-1.23-5.18-3.17-6.83z"></path></g>
<g id="pregnant-woman"><path d="M9 4c0-1.11.89-2 2-2s2 .89 2 2-.89 2-2 2-2-.89-2-2zm7 9c-.01-1.34-.83-2.51-2-3 0-1.66-1.34-3-3-3s-3 1.34-3 3v7h2v5h3v-5h3v-4z"></path></g>
<g id="print"><path d="M19 8H5c-1.66 0-3 1.34-3 3v6h4v4h12v-4h4v-6c0-1.66-1.34-3-3-3zm-3 11H8v-5h8v5zm3-7c-.55 0-1-.45-1-1s.45-1 1-1 1 .45 1 1-.45 1-1 1zm-1-9H6v4h12V3z"></path></g>
<g id="query-builder"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="question-answer"><path d="M21 6h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1zm-4 6V3c0-.55-.45-1-1-1H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1z"></path></g>
<g id="radio-button-checked"><path d="M12 7c-2.76 0-5 2.24-5 5s2.24 5 5 5 5-2.24 5-5-2.24-5-5-5zm0-5C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="radio-button-unchecked"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"></path></g>
<g id="receipt"><path d="M18 17H6v-2h12v2zm0-4H6v-2h12v2zm0-4H6V7h12v2zM3 22l1.5-1.5L6 22l1.5-1.5L9 22l1.5-1.5L12 22l1.5-1.5L15 22l1.5-1.5L18 22l1.5-1.5L21 22V2l-1.5 1.5L18 2l-1.5 1.5L15 2l-1.5 1.5L12 2l-1.5 1.5L9 2 7.5 3.5 6 2 4.5 3.5 3 2v20z"></path></g>
<g id="record-voice-over"><circle cx="9" cy="9" r="4"></circle><path d="M9 15c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4zm7.76-9.64l-1.68 1.69c.84 1.18.84 2.71 0 3.89l1.68 1.69c2.02-2.02 2.02-5.07 0-7.27zM20.07 2l-1.63 1.63c2.77 3.02 2.77 7.56 0 10.74L20.07 16c3.9-3.89 3.91-9.95 0-14z"></path></g>
<g id="redeem"><path d="M20 6h-2.18c.11-.31.18-.65.18-1 0-1.66-1.34-3-3-3-1.05 0-1.96.54-2.5 1.35l-.5.67-.5-.68C10.96 2.54 10.05 2 9 2 7.34 2 6 3.34 6 5c0 .35.07.69.18 1H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-5-2c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zM9 4c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm11 15H4v-2h16v2zm0-5H4V8h5.08L7 10.83 8.62 12 11 8.76l1-1.36 1 1.36L15.38 12 17 10.83 14.92 8H20v6z"></path></g>
<g id="redo"><path d="M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z"></path></g>
<g id="refresh"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"></path></g>
<g id="remove"><path d="M19 13H5v-2h14v2z"></path></g>
<g id="remove-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z"></path></g>
<g id="remove-circle-outline"><path d="M7 11v2h10v-2H7zm5-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"></path></g>
<g id="remove-shopping-cart"><path d="M22.73 22.73L2.77 2.77 2 2l-.73-.73L0 2.54l4.39 4.39 2.21 4.66-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h7.46l1.38 1.38c-.5.36-.83.95-.83 1.62 0 1.1.89 2 1.99 2 .67 0 1.26-.33 1.62-.84L21.46 24l1.27-1.27zM7.42 15c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h2.36l2 2H7.42zm8.13-2c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H6.54l9.01 9zM7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2z"></path></g>
<g id="reorder"><path d="M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z"></path></g>
<g id="reply"><path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="reply-all"><path d="M7 8V5l-7 7 7 7v-3l-4-4 4-4zm6 1V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path></g>
<g id="report"><path d="M15.73 3H8.27L3 8.27v7.46L8.27 21h7.46L21 15.73V8.27L15.73 3zM12 17.3c-.72 0-1.3-.58-1.3-1.3 0-.72.58-1.3 1.3-1.3.72 0 1.3.58 1.3 1.3 0 .72-.58 1.3-1.3 1.3zm1-4.3h-2V7h2v6z"></path></g>
<g id="report-problem"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="restore"><path d="M13 3c-4.97 0-9 4.03-9 9H1l3.89 3.89.07.14L9 12H6c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.93 0-3.68-.79-4.94-2.06l-1.42 1.42C8.27 19.99 10.51 21 13 21c4.97 0 9-4.03 9-9s-4.03-9-9-9zm-1 5v5l4.28 2.54.72-1.21-3.5-2.08V8H12z"></path></g>
<g id="restore-page"><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm-2 16c-2.05 0-3.81-1.24-4.58-3h1.71c.63.9 1.68 1.5 2.87 1.5 1.93 0 3.5-1.57 3.5-3.5S13.93 9.5 12 9.5c-1.35 0-2.52.78-3.1 1.9l1.6 1.6h-4V9l1.3 1.3C8.69 8.92 10.23 8 12 8c2.76 0 5 2.24 5 5s-2.24 5-5 5z"></path></g>
<g id="room"><path d="M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z"></path></g>
<g id="rounded-corner"><path d="M19 19h2v2h-2v-2zm0-2h2v-2h-2v2zM3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm0-4h2V3H3v2zm4 0h2V3H7v2zm8 16h2v-2h-2v2zm-4 0h2v-2h-2v2zm4 0h2v-2h-2v2zm-8 0h2v-2H7v2zm-4 0h2v-2H3v2zM21 8c0-2.76-2.24-5-5-5h-5v2h5c1.65 0 3 1.35 3 3v5h2V8z"></path></g>
<g id="rowing"><path d="M8.5 14.5L4 19l1.5 1.5L9 17h2l-2.5-2.5zM15 1c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 20.01L18 24l-2.99-3.01V19.5l-7.1-7.09c-.31.05-.61.07-.91.07v-2.16c1.66.03 3.61-.87 4.67-2.04l1.4-1.55c.19-.21.43-.38.69-.5.29-.14.62-.23.96-.23h.03C15.99 6.01 17 7.02 17 8.26v5.75c0 .84-.35 1.61-.92 2.16l-3.58-3.58v-2.27c-.63.52-1.43 1.02-2.29 1.39L16.5 18H18l3 3.01z"></path></g>
<g id="save"><path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"></path></g>
<g id="schedule"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z"></path></g>
<g id="search"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"></path></g>
<g id="select-all"><path d="M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z"></path></g>
<g id="send"><path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"></path></g>
<g id="settings"><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"></path></g>
<g id="settings-applications"><path d="M12 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm7-7H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-1.75 9c0 .23-.02.46-.05.68l1.48 1.16c.13.11.17.3.08.45l-1.4 2.42c-.09.15-.27.21-.43.15l-1.74-.7c-.36.28-.76.51-1.18.69l-.26 1.85c-.03.17-.18.3-.35.3h-2.8c-.17 0-.32-.13-.35-.29l-.26-1.85c-.43-.18-.82-.41-1.18-.69l-1.74.7c-.16.06-.34 0-.43-.15l-1.4-2.42c-.09-.15-.05-.34.08-.45l1.48-1.16c-.03-.23-.05-.46-.05-.69 0-.23.02-.46.05-.68l-1.48-1.16c-.13-.11-.17-.3-.08-.45l1.4-2.42c.09-.15.27-.21.43-.15l1.74.7c.36-.28.76-.51 1.18-.69l.26-1.85c.03-.17.18-.3.35-.3h2.8c.17 0 .32.13.35.29l.26 1.85c.43.18.82.41 1.18.69l1.74-.7c.16-.06.34 0 .43.15l1.4 2.42c.09.15.05.34-.08.45l-1.48 1.16c.03.23.05.46.05.69z"></path></g>
<g id="settings-backup-restore"><path d="M14 12c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm-2-9c-4.97 0-9 4.03-9 9H0l4 4 4-4H5c0-3.87 3.13-7 7-7s7 3.13 7 7-3.13 7-7 7c-1.51 0-2.91-.49-4.06-1.3l-1.42 1.44C8.04 20.3 9.94 21 12 21c4.97 0 9-4.03 9-9s-4.03-9-9-9z"></path></g>
<g id="settings-bluetooth"><path d="M11 24h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zm2.71-18.29L12 0h-1v7.59L6.41 3 5 4.41 10.59 10 5 15.59 6.41 17 11 12.41V20h1l5.71-5.71-4.3-4.29 4.3-4.29zM13 3.83l1.88 1.88L13 7.59V3.83zm1.88 10.46L13 16.17v-3.76l1.88 1.88z"></path></g>
<g id="settings-brightness"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02zM8 16h2.5l1.5 1.5 1.5-1.5H16v-2.5l1.5-1.5-1.5-1.5V8h-2.5L12 6.5 10.5 8H8v2.5L6.5 12 8 13.5V16zm4-7c1.66 0 3 1.34 3 3s-1.34 3-3 3V9z"></path></g>
<g id="settings-cell"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM16 .01L8 0C6.9 0 6 .9 6 2v16c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V2c0-1.1-.9-1.99-2-1.99zM16 16H8V4h8v12z"></path></g>
<g id="settings-ethernet"><path d="M7.77 6.76L6.23 5.48.82 12l5.41 6.52 1.54-1.28L3.42 12l4.35-5.24zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6.77-7.52l-1.54 1.28L20.58 12l-4.35 5.24 1.54 1.28L23.18 12l-5.41-6.52z"></path></g>
<g id="settings-input-antenna"><path d="M12 5c-3.87 0-7 3.13-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.87-3.13-7-7-7zm1 9.29c.88-.39 1.5-1.26 1.5-2.29 0-1.38-1.12-2.5-2.5-2.5S9.5 10.62 9.5 12c0 1.02.62 1.9 1.5 2.29v3.3L7.59 21 9 22.41l3-3 3 3L16.41 21 13 17.59v-3.3zM12 1C5.93 1 1 5.93 1 12h2c0-4.97 4.03-9 9-9s9 4.03 9 9h2c0-6.07-4.93-11-11-11z"></path></g>
<g id="settings-input-component"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-composite"><path d="M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z"></path></g>
<g id="settings-input-hdmi"><path d="M18 7V4c0-1.1-.9-2-2-2H8c-1.1 0-2 .9-2 2v3H5v6l3 6v3h8v-3l3-6V7h-1zM8 4h8v3h-2V5h-1v2h-2V5h-1v2H8V4z"></path></g>
<g id="settings-input-svideo"><path d="M8 11.5c0-.83-.67-1.5-1.5-1.5S5 10.67 5 11.5 5.67 13 6.5 13 8 12.33 8 11.5zm7-5c0-.83-.67-1.5-1.5-1.5h-3C9.67 5 9 5.67 9 6.5S9.67 8 10.5 8h3c.83 0 1.5-.67 1.5-1.5zM8.5 15c-.83 0-1.5.67-1.5 1.5S7.67 18 8.5 18s1.5-.67 1.5-1.5S9.33 15 8.5 15zM12 1C5.93 1 1 5.93 1 12s4.93 11 11 11 11-4.93 11-11S18.07 1 12 1zm0 20c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zm5.5-11c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm-2 5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path></g>
<g id="settings-overscan"><path d="M12.01 5.5L10 8h4l-1.99-2.5zM18 10v4l2.5-1.99L18 10zM6 10l-2.5 2.01L6 14v-4zm8 6h-4l2.01 2.5L14 16zm7-13H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16.01H3V4.99h18v14.02z"></path></g>
<g id="settings-phone"><path d="M13 9h-2v2h2V9zm4 0h-2v2h2V9zm3 6.5c-1.25 0-2.45-.2-3.57-.57-.35-.11-.74-.03-1.02.24l-2.2 2.2c-2.83-1.44-5.15-3.75-6.59-6.58l2.2-2.21c.28-.27.36-.66.25-1.01C8.7 6.45 8.5 5.25 8.5 4c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1 0 9.39 7.61 17 17 17 .55 0 1-.45 1-1v-3.5c0-.55-.45-1-1-1zM19 9v2h2V9h-2z"></path></g>
<g id="settings-power"><path d="M7 24h2v-2H7v2zm4 0h2v-2h-2v2zm2-22h-2v10h2V2zm3.56 2.44l-1.45 1.45C16.84 6.94 18 8.83 18 11c0 3.31-2.69 6-6 6s-6-2.69-6-6c0-2.17 1.16-4.06 2.88-5.12L7.44 4.44C5.36 5.88 4 8.28 4 11c0 4.42 3.58 8 8 8s8-3.58 8-8c0-2.72-1.36-5.12-3.44-6.56zM15 24h2v-2h-2v2z"></path></g>
<g id="settings-remote"><path d="M15 9H9c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h6c.55 0 1-.45 1-1V10c0-.55-.45-1-1-1zm-3 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7.05 6.05l1.41 1.41C9.37 6.56 10.62 6 12 6s2.63.56 3.54 1.46l1.41-1.41C15.68 4.78 13.93 4 12 4s-3.68.78-4.95 2.05zM12 0C8.96 0 6.21 1.23 4.22 3.22l1.41 1.41C7.26 3.01 9.51 2 12 2s4.74 1.01 6.36 2.64l1.41-1.41C17.79 1.23 15.04 0 12 0z"></path></g>
<g id="settings-voice"><path d="M7 24h2v-2H7v2zm5-11c1.66 0 2.99-1.34 2.99-3L15 4c0-1.66-1.34-3-3-3S9 2.34 9 4v6c0 1.66 1.34 3 3 3zm-1 11h2v-2h-2v2zm4 0h2v-2h-2v2zm4-14h-1.7c0 3-2.54 5.1-5.3 5.1S6.7 13 6.7 10H5c0 3.41 2.72 6.23 6 6.72V20h2v-3.28c3.28-.49 6-3.31 6-6.72z"></path></g>
<g id="shop"><path d="M16 6V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H2v13c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V6h-6zm-6-2h4v2h-4V4zM9 18V9l7.5 4L9 18z"></path></g>
<g id="shop-two"><path d="M3 9H1v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2H3V9zm15-4V3c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H5v11c0 1.11.89 2 2 2h14c1.11 0 2-.89 2-2V5h-5zm-6-2h4v2h-4V3zm0 12V8l5.5 3-5.5 4z"></path></g>
<g id="shopping-basket"><path d="M17.21 9l-4.38-6.56c-.19-.28-.51-.42-.83-.42-.32 0-.64.14-.83.43L6.79 9H2c-.55 0-1 .45-1 1 0 .09.01.18.04.27l2.54 9.27c.23.84 1 1.46 1.92 1.46h13c.92 0 1.69-.62 1.93-1.46l2.54-9.27L23 10c0-.55-.45-1-1-1h-4.79zM9 9l3-4.4L15 9H9zm3 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"></path></g>
<g id="shopping-cart"><path d="M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"></path></g>
<g id="sort"><path d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z"></path></g>
<g id="speaker-notes"><path d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM8 14H6v-2h2v2zm0-3H6V9h2v2zm0-3H6V6h2v2zm7 6h-5v-2h5v2zm3-3h-8V9h8v2zm0-3h-8V6h8v2z"></path></g>
<g id="speaker-notes-off"><path d="M10.54 11l-.54-.54L7.54 8 6 6.46 2.38 2.84 1.27 1.73 0 3l2.01 2.01L2 22l4-4h9l5.73 5.73L22 22.46 17.54 18l-7-7zM8 14H6v-2h2v2zm-2-3V9l2 2H6zm14-9H4.08L10 7.92V6h8v2h-7.92l1 1H18v2h-4.92l6.99 6.99C21.14 17.95 22 17.08 22 16V4c0-1.1-.9-2-2-2z"></path></g>
<g id="spellcheck"><path d="M12.45 16h2.09L9.43 3H7.57L2.46 16h2.09l1.12-3h5.64l1.14 3zm-6.02-5L8.5 5.48 10.57 11H6.43zm15.16.59l-8.09 8.09L9.83 16l-1.41 1.41 5.09 5.09L23 13l-1.41-1.41z"></path></g>
<g id="star"><path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"></path></g>
<g id="star-border"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="star-half"><path d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4V6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"></path></g>
<g id="stars"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm4.24 16L12 15.45 7.77 18l1.12-4.81-3.73-3.23 4.92-.42L12 5l1.92 4.53 4.92.42-3.73 3.23L16.23 18z"></path></g>
<g id="store"><path d="M20 4H4v2h16V4zm1 10v-2l-1-5H4l-1 5v2h1v6h10v-6h4v6h2v-6h1zm-9 4H6v-4h6v4z"></path></g>
<g id="subdirectory-arrow-left"><path d="M11 9l1.42 1.42L8.83 14H18V4h2v12H8.83l3.59 3.58L11 21l-6-6 6-6z"></path></g>
<g id="subdirectory-arrow-right"><path d="M19 15l-6 6-1.42-1.42L15.17 16H4V4h2v10h9.17l-3.59-3.58L13 9l6 6z"></path></g>
<g id="subject"><path d="M14 17H4v2h10v-2zm6-8H4v2h16V9zM4 15h16v-2H4v2zM4 5v2h16V5H4z"></path></g>
<g id="supervisor-account"><path d="M16.5 12c1.38 0 2.49-1.12 2.49-2.5S17.88 7 16.5 7C15.12 7 14 8.12 14 9.5s1.12 2.5 2.5 2.5zM9 11c1.66 0 2.99-1.34 2.99-3S10.66 5 9 5C7.34 5 6 6.34 6 8s1.34 3 3 3zm7.5 3c-1.83 0-5.5.92-5.5 2.75V19h11v-2.25c0-1.83-3.67-2.75-5.5-2.75zM9 13c-2.33 0-7 1.17-7 3.5V19h7v-2.25c0-.85.33-2.34 2.37-3.47C10.5 13.1 9.66 13 9 13z"></path></g>
<g id="swap-horiz"><path d="M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z"></path></g>
<g id="swap-vert"><path d="M16 17.01V10h-2v7.01h-3L15 21l4-3.99h-3zM9 3L5 6.99h3V14h2V6.99h3L9 3z"></path></g>
<g id="swap-vertical-circle"><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM6.5 9L10 5.5 13.5 9H11v4H9V9H6.5zm11 6L14 18.5 10.5 15H13v-4h2v4h2.5z"></path></g>
<g id="system-update-alt"><path d="M12 16.5l4-4h-3v-9h-2v9H8l4 4zm9-13h-6v1.99h6v14.03H3V5.49h6V3.5H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-14c0-1.1-.9-2-2-2z"></path></g>
<g id="tab"><path d="M21 3H3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H3V5h10v4h8v10z"></path></g>
<g id="tab-unselected"><path d="M1 9h2V7H1v2zm0 4h2v-2H1v2zm0-8h2V3c-1.1 0-2 .9-2 2zm8 16h2v-2H9v2zm-8-4h2v-2H1v2zm2 4v-2H1c0 1.1.9 2 2 2zM21 3h-8v6h10V5c0-1.1-.9-2-2-2zm0 14h2v-2h-2v2zM9 5h2V3H9v2zM5 21h2v-2H5v2zM5 5h2V3H5v2zm16 16c1.1 0 2-.9 2-2h-2v2zm0-8h2v-2h-2v2zm-8 8h2v-2h-2v2zm4 0h2v-2h-2v2z"></path></g>
<g id="text-format"><path d="M5 17v2h14v-2H5zm4.5-4.2h5l.9 2.2h2.1L12.75 4h-1.5L6.5 15h2.1l.9-2.2zM12 5.98L13.87 11h-3.74L12 5.98z"></path></g>
<g id="theaters"><path d="M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z"></path></g>
<g id="thumb-down"><path d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z"></path></g>
<g id="thumb-up"><path d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z"></path></g>
<g id="thumbs-up-down"><path d="M12 6c0-.55-.45-1-1-1H5.82l.66-3.18.02-.23c0-.31-.13-.59-.33-.8L5.38 0 .44 4.94C.17 5.21 0 5.59 0 6v6.5c0 .83.67 1.5 1.5 1.5h6.75c.62 0 1.15-.38 1.38-.91l2.26-5.29c.07-.17.11-.36.11-.55V6zm10.5 4h-6.75c-.62 0-1.15.38-1.38.91l-2.26 5.29c-.07.17-.11.36-.11.55V18c0 .55.45 1 1 1h5.18l-.66 3.18-.02.24c0 .31.13.59.33.8l.79.78 4.94-4.94c.27-.27.44-.65.44-1.06v-6.5c0-.83-.67-1.5-1.5-1.5z"></path></g>
<g id="timeline"><path d="M23 8c0 1.1-.9 2-2 2-.18 0-.35-.02-.51-.07l-3.56 3.55c.05.16.07.34.07.52 0 1.1-.9 2-2 2s-2-.9-2-2c0-.18.02-.36.07-.52l-2.55-2.55c-.16.05-.34.07-.52.07s-.36-.02-.52-.07l-4.55 4.56c.05.16.07.33.07.51 0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2c.18 0 .35.02.51.07l4.56-4.55C8.02 9.36 8 9.18 8 9c0-1.1.9-2 2-2s2 .9 2 2c0 .18-.02.36-.07.52l2.55 2.55c.16-.05.34-.07.52-.07s.36.02.52.07l3.55-3.56C19.02 8.35 19 8.18 19 8c0-1.1.9-2 2-2s2 .9 2 2z"></path></g>
<g id="toc"><path d="M3 9h14V7H3v2zm0 4h14v-2H3v2zm0 4h14v-2H3v2zm16 0h2v-2h-2v2zm0-10v2h2V7h-2zm0 6h2v-2h-2v2z"></path></g>
<g id="today"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"></path></g>
<g id="toll"><path d="M15 4c-4.42 0-8 3.58-8 8s3.58 8 8 8 8-3.58 8-8-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6s2.69-6 6-6 6 2.69 6 6-2.69 6-6 6zM3 12c0-2.61 1.67-4.83 4-5.65V4.26C3.55 5.15 1 8.27 1 12s2.55 6.85 6 7.74v-2.09c-2.33-.82-4-3.04-4-5.65z"></path></g>
<g id="touch-app"><path d="M9 11.24V7.5C9 6.12 10.12 5 11.5 5S14 6.12 14 7.5v3.74c1.21-.81 2-2.18 2-3.74C16 5.01 13.99 3 11.5 3S7 5.01 7 7.5c0 1.56.79 2.93 2 3.74zm9.84 4.63l-4.54-2.26c-.17-.07-.35-.11-.54-.11H13v-6c0-.83-.67-1.5-1.5-1.5S10 6.67 10 7.5v10.74l-3.43-.72c-.08-.01-.15-.03-.24-.03-.31 0-.59.13-.79.33l-.79.8 4.94 4.94c.27.27.65.44 1.06.44h6.79c.75 0 1.33-.55 1.44-1.28l.75-5.27c.01-.07.02-.14.02-.2 0-.62-.38-1.16-.91-1.38z"></path></g>
<g id="track-changes"><path d="M19.07 4.93l-1.41 1.41C19.1 7.79 20 9.79 20 12c0 4.42-3.58 8-8 8s-8-3.58-8-8c0-4.08 3.05-7.44 7-7.93v2.02C8.16 6.57 6 9.03 6 12c0 3.31 2.69 6 6 6s6-2.69 6-6c0-1.66-.67-3.16-1.76-4.24l-1.41 1.41C15.55 9.9 16 10.9 16 12c0 2.21-1.79 4-4 4s-4-1.79-4-4c0-1.86 1.28-3.41 3-3.86v2.14c-.6.35-1 .98-1 1.72 0 1.1.9 2 2 2s2-.9 2-2c0-.74-.4-1.38-1-1.72V2h-1C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-2.76-1.12-5.26-2.93-7.07z"></path></g>
<g id="translate"><path d="M12.87 15.07l-2.54-2.51.03-.03c1.74-1.94 2.98-4.17 3.71-6.53H17V4h-7V2H8v2H1v1.99h11.17C11.5 7.92 10.44 9.75 9 11.35 8.07 10.32 7.3 9.19 6.69 8h-2c.73 1.63 1.73 3.17 2.98 4.56l-5.09 5.02L4 19l5-5 3.11 3.11.76-2.04zM18.5 10h-2L12 22h2l1.12-3h4.75L21 22h2l-4.5-12zm-2.62 7l1.62-4.33L19.12 17h-3.24z"></path></g>
<g id="trending-down"><path d="M16 18l2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z"></path></g>
<g id="trending-flat"><path d="M22 12l-4-4v3H3v2h15v3z"></path></g>
<g id="trending-up"><path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"></path></g>
<g id="turned-in"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"></path></g>
<g id="turned-in-not"><path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2zm0 15l-5-2.18L7 18V5h10v13z"></path></g>
<g id="unarchive"><path d="M20.55 5.22l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.15.55L3.46 5.22C3.17 5.57 3 6.01 3 6.5V19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.49-.17-.93-.45-1.28zM12 9.5l5.5 5.5H14v2h-4v-2H6.5L12 9.5zM5.12 5l.82-1h12l.93 1H5.12z"></path></g>
<g id="undo"><path d="M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z"></path></g>
<g id="unfold-less"><path d="M7.41 18.59L8.83 20 12 16.83 15.17 20l1.41-1.41L12 14l-4.59 4.59zm9.18-13.18L15.17 4 12 7.17 8.83 4 7.41 5.41 12 10l4.59-4.59z"></path></g>
<g id="unfold-more"><path d="M12 5.83L15.17 9l1.41-1.41L12 3 7.41 7.59 8.83 9 12 5.83zm0 12.34L8.83 15l-1.41 1.41L12 21l4.59-4.59L15.17 15 12 18.17z"></path></g>
<g id="update"><path d="M21 10.12h-6.78l2.74-2.82c-2.73-2.7-7.15-2.8-9.88-.1-2.73 2.71-2.73 7.08 0 9.79 2.73 2.71 7.15 2.71 9.88 0C18.32 15.65 19 14.08 19 12.1h2c0 1.98-.88 4.55-2.64 6.29-3.51 3.48-9.21 3.48-12.72 0-3.5-3.47-3.53-9.11-.02-12.58 3.51-3.47 9.14-3.47 12.65 0L21 3v7.12zM12.5 8v4.25l3.5 2.08-.72 1.21L11 13V8h1.5z"></path></g>
<g id="verified-user"><path d="M12 1L3 5v6c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V5l-9-4zm-2 16l-4-4 1.41-1.41L10 14.17l6.59-6.59L18 9l-8 8z"></path></g>
<g id="view-agenda"><path d="M20 13H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1v-6c0-.55-.45-1-1-1zm0-10H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V4c0-.55-.45-1-1-1z"></path></g>
<g id="view-array"><path d="M4 18h3V5H4v13zM18 5v13h3V5h-3zM8 18h9V5H8v13z"></path></g>
<g id="view-carousel"><path d="M7 19h10V4H7v15zm-5-2h4V6H2v11zM18 6v11h4V6h-4z"></path></g>
<g id="view-column"><path d="M10 18h5V5h-5v13zm-6 0h5V5H4v13zM16 5v13h5V5h-5z"></path></g>
<g id="view-day"><path d="M2 21h19v-3H2v3zM20 8H3c-.55 0-1 .45-1 1v6c0 .55.45 1 1 1h17c.55 0 1-.45 1-1V9c0-.55-.45-1-1-1zM2 3v3h19V3H2z"></path></g>
<g id="view-headline"><path d="M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"></path></g>
<g id="view-list"><path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"></path></g>
<g id="view-module"><path d="M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z"></path></g>
<g id="view-quilt"><path d="M10 18h5v-6h-5v6zm-6 0h5V5H4v13zm12 0h5v-6h-5v6zM10 5v6h11V5H10z"></path></g>
<g id="view-stream"><path d="M4 18h17v-6H4v6zM4 5v6h17V5H4z"></path></g>
<g id="view-week"><path d="M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"></path></g>
<g id="visibility"><path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"></path></g>
<g id="visibility-off"><path d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"></path></g>
<g id="warning"><path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path></g>
<g id="watch-later"><path d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z"></path></g>
<g id="weekend"><path d="M21 10c-1.1 0-2 .9-2 2v3H5v-3c0-1.1-.9-2-2-2s-2 .9-2 2v5c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2v-5c0-1.1-.9-2-2-2zm-3-5H6c-1.1 0-2 .9-2 2v2.15c1.16.41 2 1.51 2 2.82V14h12v-2.03c0-1.3.84-2.4 2-2.82V7c0-1.1-.9-2-2-2z"></path></g>
<g id="work"><path d="M20 6h-4V4c0-1.11-.89-2-2-2h-4c-1.11 0-2 .89-2 2v2H4c-1.11 0-1.99.89-1.99 2L2 19c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2zm-6 0h-4V4h4v2z"></path></g>
<g id="youtube-searched-for"><path d="M17.01 14h-.8l-.27-.27c.98-1.14 1.57-2.61 1.57-4.23 0-3.59-2.91-6.5-6.5-6.5s-6.5 3-6.5 6.5H2l3.84 4 4.16-4H6.51C6.51 7 8.53 5 11.01 5s4.5 2.01 4.5 4.5c0 2.48-2.02 4.5-4.5 4.5-.65 0-1.26-.14-1.82-.38L7.71 15.1c.97.57 2.09.9 3.3.9 1.61 0 3.08-.59 4.22-1.57l.27.27v.79l5.01 4.99L22 19l-4.99-5z"></path></g>
<g id="zoom-in"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zm2.5-4h-2v2H9v-2H7V9h2V7h1v2h2v1z"></path></g>
<g id="zoom-out"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14zM7 9h5v1H7z"></path></g>
</defs></svg>
</iron-iconset-svg>`;

	document.head.appendChild(template$1.content);

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @polymerBehavior
	 */
	const AppLayoutBehavior = [
	  IronResizableBehavior,
	  {

	    listeners: {
	      'app-reset-layout': '_appResetLayoutHandler',
	      'iron-resize': 'resetLayout'
	    },

	    attached: function() {
	      this.fire('app-reset-layout');
	    },

	    _appResetLayoutHandler: function(e) {
	      if (dom(e).path[0] === this) {
	        return;
	      }
	      this.resetLayout();
	      e.stopPropagation();
	    },

	    _updateLayoutStates: function() {
	      console.error('unimplemented');
	    },

	    /**
	     * Resets the layout. If you changed the size of this element via CSS
	     * you can notify the changes by either firing the `iron-resize` event
	     * or calling `resetLayout` directly.
	     *
	     * @method resetLayout
	     */
	    resetLayout: function() {
	      var cb = this._updateLayoutStates.bind(this);
	      this._layoutDebouncer =
	          Debouncer.debounce(this._layoutDebouncer, animationFrame, cb);
	      enqueueDebouncer(this._layoutDebouncer);
	      this._notifyDescendantResize();
	    },

	    _notifyLayoutChanged: function() {
	      var self = this;
	      // TODO: the event `app-reset-layout` can be fired synchronously
	      // as long as `_updateLayoutStates` waits for all the microtasks after
	      // rAF. E.g. requestAnimationFrame(setTimeOut())
	      requestAnimationFrame(function() {
	        self.fire('app-reset-layout');
	      });
	    },

	    _notifyDescendantResize: function() {
	      if (!this.isAttached) {
	        return;
	      }
	      this._interestedResizables.forEach(function(resizable) {
	        if (this.resizerShouldNotify(resizable)) {
	          this._notifyDescendant(resizable);
	        }
	      }, this);
	    }
	  }
	];

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	app-header-layout is a wrapper element that positions an app-header and other
	content. This element uses the document scroll by default, but it can also
	define its own scrolling region.

	Using the document scroll:

	```html
	<app-header-layout>
	  <app-header slot="header" fixed condenses effects="waterfall">
	    <app-toolbar>
	      <div main-title>App name</div>
	    </app-toolbar>
	  </app-header>
	  <div>
	    main content
	  </div>
	</app-header-layout>
	```

	Using an own scrolling region:

	```html
	<app-header-layout has-scrolling-region style="width: 300px; height: 400px;">
	  <app-header slot="header" fixed condenses effects="waterfall">
	    <app-toolbar>
	      <div main-title>App name</div>
	    </app-toolbar>
	  </app-header>
	  <div>
	    main content
	  </div>
	</app-header-layout>
	```

	Add the `fullbleed` attribute to app-header-layout to make it fit the size of
	its container:

	```html
	<app-header-layout fullbleed>
	 ...
	</app-header-layout>
	```

	@group App Elements
	@element app-header-layout
	@demo app-header-layout/demo/simple.html Simple Demo
	@demo app-header-layout/demo/scrolling-region.html Scrolling Region
	@demo app-header-layout/demo/music.html Music Demo
	@demo app-header-layout/demo/footer.html Footer Demo
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
        /**
         * Force app-header-layout to have its own stacking context so that its parent can
         * control the stacking of it relative to other elements (e.g. app-drawer-layout).
         * This could be done using \`isolation: isolate\`, but that's not well supported
         * across browsers.
         */
        position: relative;
        z-index: 0;
      }

      #wrapper ::slotted([slot=header]) {
        @apply --layout-fixed-top;
        z-index: 1;
      }

      #wrapper.initializing ::slotted([slot=header]) {
        position: relative;
      }

      :host([has-scrolling-region]) {
        height: 100%;
      }

      :host([has-scrolling-region]) #wrapper ::slotted([slot=header]) {
        position: absolute;
      }

      :host([has-scrolling-region]) #wrapper.initializing ::slotted([slot=header]) {
        position: relative;
      }

      :host([has-scrolling-region]) #wrapper #contentContainer {
        @apply --layout-fit;
        overflow-y: auto;
        -webkit-overflow-scrolling: touch;
      }

      :host([has-scrolling-region]) #wrapper.initializing #contentContainer {
        position: relative;
      }

      :host([fullbleed]) {
        @apply --layout-vertical;
        @apply --layout-fit;
      }

      :host([fullbleed]) #wrapper,
      :host([fullbleed]) #wrapper #contentContainer {
        @apply --layout-vertical;
        @apply --layout-flex;
      }

      #contentContainer {
        /* Create a stacking context here so that all children appear below the header. */
        position: relative;
        z-index: 0;
      }

      @media print {
        :host([has-scrolling-region]) #wrapper #contentContainer {
          overflow-y: visible;
        }
      }

    </style>

    <div id="wrapper" class="initializing">
      <slot id="headerSlot" name="header"></slot>

      <div id="contentContainer">
        <slot></slot>
      </div>
    </div>
`,

	  is: 'app-header-layout',
	  behaviors: [AppLayoutBehavior],

	  properties: {
	    /**
	     * If true, the current element will have its own scrolling region.
	     * Otherwise, it will use the document scroll to control the header.
	     */
	    hasScrollingRegion: {type: Boolean, value: false, reflectToAttribute: true}
	  },

	  observers: ['resetLayout(isAttached, hasScrollingRegion)'],

	  /**
	   * A reference to the app-header element.
	   *
	   * @property header
	   */
	  get header() {
	    return dom(this.$.headerSlot).getDistributedNodes()[0];
	  },

	  _updateLayoutStates: function() {
	    var header = this.header;
	    if (!this.isAttached || !header) {
	      return;
	    }
	    // Remove the initializing class, which staticly positions the header and
	    // the content until the height of the header can be read.
	    this.$.wrapper.classList.remove('initializing');
	    // Update scroll target.
	    header.scrollTarget = this.hasScrollingRegion ?
	        this.$.contentContainer :
	        this.ownerDocument.documentElement;
	    // Get header height here so that style reads are batched together before
	    // style writes (i.e. getBoundingClientRect() below).
	    var headerHeight = header.offsetHeight;
	    // Update the header position.
	    if (!this.hasScrollingRegion) {
	      requestAnimationFrame(function() {
	        var rect = this.getBoundingClientRect();
	        var rightOffset = document.documentElement.clientWidth - rect.right;
	        header.style.left = rect.left + 'px';
	        header.style.right = rightOffset + 'px';
	      }.bind(this));
	    } else {
	      header.style.left = '';
	      header.style.right = '';
	    }
	    // Update the content container position.
	    var containerStyle = this.$.contentContainer.style;
	    if (header.fixed && !header.condenses && this.hasScrollingRegion) {
	      // If the header size does not change and we're using a scrolling region,
	      // exclude the header area from the scrolling region so that the header
	      // doesn't overlap the scrollbar.
	      containerStyle.marginTop = headerHeight + 'px';
	      containerStyle.paddingTop = '';
	    } else {
	      containerStyle.paddingTop = headerHeight + 'px';
	      containerStyle.marginTop = '';
	    }
	  }
	});

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * `Polymer.IronScrollTargetBehavior` allows an element to respond to scroll
	 * events from a designated scroll target.
	 *
	 * Elements that consume this behavior can override the `_scrollHandler`
	 * method to add logic on the scroll event.
	 *
	 * @demo demo/scrolling-region.html Scrolling Region
	 * @demo demo/document.html Document Element
	 * @polymerBehavior
	 */
	const IronScrollTargetBehavior = {

	  properties: {

	    /**
	     * Specifies the element that will handle the scroll event
	     * on the behalf of the current element. This is typically a reference to an
	     *element, but there are a few more posibilities:
	     *
	     * ### Elements id
	     *
	     *```html
	     * <div id="scrollable-element" style="overflow: auto;">
	     *  <x-element scroll-target="scrollable-element">
	     *    <!-- Content-->
	     *  </x-element>
	     * </div>
	     *```
	     * In this case, the `scrollTarget` will point to the outer div element.
	     *
	     * ### Document scrolling
	     *
	     * For document scrolling, you can use the reserved word `document`:
	     *
	     *```html
	     * <x-element scroll-target="document">
	     *   <!-- Content -->
	     * </x-element>
	     *```
	     *
	     * ### Elements reference
	     *
	     *```js
	     * appHeader.scrollTarget = document.querySelector('#scrollable-element');
	     *```
	     *
	     * @type {HTMLElement}
	     * @default document
	     */
	    scrollTarget: {
	      type: HTMLElement,
	      value: function() {
	        return this._defaultScrollTarget;
	      }
	    }
	  },

	  observers: ['_scrollTargetChanged(scrollTarget, isAttached)'],

	  /**
	   * True if the event listener should be installed.
	   */
	  _shouldHaveListener: true,

	  _scrollTargetChanged: function(scrollTarget, isAttached) {

	    if (this._oldScrollTarget) {
	      this._toggleScrollListener(false, this._oldScrollTarget);
	      this._oldScrollTarget = null;
	    }
	    if (!isAttached) {
	      return;
	    }
	    // Support element id references
	    if (scrollTarget === 'document') {
	      this.scrollTarget = this._doc;

	    } else if (typeof scrollTarget === 'string') {
	      var domHost = this.domHost;

	      this.scrollTarget = domHost && domHost.$ ?
	          domHost.$[scrollTarget] :
	          dom(this.ownerDocument).querySelector('#' + scrollTarget);

	    } else if (this._isValidScrollTarget()) {
	      this._oldScrollTarget = scrollTarget;
	      this._toggleScrollListener(this._shouldHaveListener, scrollTarget);
	    }
	  },

	  /**
	   * Runs on every scroll event. Consumer of this behavior may override this
	   * method.
	   *
	   * @protected
	   */
	  _scrollHandler: function scrollHandler() {},

	  /**
	   * The default scroll target. Consumers of this behavior may want to customize
	   * the default scroll target.
	   *
	   * @type {Element}
	   */
	  get _defaultScrollTarget() {
	    return this._doc;
	  },

	  /**
	   * Shortcut for the document element
	   *
	   * @type {Element}
	   */
	  get _doc() {
	    return this.ownerDocument.documentElement;
	  },

	  /**
	   * Gets the number of pixels that the content of an element is scrolled
	   * upward.
	   *
	   * @type {number}
	   */
	  get _scrollTop() {
	    if (this._isValidScrollTarget()) {
	      return this.scrollTarget === this._doc ? window.pageYOffset :
	                                               this.scrollTarget.scrollTop;
	    }
	    return 0;
	  },

	  /**
	   * Gets the number of pixels that the content of an element is scrolled to the
	   * left.
	   *
	   * @type {number}
	   */
	  get _scrollLeft() {
	    if (this._isValidScrollTarget()) {
	      return this.scrollTarget === this._doc ? window.pageXOffset :
	                                               this.scrollTarget.scrollLeft;
	    }
	    return 0;
	  },

	  /**
	   * Sets the number of pixels that the content of an element is scrolled
	   * upward.
	   *
	   * @type {number}
	   */
	  set _scrollTop(top) {
	    if (this.scrollTarget === this._doc) {
	      window.scrollTo(window.pageXOffset, top);
	    } else if (this._isValidScrollTarget()) {
	      this.scrollTarget.scrollTop = top;
	    }
	  },

	  /**
	   * Sets the number of pixels that the content of an element is scrolled to the
	   * left.
	   *
	   * @type {number}
	   */
	  set _scrollLeft(left) {
	    if (this.scrollTarget === this._doc) {
	      window.scrollTo(left, window.pageYOffset);
	    } else if (this._isValidScrollTarget()) {
	      this.scrollTarget.scrollLeft = left;
	    }
	  },

	  /**
	   * Scrolls the content to a particular place.
	   *
	   * @method scroll
	   * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options
	   * @param {number=} top The top position
	   * @return {void}
	   */
	  scroll: function(leftOrOptions, top) {
	    var left;

	    if (typeof leftOrOptions === 'object') {
	      left = leftOrOptions.left;
	      top = leftOrOptions.top;
	    } else {
	      left = leftOrOptions;
	    }

	    left = left || 0;
	    top = top || 0;
	    if (this.scrollTarget === this._doc) {
	      window.scrollTo(left, top);
	    } else if (this._isValidScrollTarget()) {
	      this.scrollTarget.scrollLeft = left;
	      this.scrollTarget.scrollTop = top;
	    }
	  },

	  /**
	   * Gets the width of the scroll target.
	   *
	   * @type {number}
	   */
	  get _scrollTargetWidth() {
	    if (this._isValidScrollTarget()) {
	      return this.scrollTarget === this._doc ? window.innerWidth :
	                                               this.scrollTarget.offsetWidth;
	    }
	    return 0;
	  },

	  /**
	   * Gets the height of the scroll target.
	   *
	   * @type {number}
	   */
	  get _scrollTargetHeight() {
	    if (this._isValidScrollTarget()) {
	      return this.scrollTarget === this._doc ? window.innerHeight :
	                                               this.scrollTarget.offsetHeight;
	    }
	    return 0;
	  },

	  /**
	   * Returns true if the scroll target is a valid HTMLElement.
	   *
	   * @return {boolean}
	   */
	  _isValidScrollTarget: function() {
	    return this.scrollTarget instanceof HTMLElement;
	  },

	  _toggleScrollListener: function(yes, scrollTarget) {
	    var eventTarget = scrollTarget === this._doc ? window : scrollTarget;
	    if (yes) {
	      if (!this._boundScrollHandler) {
	        this._boundScrollHandler = this._scrollHandler.bind(this);
	        eventTarget.addEventListener('scroll', this._boundScrollHandler);
	      }
	    } else {
	      if (this._boundScrollHandler) {
	        eventTarget.removeEventListener('scroll', this._boundScrollHandler);
	        this._boundScrollHandler = null;
	      }
	    }
	  },

	  /**
	   * Enables or disables the scroll event listener.
	   *
	   * @param {boolean} yes True to add the event, False to remove it.
	   */
	  toggleScrollListener: function(yes) {
	    this._shouldHaveListener = yes;
	    this._toggleScrollListener(yes, this.scrollTarget);
	  }

	};

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	const _scrollEffects = {};

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * `Polymer.AppScrollEffectsBehavior` provides an interface that allows an
	 * element to use scrolls effects.
	 *
	 * ### Importing the app-layout effects
	 *
	 * app-layout provides a set of scroll effects that can be used by explicitly
	 * importing `app-scroll-effects.js`:
	 *
	 * ```js
	 * import '@polymer/app-layout/app-scroll-effects/app-scroll-effects.js';
	 * ```
	 *
	 * The scroll effects can also be used by individually importing
	 * `@polymer/app-layout/app-scroll-effects/effects/[effectName].js`. For
	 * example:
	 *
	 * ```js
	 * import '@polymer/app-layout/app-scroll-effects/effects/waterfall.js';
	 * ```
	 *
	 * ### Consuming effects
	 *
	 * Effects can be consumed via the `effects` property. For example:
	 *
	 * ```html
	 * <app-header effects="waterfall"></app-header>
	 * ```
	 *
	 * ### Creating scroll effects
	 *
	 * You may want to create a custom scroll effect if you need to modify the CSS
	 * of an element based on the scroll position.
	 *
	 * A scroll effect definition is an object with `setUp()`, `tearDown()` and
	 * `run()` functions.
	 *
	 * To register the effect, you can use
	 * `Polymer.AppLayout.registerEffect(effectName, effectDef)` For example, let's
	 * define an effect that resizes the header's logo:
	 *
	 * ```js
	 * Polymer.AppLayout.registerEffect('resizable-logo', {
	 *   setUp: function(config) {
	 *     // the effect's config is passed to the setUp.
	 *     this._fxResizeLogo = { logo: Polymer.dom(this).querySelector('[logo]') };
	 *   },
	 *
	 *   run: function(progress) {
	 *      // the progress of the effect
	 *      this.transform('scale3d(' + progress + ', '+ progress +', 1)',
	 * this._fxResizeLogo.logo);
	 *   },
	 *
	 *   tearDown: function() {
	 *      // clean up and reset of states
	 *      delete this._fxResizeLogo;
	 *   }
	 * });
	 * ```
	 * Now, you can consume the effect:
	 *
	 * ```html
	 * <app-header id="appHeader" effects="resizable-logo">
	 *   <img logo src="logo.svg">
	 * </app-header>
	 * ```
	 *
	 * ### Imperative API
	 *
	 * ```js
	 * var logoEffect = appHeader.createEffect('resizable-logo', effectConfig);
	 * // run the effect: logoEffect.run(progress);
	 * // tear down the effect: logoEffect.tearDown();
	 * ```
	 *
	 * ### Configuring effects
	 *
	 * For effects installed via the `effects` property, their configuration can be
	 * set via the `effectsConfig` property. For example:
	 *
	 * ```html
	 * <app-header effects="waterfall"
	 *   effects-config='{"waterfall": {"startsAt": 0, "endsAt": 0.5}}'>
	 * </app-header>
	 * ```
	 *
	 * All effects have a `startsAt` and `endsAt` config property. They specify at
	 * what point the effect should start and end. This value goes from 0 to 1
	 * inclusive.
	 *
	 * @polymerBehavior
	 */
	const AppScrollEffectsBehavior = [
	  IronScrollTargetBehavior,
	  {

	    properties: {

	      /**
	       * A space-separated list of the effects names that will be triggered when
	       * the user scrolls. e.g. `waterfall parallax-background` installs the
	       * `waterfall` and `parallax-background`.
	       */
	      effects: {type: String},

	      /**
	       * An object that configurates the effects installed via the `effects`
	       * property. e.g.
	       * ```js
	       *  element.effectsConfig = {
	       *   "blend-background": {
	       *     "startsAt": 0.5
	       *   }
	       * };
	       * ```
	       * Every effect has at least two config properties: `startsAt` and
	       * `endsAt`. These properties indicate when the event should start and end
	       * respectively and relative to the overall element progress. So for
	       * example, if `blend-background` starts at `0.5`, the effect will only
	       * start once the current element reaches 0.5 of its progress. In this
	       * context, the progress is a value in the range of `[0, 1]` that
	       * indicates where this element is on the screen relative to the viewport.
	       */
	      effectsConfig: {
	        type: Object,
	        value: function() {
	          return {};
	        }
	      },

	      /**
	       * Disables CSS transitions and scroll effects on the element.
	       */
	      disabled: {type: Boolean, reflectToAttribute: true, value: false},

	      /**
	       * Allows to set a `scrollTop` threshold. When greater than 0,
	       * `thresholdTriggered` is true only when the scroll target's `scrollTop`
	       * has reached this value.
	       *
	       * For example, if `threshold = 100`, `thresholdTriggered` is true when
	       * the `scrollTop` is at least `100`.
	       */
	      threshold: {type: Number, value: 0},

	      /**
	       * True if the `scrollTop` threshold (set in `scrollTopThreshold`) has
	       * been reached.
	       */
	      thresholdTriggered: {
	        type: Boolean,
	        notify: true,
	        readOnly: true,
	        reflectToAttribute: true
	      }
	    },

	    observers: ['_effectsChanged(effects, effectsConfig, isAttached)'],

	    /**
	     * Updates the scroll state. This method should be overridden
	     * by the consumer of this behavior.
	     *
	     * @method _updateScrollState
	     * @param {number} scrollTop
	     */
	    _updateScrollState: function(scrollTop) {},

	    /**
	     * Returns true if the current element is on the screen.
	     * That is, visible in the current viewport. This method should be
	     * overridden by the consumer of this behavior.
	     *
	     * @method isOnScreen
	     * @return {boolean}
	     */
	    isOnScreen: function() {
	      return false;
	    },

	    /**
	     * Returns true if there's content below the current element. This method
	     * should be overridden by the consumer of this behavior.
	     *
	     * @method isContentBelow
	     * @return {boolean}
	     */
	    isContentBelow: function() {
	      return false;
	    },

	    /**
	     * List of effects handlers that will take place during scroll.
	     *
	     * @type {Array<Function>}
	     */
	    _effectsRunFn: null,

	    /**
	     * List of the effects definitions installed via the `effects` property.
	     *
	     * @type {Array<Object>}
	     */
	    _effects: null,

	    /**
	     * The clamped value of `_scrollTop`.
	     * @type number
	     */
	    get _clampedScrollTop() {
	      return Math.max(0, this._scrollTop);
	    },

	    detached: function() {
	      this._tearDownEffects();
	    },

	    /**
	     * Creates an effect object from an effect's name that can be used to run
	     * effects programmatically.
	     *
	     * @method createEffect
	     * @param {string} effectName The effect's name registered via `Polymer.AppLayout.registerEffect`.
	     * @param {Object=} effectConfig The effect config object. (Optional)
	     * @return {Object} An effect object with the following functions:
	     *
	     *  * `effect.setUp()`, Sets up the requirements for the effect.
	     *       This function is called automatically before the `effect` function
	     * returns.
	     *  * `effect.run(progress, y)`, Runs the effect given a `progress`.
	     *  * `effect.tearDown()`, Cleans up any DOM nodes or element references
	     * used by the effect.
	     *
	     * Example:
	     * ```js
	     * var parallax = element.createEffect('parallax-background');
	     * // runs the effect
	     * parallax.run(0.5, 0);
	     * ```
	     */
	    createEffect: function(effectName, effectConfig) {
	      var effectDef = _scrollEffects[effectName];
	      if (!effectDef) {
	        throw new ReferenceError(this._getUndefinedMsg(effectName));
	      }
	      var prop = this._boundEffect(effectDef, effectConfig || {});
	      prop.setUp();
	      return prop;
	    },

	    /**
	     * Called when `effects` or `effectsConfig` changes.
	     */
	    _effectsChanged: function(effects, effectsConfig, isAttached) {
	      this._tearDownEffects();

	      if (!effects || !isAttached) {
	        return;
	      }
	      effects.split(' ').forEach(function(effectName) {
	        var effectDef;
	        if (effectName !== '') {
	          if ((effectDef = _scrollEffects[effectName])) {
	            this._effects.push(
	                this._boundEffect(effectDef, effectsConfig[effectName]));
	          } else {
	            console.warn(this._getUndefinedMsg(effectName));
	          }
	        }
	      }, this);

	      this._setUpEffect();
	    },

	    /**
	     * Forces layout
	     */
	    _layoutIfDirty: function() {
	      return this.offsetWidth;
	    },

	    /**
	     * Returns an effect object bound to the current context.
	     *
	     * @param {Object} effectDef
	     * @param {Object=} effectsConfig The effect config object if the effect accepts config values. (Optional)
	     */
	    _boundEffect: function(effectDef, effectsConfig) {
	      effectsConfig = effectsConfig || {};
	      var startsAt = parseFloat(effectsConfig.startsAt || 0);
	      var endsAt = parseFloat(effectsConfig.endsAt || 1);
	      var deltaS = endsAt - startsAt;
	      var noop = function() {};
	      // fast path if possible
	      var runFn = (startsAt === 0 && endsAt === 1) ?
	          effectDef.run :
	          function(progress, y) {
	            effectDef.run.call(
	                this, Math.max(0, (progress - startsAt) / deltaS), y);
	          };
	      return {
	        setUp: effectDef.setUp ? effectDef.setUp.bind(this, effectsConfig) :
	                                 noop,
	        run: effectDef.run ? runFn.bind(this) : noop,
	        tearDown: effectDef.tearDown ? effectDef.tearDown.bind(this) : noop
	      };
	    },

	    /**
	     * Sets up the effects.
	     */
	    _setUpEffect: function() {
	      if (this.isAttached && this._effects) {
	        this._effectsRunFn = [];
	        this._effects.forEach(function(effectDef) {
	          // install the effect only if no error was reported
	          if (effectDef.setUp() !== false) {
	            this._effectsRunFn.push(effectDef.run);
	          }
	        }, this);
	      }
	    },

	    /**
	     * Tears down the effects.
	     */
	    _tearDownEffects: function() {
	      if (this._effects) {
	        this._effects.forEach(function(effectDef) {
	          effectDef.tearDown();
	        });
	      }
	      this._effectsRunFn = [];
	      this._effects = [];
	    },

	    /**
	     * Runs the effects.
	     *
	     * @param {number} p The progress
	     * @param {number} y The top position of the current element relative to the viewport.
	     */
	    _runEffects: function(p, y) {
	      if (this._effectsRunFn) {
	        this._effectsRunFn.forEach(function(run) {
	          run(p, y);
	        });
	      }
	    },

	    /**
	     * Overrides the `_scrollHandler`.
	     */
	    _scrollHandler: function() {
	      if (!this.disabled) {
	        var scrollTop = this._clampedScrollTop;
	        this._updateScrollState(scrollTop);
	        if (this.threshold > 0) {
	          this._setThresholdTriggered(scrollTop >= this.threshold);
	        }
	      }
	    },

	    /**
	     * Override this method to return a reference to a node in the local DOM.
	     * The node is consumed by a scroll effect.
	     *
	     * @param {string} id The id for the node.
	     */
	    _getDOMRef: function(id) {
	      console.warn('_getDOMRef', '`' + id + '` is undefined');
	    },

	    _getUndefinedMsg: function(effectName) {
	      return 'Scroll effect `' + effectName + '` is undefined. ' +
	          'Did you forget to import app-layout/app-scroll-effects/effects/' +
	          effectName + '.html ?';
	    }

	  }
	];

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	app-header is container element for app-toolbars at the top of the screen that
	can have scroll effects. By default, an app-header moves away from the viewport
	when scrolling down and if using `reveals`, the header slides back when
	scrolling back up. For example:

	```html
	<app-header reveals>
	  <app-toolbar>
	    <div main-title>App name</div>
	  </app-toolbar>
	</app-header>
	```

	app-header can also condense when scrolling down. To achieve this behavior, the
	header must have a larger height than the `sticky` element in the light DOM. For
	example:

	```html
	<app-header style="height: 96px;" condenses fixed>
	  <app-toolbar style="height: 64px;">
	    <div main-title>App name</div>
	  </app-toolbar>
	</app-header>
	```

	In this case the header is initially `96px` tall, and it shrinks to `64px` when
	scrolling down. That is what is meant by "condensing".

	### Sticky element

	The element that is positioned fixed to top of the header's `scrollTarget` when
	a threshold is reached, similar to `position: sticky` in CSS. This element
	**must** be an immediate child of app-header. By default, the `sticky` element
	is the first `app-toolbar that is an immediate child of app-header.

	```html
	<app-header condenses>
	  <app-toolbar> Sticky element </app-toolbar>
	</app-header>
	```

	#### Customizing the sticky element

	```html
	<app-header condenses>
	  <app-toolbar></app-toolbar>
	  <app-toolbar sticky> Sticky element </app-toolbar>
	</app-header>
	```

	### Scroll target

	The app-header's `scrollTarget` property allows to customize the scrollable
	element to which the header responds when the user scrolls. By default,
	app-header uses the document as the scroll target, but you can customize this
	property by setting the id of the element, e.g.

	```html
	<div id="scrollingRegion" style="overflow-y: auto;">
	  <app-header scroll-target="scrollingRegion">
	  </app-header>
	</div>
	```

	In this case, the `scrollTarget` property points to the outer div element.
	Alternatively, you can set this property programmatically:

	```js
	appHeader.scrollTarget = document.querySelector("#scrollingRegion");
	```

	## Backgrounds
	app-header has two background layers that can be used for styling when the
	header is condensed or when the scrollable element is scrolled to the top.

	## Scroll effects

	Scroll effects are _optional_ visual effects applied in app-header based on
	scroll position. For example, The [Material Design scrolling
	techniques](https://www.google.com/design/spec/patterns/scrolling-techniques.html)
	recommends effects that can be installed via the `effects` property. e.g.

	```html
	<app-header effects="waterfall">
	  <app-toolbar>App name</app-toolbar>
	</app-header>
	```

	#### Importing the effects

	To use the scroll effects, you must explicitly import them in addition to
	`app-header`:

	```js
	import '@polymer/app-layout/app-scroll-effects/app-scroll-effects.js';
	```

	#### List of effects

	* **blend-background**
	Fades in/out two background elements by applying CSS opacity based on scroll
	position. You can use this effect to smoothly change the background color or
	image of the header. For example, using the mixin
	`--app-header-background-rear-layer` lets you assign a different background when
	the header is condensed:

	```css
	app-header {
	  background-color: red;
	  --app-header-background-rear-layer: {
	    /* The header is blue when condensed *\/
	    background-color: blue;
	  };
	}
	```

	* **fade-background**
	Upon scrolling past a threshold, this effect will trigger an opacity transition
	to fade in/out the backgrounds. Compared to the `blend-background` effect, this
	effect doesn't interpolate the opacity based on scroll position.


	* **parallax-background**
	A simple parallax effect that vertically translates the backgrounds based on a
	fraction of the scroll position. For example:

	```css
	app-header {
	  --app-header-background-front-layer: {
	    background-image: url(...);
	  };
	}
	```
	```html
	<app-header style="height: 300px;" effects="parallax-background">
	  <app-toolbar>App name</app-toolbar>
	</app-header>
	```

	The fraction determines how far the background moves relative to the scroll
	position. This value can be assigned via the `scalar` config value and it is
	typically a value between 0 and 1 inclusive. If `scalar=0`, the background
	doesn't move away from the header.

	* **resize-title**
	Progressively interpolates the size of the title from the element with the
	`main-title` attribute to the element with the `condensed-title` attribute as
	the header condenses. For example:

	```html
	<app-header condenses reveals effects="resize-title">
	  <app-toolbar>
	      <h4 condensed-title>App name</h4>
	  </app-toolbar>
	  <app-toolbar>
	      <h1 main-title>App name</h1>
	  </app-toolbar>
	</app-header>
	```

	* **resize-snapped-title**
	Upon scrolling past a threshold, this effect fades in/out the titles using
	opacity transitions. Similarly to `resize-title`, the `main-title` and
	`condensed-title` elements must be placed in the light DOM.

	* **waterfall**
	Toggles the shadow property in app-header to create a sense of depth (as
	recommended in the MD spec) between the header and the underneath content. You
	can change the shadow by customizing the `--app-header-shadow` mixin. For
	example:

	```css
	app-header {
	  --app-header-shadow: {
	    box-shadow: inset 0px 5px 2px -3px rgba(0, 0, 0, 0.2);
	  };
	}
	```

	```html
	<app-header condenses reveals effects="waterfall">
	  <app-toolbar>
	      <h1 main-title>App name</h1>
	  </app-toolbar>
	</app-header>
	```

	* **material**
	Installs the waterfall, resize-title, blend-background and parallax-background
	effects.

	### Content attributes

	Attribute | Description         | Default
	----------|---------------------|----------------------------------------
	`sticky` | Element that remains at the top when the header condenses. | The first app-toolbar in the light DOM.


	## Styling

	Mixin | Description | Default
	------|-------------|----------
	`--app-header-background-front-layer` | Applies to the front layer of the background. | {}
	`--app-header-background-rear-layer` | Applies to the rear layer of the background. | {}
	`--app-header-shadow` | Applies to the shadow. | {}

	@group App Elements
	@element app-header
	@demo app-header/demo/blend-background-1.html Blend Background Image
	@demo app-header/demo/blend-background-2.html Blend 2 Background Images
	@demo app-header/demo/blend-background-3.html Blend Background Colors
	@demo app-header/demo/contacts.html Contacts Demo
	@demo app-header/demo/give.html Resize Snapped Title Demo
	@demo app-header/demo/music.html Reveals Demo
	@demo app-header/demo/no-effects.html Condenses and Reveals Demo
	@demo app-header/demo/notes.html Fixed with Dynamic Shadow Demo
	@demo app-header/demo/custom-sticky-element-1.html Custom Sticky Element Demo 1
	@demo app-header/demo/custom-sticky-element-2.html Custom Sticky Element Demo 2

	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        position: relative;
        display: block;
        transition-timing-function: linear;
        transition-property: -webkit-transform;
        transition-property: transform;
      }

      :host::before {
        position: absolute;
        right: 0px;
        bottom: -5px;
        left: 0px;
        width: 100%;
        height: 5px;
        content: "";
        transition: opacity 0.4s;
        pointer-events: none;
        opacity: 0;
        box-shadow: inset 0px 5px 6px -3px rgba(0, 0, 0, 0.4);
        will-change: opacity;
        @apply --app-header-shadow;
      }

      :host([shadow])::before {
        opacity: 1;
      }

      #background {
        @apply --layout-fit;
        overflow: hidden;
      }

      #backgroundFrontLayer,
      #backgroundRearLayer {
        @apply --layout-fit;
        height: 100%;
        pointer-events: none;
        background-size: cover;
      }

      #backgroundFrontLayer {
        @apply --app-header-background-front-layer;
      }

      #backgroundRearLayer {
        opacity: 0;
        @apply --app-header-background-rear-layer;
      }

      #contentContainer {
        position: relative;
        width: 100%;
        height: 100%;
      }

      :host([disabled]),
      :host([disabled])::after,
      :host([disabled]) #backgroundFrontLayer,
      :host([disabled]) #backgroundRearLayer,
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]),
      :host([silent-scroll])::after,
      :host([silent-scroll]) #backgroundFrontLayer,
      :host([silent-scroll]) #backgroundRearLayer {
        transition: none !important;
      }

      :host([disabled]) ::slotted(app-toolbar:first-of-type),
      :host([disabled]) ::slotted([sticky]),
      /* Silent scrolling should not run CSS transitions */
      :host([silent-scroll]) ::slotted(app-toolbar:first-of-type),
      :host([silent-scroll]) ::slotted([sticky]) {
        transition: none !important;
      }

    </style>
    <div id="contentContainer">
      <slot id="slot"></slot>
    </div>
`,

	  is: 'app-header',
	  behaviors: [AppScrollEffectsBehavior, AppLayoutBehavior],

	  properties: {
	    /**
	     * If true, the header will automatically collapse when scrolling down.
	     * That is, the `sticky` element remains visible when the header is fully
	     *condensed whereas the rest of the elements will collapse below `sticky`
	     *element.
	     *
	     * By default, the `sticky` element is the first toolbar in the light DOM:
	     *
	     *```html
	     * <app-header condenses>
	     *   <app-toolbar>This toolbar remains on top</app-toolbar>
	     *   <app-toolbar></app-toolbar>
	     *   <app-toolbar></app-toolbar>
	     * </app-header>
	     * ```
	     *
	     * Additionally, you can specify which toolbar or element remains visible in
	     *condensed mode by adding the `sticky` attribute to that element. For
	     *example: if we want the last toolbar to remain visible, we can add the
	     *`sticky` attribute to it.
	     *
	     *```html
	     * <app-header condenses>
	     *   <app-toolbar></app-toolbar>
	     *   <app-toolbar></app-toolbar>
	     *   <app-toolbar sticky>This toolbar remains on top</app-toolbar>
	     * </app-header>
	     * ```
	     *
	     * Note the `sticky` element must be a direct child of `app-header`.
	     */
	    condenses: {type: Boolean, value: false},

	    /**
	     * Mantains the header fixed at the top so it never moves away.
	     */
	    fixed: {type: Boolean, value: false},

	    /**
	     * Slides back the header when scrolling back up.
	     */
	    reveals: {type: Boolean, value: false},

	    /**
	     * Displays a shadow below the header.
	     */
	    shadow: {type: Boolean, reflectToAttribute: true, value: false}
	  },

	  observers: ['_configChanged(isAttached, condenses, fixed)'],

	  /**
	   * A cached offsetHeight of the current element.
	   *
	   * @type {number}
	   */
	  _height: 0,

	  /**
	   * The distance in pixels the header will be translated to when scrolling.
	   *
	   * @type {number}
	   */
	  _dHeight: 0,

	  /**
	   * The offsetTop of `_stickyEl`
	   *
	   * @type {number}
	   */
	  _stickyElTop: 0,

	  /**
	   * A reference to the element that remains visible when the header condenses.
	   *
	   * @type {HTMLElement}
	   */
	  _stickyElRef: null,

	  /**
	   * The header's top value used for the `transformY`
	   *
	   * @type {number}
	   */
	  _top: 0,

	  /**
	   * The current scroll progress.
	   *
	   * @type {number}
	   */
	  _progress: 0,

	  _wasScrollingDown: false,
	  _initScrollTop: 0,
	  _initTimestamp: 0,
	  _lastTimestamp: 0,
	  _lastScrollTop: 0,

	  /**
	   * The distance the header is allowed to move away.
	   *
	   * @type {number}
	   */
	  get _maxHeaderTop() {
	    return this.fixed ? this._dHeight : this._height + 5;
	  },

	  /**
	   * Returns a reference to the sticky element.
	   *
	   * @return {HTMLElement}?
	   */
	  get _stickyEl() {
	    if (this._stickyElRef) {
	      return this._stickyElRef;
	    }
	    var nodes = dom(this.$.slot).getDistributedNodes();
	    // Get the element with the sticky attribute on it or the first element in
	    // the light DOM.
	    for (var i = 0, node; node = /** @type {!HTMLElement} */ (nodes[i]); i++) {
	      if (node.nodeType === Node.ELEMENT_NODE) {
	        if (node.hasAttribute('sticky')) {
	          this._stickyElRef = node;
	          break;
	        } else if (!this._stickyElRef) {
	          this._stickyElRef = node;
	        }
	      }
	    }
	    return this._stickyElRef;
	  },

	  _configChanged: function() {
	    this.resetLayout();
	    this._notifyLayoutChanged();
	  },

	  _updateLayoutStates: function() {
	    if (this.offsetWidth === 0 && this.offsetHeight === 0) {
	      return;
	    }
	    var scrollTop = this._clampedScrollTop;
	    var firstSetup = this._height === 0 || scrollTop === 0;
	    var currentDisabled = this.disabled;
	    this._height = this.offsetHeight;
	    this._stickyElRef = null;
	    this.disabled = true;
	    // prepare for measurement
	    if (!firstSetup) {
	      this._updateScrollState(0, true);
	    }
	    if (this._mayMove()) {
	      this._dHeight =
	          this._stickyEl ? this._height - this._stickyEl.offsetHeight : 0;
	    } else {
	      this._dHeight = 0;
	    }
	    this._stickyElTop = this._stickyEl ? this._stickyEl.offsetTop : 0;
	    this._setUpEffect();
	    if (firstSetup) {
	      this._updateScrollState(scrollTop, true);
	    } else {
	      this._updateScrollState(this._lastScrollTop, true);
	      this._layoutIfDirty();
	    }
	    // restore no transition
	    this.disabled = currentDisabled;
	  },

	  /**
	   * Updates the scroll state.
	   *
	   * @param {number} scrollTop
	   * @param {boolean=} forceUpdate (default: false)
	   */
	  _updateScrollState: function(scrollTop, forceUpdate) {
	    if (this._height === 0) {
	      return;
	    }
	    var progress = 0;
	    var top = 0;
	    var lastTop = this._top;
	    var lastScrollTop = this._lastScrollTop;
	    var maxHeaderTop = this._maxHeaderTop;
	    var dScrollTop = scrollTop - this._lastScrollTop;
	    var absDScrollTop = Math.abs(dScrollTop);
	    var isScrollingDown = scrollTop > this._lastScrollTop;
	    var now = performance.now();

	    if (this._mayMove()) {
	      top = this._clamp(
	          this.reveals ? lastTop + dScrollTop : scrollTop, 0, maxHeaderTop);
	    }
	    if (scrollTop >= this._dHeight) {
	      top = this.condenses && !this.fixed ? Math.max(this._dHeight, top) : top;
	      this.style.transitionDuration = '0ms';
	    }
	    if (this.reveals && !this.disabled && absDScrollTop < 100) {
	      // set the initial scroll position
	      if (now - this._initTimestamp > 300 ||
	          this._wasScrollingDown !== isScrollingDown) {
	        this._initScrollTop = scrollTop;
	        this._initTimestamp = now;
	      }
	      if (scrollTop >= maxHeaderTop) {
	        // check if the header is allowed to snap
	        if (Math.abs(this._initScrollTop - scrollTop) > 30 ||
	            absDScrollTop > 10) {
	          if (isScrollingDown && scrollTop >= maxHeaderTop) {
	            top = maxHeaderTop;
	          } else if (!isScrollingDown && scrollTop >= this._dHeight) {
	            top = this.condenses && !this.fixed ? this._dHeight : 0;
	          }
	          var scrollVelocity = dScrollTop / (now - this._lastTimestamp);
	          this.style.transitionDuration =
	              this._clamp((top - lastTop) / scrollVelocity, 0, 300) + 'ms';
	        } else {
	          top = this._top;
	        }
	      }
	    }
	    if (this._dHeight === 0) {
	      progress = scrollTop > 0 ? 1 : 0;
	    } else {
	      progress = top / this._dHeight;
	    }
	    if (!forceUpdate) {
	      this._lastScrollTop = scrollTop;
	      this._top = top;
	      this._wasScrollingDown = isScrollingDown;
	      this._lastTimestamp = now;
	    }
	    if (forceUpdate || progress !== this._progress || lastTop !== top ||
	        scrollTop === 0) {
	      this._progress = progress;
	      this._runEffects(progress, top);
	      this._transformHeader(top);
	    }
	  },

	  /**
	   * Returns true if the current header is allowed to move as the user scrolls.
	   *
	   * @return {boolean}
	   */
	  _mayMove: function() {
	    return this.condenses || !this.fixed;
	  },

	  /**
	   * Returns true if the current header will condense based on the size of the
	   * header and the `consenses` property.
	   *
	   * @return {boolean}
	   */
	  willCondense: function() {
	    return this._dHeight > 0 && this.condenses;
	  },

	  /**
	   * Returns true if the current element is on the screen.
	   * That is, visible in the current viewport.
	   *
	   * @method isOnScreen
	   * @return {boolean}
	   */
	  isOnScreen: function() {
	    return this._height !== 0 && this._top < this._height;
	  },

	  /**
	   * Returns true if there's content below the current element.
	   *
	   * @method isContentBelow
	   * @return {boolean}
	   */
	  isContentBelow: function() {
	    return this._top === 0 ? this._clampedScrollTop > 0 :
	                             this._clampedScrollTop - this._maxHeaderTop >= 0;
	  },

	  /**
	   * Transforms the header.
	   *
	   * @param {number} y
	   */
	  _transformHeader: function(y) {
	    this.translate3d(0, (-y) + 'px', 0);
	    if (this._stickyEl) {
	      this.translate3d(
	          0,
	          this.condenses && y >= this._stickyElTop ?
	              (Math.min(y, this._dHeight) - this._stickyElTop) + 'px' :
	              0,
	          0,
	          this._stickyEl);
	    }
	  },

	  _clamp: function(v, min, max) {
	    return Math.min(max, Math.max(min, v));
	  },

	  _ensureBgContainers: function() {
	    if (!this._bgContainer) {
	      this._bgContainer = document.createElement('div');
	      this._bgContainer.id = 'background';
	      this._bgRear = document.createElement('div');
	      this._bgRear.id = 'backgroundRearLayer';
	      this._bgContainer.appendChild(this._bgRear);
	      this._bgFront = document.createElement('div');
	      this._bgFront.id = 'backgroundFrontLayer';
	      this._bgContainer.appendChild(this._bgFront);
	      dom(this.root).insertBefore(this._bgContainer, this.$.contentContainer);
	    }
	  },

	  _getDOMRef: function(id) {
	    switch (id) {
	      case 'backgroundFrontLayer':
	        this._ensureBgContainers();
	        return this._bgFront;
	      case 'backgroundRearLayer':
	        this._ensureBgContainers();
	        return this._bgRear;
	      case 'background':
	        this._ensureBgContainers();
	        return this._bgContainer;
	      case 'mainTitle':
	        return dom(this).querySelector('[main-title]');
	      case 'condensedTitle':
	        return dom(this).querySelector('[condensed-title]');
	    }
	    return null;
	  },

	  /**
	   * Returns an object containing the progress value of the scroll effects
	   * and the top position of the header.
	   *
	   * @method getScrollState
	   * @return {Object}
	   */
	  getScrollState: function() {
	    return {progress: this._progress, top: this._top};
	  }
	});

	// VIEWS

	const VIEW_HOME = 'home';
	const VIEW_CONTACT = 'contact';
	const VIEW_CHALLENGES = 'challenges';
	const VIEW_CHALLENGE = 'challenge';
	const VIEW_404 = '404';

	var navStyle = (css="app-header-layout%7Bz-index%3A9999%7D.nav%7Bbackground-color%3Avar(--darkest)%3Bbox-shadow%3A0%200px%202px%20var(--darker)%7D.nav%20iron-selector%7Bdisplay%3Aflex%3Bjustify-content%3Acenter%7D.link%7Bpadding%3A10px%2020px%3Btext-decoration%3Anone%3Bcolor%3Avar(--lighter)%3Btext-transform%3Auppercase%3Bdisplay%3Aflex%3Balign-items%3Acenter%3Bjustify-content%3Acenter%7D.link.iron-selected%7Bbackground-color%3Avar(--lighter)%3Bcolor%3Avar(--darkest)%7Diron-icon%7Bmargin-right%3A5px%7D%40media%20only%20screen%20and%20(max-width%3A%20750px)%7Bapp-header-layout%7B--layout-fixed-top_-_top%3A%20calc(100%25%20%2B%205px)%7D.nav%7Bbottom%3A0%3Btop%3Ainitial%3Bflex-direction%3Arow%7D.link%7Bflex%3A1%3Bpadding%3A10px%2010px%3Bdisplay%3Aflex%3Bflex-direction%3Acolumn%3Balign-items%3Acenter%7D%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	navStyle()('nav-styles');

	class Nav extends PolymerElement {
	    static get template() {
	        return html`
      <style include="common-styles nav-styles">
      </style>
      <app-header-layout>
        <app-header slot="header" reveals effects="waterfall">
            <nav class="nav">
                <iron-selector selected="[[page]]" attr-for-selected="name">
                  <a name="[[routes.home.name]]" href="[[routes.home.path]]" class="link">
                    <iron-icon icon="home"></iron-icon>
                    [[routes.home.name]]
                  </a>
                  <a name="[[routes.contact.name]]" href="[[routes.contact.path]]" class="link">
                    <iron-icon icon="mail"></iron-icon>
                    [[routes.contact.name]]
                  </a>
                  <a name="[[routes.challenges.name]]" href="[[routes.challenges.path]]" class="link">
                    <iron-icon icon="receipt"></iron-icon>
                    [[routes.challenges.name]]
                  </a>
                </iron-selector>            
            </nav>
        </app-header>
      </app-header-layout>
    `
	    }

	    static get properties() {
	        return {
	            routes: {
	                type: Object,
	                notify: true,
	                value() {
	                    return {
	                        [VIEW_HOME]: {
	                            name: VIEW_HOME,
	                            path: `#/${VIEW_HOME}`
	                        },
	                        [VIEW_CONTACT]: {
	                            name: VIEW_CONTACT,
	                            path: `#/${VIEW_CONTACT}`
	                        },
	                        [VIEW_CHALLENGES]: {
	                            name: VIEW_CHALLENGES,
	                            path: `#/${VIEW_CHALLENGES}`
	                        },
	                    }
	                }
	            },
	        }
	    }
	}

	customElements.define('my-nav', Nav);

	class MyApp extends PolymerElement {
	    static get template() {
	        return html`
        <style include="common-styles">
            :host {
                --top-spacing: 40px;
            }
        
            .content {
                position: absolute;
                top: var(--top-spacing);
                left: 50%;
                transform: translateX(-50%);
                height: calc(100% - var(--top-spacing));
                width: 100%;
                max-width: 1020px;
            }
            .content__wrapper {
                width: 100%;
                height: 100%;
                background-color: var(--lighter);
                color: var(--darkest);
            }
            
            @media only screen and (max-width: 750px) {
                .content {
                    --top-spacing: 0px;                                      
                    height: calc(100% - 60px);
                    padding-bottom: 60px;  
                }
            }
        </style>
        <app-location route="{{route}}" use-hash-as-path></app-location>
        <app-route
          route="{{route}}"
          pattern="/:view"
          data="{{routeData}}"
          tail="{{subroute}}"></app-route>
          <app-route
            route="{{subroute}}"
            pattern="/:id"
            data="{{subrouteData}}">
          </app-route>
        
        <my-nav page$="{{page}}"></my-nav>
        
        <div class="content__wrapper">
          <div class="content">
            <iron-pages selected="[[page]]" attr-for-selected="name" role="main">
                <my-home name="home"></my-home>
                <my-contact name="contact"></my-contact>
                <my-challenges name="challenges"></my-challenges>
                <my-challenge name="challenge" params="{{subrouteData}}"></my-challenge>
            </iron-pages>        
          </div>        
        </div>
    `
	    }

	    static get properties() {
	        return {
	            page: {
	                type: String,
	                reflectToAttribute: true,
	                observer: '_pageChanged',
	                notify: true,
	            },
	            routeData: Object,
	            subroute: Object,
	            subrouteData: Object
	        }
	    }

	    static get observers() {
	        return [
	            '_routePageChanged(routeData.view)'
	        ]
	    }

	    _routePageChanged(page) {
	        if (!page) {
	            this.page = VIEW_HOME;
	        } else if ([VIEW_HOME, VIEW_CONTACT, VIEW_CHALLENGES, VIEW_CHALLENGE].includes(page)) {
	            this.page = page;
	        } else {
	            this.page = VIEW_404;
	        }
	    }

	    _pageChanged(page) {
	        switch(page){
	        case VIEW_HOME:
	                Promise.resolve().then(function () { return home; });
	            break
	        case VIEW_CONTACT:
	                Promise.resolve().then(function () { return contact; });
	            break
	        case VIEW_CHALLENGES:
	                Promise.resolve().then(function () { return challenges; });
	            break
	        case VIEW_CHALLENGE:
	                Promise.resolve().then(function () { return challenge; });
	            break
	        }
	    }
	}

	customElements.define('my-app', MyApp);

	var homeStyle = (css="%3Ahost%7B--grid-row-start%3A%201%3B--grid-row-end%3A%204%3B--grid-column-start%3A%201%3B--grid-column-end%3A%202%3B--grid-template-columns%3A%20220px%201fr%3B--grid-template-rows%3A%2080px%2035px%2035px%3B--presentation-width%3A%2070%25%3B--presentation-social-wrap%3A%20nowrap%3B--presentation-social-item-margin-bottom%3A%200%3B--presentation-social-item-border-width%3A%200%3B--presentation-social-item-padding%3A%200%2010px%202px%202px%3B--presentation-social-item-margin%3A%20-5px%2010px%203px%3B--stack-template-columns%3A%201fr%201fr%201fr%201fr%201fr%201fr%7Dh1%2Ch3%7Bfont-weight%3A300%7Dmy-logo%7B--logo-color%3A%20var(--darker)%7Dmy-svg%7B--icon-color%3A%20var(--darker)%3B--icon-size%3A%2065px%7D.container%7Bdisplay%3Agrid%3Bgrid-template-columns%3A1fr%3Bgrid-template-rows%3A1fr%20200px%7D.presentation%7Bdisplay%3Agrid%3Bgrid-template-columns%3Avar(--grid-template-columns)%3Bgrid-template-rows%3Avar(--grid-template-rows)%3Bwidth%3Avar(--presentation-width)%7D.presentation__logo%7Bdisplay%3Aflex%3Balign-items%3Acenter%3Bjustify-content%3Acenter%3Bgrid-row-start%3Avar(--grid-row-start)%3Bgrid-row-end%3Avar(--grid-row-end)%3Bgrid-column-start%3Avar(--grid-column-start)%3Bgrid-column-end%3Avar(--grid-column-end)%7D.presentation__name%7Bmargin-bottom%3A0%7D.presentation__desc%7Bmargin-top%3A0%7D.presentation__wrapper%7Bdisplay%3Aflex%3Balign-items%3Acenter%3Bjustify-content%3Acenter%3Bmin-height%3A300px%7D.presentation__institution%7Btext-decoration%3Anone%3Bcolor%3Avar(--darker)%7D.presentation__social%7Bdisplay%3Aflex%3Bjustify-content%3Aspace-around%3Bflex-wrap%3Avar(--presentation-social-wrap)%7D.presentation__social-item%7Bdisplay%3Aflex%3Balign-items%3Acenter%3Bjustify-content%3Acenter%3Btext-decoration%3Anone%3Bcolor%3Avar(--darker)%3Bmargin-bottom%3Avar(--presentation-social-item-margin-bottom)%7D.presentation__social-item%3Ahover%20.presentation__social-item-text%3Abefore%7B--presentation-social-item-border-width%3A%20100%25%7D.presentation__social-item%20my-svg%7B--icon-size%3A%2020px%7D.presentation__social-item-text%7Bdisplay%3Ainline-block%3Bposition%3Arelative%3Btext-transform%3Acapitalize%3Bpadding%3Avar(--presentation-social-item-padding)%3Bmargin%3Avar(--presentation-social-item-margin)%7D.presentation__social-item-text%3Abefore%7Bcontent%3A'%20'%3Bposition%3Aabsolute%3Bborder-bottom%3A1px%20solid%3Bbottom%3A0%3Bleft%3A50%25%3Btransform%3AtranslateX(-50%25)%3Btransition%3Aall%200.3s%20cubic-bezier(0.17%2C%200.67%2C%200.83%2C%200.67)%3Bwidth%3Avar(--presentation-social-item-border-width)%7D.stack%7Bpadding-bottom%3A10px%7D.stack__header%7Btext-align%3Acenter%7D.stack__technologies%7Bdisplay%3Agrid%3Bgrid-template-columns%3Avar(--stack-template-columns)%7D.stack__technologies-item%7Bdisplay%3Aflex%3Bflex-direction%3Acolumn%3Balign-items%3Acenter%3Bjustify-content%3Acenter%7D.stack__technologies-item__header%7Btext-transform%3Acapitalize%7D%40media%20only%20screen%20and%20(max-width%3A%20750px)%7B.presentation%7B--grid-template-columns%3A%201fr%3B--grid-template-rows%3A%20160px%201fr%201fr%3B--presentation-width%3A%2080%25%7D.presentation__social%7B--presentation-social-wrap%3A%20wrap%3B--presentation-social-item-margin-bottom%3A%2010px%7D.presentation__name%2C.presentation__desc%7Bpadding-top%3A15px%3Btext-align%3Acenter%7D.presentation__social-item%7B--presentation-social-item-margin%3A%20-5px%205px%200px%3B--presentation-social-item-padding%3A%200%205px%202px%202px%7Dmy-logo%7B--grid-row-start%3A%201%3B--grid-row-end%3A%202%3B--grid-column-start%3A%201%3B--grid-column-end%3A%202%7Dmy-svg%7B--icon-size%3A%2050px%7D.stack__technologies%7B--stack-template-columns%3A%201fr%201fr%201fr%201fr%7D%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	class Logo extends PolymerElement {
	    static get template() {
	        return html`
      <style>
        :host {
          --logo-color: black;
          --logo-scale: 1;
          --logo-opacity: 1;
          --logo-animation-delay: 0s;
          --logo-animation-duration: 0.75s;
          --logo-initial-top: 0px;
        }
      
        .container {
          position: relative;
          display: inline-block;
          width: 130px;
          height: 130px;
        }
        
        .container:hover svg {
          animation-name: bounce;
          animation-duration: var(--logo-animation-duration);
          animation-delay: var(--logo-animation-delay);
        }
        
        .container:hover svg:nth-child(4) {
          --logo-animation-delay: 0.15s;
        }
        
        .container:hover svg:nth-child(3) {
          --logo-animation-delay: 0.3s;
        }
        
        .container:hover svg:nth-child(2) {
          --logo-animation-delay: 0.45s;
        }
        
        .container:hover svg:nth-child(1) {
          --logo-animation-delay: 0.6s;
        }
        
        svg {
          height: 86.062%;
          width: 100%;
          transform: skewX(16deg) rotate(-35deg) scale(var(--logo-scale));
          position: absolute;
          opacity: var(--logo-opacity);
          transition: all ease-in var(--logo-animation-duration);
          top: var(--logo-initial-top);
        }
        
        svg path {
          fill: var(--logo-color);
        }
        
        svg:nth-child(4) {
          --logo-scale: 1;
          --logo-opacity: 1;
          --logo-initial-top: 0px;
        }

        svg:nth-child(3) {
          --logo-scale: 0.8;
          --logo-opacity: 0.75;
          --logo-initial-top: 5px;
          left: -22px;
        }

        svg:nth-child(2) {
          --logo-scale: 0.6;
          --logo-opacity: 0.5;
          --logo-initial-top: 10px;
          left: -40px;
        }

        svg:nth-child(1) {
          --logo-scale: 0.4;
          --logo-opacity: 0.25;
          --logo-initial-top: 15px;
          left: -55px;
        }
        
        @keyframes bounce {
          33% {
            top: -25%;
          }
          
          66% {
            top: 10%;
          }
          
          100% {
            top: var(--logo-initial-top);
          }          
        }
      </style>
      <div class="container">
        <dom-repeat items="{{logoNodes}}">
          <template>
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="isolation:isolate" viewBox="238.609 82.833 109.391 97.043" width="109.391" height="97.043">
              <path d=" M 338.728 179.877 L 293.305 179.877 L 247.881 179.877 C 239.602 179.877 236.242 174.056 240.381 166.887 L 263.093 127.549 L 285.805 88.211 C 289.944 81.041 296.665 81.041 300.805 88.211 L 323.516 127.549 L 346.228 166.887 C 350.367 174.056 347.007 179.877 338.728 179.877 Z  M 315.714 163.991 L 293.305 163.991 L 270.895 163.991 C 265.376 163.991 263.135 160.111 265.895 155.331 L 277.1 135.924 L 288.305 116.517 C 291.064 111.737 295.545 111.737 298.305 116.517 L 309.509 135.924 L 320.714 155.331 C 323.474 160.111 321.233 163.991 315.714 163.991 Z " fill-rule="evenodd"/>
            </svg>              
          </template>
        </dom-repeat>
      </div>
    `
	    }

	    static get properties() {
	        return {
	            logoNodes: {
	                value() {
	                    return [1,2,3,4]
	                }
	            }
	        }
	    }
	}

	customElements.define('my-logo', Logo);

	var angular = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 415.6 512\"><path d=\"M169.7 268.1h76.2l-38.1-91.6-38.1 91.6zM207.8 32L0 106.4l31.8 275.7 176 97.9 176-97.9 31.8-275.7L207.8 32zM338 373.8h-48.6l-26.2-65.4H152.6l-26.2 65.4H77.7L207.8 81.5 338 373.8z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var react = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M418.2 177.2c-5.4-1.8-10.8-3.5-16.2-5.1.9-3.7 1.7-7.4 2.5-11.1 12.3-59.6 4.2-107.5-23.1-123.3-26.3-15.1-69.2.6-112.6 38.4-4.3 3.7-8.5 7.6-12.5 11.5-2.7-2.6-5.5-5.2-8.3-7.7-45.5-40.4-91.1-57.4-118.4-41.5-26.2 15.2-34 60.3-23 116.7 1.1 5.6 2.3 11.1 3.7 16.7-6.4 1.8-12.7 3.8-18.6 5.9C38.3 196.2 0 225.4 0 255.6c0 31.2 40.8 62.5 96.3 81.5 4.5 1.5 9 3 13.6 4.3-1.5 6-2.8 11.9-4 18-10.5 55.5-2.3 99.5 23.9 114.6 27 15.6 72.4-.4 116.6-39.1 3.5-3.1 7-6.3 10.5-9.7 4.4 4.3 9 8.4 13.6 12.4 42.8 36.8 85.1 51.7 111.2 36.6 27-15.6 35.8-62.9 24.4-120.5-.9-4.4-1.9-8.9-3-13.5 3.2-.9 6.3-1.9 9.4-2.9 57.7-19.1 99.5-50 99.5-81.7 0-30.3-39.4-59.7-93.8-78.4zM282.9 92.3c37.2-32.4 71.9-45.1 87.7-36 16.9 9.7 23.4 48.9 12.8 100.4-.7 3.4-1.4 6.7-2.3 10-22.2-5-44.7-8.6-67.3-10.6-13-18.6-27.2-36.4-42.6-53.1 3.9-3.7 7.7-7.2 11.7-10.7zm-130 189.1c4.6 8.8 9.3 17.5 14.3 26.1 5.1 8.7 10.3 17.4 15.8 25.9-15.6-1.7-31.1-4.2-46.4-7.5 4.4-14.4 9.9-29.3 16.3-44.5zm0-50.6c-6.3-14.9-11.6-29.5-16-43.6 14.4-3.2 29.7-5.8 45.6-7.8-5.3 8.3-10.5 16.8-15.4 25.4-4.9 8.5-9.7 17.2-14.2 26zm11.4 25.3c6.6-13.8 13.8-27.3 21.4-40.6 7.6-13.3 15.8-26.2 24.4-38.9 15-1.1 30.3-1.7 45.9-1.7 15.6 0 31 .6 45.9 1.7 8.5 12.6 16.6 25.5 24.3 38.7 7.7 13.2 14.9 26.7 21.7 40.4-6.7 13.8-13.9 27.4-21.6 40.8-7.6 13.3-15.7 26.2-24.2 39-14.9 1.1-30.4 1.6-46.1 1.6-15.7 0-30.9-.5-45.6-1.4-8.7-12.7-16.9-25.7-24.6-39-7.7-13.3-14.8-26.8-21.5-40.6zm180.6 51.2c5.1-8.8 9.9-17.7 14.6-26.7 6.4 14.5 12 29.2 16.9 44.3-15.5 3.5-31.2 6.2-47 8 5.4-8.4 10.5-17 15.5-25.6zm14.4-76.5c-4.7-8.8-9.5-17.6-14.5-26.2-4.9-8.5-10-16.9-15.3-25.2 16.1 2 31.5 4.7 45.9 8-4.6 14.8-10 29.2-16.1 43.4zM256.2 118.3c10.5 11.4 20.4 23.4 29.6 35.8-19.8-.9-39.7-.9-59.5 0 9.8-12.9 19.9-24.9 29.9-35.8zM140.2 57c16.8-9.8 54.1 4.2 93.4 39 2.5 2.2 5 4.6 7.6 7-15.5 16.7-29.8 34.5-42.9 53.1-22.6 2-45 5.5-67.2 10.4-1.3-5.1-2.4-10.3-3.5-15.5-9.4-48.4-3.2-84.9 12.6-94zm-24.5 263.6c-4.2-1.2-8.3-2.5-12.4-3.9-21.3-6.7-45.5-17.3-63-31.2-10.1-7-16.9-17.8-18.8-29.9 0-18.3 31.6-41.7 77.2-57.6 5.7-2 11.5-3.8 17.3-5.5 6.8 21.7 15 43 24.5 63.6-9.6 20.9-17.9 42.5-24.8 64.5zm116.6 98c-16.5 15.1-35.6 27.1-56.4 35.3-11.1 5.3-23.9 5.8-35.3 1.3-15.9-9.2-22.5-44.5-13.5-92 1.1-5.6 2.3-11.2 3.7-16.7 22.4 4.8 45 8.1 67.9 9.8 13.2 18.7 27.7 36.6 43.2 53.4-3.2 3.1-6.4 6.1-9.6 8.9zm24.5-24.3c-10.2-11-20.4-23.2-30.3-36.3 9.6.4 19.5.6 29.5.6 10.3 0 20.4-.2 30.4-.7-9.2 12.7-19.1 24.8-29.6 36.4zm130.7 30c-.9 12.2-6.9 23.6-16.5 31.3-15.9 9.2-49.8-2.8-86.4-34.2-4.2-3.6-8.4-7.5-12.7-11.5 15.3-16.9 29.4-34.8 42.2-53.6 22.9-1.9 45.7-5.4 68.2-10.5 1 4.1 1.9 8.2 2.7 12.2 4.9 21.6 5.7 44.1 2.5 66.3zm18.2-107.5c-2.8.9-5.6 1.8-8.5 2.6-7-21.8-15.6-43.1-25.5-63.8 9.6-20.4 17.7-41.4 24.5-62.9 5.2 1.5 10.2 3.1 15 4.7 46.6 16 79.3 39.8 79.3 58 0 19.6-34.9 44.9-84.8 61.4zM256 210.2c25.3 0 45.8 20.5 45.8 45.8 0 25.3-20.5 45.8-45.8 45.8-25.3 0-45.8-20.5-45.8-45.8 0-25.3 20.5-45.8 45.8-45.8\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var js = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M0 32v448h448V32H0zm243.8 349.4c0 43.6-25.6 63.5-62.9 63.5-33.7 0-53.2-17.4-63.2-38.5l34.3-20.7c6.6 11.7 12.6 21.6 27.1 21.6 13.8 0 22.6-5.4 22.6-26.5V237.7h42.1v143.7zm99.6 63.5c-39.1 0-64.4-18.6-76.7-43l34.3-19.8c9 14.7 20.8 25.6 41.5 25.6 17.4 0 28.6-8.7 28.6-20.8 0-14.4-11.4-19.5-30.7-28l-10.5-4.5c-30.4-12.9-50.5-29.2-50.5-63.5 0-31.6 24.1-55.6 61.6-55.6 26.8 0 46 9.3 59.8 33.7L368 290c-7.2-12.9-15-18-27.1-18-12.3 0-20.1 7.8-20.1 18 0 12.6 7.8 17.7 25.9 25.6l10.5 4.5c35.8 15.3 55.9 31 55.9 66.2 0 37.8-29.8 58.6-69.7 58.6z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var css = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M480 32l-64 368-223.3 80L0 400l19.6-94.8h82l-8 40.6L210 390.2l134.1-44.4 18.8-97.1H29.5l16-82h333.7l10.5-52.7H56.3l16.3-82H480z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var htmlIcon = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path d=\"M0 32l34.9 395.8L191.5 480l157.6-52.2L384 32H0zm308.2 127.9H124.4l4.1 49.4h175.6l-13.6 148.4-97.9 27v.3h-1.1l-98.7-27.3-6-75.8h47.7L138 320l53.5 14.5 53.7-14.5 6-62.2H84.3L71.5 112.2h241.1l-4.4 47.7z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var java = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 377.6 512\"><path d=\"M121.6 396s-19.6 11.4 13.9 15.2c40.6 4.6 61.3 4 106-4.5 0 0 11.8 7.4 28.2 13.8C169.5 463.4 42.9 418 121.6 396m-12.2-56.1s-21.9 16.2 11.6 19.7c43.3 4.5 77.6 4.8 136.8-6.6 0 0 8.2 8.3 21.1 12.8-121.3 35.5-256.3 2.9-169.5-25.9m103.2-95.1c24.7 28.4-6.5 54-6.5 54s62.7-32.4 33.9-72.9c-26.9-37.8-47.5-56.6 64.1-121.3.1 0-175.2 43.8-91.5 140.2m132.6 192.6s14.5 11.9-15.9 21.2c-57.9 17.5-240.8 22.8-291.6.7-18.3-7.9 16-19 26.8-21.3 11.2-2.4 17.7-2 17.7-2-20.3-14.3-131.3 28.1-56.4 40.2 204.2 33.2 372.4-14.9 319.4-38.8M131 281.8s-93.1 22.1-33 30.1c25.4 3.4 76 2.6 123.1-1.3 38.5-3.2 77.2-10.2 77.2-10.2s-13.6 5.8-23.4 12.5c-94.5 24.9-277 13.3-224.5-12.1 44.5-21.4 80.6-19 80.6-19m167 93.3c96.1-49.9 51.6-97.9 20.6-91.4-7.6 1.6-11 3-11 3s2.8-4.4 8.2-6.3c61.3-21.6 108.5 63.6-19.8 97.3 0-.1 1.5-1.4 2-2.6M240 0s53.2 53.2-50.5 135c-83.1 65.6-19 103.1 0 145.8-48.5-43.8-84.1-82.3-60.2-118.2C164.4 110.1 261.5 84.5 240 0m-99.5 510.4c92.2 5.9 233.8-3.3 237.1-46.9 0 0-6.4 16.5-76.2 29.7-78.7 14.8-175.8 13.1-233.3 3.6 0-.1 11.8 9.7 72.4 13.6\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var node = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M224 508c-6.7 0-13.5-1.8-19.4-5.2l-61.7-36.5c-9.2-5.2-4.7-7-1.7-8 12.3-4.3 14.8-5.2 27.9-12.7 1.4-.8 3.2-.5 4.6.4l47.4 28.1c1.7 1 4.1 1 5.7 0l184.7-106.6c1.7-1 2.8-3 2.8-5V149.3c0-2.1-1.1-4-2.9-5.1L226.8 37.7c-1.7-1-4-1-5.7 0L36.6 144.3c-1.8 1-2.9 3-2.9 5.1v213.1c0 2 1.1 4 2.9 4.9l50.6 29.2c27.5 13.7 44.3-2.4 44.3-18.7V167.5c0-3 2.4-5.3 5.4-5.3h23.4c2.9 0 5.4 2.3 5.4 5.3V378c0 36.6-20 57.6-54.7 57.6-10.7 0-19.1 0-42.5-11.6l-48.4-27.9C8.1 389.2.7 376.3.7 362.4V149.3c0-13.8 7.4-26.8 19.4-33.7L204.6 9c11.7-6.6 27.2-6.6 38.8 0l184.7 106.7c12 6.9 19.4 19.8 19.4 33.7v213.1c0 13.8-7.4 26.7-19.4 33.7L243.4 502.8c-5.9 3.4-12.6 5.2-19.4 5.2zm149.1-210.1c0-39.9-27-50.5-83.7-58-57.4-7.6-63.2-11.5-63.2-24.9 0-11.1 4.9-25.9 47.4-25.9 37.9 0 51.9 8.2 57.7 33.8.5 2.4 2.7 4.2 5.2 4.2h24c1.5 0 2.9-.6 3.9-1.7s1.5-2.6 1.4-4.1c-3.7-44.1-33-64.6-92.2-64.6-52.7 0-84.1 22.2-84.1 59.5 0 40.4 31.3 51.6 81.8 56.6 60.5 5.9 65.2 14.8 65.2 26.7 0 20.6-16.6 29.4-55.5 29.4-48.9 0-59.6-12.3-63.2-36.6-.4-2.6-2.6-4.5-5.3-4.5h-23.9c-3 0-5.3 2.4-5.3 5.3 0 31.1 16.9 68.2 97.8 68.2 58.4-.1 92-23.2 92-63.4z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var docker = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M349.9 236.3h-66.1v-59.4h66.1v59.4zm0-204.3h-66.1v60.7h66.1V32zm78.2 144.8H362v59.4h66.1v-59.4zm-156.3-72.1h-66.1v60.1h66.1v-60.1zm78.1 0h-66.1v60.1h66.1v-60.1zm276.8 100c-14.4-9.7-47.6-13.2-73.1-8.4-3.3-24-16.7-44.9-41.1-63.7l-14-9.3-9.3 14c-18.4 27.8-23.4 73.6-3.7 103.8-8.7 4.7-25.8 11.1-48.4 10.7H2.4c-8.7 50.8 5.8 116.8 44 162.1 37.1 43.9 92.7 66.2 165.4 66.2 157.4 0 273.9-72.5 328.4-204.2 21.4.4 67.6.1 91.3-45.2 1.5-2.5 6.6-13.2 8.5-17.1l-13.3-8.9zm-511.1-27.9h-66v59.4h66.1v-59.4zm78.1 0h-66.1v59.4h66.1v-59.4zm78.1 0h-66.1v59.4h66.1v-59.4zm-78.1-72.1h-66.1v60.1h66.1v-60.1z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var sass = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640.4 512\"><path d=\"M551.1 291.9c-22.4.1-41.8 5.5-58 13.5-5.9-11.9-12-22.3-13-30.1-1.2-9.1-2.5-14.5-1.1-25.3s7.7-26.1 7.6-27.2c-.1-1.1-1.4-6.6-14.3-6.7-12.9-.1-24 2.5-25.3 5.9-1.3 3.4-3.8 11.1-5.3 19.1-2.3 11.7-25.8 53.5-39.1 75.3-4.4-8.5-8.1-16-8.9-22-1.2-9.1-2.5-14.5-1.1-25.3s7.7-26.1 7.6-27.2c-.1-1.1-1.4-6.6-14.3-6.7-12.9-.1-24 2.5-25.3 5.9-1.3 3.4-2.7 11.4-5.3 19.1-2.6 7.7-33.9 77.3-42.1 95.4-4.2 9.2-7.8 16.6-10.4 21.6s-.2.3-.4.9c-2.2 4.3-3.5 6.7-3.5 6.7v.1c-1.7 3.2-3.6 6.1-4.5 6.1-.6 0-1.9-8.4.3-19.9 4.7-24.2 15.8-61.8 15.7-63.1-.1-.7 2.1-7.2-7.3-10.7-9.1-3.3-12.4 2.2-13.2 2.2-.8 0-1.4 2-1.4 2s10.1-42.4-19.4-42.4c-18.4 0-44 20.2-56.6 38.5-7.9 4.3-25 13.6-43 23.5-6.9 3.8-14 7.7-20.7 11.4-.5-.5-.9-1-1.4-1.5-35.8-38.2-101.9-65.2-99.1-116.5 1-18.7 7.5-67.8 127.1-127.4 98-48.8 176.4-35.4 189.9-5.6 19.4 42.5-41.9 121.6-143.7 133-38.8 4.3-59.2-10.7-64.3-16.3-5.3-5.9-6.1-6.2-8.1-5.1-3.3 1.8-1.2 7 0 10.1 3 7.9 15.5 21.9 36.8 28.9 18.7 6.1 64.2 9.5 119.2-11.8C367 196.5 415.1 130.2 401 74.7 386.6 18.3 293.1-.2 204.6 31.2 151.9 49.9 94.9 79.3 53.9 117.6 5.2 163.2-2.6 202.9.6 219.5c11.4 58.9 92.6 97.3 125.1 125.7-1.6.9-3.1 1.7-4.5 2.5-16.3 8.1-78.2 40.5-93.7 74.7-17.5 38.8 2.9 66.6 16.3 70.4 41.8 11.6 84.6-9.3 107.6-43.6s20.2-79.1 9.6-99.5c-.1-.3-.3-.5-.4-.8 4.2-2.5 8.5-5 12.8-7.5 8.3-4.9 16.4-9.4 23.5-13.3-4 10.8-6.9 23.8-8.4 42.6-1.8 22 7.3 50.5 19.1 61.7 5.2 4.9 11.5 5 15.4 5 13.8 0 20-11.4 26.9-25 8.5-16.6 16-35.9 16-35.9s-9.4 52.2 16.3 52.2c9.4 0 18.8-12.1 23-18.3v.1s.2-.4.7-1.2c1-1.5 1.5-2.4 1.5-2.4v-.3c3.8-6.5 12.1-21.4 24.6-46 16.2-31.8 31.7-71.5 31.7-71.5s1.4 9.7 6.2 25.8c2.8 9.5 8.7 19.9 13.4 30-3.8 5.2-6.1 8.2-6.1 8.2s0 .1.1.2c-3 4-6.4 8.3-9.9 12.5-12.8 15.2-28 32.6-30 37.6-2.4 5.9-1.8 10.3 2.8 13.7 3.4 2.6 9.4 3 15.7 2.5 11.5-.8 19.6-3.6 23.5-5.4 6.2-2.2 13.4-5.7 20.2-10.6 12.5-9.2 20.1-22.4 19.4-39.8-.4-9.6-3.5-19.2-7.3-28.2 1.1-1.6 2.3-3.3 3.4-5 19.8-28.9 35.1-60.6 35.1-60.6s1.4 9.7 6.2 25.8c2.4 8.1 7.1 17 11.4 25.7-18.6 15.1-30.1 32.6-34.1 44.1-7.4 21.3-1.6 30.9 9.3 33.1 4.9 1 11.9-1.3 17.1-3.5 6.5-2.2 14.3-5.7 21.6-11.1 12.5-9.2 24.6-22.1 23.8-39.6-.3-7.9-2.5-15.8-5.4-23.4 15.7-6.6 36.1-10.2 62.1-7.2 55.7 6.5 66.6 41.3 64.5 55.8-2.1 14.6-13.8 22.6-17.7 25-3.9 2.4-5.1 3.3-4.8 5.1.5 2.6 2.3 2.5 5.6 1.9 4.6-.8 29.2-11.8 30.3-38.7 1.6-34-31.1-71.4-89-71.1zM121.8 436.6c-18.4 20.1-44.2 27.7-55.3 21.3C54.6 451 59.3 421.4 82 400c13.8-13 31.6-25 43.4-32.4 2.7-1.6 6.6-4 11.4-6.9.8-.5 1.2-.7 1.2-.7.9-.6 1.9-1.1 2.9-1.7 8.3 30.4.3 57.2-19.1 78.3zm134.4-91.4c-6.4 15.7-19.9 55.7-28.1 53.6-7-1.8-11.3-32.3-1.4-62.3 5-15.1 15.6-33.1 21.9-40.1 10.1-11.3 21.2-14.9 23.8-10.4 3.5 5.9-12.2 49.4-16.2 59.2zm111 53c-2.7 1.4-5.2 2.3-6.4 1.6-.9-.5 1.1-2.4 1.1-2.4s13.9-14.9 19.4-21.7c3.2-4 6.9-8.7 10.9-13.9 0 .5.1 1 .1 1.6-.1 17.9-17.3 30-25.1 34.8zm85.6-19.5c-2-1.4-1.7-6.1 5-20.7 2.6-5.7 8.6-15.3 19-24.5 1.2 3.8 1.9 7.4 1.9 10.8-.1 22.5-16.2 30.9-25.9 34.4z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var gulp = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 512\"><path d=\"M209.8 391.1l-14.1 24.6-4.6 80.2c0 8.9-28.3 16.1-63.1 16.1s-63.1-7.2-63.1-16.1l-5.8-79.4-14.9-25.4c41.2 17.3 126 16.7 165.6 0zm-196-253.3l13.6 125.5c5.9-20 20.8-47 40-55.2 6.3-2.7 12.7-2.7 18.7.9 5.2 3 9.6 9.3 10.1 11.8 1.2 6.5-2 9.1-4.5 9.1-3 0-5.3-4.6-6.8-7.3-4.1-7.3-10.3-7.6-16.9-2.8-6.9 5-12.9 13.4-17.1 20.7-5.1 8.8-9.4 18.5-12 28.2-1.5 5.6-2.9 14.6-.6 19.9 1 2.2 2.5 3.6 4.9 3.6 5 0 12.3-6.6 15.8-10.1 4.5-4.5 10.3-11.5 12.5-16l5.2-15.5c2.6-6.8 9.9-5.6 9.9 0 0 10.2-3.7 13.6-10 34.7-5.8 19.5-7.6 25.8-7.6 25.8-.7 2.8-3.4 7.5-6.3 7.5-1.2 0-2.1-.4-2.6-1.2-1-1.4-.9-5.3-.8-6.3.2-3.2 6.3-22.2 7.3-25.2-2 2.2-4.1 4.4-6.4 6.6-5.4 5.1-14.1 11.8-21.5 11.8-3.4 0-5.6-.9-7.7-2.4l7.6 79.6c2 5 39.2 17.1 88.2 17.1 49.1 0 86.3-12.2 88.2-17.1l10.9-94.6c-5.7 5.2-12.3 11.6-19.6 14.8-5.4 2.3-17.4 3.8-17.4-5.7 0-5.2 9.1-14.8 14.4-21.5 1.4-1.7 4.7-5.9 4.7-8.1 0-2.9-6-2.2-11.7 2.5-3.2 2.7-6.2 6.3-8.7 9.7-4.3 6-6.6 11.2-8.5 15.5-6.2 14.2-4.1 8.6-9.1 22-5 13.3-4.2 11.8-5.2 14-.9 1.9-2.2 3.5-4 4.5-1.9 1-4.5.9-6.1-.3-.9-.6-1.3-1.9-1.3-3.7 0-.9.1-1.8.3-2.7 1.5-6.1 7.8-18.1 15-34.3 1.6-3.7 1-2.6.8-2.3-6.2 6-10.9 8.9-14.4 10.5-5.8 2.6-13 2.6-14.5-4.1-.1-.4-.1-.8-.2-1.2-11.8 9.2-24.3 11.7-20-8.1-4.6 8.2-12.6 14.9-22.4 14.9-4.1 0-7.1-1.4-8.6-5.1-2.3-5.5 1.3-14.9 4.6-23.8 1.7-4.5 4-9.9 7.1-16.2 1.6-3.4 4.2-5.4 7.6-4.5.6.2 1.1.4 1.6.7 2.6 1.8 1.6 4.5.3 7.2-3.8 7.5-7.1 13-9.3 20.8-.9 3.3-2 9 1.5 9 2.4 0 4.7-.8 6.9-2.4 4.6-3.4 8.3-8.5 11.1-13.5 2-3.6 4.4-8.3 5.6-12.3.5-1.7 1.1-3.3 1.8-4.8 1.1-2.5 2.6-5.1 5.2-5.1 1.3 0 2.4.5 3.2 1.5 1.7 2.2 1.3 4.5.4 6.9-2 5.6-4.7 10.6-6.9 16.7-1.3 3.5-2.7 8-2.7 11.7 0 3.4 3.7 2.6 6.8 1.2 2.4-1.1 4.8-2.8 6.8-4.5 1.2-4.9.9-3.8 26.4-68.2 1.3-3.3 3.7-4.7 6.1-4.7 1.2 0 2.2.4 3.2 1.1 1.7 1.3 1.7 4.1 1 6.2-.7 1.9-.6 1.3-4.5 10.5-5.2 12.1-8.6 20.8-13.2 31.9-1.9 4.6-7.7 18.9-8.7 22.3-.6 2.2-1.3 5.8 1 5.8 5.4 0 19.3-13.1 23.1-17 .2-.3.5-.4.9-.6.6-1.9 1.2-3.7 1.7-5.5 1.4-3.8 2.7-8.2 5.3-11.3.8-1 1.7-1.6 2.7-1.6 2.8 0 4.2 1.2 4.2 4 0 1.1-.7 5.1-1.1 6.2 1.4-1.5 2.9-3 4.5-4.5 15-13.9 25.7-6.8 25.7.2 0 7.4-8.9 17.7-13.8 23.4-1.6 1.9-4.9 5.4-5 6.4 0 1.3.9 1.8 2.2 1.8 2 0 6.4-3.5 8-4.7 5-3.9 11.8-9.9 16.6-14.1l14.8-136.8c-30.5 17.1-197.6 17.2-228.3.2zm229.7-8.5c0 21-231.2 21-231.2 0 0-8.8 51.8-15.9 115.6-15.9 9 0 17.8.1 26.3.4l12.6-48.7L228.1.6c1.4-1.4 5.8-.2 9.9 3.5s6.6 7.9 5.3 9.3l-.1.1L185.9 74l-10 40.7c39.9 2.6 67.6 8.1 67.6 14.6zm-69.4 4.6c0-.8-.9-1.5-2.5-2.1l-.2.8c0 1.3-5 2.4-11.1 2.4s-11.1-1.1-11.1-2.4c0-.1 0-.2.1-.3l.2-.7c-1.8.6-3 1.4-3 2.3 0 2.1 6.2 3.7 13.7 3.7 7.7.1 13.9-1.6 13.9-3.7z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var npm = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 576 512\"><path d=\"M288 288h-32v-64h32v64zm288-128v192H288v32H160v-32H0V160h576zm-416 32H32v128h64v-96h32v96h32V192zm160 0H192v160h64v-32h64V192zm224 0H352v128h64v-96h32v96h32v-96h32v96h32V192z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var aws = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M180.41 203.01c-.72 22.65 10.6 32.68 10.88 39.05a8.164 8.164 0 0 1-4.1 6.27l-12.8 8.96a10.66 10.66 0 0 1-5.63 1.92c-.43-.02-8.19 1.83-20.48-25.61a78.608 78.608 0 0 1-62.61 29.45c-16.28.89-60.4-9.24-58.13-56.21-1.59-38.28 34.06-62.06 70.93-60.05 7.1.02 21.6.37 46.99 6.27v-15.62c2.69-26.46-14.7-46.99-44.81-43.91-2.4.01-19.4-.5-45.84 10.11-7.36 3.38-8.3 2.82-10.75 2.82-7.41 0-4.36-21.48-2.94-24.2 5.21-6.4 35.86-18.35 65.94-18.18a76.857 76.857 0 0 1 55.69 17.28 70.285 70.285 0 0 1 17.67 52.36l-.01 69.29zM93.99 235.4c32.43-.47 46.16-19.97 49.29-30.47 2.46-10.05 2.05-16.41 2.05-27.4-9.67-2.32-23.59-4.85-39.56-4.87-15.15-1.14-42.82 5.63-41.74 32.26-1.24 16.79 11.12 31.4 29.96 30.48zm170.92 23.05c-7.86.72-11.52-4.86-12.68-10.37l-49.8-164.65c-.97-2.78-1.61-5.65-1.92-8.58a4.61 4.61 0 0 1 3.86-5.25c.24-.04-2.13 0 22.25 0 8.78-.88 11.64 6.03 12.55 10.37l35.72 140.83 33.16-140.83c.53-3.22 2.94-11.07 12.8-10.24h17.16c2.17-.18 11.11-.5 12.68 10.37l33.42 142.63L420.98 80.1c.48-2.18 2.72-11.37 12.68-10.37h19.72c.85-.13 6.15-.81 5.25 8.58-.43 1.85 3.41-10.66-52.75 169.9-1.15 5.51-4.82 11.09-12.68 10.37h-18.69c-10.94 1.15-12.51-9.66-12.68-10.75L328.67 110.7l-32.78 136.99c-.16 1.09-1.73 11.9-12.68 10.75h-18.3zm273.48 5.63c-5.88.01-33.92-.3-57.36-12.29a12.802 12.802 0 0 1-7.81-11.91v-10.75c0-8.45 6.2-6.9 8.83-5.89 10.04 4.06 16.48 7.14 28.81 9.6 36.65 7.53 52.77-2.3 56.72-4.48 13.15-7.81 14.19-25.68 5.25-34.95-10.48-8.79-15.48-9.12-53.13-21-4.64-1.29-43.7-13.61-43.79-52.36-.61-28.24 25.05-56.18 69.52-55.95 12.67-.01 46.43 4.13 55.57 15.62 1.35 2.09 2.02 4.55 1.92 7.04v10.11c0 4.44-1.62 6.66-4.87 6.66-7.71-.86-21.39-11.17-49.16-10.75-6.89-.36-39.89.91-38.41 24.97-.43 18.96 26.61 26.07 29.7 26.89 36.46 10.97 48.65 12.79 63.12 29.58 17.14 22.25 7.9 48.3 4.35 55.44-19.08 37.49-68.42 34.44-69.26 34.42zm40.2 104.86c-70.03 51.72-171.69 79.25-258.49 79.25A469.127 469.127 0 0 1 2.83 327.46c-6.53-5.89-.77-13.96 7.17-9.47a637.37 637.37 0 0 0 316.88 84.12 630.22 630.22 0 0 0 241.59-49.55c11.78-5 21.77 7.8 10.12 16.38zm29.19-33.29c-8.96-11.52-59.28-5.38-81.81-2.69-6.79.77-7.94-5.12-1.79-9.47 40.07-28.17 105.88-20.1 113.44-10.63 7.55 9.47-2.05 75.41-39.56 106.91-5.76 4.87-11.27 2.3-8.71-4.1 8.44-21.25 27.39-68.49 18.43-80.02z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var git = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M18.8 221.7c0 25.3 16.2 60 41.5 68.5v1c-18.8 8.3-24 50.6 1 65.8v1C34 367 16 384.3 16 414.2c0 51.5 48.8 65.8 91.5 65.8 52 0 90.7-18.7 90.7-76 0-70.5-101-44.5-101-82.8 0-13.5 7.2-18.7 19.7-21.3 41.5-7.7 67.5-40 67.5-82.2 0-7.3-1.5-14.2-4-21 6.7-1.5 13.2-3.3 19.7-5.5v-50.5c-17.2 6.8-35.7 11.8-54.5 11.8-53.8-31-126.8 1.3-126.8 69.2zm87.7 163.8c17 0 41.2 3 41.2 25 0 21.8-19.5 26.3-37.7 26.3-17.3 0-43.3-2.7-43.3-25.2.1-22.3 22.1-26.1 39.8-26.1zM103.3 256c-22 0-31.3-13-31.3-33.8 0-49.3 61-48.8 61-.5 0 20.3-8 34.3-29.7 34.3zM432 305.5v49c-13.3 7.3-30.5 9.8-45.5 9.8-53.5 0-59.8-42.2-59.8-85.7v-87.7h.5v-1c-7 0-7.3-1.6-24 1v-47.5h24c0-22.3.3-31-1.5-41.2h56.7c-2 13.8-1.5 27.5-1.5 41.2h51v47.5s-19.3-1-51-1V281c0 14.8 3.3 32.8 21.8 32.8 9.8 0 21.3-2.8 29.3-8.3zM286 68.7c0 18.7-14.5 36.2-33.8 36.2-19.8 0-34.5-17.2-34.5-36.2 0-19.3 14.5-36.7 34.5-36.7C272 32 286 50 286 68.7zm-6.2 74.5c-1.8 14.6-1.6 199.8 0 217.8h-55.5c1.6-18.1 1.8-203 0-217.8h55.5z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var github = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 496 512\"><path d=\"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var twitter = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var codepen = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M502.285 159.704l-234-156c-7.987-4.915-16.511-4.96-24.571 0l-234 156C3.714 163.703 0 170.847 0 177.989v155.999c0 7.143 3.714 14.286 9.715 18.286l234 156.022c7.987 4.915 16.511 4.96 24.571 0l234-156.022c6-3.999 9.715-11.143 9.715-18.286V177.989c-.001-7.142-3.715-14.286-9.716-18.285zM278 63.131l172.286 114.858-76.857 51.429L278 165.703V63.131zm-44 0v102.572l-95.429 63.715-76.857-51.429L234 63.131zM44 219.132l55.143 36.857L44 292.846v-73.714zm190 229.715L61.714 333.989l76.857-51.429L234 346.275v102.572zm22-140.858l-77.715-52 77.715-52 77.715 52-77.715 52zm22 140.858V346.275l95.429-63.715 76.857 51.429L278 448.847zm190-156.001l-55.143-36.857L468 219.132v73.714z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var medium = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M0 32v448h448V32H0zm372.2 106.1l-24 23c-2.1 1.6-3.1 4.2-2.7 6.7v169.3c-.4 2.6.6 5.2 2.7 6.7l23.5 23v5.1h-118V367l24.3-23.6c2.4-2.4 2.4-3.1 2.4-6.7V199.8l-67.6 171.6h-9.1L125 199.8v115c-.7 4.8 1 9.7 4.4 13.2l31.6 38.3v5.1H71.2v-5.1l31.6-38.3c3.4-3.5 4.9-8.4 4.1-13.2v-133c.4-3.7-1-7.3-3.8-9.8L75 138.1V133h87.3l67.4 148L289 133.1h83.2v5z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var blogger = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M162.4 196c4.8-4.9 6.2-5.1 36.4-5.1 27.2 0 28.1.1 32.1 2.1 5.8 2.9 8.3 7 8.3 13.6 0 5.9-2.4 10-7.6 13.4-2.8 1.8-4.5 1.9-31.1 2.1-16.4.1-29.5-.2-31.5-.8-10.3-2.9-14.1-17.7-6.6-25.3zm61.4 94.5c-53.9 0-55.8.2-60.2 4.1-3.5 3.1-5.7 9.4-5.1 13.9.7 4.7 4.8 10.1 9.2 12 2.2 1 14.1 1.7 56.3 1.2l47.9-.6 9.2-1.5c9-5.1 10.5-17.4 3.1-24.4-5.3-4.7-5-4.7-60.4-4.7zm223.4 130.1c-3.5 28.4-23 50.4-51.1 57.5-7.2 1.8-9.7 1.9-172.9 1.8-157.8 0-165.9-.1-172-1.8-8.4-2.2-15.6-5.5-22.3-10-5.6-3.8-13.9-11.8-17-16.4-3.8-5.6-8.2-15.3-10-22C.1 423 0 420.3 0 256.3 0 93.2 0 89.7 1.8 82.6 8.1 57.9 27.7 39 53 33.4c7.3-1.6 332.1-1.9 340-.3 21.2 4.3 37.9 17.1 47.6 36.4 7.7 15.3 7-1.5 7.3 180.6.2 115.8 0 164.5-.7 170.5zm-85.4-185.2c-1.1-5-4.2-9.6-7.7-11.5-1.1-.6-8-1.3-15.5-1.7-12.4-.6-13.8-.8-17.8-3.1-6.2-3.6-7.9-7.6-8-18.3 0-20.4-8.5-39.4-25.3-56.5-12-12.2-25.3-20.5-40.6-25.1-3.6-1.1-11.8-1.5-39.2-1.8-42.9-.5-52.5.4-67.1 6.2-27 10.7-46.3 33.4-53.4 62.4-1.3 5.4-1.6 14.2-1.9 64.3-.4 62.8 0 72.1 4 84.5 9.7 30.7 37.1 53.4 64.6 58.4 9.2 1.7 122.2 2.1 133.7.5 20.1-2.7 35.9-10.8 50.7-25.9 10.7-10.9 17.4-22.8 21.8-38.5 3.2-10.9 2.9-88.4 1.7-93.9z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var linkedin = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var code = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 640 512\"><path d=\"M278.9 511.5l-61-17.7c-6.4-1.8-10-8.5-8.2-14.9L346.2 8.7c1.8-6.4 8.5-10 14.9-8.2l61 17.7c6.4 1.8 10 8.5 8.2 14.9L293.8 503.3c-1.9 6.4-8.5 10.1-14.9 8.2zm-114-112.2l43.5-46.4c4.6-4.9 4.3-12.7-.8-17.2L117 256l90.6-79.7c5.1-4.5 5.5-12.3.8-17.2l-43.5-46.4c-4.5-4.8-12.1-5.1-17-.5L3.8 247.2c-5.1 4.7-5.1 12.8 0 17.5l144.1 135.1c4.9 4.6 12.5 4.4 17-.5zm327.2.6l144.1-135.1c5.1-4.7 5.1-12.8 0-17.5L492.1 112.1c-4.8-4.5-12.4-4.3-17 .5L431.6 159c-4.6 4.9-4.3 12.7.8 17.2L523 256l-90.6 79.7c-5.1 4.5-5.5 12.3-.8 17.2l43.5 46.4c4.5 4.9 12.1 5.1 17 .6z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var database = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 448 512\"><path d=\"M448 73.143v45.714C448 159.143 347.667 192 224 192S0 159.143 0 118.857V73.143C0 32.857 100.333 0 224 0s224 32.857 224 73.143zM448 176v102.857C448 319.143 347.667 352 224 352S0 319.143 0 278.857V176c48.125 33.143 136.208 48.572 224 48.572S399.874 209.143 448 176zm0 160v102.857C448 479.143 347.667 512 224 512S0 479.143 0 438.857V336c48.125 33.143 136.208 48.572 224 48.572S399.874 369.143 448 336z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var bundle = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 384 512\"><path d=\"M224 136V0h-63.6v32h-32V0H24C10.7 0 0 10.7 0 24v464c0 13.3 10.7 24 24 24h336c13.3 0 24-10.7 24-24V160H248c-13.2 0-24-10.8-24-24zM95.9 32h32v32h-32V32zm32.3 384c-33.2 0-58-30.4-51.4-62.9L96.4 256v-32h32v-32h-32v-32h32v-32h-32V96h32V64h32v32h-32v32h32v32h-32v32h32v32h-32v32h22.1c5.7 0 10.7 4.1 11.8 9.7l17.3 87.7c6.4 32.4-18.4 62.6-51.4 62.6zm32.7-53c0 14.9-14.5 27-32.4 27S96 378 96 363c0-14.9 14.5-27 32.4-27s32.5 12.1 32.5 27zM384 121.9v6.1H256V0h6.1c6.4 0 12.5 2.5 17 7l97.9 98c4.5 4.5 7 10.6 7 16.9z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	var vial = "<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 480 512\"><path d=\"M477.7 186.1L309.5 18.3c-3.1-3.1-8.2-3.1-11.3 0l-34 33.9c-3.1 3.1-3.1 8.2 0 11.3l11.2 11.1L33 316.5c-38.8 38.7-45.1 102-9.4 143.5 20.6 24 49.5 36 78.4 35.9 26.4 0 52.8-10 72.9-30.1l246.3-245.7 11.2 11.1c3.1 3.1 8.2 3.1 11.3 0l34-33.9c3.1-3 3.1-8.1 0-11.2zM318 256H161l148-147.7 78.5 78.3L318 256z\"/></svg>\n<!--\nFont Awesome Free 5.4.2 by @fontawesome - https://fontawesome.com\nLicense - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)\n-->";

	const ICON_MAP = {
	    TDD: vial,
	    webpack: bundle,
	    rollup: bundle,
	    NoSQL: database,
	    SQL: database,
	    polymer: code,
	    html: htmlIcon,
	    JS: js,
	    AWS: aws,
	    linkedin,
	    npm,
	    git,
	    github,
	    java,
	    node,
	    docker,
	    sass,
	    gulp,
	    angular,
	    react,
	    css,
	    twitter,
	    codepen,
	    medium,
	    blogger
	};

	class SVG extends PolymerElement {
	    static get template() {
	        return html`
      <style>
        :host {
          --icon-color: green;
          --icon-size: 10px;
        }
        
        .icon svg {
          fill: var(--icon-color);
          width: var(--icon-size);
        }        
      </style>
      <i class="icon"></i>
    `
	    }

	    static get properties() {
	        return {
	            icon: {
	                type: String
	            }
	        }
	    }

	    connectedCallback() {
	        super.connectedCallback();

	        const icon = ICON_MAP[this.icon] || code;
	        const tag = document.createElement('p');

	        tag.innerHTML = icon;

	        if (tag.firstChild) {
	            this.shadowRoot.querySelector('.icon').appendChild(tag.firstChild);
	        }
	    }
	}

	customElements.define('my-svg', SVG);

	homeStyle()('home-styles');

	class Home extends PolymerElement {
	    static get template() {
	        return html`
        <style include="common-styles home-styles"></style>   
        <div class="container">
            <div class="presentation__wrapper">
                <div class="presentation">
                    <div class="presentation__logo">
                        <my-logo></my-logo>
                    </div>
                    <h1 class="presentation__name">Jose Carlos Ixcoatl Gomez Briones</h1>
                    <h3 class="presentation__desc">
                        JavaScript Ninja
                        <a class="presentation__institution" href="https://www.unosquare.com/" target="_blank"> @Unosquare</a>
                    </h3>
                    <div class="presentation__social">
                        <dom-repeat items="{{social}}">
                            <template>
                                <a class="presentation__social-item" target="_blank" href="{{item.link}}">
                                    <my-svg icon="{{item.icon}}"></my-svg>
                                    <div class="presentation__social-item-text">{{item.icon}}</div>
                                </a>
                            </template>
                        </dom-repeat>
                    </div>
                </div>
            </div>
            <div class="stack__wrapper">
                <div class="stack">
                    <hr />
                    <h3 class="stack__header">My Stack:</h3>
                    <div class="stack__technologies">
                        <dom-repeat items="{{stack}}">
                            <template>
                                <div class="stack__technologies-item">
                                    <my-svg icon="{{item}}"></my-svg>
                                    <h3 class="stack__technologies-item__header">{{item}}</h3>
                                </div>
                            </template>
                        </dom-repeat>
                    </div>
                </div>
            </div>
        </div>
      `
	    }

	    static get properties() {
	        return {
	            stack: {
	                type: Array,
	                value() {
	                    return [
	                        'JS',
	                        'node',
	                        'react',
	                        'angular',
	                        'java',
	                        'SalesForce',
	                        'dart',
	                        'css',
	                        'html',
	                        'graphql',
	                        'apollo',
	                        'sass',
	                        'redux',
	                        'mobx',
	                        'polymer',
	                        'SQL',
	                        'NoSQL',
	                        'gulp',
	                        'npm',
	                        'webpack',
	                        'rollup',
	                        'AWS',
	                        'git',
	                        'github',
	                        'TDD',
	                    ]
	                }
	            },
	            social: {
	                type: Array,
	                value() {
	                    return [
	                        {
	                            icon: 'github',
	                            link: 'https://github.com/brion25'
	                        },
	                        {
	                            icon: 'npm',
	                            link: 'https://www.npmjs.com/~brion25'
	                        },
	                        {
	                            icon: 'twitter',
	                            link: 'https://twitter.com/bartsis'
	                        },
	                        {
	                            icon: 'codepen',
	                            link: 'https://codepen.io/bartsis/'
	                        },
	                        {
	                            icon: 'medium',
	                            link: 'https://medium.com/@bartsis'
	                        },
	                        {
	                            icon: 'blogger',
	                            link: 'http://brion25.blogspot.com/'
	                        }
	                    ]
	                }
	            }
	        }
	    }
	}

	customElements.define('my-home', Home);

	var home = /*#__PURE__*/Object.freeze({

	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/*
	iron-request can be used to perform XMLHttpRequests.

	    <iron-request id="xhr"></iron-request>
	    ...
	    this.$.xhr.send({url: url, body: params});
	*/
	Polymer({
	  is: 'iron-request',

	  hostAttributes: {hidden: true},

	  properties: {

	    /**
	     * A reference to the XMLHttpRequest instance used to generate the
	     * network request.
	     *
	     * @type {XMLHttpRequest}
	     */
	    xhr: {
	      type: Object,
	      notify: true,
	      readOnly: true,
	      value: function() {
	        return new XMLHttpRequest();
	      }
	    },

	    /**
	     * A reference to the parsed response body, if the `xhr` has completely
	     * resolved.
	     *
	     * @type {*}
	     * @default null
	     */
	    response: {
	      type: Object,
	      notify: true,
	      readOnly: true,
	      value: function() {
	        return null;
	      }
	    },

	    /**
	     * A reference to the status code, if the `xhr` has completely resolved.
	     */
	    status: {type: Number, notify: true, readOnly: true, value: 0},

	    /**
	     * A reference to the status text, if the `xhr` has completely resolved.
	     */
	    statusText: {type: String, notify: true, readOnly: true, value: ''},

	    /**
	     * A promise that resolves when the `xhr` response comes back, or rejects
	     * if there is an error before the `xhr` completes.
	     * The resolve callback is called with the original request as an argument.
	     * By default, the reject callback is called with an `Error` as an argument.
	     * If `rejectWithRequest` is true, the reject callback is called with an
	     * object with two keys: `request`, the original request, and `error`, the
	     * error object.
	     *
	     * @type {Promise}
	     */
	    completes: {
	      type: Object,
	      readOnly: true,
	      notify: true,
	      value: function() {
	        return new Promise(function(resolve, reject) {
	          this.resolveCompletes = resolve;
	          this.rejectCompletes = reject;
	        }.bind(this));
	      }
	    },

	    /**
	     * An object that contains progress information emitted by the XHR if
	     * available.
	     *
	     * @default {}
	     */
	    progress: {
	      type: Object,
	      notify: true,
	      readOnly: true,
	      value: function() {
	        return {};
	      }
	    },

	    /**
	     * Aborted will be true if an abort of the request is attempted.
	     */
	    aborted: {
	      type: Boolean,
	      notify: true,
	      readOnly: true,
	      value: false,
	    },

	    /**
	     * Errored will be true if the browser fired an error event from the
	     * XHR object (mainly network errors).
	     */
	    errored: {type: Boolean, notify: true, readOnly: true, value: false},

	    /**
	     * TimedOut will be true if the XHR threw a timeout event.
	     */
	    timedOut: {type: Boolean, notify: true, readOnly: true, value: false}
	  },

	  /**
	   * Succeeded is true if the request succeeded. The request succeeded if it
	   * loaded without error, wasn't aborted, and the status code is ≥ 200, and
	   * < 300, or if the status code is 0.
	   *
	   * The status code 0 is accepted as a success because some schemes - e.g.
	   * file:// - don't provide status codes.
	   *
	   * @return {boolean}
	   */
	  get succeeded() {
	    if (this.errored || this.aborted || this.timedOut) {
	      return false;
	    }
	    var status = this.xhr.status || 0;

	    // Note: if we are using the file:// protocol, the status code will be 0
	    // for all outcomes (successful or otherwise).
	    return status === 0 || (status >= 200 && status < 300);
	  },

	  /**
	   * Sends an HTTP request to the server and returns a promise (see the
	   * `completes` property for details).
	   *
	   * The handling of the `body` parameter will vary based on the Content-Type
	   * header. See the docs for iron-ajax's `body` property for details.
	   *
	   * @param {{
	   *   url: string,
	   *   method: (string|undefined),
	   *   async: (boolean|undefined),
	   *   body:
	   * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),
	   *   headers: (Object|undefined),
	   *   handleAs: (string|undefined),
	   *   jsonPrefix: (string|undefined),
	   *   withCredentials: (boolean|undefined),
	   *   timeout: (number|undefined),
	   *   rejectWithRequest: (boolean|undefined)}} options -
	   *   - url The url to which the request is sent.
	   *   - method The HTTP method to use, default is GET.
	   *   - async By default, all requests are sent asynchronously. To send
	   * synchronous requests, set to false.
	   *   -  body The content for the request body for POST method.
	   *   -  headers HTTP request headers.
	   *   -  handleAs The response type. Default is 'text'.
	   *   -  withCredentials Whether or not to send credentials on the request.
	   * Default is false.
	   *   -  timeout - Timeout for request, in milliseconds.
	   *   -  rejectWithRequest Set to true to include the request object with
	   * promise rejections.
	   * @return {Promise}
	   */
	  send: function(options) {
	    var xhr = this.xhr;

	    if (xhr.readyState > 0) {
	      return null;
	    }

	    xhr.addEventListener('progress', function(progress) {
	      this._setProgress({
	        lengthComputable: progress.lengthComputable,
	        loaded: progress.loaded,
	        total: progress.total
	      });

	      // Webcomponents v1 spec does not fire *-changed events when not connected
	      this.fire('iron-request-progress-changed', {value: this.progress});
	    }.bind(this));

	    xhr.addEventListener('error', function(error) {
	      this._setErrored(true);
	      this._updateStatus();
	      var response =
	          options.rejectWithRequest ? {error: error, request: this} : error;
	      this.rejectCompletes(response);
	    }.bind(this));

	    xhr.addEventListener('timeout', function(error) {
	      this._setTimedOut(true);
	      this._updateStatus();
	      var response =
	          options.rejectWithRequest ? {error: error, request: this} : error;
	      this.rejectCompletes(response);
	    }.bind(this));

	    xhr.addEventListener('abort', function() {
	      this._setAborted(true);
	      this._updateStatus();
	      var error = new Error('Request aborted.');
	      var response =
	          options.rejectWithRequest ? {error: error, request: this} : error;
	      this.rejectCompletes(response);
	    }.bind(this));

	    // Called after all of the above.
	    xhr.addEventListener('loadend', function() {
	      this._updateStatus();
	      this._setResponse(this.parseResponse());

	      if (!this.succeeded) {
	        var error = new Error(
	            'The request failed with status code: ' + this.xhr.status);
	        var response =
	            options.rejectWithRequest ? {error: error, request: this} : error;
	        this.rejectCompletes(response);
	        return;
	      }

	      this.resolveCompletes(this);
	    }.bind(this));

	    this.url = options.url;
	    var isXHRAsync = options.async !== false;
	    xhr.open(options.method || 'GET', options.url, isXHRAsync);

	    var acceptType = {
	      'json': 'application/json',
	      'text': 'text/plain',
	      'html': 'text/html',
	      'xml': 'application/xml',
	      'arraybuffer': 'application/octet-stream'
	    }[options.handleAs];
	    var headers = options.headers || Object.create(null);
	    var newHeaders = Object.create(null);
	    for (var key in headers) {
	      newHeaders[key.toLowerCase()] = headers[key];
	    }
	    headers = newHeaders;

	    if (acceptType && !headers['accept']) {
	      headers['accept'] = acceptType;
	    }
	    Object.keys(headers).forEach(function(requestHeader) {
	      if (/[A-Z]/.test(requestHeader)) {
	        Base._error('Headers must be lower case, got', requestHeader);
	      }
	      xhr.setRequestHeader(requestHeader, headers[requestHeader]);
	    }, this);

	    if (isXHRAsync) {
	      xhr.timeout = options.timeout;

	      var handleAs = options.handleAs;

	      // If a JSON prefix is present, the responseType must be 'text' or the
	      // browser won’t be able to parse the response.
	      if (!!options.jsonPrefix || !handleAs) {
	        handleAs = 'text';
	      }

	      // In IE, `xhr.responseType` is an empty string when the response
	      // returns. Hence, caching it as `xhr._responseType`.
	      xhr.responseType = xhr._responseType = handleAs;

	      // Cache the JSON prefix, if it exists.
	      if (!!options.jsonPrefix) {
	        xhr._jsonPrefix = options.jsonPrefix;
	      }
	    }

	    xhr.withCredentials = !!options.withCredentials;


	    var body = this._encodeBodyObject(options.body, headers['content-type']);

	    xhr.send(
	        /**
	           @type {ArrayBuffer|ArrayBufferView|Blob|Document|FormData|
	                   null|string|undefined}
	         */
	        (body));

	    return this.completes;
	  },

	  /**
	   * Attempts to parse the response body of the XHR. If parsing succeeds,
	   * the value returned will be deserialized based on the `responseType`
	   * set on the XHR.
	   *
	   * @return {*} The parsed response,
	   * or undefined if there was an empty response or parsing failed.
	   */
	  parseResponse: function() {
	    var xhr = this.xhr;
	    var responseType = xhr.responseType || xhr._responseType;
	    var preferResponseText = !this.xhr.responseType;
	    var prefixLen = (xhr._jsonPrefix && xhr._jsonPrefix.length) || 0;

	    try {
	      switch (responseType) {
	        case 'json':
	          // If the xhr object doesn't have a natural `xhr.responseType`,
	          // we can assume that the browser hasn't parsed the response for us,
	          // and so parsing is our responsibility. Likewise if response is
	          // undefined, as there's no way to encode undefined in JSON.
	          if (preferResponseText || xhr.response === undefined) {
	            // Try to emulate the JSON section of the response body section of
	            // the spec: https://xhr.spec.whatwg.org/#response-body
	            // That is to say, we try to parse as JSON, but if anything goes
	            // wrong return null.
	            try {
	              return JSON.parse(xhr.responseText);
	            } catch (_) {
	              console.warn('Failed to parse JSON sent from ' + xhr.responseURL);
	              return null;
	            }
	          }

	          return xhr.response;
	        case 'xml':
	          return xhr.responseXML;
	        case 'blob':
	        case 'document':
	        case 'arraybuffer':
	          return xhr.response;
	        case 'text':
	        default: {
	          // If `prefixLen` is set, it implies the response should be parsed
	          // as JSON once the prefix of length `prefixLen` is stripped from
	          // it. Emulate the behavior above where null is returned on failure
	          // to parse.
	          if (prefixLen) {
	            try {
	              return JSON.parse(xhr.responseText.substring(prefixLen));
	            } catch (_) {
	              console.warn('Failed to parse JSON sent from ' + xhr.responseURL);
	              return null;
	            }
	          }
	          return xhr.responseText;
	        }
	      }
	    } catch (e) {
	      this.rejectCompletes(new Error('Could not parse response. ' + e.message));
	    }
	  },

	  /**
	   * Aborts the request.
	   */
	  abort: function() {
	    this._setAborted(true);
	    this.xhr.abort();
	  },

	  /**
	   * @param {*} body The given body of the request to try and encode.
	   * @param {?string} contentType The given content type, to infer an encoding
	   *     from.
	   * @return {*} Either the encoded body as a string, if successful,
	   *     or the unaltered body object if no encoding could be inferred.
	   */
	  _encodeBodyObject: function(body, contentType) {
	    if (typeof body == 'string') {
	      return body;  // Already encoded.
	    }
	    var bodyObj = /** @type {Object} */ (body);
	    switch (contentType) {
	      case ('application/json'):
	        return JSON.stringify(bodyObj);
	      case ('application/x-www-form-urlencoded'):
	        return this._wwwFormUrlEncode(bodyObj);
	    }
	    return body;
	  },

	  /**
	   * @param {Object} object The object to encode as x-www-form-urlencoded.
	   * @return {string} .
	   */
	  _wwwFormUrlEncode: function(object) {
	    if (!object) {
	      return '';
	    }
	    var pieces = [];
	    Object.keys(object).forEach(function(key) {
	      // TODO(rictic): handle array values here, in a consistent way with
	      //   iron-ajax params.
	      pieces.push(
	          this._wwwFormUrlEncodePiece(key) + '=' +
	          this._wwwFormUrlEncodePiece(object[key]));
	    }, this);
	    return pieces.join('&');
	  },

	  /**
	   * @param {*} str A key or value to encode as x-www-form-urlencoded.
	   * @return {string} .
	   */
	  _wwwFormUrlEncodePiece: function(str) {
	    // Spec says to normalize newlines to \r\n and replace %20 spaces with +.
	    // jQuery does this as well, so this is likely to be widely compatible.
	    if (str === null || str === undefined || !str.toString) {
	      return '';
	    }

	    return encodeURIComponent(str.toString().replace(/\r?\n/g, '\r\n'))
	        .replace(/%20/g, '+');
	  },

	  /**
	   * Updates the status code and status text.
	   */
	  _updateStatus: function() {
	    this._setStatus(this.xhr.status);
	    this._setStatusText(
	        (this.xhr.statusText === undefined) ? '' : this.xhr.statusText);
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	The `iron-ajax` element exposes network request functionality.

	    <iron-ajax
	        auto
	        url="https://www.googleapis.com/youtube/v3/search"
	        params='{"part":"snippet", "q":"polymer", "key": "YOUTUBE_API_KEY",
	"type": "video"}' handle-as="json" on-response="handleResponse"
	        debounce-duration="300"></iron-ajax>

	With `auto` set to `true`, the element performs a request whenever
	its `url`, `params` or `body` properties are changed. Automatically generated
	requests will be debounced in the case that multiple attributes are changed
	sequentially.

	Note: The `params` attribute must be double quoted JSON.

	You can trigger a request explicitly by calling `generateRequest` on the
	element.

	@demo demo/index.html
	*/
	Polymer({

	  is: 'iron-ajax',

	  /**
	   * Fired before a request is sent.
	   *
	   * @event iron-ajax-presend
	   */

	  /**
	   * Fired when a request is sent.
	   *
	   * @event request
	   */

	  /**
	   * Fired when a request is sent.
	   *
	   * @event iron-ajax-request
	   */

	  /**
	   * Fired when a response is received.
	   *
	   * @event response
	   */

	  /**
	   * Fired when a response is received.
	   *
	   * @event iron-ajax-response
	   */

	  /**
	   * Fired when an error is received.
	   *
	   * @event error
	   */

	  /**
	   * Fired when an error is received.
	   *
	   * @event iron-ajax-error
	   */

	  hostAttributes: {hidden: true},

	  properties: {
	    /**
	     * The URL target of the request.
	     */
	    url: {type: String},

	    /**
	     * An object that contains query parameters to be appended to the
	     * specified `url` when generating a request. If you wish to set the body
	     * content when making a POST request, you should use the `body` property
	     * instead.
	     */
	    params: {
	      type: Object,
	      value: function() {
	        return {};
	      }
	    },

	    /**
	     * The HTTP method to use such as 'GET', 'POST', 'PUT', or 'DELETE'.
	     * Default is 'GET'.
	     */
	    method: {type: String, value: 'GET'},

	    /**
	     * HTTP request headers to send.
	     *
	     * Example:
	     *
	     *     <iron-ajax
	     *         auto
	     *         url="http://somesite.com"
	     *         headers='{"X-Requested-With": "XMLHttpRequest"}'
	     *         handle-as="json"></iron-ajax>
	     *
	     * Note: setting a `Content-Type` header here will override the value
	     * specified by the `contentType` property of this element.
	     */
	    headers: {
	      type: Object,
	      value: function() {
	        return {};
	      }
	    },

	    /**
	     * Content type to use when sending data. If the `contentType` property
	     * is set and a `Content-Type` header is specified in the `headers`
	     * property, the `headers` property value will take precedence.
	     *
	     * Varies the handling of the `body` param.
	     */
	    contentType: {type: String, value: null},

	    /**
	     * Body content to send with the request, typically used with "POST"
	     * requests.
	     *
	     * If body is a string it will be sent unmodified.
	     *
	     * If Content-Type is set to a value listed below, then
	     * the body will be encoded accordingly.
	     *
	     *    * `content-type="application/json"`
	     *      * body is encoded like `{"foo":"bar baz","x":1}`
	     *    * `content-type="application/x-www-form-urlencoded"`
	     *      * body is encoded like `foo=bar+baz&x=1`
	     *
	     * Otherwise the body will be passed to the browser unmodified, and it
	     * will handle any encoding (e.g. for FormData, Blob, ArrayBuffer).
	     *
	     * @type
	     * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object)
	     */
	    body: {type: Object, value: null},

	    /**
	     * Toggle whether XHR is synchronous or asynchronous. Don't change this
	     * to true unless You Know What You Are Doing™.
	     */
	    sync: {type: Boolean, value: false},

	    /**
	     * Specifies what data to store in the `response` property, and
	     * to deliver as `event.detail.response` in `response` events.
	     *
	     * One of:
	     *
	     *    `text`: uses `XHR.responseText`.
	     *
	     *    `xml`: uses `XHR.responseXML`.
	     *
	     *    `json`: uses `XHR.responseText` parsed as JSON.
	     *
	     *    `arraybuffer`: uses `XHR.response`.
	     *
	     *    `blob`: uses `XHR.response`.
	     *
	     *    `document`: uses `XHR.response`.
	     */
	    handleAs: {type: String, value: 'json'},

	    /**
	     * Set the withCredentials flag on the request.
	     */
	    withCredentials: {type: Boolean, value: false},

	    /**
	     * Set the timeout flag on the request.
	     */
	    timeout: {type: Number, value: 0},

	    /**
	     * If true, automatically performs an Ajax request when either `url` or
	     * `params` changes.
	     */
	    auto: {type: Boolean, value: false},

	    /**
	     * If true, error messages will automatically be logged to the console.
	     */
	    verbose: {type: Boolean, value: false},

	    /**
	     * The most recent request made by this iron-ajax element.
	     *
	     * @type {Object|undefined}
	     */
	    lastRequest: {type: Object, notify: true, readOnly: true},

	    /**
	     * The `progress` property of this element's `lastRequest`.
	     *
	     * @type {Object|undefined}
	     */
	    lastProgress: {type: Object, notify: true, readOnly: true},

	    /**
	     * True while lastRequest is in flight.
	     */
	    loading: {type: Boolean, notify: true, readOnly: true},

	    /**
	     * lastRequest's response.
	     *
	     * Note that lastResponse and lastError are set when lastRequest finishes,
	     * so if loading is true, then lastResponse and lastError will correspond
	     * to the result of the previous request.
	     *
	     * The type of the response is determined by the value of `handleAs` at
	     * the time that the request was generated.
	     *
	     * @type {Object}
	     */
	    lastResponse: {type: Object, notify: true, readOnly: true},

	    /**
	     * lastRequest's error, if any.
	     *
	     * @type {Object}
	     */
	    lastError: {type: Object, notify: true, readOnly: true},

	    /**
	     * An Array of all in-flight requests originating from this iron-ajax
	     * element.
	     */
	    activeRequests: {
	      type: Array,
	      notify: true,
	      readOnly: true,
	      value: function() {
	        return [];
	      }
	    },

	    /**
	     * Length of time in milliseconds to debounce multiple automatically
	     * generated requests.
	     */
	    debounceDuration: {type: Number, value: 0, notify: true},

	    /**
	     * Prefix to be stripped from a JSON response before parsing it.
	     *
	     * In order to prevent an attack using CSRF with Array responses
	     * (http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx/)
	     * many backends will mitigate this by prefixing all JSON response bodies
	     * with a string that would be nonsensical to a JavaScript parser.
	     *
	     */
	    jsonPrefix: {type: String, value: ''},

	    /**
	     * By default, iron-ajax's events do not bubble. Setting this attribute will
	     * cause its request and response events as well as its iron-ajax-request,
	     * -response,  and -error events to bubble to the window object. The vanilla
	     * error event never bubbles when using shadow dom even if this.bubbles is
	     * true because a scoped flag is not passed with it (first link) and because
	     * the shadow dom spec did not used to allow certain events, including
	     * events named error, to leak outside of shadow trees (second link).
	     * https://www.w3.org/TR/shadow-dom/#scoped-flag
	     * https://www.w3.org/TR/2015/WD-shadow-dom-20151215/#events-that-are-not-leaked-into-ancestor-trees
	     */
	    bubbles: {type: Boolean, value: false},

	    /**
	     * Changes the [`completes`](iron-request#property-completes) promise chain
	     * from `generateRequest` to reject with an object
	     * containing the original request, as well an error message.
	     * If false (default), the promise rejects with an error message only.
	     */
	    rejectWithRequest: {type: Boolean, value: false},

	    _boundHandleResponse: {
	      type: Function,
	      value: function() {
	        return this._handleResponse.bind(this);
	      }
	    }
	  },

	  observers:
	      ['_requestOptionsChanged(url, method, params.*, headers, contentType, ' +
	       'body, sync, handleAs, jsonPrefix, withCredentials, timeout, auto)'],

	  created: function() {
	    this._boundOnProgressChanged = this._onProgressChanged.bind(this);
	  },

	  /**
	   * The query string that should be appended to the `url`, serialized from
	   * the current value of `params`.
	   *
	   * @return {string}
	   */
	  get queryString() {
	    var queryParts = [];
	    var param;
	    var value;

	    for (param in this.params) {
	      value = this.params[param];
	      param = window.encodeURIComponent(param);

	      if (Array.isArray(value)) {
	        for (var i = 0; i < value.length; i++) {
	          queryParts.push(param + '=' + window.encodeURIComponent(value[i]));
	        }
	      } else if (value !== null) {
	        queryParts.push(param + '=' + window.encodeURIComponent(value));
	      } else {
	        queryParts.push(param);
	      }
	    }

	    return queryParts.join('&');
	  },

	  /**
	   * The `url` with query string (if `params` are specified), suitable for
	   * providing to an `iron-request` instance.
	   *
	   * @return {string}
	   */
	  get requestUrl() {
	    var queryString = this.queryString;
	    var url = this.url || '';

	    if (queryString) {
	      var bindingChar = url.indexOf('?') >= 0 ? '&' : '?';
	      return url + bindingChar + queryString;
	    }

	    return url;
	  },

	  /**
	   * An object that maps header names to header values, first applying the
	   * the value of `Content-Type` and then overlaying the headers specified
	   * in the `headers` property.
	   *
	   * @return {Object}
	   */
	  get requestHeaders() {
	    var headers = {};
	    var contentType = this.contentType;
	    if (contentType == null && (typeof this.body === 'string')) {
	      contentType = 'application/x-www-form-urlencoded';
	    }
	    if (contentType) {
	      headers['content-type'] = contentType;
	    }
	    var header;

	    if (typeof this.headers === 'object') {
	      for (header in this.headers) {
	        headers[header] = this.headers[header].toString();
	      }
	    }

	    return headers;
	  },

	  _onProgressChanged: function(event) {
	    this._setLastProgress(event.detail.value);
	  },

	  /**
	   * Request options suitable for generating an `iron-request` instance based
	   * on the current state of the `iron-ajax` instance's properties.
	   *
	   * @return {{
	   *   url: string,
	   *   method: (string|undefined),
	   *   async: (boolean|undefined),
	   *   body:
	   * (ArrayBuffer|ArrayBufferView|Blob|Document|FormData|null|string|undefined|Object),
	   *   headers: (Object|undefined),
	   *   handleAs: (string|undefined),
	   *   jsonPrefix: (string|undefined),
	   *   withCredentials: (boolean|undefined)}}
	   */
	  toRequestOptions: function() {
	    return {
	      url: this.requestUrl || '',
	      method: this.method,
	      headers: this.requestHeaders,
	      body: this.body,
	      async: !this.sync,
	      handleAs: this.handleAs,
	      jsonPrefix: this.jsonPrefix,
	      withCredentials: this.withCredentials,
	      timeout: this.timeout,
	      rejectWithRequest: this.rejectWithRequest,
	    };
	  },

	  /**
	   * Performs an AJAX request to the specified URL.
	   *
	   * @return {!IronRequestElement}
	   */
	  generateRequest: function() {
	    var request = /** @type {!IronRequestElement} */ (
	        document.createElement('iron-request'));
	    var requestOptions = this.toRequestOptions();

	    this.push('activeRequests', request);

	    request.completes.then(this._boundHandleResponse)
	        .catch(this._handleError.bind(this, request))
	        .then(this._discardRequest.bind(this, request));

	    var evt = this.fire(
	        'iron-ajax-presend',
	        {request: request, options: requestOptions},
	        {bubbles: this.bubbles, cancelable: true});

	    if (evt.defaultPrevented) {
	      request.abort();
	      request.rejectCompletes(request);
	      return request;
	    }

	    if (this.lastRequest) {
	      this.lastRequest.removeEventListener(
	          'iron-request-progress-changed', this._boundOnProgressChanged);
	    }

	    request.addEventListener(
	        'iron-request-progress-changed', this._boundOnProgressChanged);

	    request.send(requestOptions);
	    this._setLastProgress(null);
	    this._setLastRequest(request);
	    this._setLoading(true);

	    this.fire(
	        'request',
	        {request: request, options: requestOptions},
	        {bubbles: this.bubbles, composed: true});

	    this.fire(
	        'iron-ajax-request',
	        {request: request, options: requestOptions},
	        {bubbles: this.bubbles, composed: true});

	    return request;
	  },

	  _handleResponse: function(request) {
	    if (request === this.lastRequest) {
	      this._setLastResponse(request.response);
	      this._setLastError(null);
	      this._setLoading(false);
	    }
	    this.fire('response', request, {bubbles: this.bubbles, composed: true});
	    this.fire(
	        'iron-ajax-response', request, {bubbles: this.bubbles, composed: true});
	  },

	  _handleError: function(request, error) {
	    if (this.verbose) {
	      Base._error(error);
	    }

	    if (request === this.lastRequest) {
	      this._setLastError({
	        request: request,
	        error: error,
	        status: request.xhr.status,
	        statusText: request.xhr.statusText,
	        response: request.xhr.response
	      });
	      this._setLastResponse(null);
	      this._setLoading(false);
	    }

	    // Tests fail if this goes after the normal this.fire('error', ...)
	    this.fire(
	        'iron-ajax-error',
	        {request: request, error: error},
	        {bubbles: this.bubbles, composed: true});

	    this.fire(
	        'error',
	        {request: request, error: error},
	        {bubbles: this.bubbles, composed: true});
	  },

	  _discardRequest: function(request) {
	    var requestIndex = this.activeRequests.indexOf(request);

	    if (requestIndex > -1) {
	      this.splice('activeRequests', requestIndex, 1);
	    }
	  },

	  _requestOptionsChanged: function() {
	    this.debounce('generate-request', function() {
	      if (this.url == null) {
	        return;
	      }

	      if (this.auto) {
	        this.generateRequest();
	      }
	    }, this.debounceDuration);
	  },

	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`<iron-form>` is a wrapper around the HTML `<form>` element, that can
	validate and submit both custom and native HTML elements. Note that this
	is a breaking change from iron-form 1.0, which was a type extension.

	It has two modes: if `allow-redirect` is true, then after the form submission
	you will be redirected to the server response. Otherwise, if it is false, it
	will use an `iron-ajax` element to submit the form contents to the server.

	  Example:

	    <iron-form>
	      <form method="get" action="/form/handler">
	        <input type="text" name="name" value="Batman">
	        <input type="checkbox" name="donuts" checked> I like donuts<br>
	        <paper-checkbox name="cheese" value="yes" checked></paper-checkbox>
	      </form>
	    </iron-form>

	By default, a native `<button>` element will submit this form. However, if you
	want to submit it from a custom element's click handler, you need to explicitly
	call the `iron-form`'s `submit` method.

	  Example (using `<paper-button>` for the form `<iron-form id="myForm">`):

	    <paper-button raised on-click="submitForm">Submit</paper-button>

	    function submitForm() {
	      this.$.myForm.submit();
	    }

	  or (using `<button>` for a form in the same document):

	    <button raised onclick="submitForm()">Submit</button>

	    function submitForm() {
	      document.getElementById('myForm').submit();
	    }

	If you are not using the `allow-redirect` mode, then you also have the option of
	customizing the request sent to the server. To do so, you can listen to the
	`iron-form-presubmit` event, and modify the form's
	[`iron-ajax`](https://elements.polymer-project.org/elements/iron-ajax) object.
	However, If you want to not use `iron-ajax` at all, you can cancel the event and
	do your own custom submission:

	  Example of modifying the request, but still using the build-in form
	submission:

	    form.addEventListener('iron-form-presubmit', function() {
	      this.request.method = 'put';
	      this.request.params['extraParam'] = 'someValue';
	    });

	  Example of bypassing the build-in form submission:

	    form.addEventListener('iron-form-presubmit', function(event) {
	      event.preventDefault();
	      var firebase = new Firebase(form.getAttribute('action'));
	      firebase.set(form.serializeForm());
	    });

	Note that if you're dynamically creating this element, it's mandatory that you
	first create the contained `<form>` element and all its children, and only then
	attach it to the `<iron-form>`:

	  var wrapper = document.createElement('iron-form');
	  var form = document.createElement('form');
	  var input = document.createElement('input');
	  form.appendChild(input);
	  document.body.appendChild(wrapper);
	  wrapper.appendChild(form);

	@element iron-form
	@hero hero.svg
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
      }
    </style>

    <!-- This form is used to collect the elements that should be submitted -->
    <slot></slot>

    <!-- This form is used for submission -->
    <form id="helper" action\$="[[action]]" method\$="[[method]]" enctype\$="[[enctype]]"></form>
`,

	  is: 'iron-form',

	  properties: {
	    /*
	     * Set this to true if you don't want the form to be submitted through an
	     * ajax request, and you want the page to redirect to the action URL
	     * after the form has been submitted.
	     */
	    allowRedirect: {type: Boolean, value: false},
	    /**
	     * HTTP request headers to send. See PolymerElements/iron-ajax for
	     * more details. Only works when `allowRedirect` is false.
	     */
	    headers: {
	      type: Object,
	      value: function() {
	        return {};
	      }
	    },
	    /**
	     * Set the `withCredentials` flag on the request. See
	     * PolymerElements/iron-ajax for more details. Only works when
	     * `allowRedirect` is false.
	     */
	    withCredentials: {type: Boolean, value: false},
	  },

	  /**
	   * Fired if the form cannot be submitted because it's invalid.
	   *
	   * @event iron-form-invalid
	   */

	  /**
	   * Fired after the form is submitted.
	   *
	   * @event iron-form-submit
	   */

	  /**
	   * Fired before the form is submitted.
	   *
	   * @event iron-form-presubmit
	   */

	  /**
	   * Fired after the form is reset.
	   *
	   * @event iron-form-reset
	   */

	  /**
	   * Fired after the form is submitted and a response is received. An
	   * IronRequestElement is included as the event.detail object.
	   *
	   * @event iron-form-response
	   */

	  /**
	   * Fired after the form is submitted and an error is received. An
	   * error message is included in event.detail.error and an
	   * IronRequestElement is included in event.detail.request.
	   *
	   * @event iron-form-error
	   */

	  /**
	   * @return {void}
	   */
	  attached: function() {
	    // We might have been detached then re-attached.
	    // Avoid searching again for the <form> if we already found it.
	    if (this._form) {
	      return;
	    }
	    // Search for the `<form>`, if we don't find it, observe for
	    // mutations.
	    this._form = dom(this).querySelector('form');
	    if (this._form) {
	      this._init();
	      // Since some elements might not be upgraded yet at this time,
	      // we won't be able to look into their shadowRoots for submittables.
	      // We wait a tick and check again for any missing submittable default
	      // values.
	      this.async(this._saveInitialValues.bind(this), 1);
	    } else {
	      this._nodeObserver = dom(this).observeNodes(function(mutations) {
	        for (var i = 0; i < mutations.addedNodes.length; i++) {
	          if (mutations.addedNodes[i].tagName === 'FORM') {
	            this._form = mutations.addedNodes[i];
	            // At this point in time, all custom elements are expected
	            // to be upgraded, hence we'll be able to traverse their
	            // shadowRoots.
	            this._init();
	            dom(this).unobserveNodes(this._nodeObserver);
	            this._nodeObserver = null;
	          }
	        }
	      }.bind(this));
	    }
	  },

	  /**
	   * @return {void}
	   */
	  detached: function() {
	    if (this._nodeObserver) {
	      dom(this).unobserveNodes(this._nodeObserver);
	      this._nodeObserver = null;
	    }
	  },

	  _init: function() {
	    this._form.addEventListener('submit', this.submit.bind(this));
	    this._form.addEventListener('reset', this.reset.bind(this));

	    // Save the initial values.
	    this._defaults = this._defaults || new WeakMap();
	    this._saveInitialValues();
	  },

	  /**
	   * Saves the values of all form elements that will be used when resetting
	   * the form. Initially called asynchronously on attach. Any time you
	   * call this function, the previously saved values for a form element will
	   * be overwritten.
	   *
	   * This function is useful if you are dynamically adding elements to
	   * the form, or if your elements are asynchronously setting their values.
	   * @return {void}
	   */
	  saveResetValues: function() {
	    this._saveInitialValues(true);
	  },

	  /**
	   * @param {boolean=} overwriteValues
	   * @return {void}
	   */
	  _saveInitialValues: function(overwriteValues) {
	    var nodes = this._getValidatableElements();
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      if (!this._defaults.has(node) || overwriteValues) {
	        // Submittables are expected to have `value` property,
	        // that's what gets serialized.
	        var defaults = {value: node.value};
	        if ('checked' in node) {
	          defaults.checked = node.checked;
	        }
	        // In 1.x iron-form would reset `invalid`, so
	        // keep it here for backwards compat.
	        if ('invalid' in node) {
	          defaults.invalid = node.invalid;
	        }
	        this._defaults.set(node, defaults);
	      }
	    }
	  },

	  /**
	   * Validates all the required elements (custom and native) in the form.
	   * @return {boolean} True if all the elements are valid.
	   */
	  validate: function() {
	    // If you've called this before distribution happened, bail out.
	    if (!this._form) {
	      return false;
	    }

	    if (this._form.getAttribute('novalidate') === '')
	      return true;

	    // Start by making the form check the native elements it knows about.
	    var valid = this._form.checkValidity();
	    var elements = this._getValidatableElements();

	    // Go through all the elements, and validate the custom ones.
	    for (var el, i = 0; el = elements[i], i < elements.length; i++) {
	      // This is weird to appease the compiler. We assume the custom element
	      // has a validate() method, otherwise we can't check it.
	      var validatable = /** @type {{validate: (function() : boolean)}} */ (el);
	      if (validatable.validate) {
	        valid = !!validatable.validate() && valid;
	      }
	    }
	    return valid;
	  },

	  /**
	   * Submits the form.
	   *
	   * @param {Event=} event
	   * @return {void}
	   */
	  submit: function(event) {
	    // We are not using this form for submission, so always cancel its event.
	    if (event) {
	      event.preventDefault();
	    }

	    // If you've called this before distribution happened, bail out.
	    if (!this._form) {
	      return;
	    }

	    if (!this.validate()) {
	      this.fire('iron-form-invalid');
	      return;
	    }

	    // Remove any existing children in the submission form (from a previous
	    // submit).
	    this.$.helper.textContent = '';

	    var json = this.serializeForm();

	    // If we want a redirect, submit the form natively.
	    if (this.allowRedirect) {
	      // If we're submitting the form natively, then create a hidden element for
	      // each of the values.
	      for (var element in json) {
	        this.$.helper.appendChild(
	            this._createHiddenElement(element, json[element]));
	      }

	      // Copy the original form attributes.
	      this.$.helper.action = this._form.getAttribute('action');
	      this.$.helper.method = this._form.getAttribute('method') || 'GET';
	      this.$.helper.contentType = this._form.getAttribute('enctype') ||
	          'application/x-www-form-urlencoded';

	      this.$.helper.submit();
	      this.fire('iron-form-submit');
	    } else {
	      this._makeAjaxRequest(json);
	    }
	  },

	  /**
	   * Resets the form to the default values.
	   *
	   * @param {Event=} event
	   * @return {void}
	   */
	  reset: function(event) {
	    // We are not using this form for submission, so always cancel its event.
	    if (event)
	      event.preventDefault();

	    // If you've called this before distribution happened, bail out.
	    if (!this._form) {
	      return;
	    }

	    // Ensure the native form fired the `reset` event.
	    // User might have bound `<button on-click="_resetIronForm">`, or directly
	    // called `ironForm.reset()`. In these cases we want to first reset the
	    // native form.
	    if (!event || event.type !== 'reset' || event.target !== this._form) {
	      this._form.reset();
	      return;
	    }

	    // Load the initial values.
	    var nodes = this._getValidatableElements();
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      if (this._defaults.has(node)) {
	        var defaults = this._defaults.get(node);
	        for (var propName in defaults) {
	          node[propName] = defaults[propName];
	        }
	      }
	    }

	    this.fire('iron-form-reset');
	  },

	  /**
	   * Serializes the form as will be used in submission. Note that `serialize`
	   * is a Polymer reserved keyword, so calling `someIronForm`.serialize()`
	   * will give you unexpected results.
	   * @return {!Object<string, *>} An object containing name-value pairs for elements that
	   *                  would be submitted.
	   */
	  serializeForm: function() {
	    // Only elements that have a `name` and are not disabled are submittable.
	    var elements = this._getSubmittableElements();
	    var json = {};
	    for (var i = 0; i < elements.length; i++) {
	      var values = this._serializeElementValues(elements[i]);
	      for (var v = 0; v < values.length; v++) {
	        this._addSerializedElement(json, elements[i].name, values[v]);
	      }
	    }
	    return json;
	  },

	  _handleFormResponse: function(event) {
	    this.fire('iron-form-response', event.detail);
	  },

	  _handleFormError: function(event) {
	    this.fire('iron-form-error', event.detail);
	  },

	  _makeAjaxRequest: function(json) {
	    // Initialize the iron-ajax element if we haven't already.
	    if (!this.request) {
	      this.request = document.createElement('iron-ajax');
	      this.request.addEventListener(
	          'response', this._handleFormResponse.bind(this));
	      this.request.addEventListener('error', this._handleFormError.bind(this));
	    }

	    // Native forms can also index elements magically by their name (can't make
	    // this up if I tried) so we need to get the correct attributes, not the
	    // elements with those names.
	    this.request.url = this._form.getAttribute('action');
	    this.request.method = this._form.getAttribute('method') || 'GET';
	    this.request.contentType = this._form.getAttribute('enctype') ||
	        'application/x-www-form-urlencoded';
	    this.request.withCredentials = this.withCredentials;
	    this.request.headers = this.headers;

	    if (this._form.method.toUpperCase() === 'POST') {
	      this.request.body = json;
	    } else {
	      this.request.params = json;
	    }

	    // Allow for a presubmit hook
	    var event = this.fire('iron-form-presubmit', {}, {cancelable: true});
	    if (!event.defaultPrevented) {
	      this.request.generateRequest();
	      this.fire('iron-form-submit', json);
	    }
	  },

	  _getValidatableElements: function() {
	    return this._findElements(
	        this._form, true /* ignoreName */, false /* skipSlots */);
	  },

	  _getSubmittableElements: function() {
	    return this._findElements(
	        this._form, false /* ignoreName */, false /* skipSlots */);
	  },

	  /**
	   * Traverse the parent element to find and add all submittable nodes to
	   * `submittable`.
	   * @param  {!Node} parent The parent node
	   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded
	   * @param  {!boolean} skipSlots  Whether to skip traversing of slot elements
	   * @param  {!Array<!Node>=} submittable Reference to the array of submittables
	   * @return {!Array<!Node>}
	   * @private
	   */
	  _findElements: function(parent, ignoreName, skipSlots, submittable) {
	    submittable = submittable || [];
	    var nodes = dom(parent).querySelectorAll('*');
	    for (var i = 0; i < nodes.length; i++) {
	      // An element is submittable if it is not disabled, and if it has a
	      // name attribute.
	      if (!skipSlots &&
	          (nodes[i].localName === 'slot' || nodes[i].localName === 'content')) {
	        this._searchSubmittableInSlot(submittable, nodes[i], ignoreName);
	      } else {
	        this._searchSubmittable(submittable, nodes[i], ignoreName);
	      }
	    }
	    return submittable;
	  },

	  /**
	   * Traverse the distributed nodes of a slot or content element
	   * and add all submittable nodes to `submittable`.
	   * @param  {!Array<!Node>} submittable Reference to the array of submittables
	   * @param  {!Node} node The slot or content node
	   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded
	   * @return {void}
	   * @private
	   */
	  _searchSubmittableInSlot: function(submittable, node, ignoreName) {
	    var assignedNodes = dom(node).getDistributedNodes();

	    for (var i = 0; i < assignedNodes.length; i++) {
	      if (assignedNodes[i].nodeType === Node.TEXT_NODE) {
	        continue;
	      }

	      // Note: assignedNodes does not contain <slot> or <content> because
	      // getDistributedNodes flattens the tree.
	      this._searchSubmittable(submittable, assignedNodes[i], ignoreName);
	      var nestedAssignedNodes = dom(assignedNodes[i]).querySelectorAll('*');
	      for (var j = 0; j < nestedAssignedNodes.length; j++) {
	        this._searchSubmittable(
	            submittable, nestedAssignedNodes[j], ignoreName);
	      }
	    }
	  },

	  /**
	   * Traverse the distributed nodes of a slot or content element
	   * and add all submittable nodes to `submittable`.
	   * @param  {!Array<!Node>} submittable Reference to the array of submittables
	   * @param  {!Node} node The node to be
	   * @param  {!boolean} ignoreName  Whether the name of the submittable nodes should be disregarded
	   * @return {void}
	   * @private
	   */
	  _searchSubmittable: function(submittable, node, ignoreName) {
	    if (this._isSubmittable(node, ignoreName)) {
	      submittable.push(node);
	    } else if (node.root) {
	      this._findElements(
	          node.root, ignoreName, true /* skipSlots */, submittable);
	    }
	  },

	  /**
	   * An element is submittable if it is not disabled, and if it has a
	   * 'name' attribute. If we ignore the name, check if is validatable.
	   * This allows `_findElements` to decide if to explore an element's shadowRoot
	   * or not: an element implementing `validate()` is considered validatable, and
	   * we don't search for validatables in its shadowRoot.
	   * @param {!Node} node
	   * @param {!boolean} ignoreName
	   * @return {boolean}
	   * @private
	   */
	  _isSubmittable: function(node, ignoreName) {
	    return (
	        !node.disabled &&
	        (ignoreName ? node.name || typeof node.validate === 'function' :
	                      node.name));
	  },

	  _serializeElementValues: function(element) {
	    // We will assume that every custom element that needs to be serialized
	    // has a `value` property, and it contains the correct value.
	    // The only weird one is an element that implements
	    // IronCheckedElementBehaviour, in which case like the native checkbox/radio
	    // button, it's only used when checked. For native elements, from
	    // https://www.w3.org/TR/html5/forms.html#the-form-element. Native
	    // submittable elements: button, input, keygen, object, select, textarea;
	    // 1. We will skip `keygen and `object` for this iteration, and deal with
	    // them if they're actually required.
	    // 2. <button> and <textarea> have a `value` property, so they behave like
	    //    the custom elements.
	    // 3. <select> can have multiple options selected, in which case its
	    //    `value` is incorrect, and we must use the values of each of its
	    //    `selectedOptions`
	    // 4. <input> can have a whole bunch of behaviours, so it's handled
	    // separately.
	    // 5. Buttons are hard. The button that was clicked to submit the form
	    //    is the one who's name/value gets sent to the server.
	    var tag = element.tagName.toLowerCase();
	    if (tag === 'button' ||
	        (tag === 'input' &&
	         (element.type === 'submit' || element.type === 'reset'))) {
	      return [];
	    }

	    if (tag === 'select') {
	      return this._serializeSelectValues(element);
	    } else if (tag === 'input') {
	      return this._serializeInputValues(element);
	    } else {
	      if (element['_hasIronCheckedElementBehavior'] && !element.checked)
	        return [];
	      return [element.value];
	    }
	  },

	  _serializeSelectValues: function(element) {
	    var values = [];

	    // A <select multiple> has an array of options, some of which can be
	    // selected.
	    for (var i = 0; i < element.options.length; i++) {
	      if (element.options[i].selected) {
	        values.push(element.options[i].value);
	      }
	    }
	    return values;
	  },

	  _serializeInputValues: function(element) {
	    // Most of the inputs use their 'value' attribute, with the exception
	    // of radio buttons, checkboxes and file.
	    var type = element.type.toLowerCase();

	    // Don't do anything for unchecked checkboxes/radio buttons.
	    // Don't do anything for file, since that requires a different request.
	    if (((type === 'checkbox' || type === 'radio') && !element.checked) ||
	        type === 'file') {
	      return [];
	    }
	    return [element.value];
	  },

	  _createHiddenElement: function(name, value) {
	    var input = document.createElement('input');
	    input.setAttribute('type', 'hidden');
	    input.setAttribute('name', name);
	    input.setAttribute('value', value);
	    return input;
	  },

	  _addSerializedElement: function(json, name, value) {
	    // If the name doesn't exist, add it. Otherwise, serialize it to
	    // an array,
	    if (json[name] === undefined) {
	      json[name] = value;
	    } else {
	      if (!Array.isArray(json[name])) {
	        json[name] = [json[name]];
	      }
	      json[name].push(value);
	    }
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`iron-a11y-announcer` is a singleton element that is intended to add a11y
	to features that require on-demand announcement from screen readers. In
	order to make use of the announcer, it is best to request its availability
	in the announcing element.

	Example:

	    Polymer({

	      is: 'x-chatty',

	      attached: function() {
	        // This will create the singleton element if it has not
	        // been created yet:
	        Polymer.IronA11yAnnouncer.requestAvailability();
	      }
	    });

	After the `iron-a11y-announcer` has been made available, elements can
	make announces by firing bubbling `iron-announce` events.

	Example:

	    this.fire('iron-announce', {
	      text: 'This is an announcement!'
	    }, { bubbles: true });

	Note: announcements are only audible if you have a screen reader enabled.

	@group Iron Elements
	@demo demo/index.html
	*/
	const IronA11yAnnouncer = Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
        position: fixed;
        clip: rect(0px,0px,0px,0px);
      }
    </style>
    <div aria-live\$="[[mode]]">[[_text]]</div>
`,

	  is: 'iron-a11y-announcer',

	  properties: {

	    /**
	     * The value of mode is used to set the `aria-live` attribute
	     * for the element that will be announced. Valid values are: `off`,
	     * `polite` and `assertive`.
	     */
	    mode: {type: String, value: 'polite'},

	    _text: {type: String, value: ''}
	  },

	  created: function() {
	    if (!IronA11yAnnouncer.instance) {
	      IronA11yAnnouncer.instance = this;
	    }

	    document.body.addEventListener(
	        'iron-announce', this._onIronAnnounce.bind(this));
	  },

	  /**
	   * Cause a text string to be announced by screen readers.
	   *
	   * @param {string} text The text that should be announced.
	   */
	  announce: function(text) {
	    this._text = '';
	    this.async(function() {
	      this._text = text;
	    }, 100);
	  },

	  _onIronAnnounce: function(event) {
	    if (event.detail && event.detail.text) {
	      this.announce(event.detail.text);
	    }
	  }
	});

	IronA11yAnnouncer.instance = null;

	IronA11yAnnouncer.requestAvailability = function() {
	  if (!IronA11yAnnouncer.instance) {
	    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');
	  }

	  document.body.appendChild(IronA11yAnnouncer.instance);
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Singleton IronMeta instance.
	 */
	let IronValidatableBehaviorMeta = null;

	/**
	 * `Use IronValidatableBehavior` to implement an element that validates
	 * user input. Use the related `IronValidatorBehavior` to add custom
	 * validation logic to an iron-input.
	 *
	 * By default, an `<iron-form>` element validates its fields when the user
	 * presses the submit button. To validate a form imperatively, call the form's
	 * `validate()` method, which in turn will call `validate()` on all its
	 * children. By using `IronValidatableBehavior`, your custom element
	 * will get a public `validate()`, which will return the validity of the
	 * element, and a corresponding `invalid` attribute, which can be used for
	 * styling.
	 *
	 * To implement the custom validation logic of your element, you must override
	 * the protected `_getValidity()` method of this behaviour, rather than
	 * `validate()`. See
	 * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)
	 * for an example.
	 *
	 * ### Accessibility
	 *
	 * Changing the `invalid` property, either manually or by calling `validate()`
	 * will update the `aria-invalid` attribute.
	 *
	 * @demo demo/index.html
	 * @polymerBehavior
	 */
	const IronValidatableBehavior = {

	  properties: {
	    /**
	     * Name of the validator to use.
	     */
	    validator: {type: String},

	    /**
	     * True if the last call to `validate` is invalid.
	     */
	    invalid: {
	      notify: true,
	      reflectToAttribute: true,
	      type: Boolean,
	      value: false,
	      observer: '_invalidChanged'
	    },
	  },

	  registered: function() {
	    IronValidatableBehaviorMeta = new IronMeta({type: 'validator'});
	  },

	  _invalidChanged: function() {
	    if (this.invalid) {
	      this.setAttribute('aria-invalid', 'true');
	    } else {
	      this.removeAttribute('aria-invalid');
	    }
	  },

	  /* Recompute this every time it's needed, because we don't know if the
	   * underlying IronValidatableBehaviorMeta has changed. */
	  get _validator() {
	    return IronValidatableBehaviorMeta &&
	        IronValidatableBehaviorMeta.byKey(this.validator);
	  },

	  /**
	   * @return {boolean} True if the validator `validator` exists.
	   */
	  hasValidator: function() {
	    return this._validator != null;
	  },

	  /**
	   * Returns true if the `value` is valid, and updates `invalid`. If you want
	   * your element to have custom validation logic, do not override this method;
	   * override `_getValidity(value)` instead.

	   * @param {Object} value Deprecated: The value to be validated. By default,
	   * it is passed to the validator's `validate()` function, if a validator is
	   set.
	   * If this argument is not specified, then the element's `value` property
	   * is used, if it exists.
	   * @return {boolean} True if `value` is valid.
	   */
	  validate: function(value) {
	    // If this is an element that also has a value property, and there was
	    // no explicit value argument passed, use the element's property instead.
	    if (value === undefined && this.value !== undefined)
	      this.invalid = !this._getValidity(this.value);
	    else
	      this.invalid = !this._getValidity(value);
	    return !this.invalid;
	  },

	  /**
	   * Returns true if `value` is valid.  By default, it is passed
	   * to the validator's `validate()` function, if a validator is set. You
	   * should override this method if you want to implement custom validity
	   * logic for your element.
	   *
	   * @param {Object} value The value to be validated.
	   * @return {boolean} True if `value` is valid.
	   */

	  _getValidity: function(value) {
	    if (this.hasValidator()) {
	      return this._validator.validate(value);
	    }
	    return true;
	  }
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way
	binding and prevention of invalid input. To use it, you must distribute a native
	`<input>` yourself. You can continue to use the native `input` as you would
	normally:

	    <iron-input>
	      <input>
	    </iron-input>

	    <iron-input>
	      <input type="email" disabled>
	    </iron-input>

	### Two-way binding

	By default you can only get notified of changes to a native `<input>`'s `value`
	due to user input:

	    <input value="{{myValue::input}}">

	This means that if you imperatively set the value (i.e. `someNativeInput.value =
	'foo'`), no events will be fired and this change cannot be observed.

	`iron-input` adds the `bind-value` property that mirrors the native `input`'s
	'`value` property; this property can be used for two-way data binding.
	`bind-value` will notify if it is changed either by user input or by script.

	    <iron-input bind-value="{{myValue}}">
	      <input>
	    </iron-input>

	Note: this means that if you want to imperatively set the native `input`'s, you
	_must_ set `bind-value` instead, so that the wrapper `iron-input` can be
	notified.

	### Validation

	`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`
	has a `validate()` method (which internally just checks the distributed
	`input`'s validity), which sets an `invalid` attribute that can also be used for
	styling.

	To validate automatically as you type, you can use the `auto-validate`
	attribute.

	`iron-input` also fires an `iron-input-validate` event after `validate()` is
	called. You can use it to implement a custom validator:

	    var CatsOnlyValidator = {
	      validate: function(ironInput) {
	        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';
	        ironInput.invalid = !valid;
	        return valid;
	      }
	    }
	    ironInput.addEventListener('iron-input-validate', function() {
	      CatsOnly.validate(input2);
	    });

	You can also use an element implementing an
	[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).
	This example can also be found in the demo for this element:

	    <iron-input validator="cats-only">
	      <input>
	    </iron-input>

	### Preventing invalid input

	It may be desirable to only allow users to enter certain characters. You can use
	the `allowed-pattern` attribute to accomplish this. This feature is separate
	from validation, and `allowed-pattern` does not affect how the input is
	validated.

	    // Only allow typing digits, but a valid input has exactly 5 digits.
	    <iron-input allowed-pattern="[0-9]">
	      <input pattern="\d{5}">
	    </iron-input>

	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
      }
    </style>
    <slot id="content"></slot>
`,

	  is: 'iron-input',
	  behaviors: [IronValidatableBehavior],

	  /**
	   * Fired whenever `validate()` is called.
	   *
	   * @event iron-input-validate
	   */

	  properties: {

	    /**
	     * Use this property instead of `value` for two-way data binding, or to
	     * set a default value for the input. **Do not** use the distributed
	     * input's `value` property to set a default value.
	     */
	    bindValue: {type: String, value: ''},

	    /**
	     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0
	     * backcompatibility, if you were one-way binding to the Polymer 1.0
	     * `input is="iron-input"` value attribute).
	     */
	    value: {type: String, computed: '_computeValue(bindValue)'},

	    /**
	     * Regex-like list of characters allowed as input; all characters not in the
	     * list will be rejected. The recommended format should be a list of allowed
	     * characters, for example, `[a-zA-Z0-9.+-!;:]`.
	     *
	     * This pattern represents the allowed characters for the field; as the user
	     * inputs text, each individual character will be checked against the
	     * pattern (rather than checking the entire value as a whole). If a
	     * character is not a match, it will be rejected.
	     *
	     * Pasted input will have each character checked individually; if any
	     * character doesn't match `allowedPattern`, the entire pasted string will
	     * be rejected.
	     *
	     * Note: if you were using `iron-input` in 1.0, you were also required to
	     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,
	     * and will be set automatically for you if an `allowedPattern` is provided.
	     *
	     */
	    allowedPattern: {type: String},

	    /**
	     * Set to true to auto-validate the input value as you type.
	     */
	    autoValidate: {type: Boolean, value: false},

	    /**
	     * The native input element.
	     */
	    _inputElement: Object,
	  },

	  observers: ['_bindValueChanged(bindValue, _inputElement)'],
	  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},

	  created: function() {
	    IronA11yAnnouncer.requestAvailability();
	    this._previousValidInput = '';
	    this._patternAlreadyChecked = false;
	  },

	  attached: function() {
	    // If the input is added at a later time, update the internal reference.
	    this._observer = dom(this).observeNodes(function(info) {
	      this._initSlottedInput();
	    }.bind(this));
	  },

	  detached: function() {
	    if (this._observer) {
	      dom(this).unobserveNodes(this._observer);
	      this._observer = null;
	    }
	  },

	  /**
	   * Returns the distributed input element.
	   */
	  get inputElement() {
	    return this._inputElement;
	  },

	  _initSlottedInput: function() {
	    this._inputElement = this.getEffectiveChildren()[0];

	    if (this.inputElement && this.inputElement.value) {
	      this.bindValue = this.inputElement.value;
	    }

	    this.fire('iron-input-ready');
	  },

	  get _patternRegExp() {
	    var pattern;
	    if (this.allowedPattern) {
	      pattern = new RegExp(this.allowedPattern);
	    } else {
	      switch (this.inputElement.type) {
	        case 'number':
	          pattern = /[0-9.,e-]/;
	          break;
	      }
	    }
	    return pattern;
	  },

	  /**
	   * @suppress {checkTypes}
	   */
	  _bindValueChanged: function(bindValue, inputElement) {
	    // The observer could have run before attached() when we have actually
	    // initialized this property.
	    if (!inputElement) {
	      return;
	    }

	    if (bindValue === undefined) {
	      inputElement.value = null;
	    } else if (bindValue !== inputElement.value) {
	      this.inputElement.value = bindValue;
	    }

	    if (this.autoValidate) {
	      this.validate();
	    }

	    // manually notify because we don't want to notify until after setting value
	    this.fire('bind-value-changed', {value: bindValue});
	  },

	  _onInput: function() {
	    // Need to validate each of the characters pasted if they haven't
	    // been validated inside `_onKeypress` already.
	    if (this.allowedPattern && !this._patternAlreadyChecked) {
	      var valid = this._checkPatternValidity();
	      if (!valid) {
	        this._announceInvalidCharacter(
	            'Invalid string of characters not entered.');
	        this.inputElement.value = this._previousValidInput;
	      }
	    }
	    this.bindValue = this._previousValidInput = this.inputElement.value;
	    this._patternAlreadyChecked = false;
	  },

	  _isPrintable: function(event) {
	    // What a control/printable character is varies wildly based on the browser.
	    // - most control characters (arrows, backspace) do not send a `keypress`
	    // event
	    //   in Chrome, but the *do* on Firefox
	    // - in Firefox, when they do send a `keypress` event, control chars have
	    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)
	    // - printable characters always send a keypress event.
	    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the
	    // keyCode
	    //   always matches the charCode.
	    // None of this makes any sense.

	    // For these keys, ASCII code == browser keycode.
	    var anyNonPrintable = (event.keyCode == 8) ||  // backspace
	        (event.keyCode == 9) ||                    // tab
	        (event.keyCode == 13) ||                   // enter
	        (event.keyCode == 27);                     // escape

	    // For these keys, make sure it's a browser keycode and not an ASCII code.
	    var mozNonPrintable = (event.keyCode == 19) ||  // pause
	        (event.keyCode == 20) ||                    // caps lock
	        (event.keyCode == 45) ||                    // insert
	        (event.keyCode == 46) ||                    // delete
	        (event.keyCode == 144) ||                   // num lock
	        (event.keyCode == 145) ||                   // scroll lock
	        (event.keyCode > 32 &&
	         event.keyCode < 41) ||  // page up/down, end, home, arrows
	        (event.keyCode > 111 && event.keyCode < 124);  // fn keys

	    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);
	  },

	  _onKeypress: function(event) {
	    if (!this.allowedPattern && this.inputElement.type !== 'number') {
	      return;
	    }
	    var regexp = this._patternRegExp;
	    if (!regexp) {
	      return;
	    }

	    // Handle special keys and backspace
	    if (event.metaKey || event.ctrlKey || event.altKey) {
	      return;
	    }

	    // Check the pattern either here or in `_onInput`, but not in both.
	    this._patternAlreadyChecked = true;

	    var thisChar = String.fromCharCode(event.charCode);
	    if (this._isPrintable(event) && !regexp.test(thisChar)) {
	      event.preventDefault();
	      this._announceInvalidCharacter(
	          'Invalid character ' + thisChar + ' not entered.');
	    }
	  },

	  _checkPatternValidity: function() {
	    var regexp = this._patternRegExp;
	    if (!regexp) {
	      return true;
	    }
	    for (var i = 0; i < this.inputElement.value.length; i++) {
	      if (!regexp.test(this.inputElement.value[i])) {
	        return false;
	      }
	    }
	    return true;
	  },

	  /**
	   * Returns true if `value` is valid. The validator provided in `validator`
	   * will be used first, then any constraints.
	   * @return {boolean} True if the value is valid.
	   */
	  validate: function() {
	    if (!this.inputElement) {
	      this.invalid = false;
	      return true;
	    }

	    // Use the nested input's native validity.
	    var valid = this.inputElement.checkValidity();

	    // Only do extra checking if the browser thought this was valid.
	    if (valid) {
	      // Empty, required input is invalid
	      if (this.required && this.bindValue === '') {
	        valid = false;
	      } else if (this.hasValidator()) {
	        valid = IronValidatableBehavior.validate.call(this, this.bindValue);
	      }
	    }

	    this.invalid = !valid;
	    this.fire('iron-input-validate');
	    return valid;
	  },

	  _announceInvalidCharacter: function(message) {
	    this.fire('iron-announce', {text: message});
	  },

	  _computeValue: function(bindValue) {
	    return bindValue;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	// Give the user the choice to opt out of font loading.
	if (!window.polymerSkipLoadingFontRoboto) {
	  const link = document.createElement('link');
	  link.rel = 'stylesheet';
	  link.type = 'text/css';
	  link.crossOrigin = 'anonymous';
	  link.href =
	      'https://fonts.googleapis.com/css?family=Roboto+Mono:400,700|Roboto:400,300,300italic,400italic,500,500italic,700,700italic';
	  document.head.appendChild(link);
	}

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$2 = html`<custom-style>
  <style is="custom-style">
    html {

      /* Shared Styles */
      --paper-font-common-base: {
        font-family: 'Roboto', 'Noto', sans-serif;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-code: {
        font-family: 'Roboto Mono', 'Consolas', 'Menlo', monospace;
        -webkit-font-smoothing: antialiased;
      };

      --paper-font-common-expensive-kerning: {
        text-rendering: optimizeLegibility;
      };

      --paper-font-common-nowrap: {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      };

      /* Material Font Styles */

      --paper-font-display4: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 112px;
        font-weight: 300;
        letter-spacing: -.044em;
        line-height: 120px;
      };

      --paper-font-display3: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 56px;
        font-weight: 400;
        letter-spacing: -.026em;
        line-height: 60px;
      };

      --paper-font-display2: {
        @apply --paper-font-common-base;

        font-size: 45px;
        font-weight: 400;
        letter-spacing: -.018em;
        line-height: 48px;
      };

      --paper-font-display1: {
        @apply --paper-font-common-base;

        font-size: 34px;
        font-weight: 400;
        letter-spacing: -.01em;
        line-height: 40px;
      };

      --paper-font-headline: {
        @apply --paper-font-common-base;

        font-size: 24px;
        font-weight: 400;
        letter-spacing: -.012em;
        line-height: 32px;
      };

      --paper-font-title: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 20px;
        font-weight: 500;
        line-height: 28px;
      };

      --paper-font-subhead: {
        @apply --paper-font-common-base;

        font-size: 16px;
        font-weight: 400;
        line-height: 24px;
      };

      --paper-font-body2: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-body1: {
        @apply --paper-font-common-base;

        font-size: 14px;
        font-weight: 400;
        line-height: 20px;
      };

      --paper-font-caption: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 12px;
        font-weight: 400;
        letter-spacing: 0.011em;
        line-height: 20px;
      };

      --paper-font-menu: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 13px;
        font-weight: 500;
        line-height: 24px;
      };

      --paper-font-button: {
        @apply --paper-font-common-base;
        @apply --paper-font-common-nowrap;

        font-size: 14px;
        font-weight: 500;
        letter-spacing: 0.018em;
        line-height: 24px;
        text-transform: uppercase;
      };

      --paper-font-code2: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 700;
        line-height: 20px;
      };

      --paper-font-code1: {
        @apply --paper-font-common-code;

        font-size: 14px;
        font-weight: 500;
        line-height: 20px;
      };

    }

  </style>
</custom-style>`;
	template$2.setAttribute('style', 'display: none;');
	document.head.appendChild(template$2.content);

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for
	 * `<paper-input-container>`. A add-on appears below the input, and may display
	 * information based on the input value and validity such as a character counter
	 * or an error message.
	 * @polymerBehavior
	 */
	const PaperInputAddonBehavior = {
	  attached: function() {
	    this.fire('addon-attached');
	  },

	  /**
	   * The function called by `<paper-input-container>` when the input value or
	   * validity changes.
	   * @param {{
	   *   invalid: boolean,
	   *   inputElement: (Element|undefined),
	   *   value: (string|undefined)
	   * }} state -
	   *     inputElement: The input element.
	   *     value: The input value.
	   *     invalid: True if the input value is invalid.
	   */
	  update: function(state) {}

	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/*
	`<paper-input-char-counter>` is a character counter for use with
	`<paper-input-container>`. It shows the number of characters entered in the
	input and the max length if it is specified.

	    <paper-input-container>
	      <input maxlength="20">
	      <paper-input-char-counter></paper-input-char-counter>
	    </paper-input-container>

	### Styling

	The following mixin is available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-input-char-counter` | Mixin applied to the element | `{}`
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
        float: right;

        @apply --paper-font-caption;
        @apply --paper-input-char-counter;
      }

      :host([hidden]) {
        display: none !important;
      }

      :host(:dir(rtl)) {
        float: left;
      }
    </style>

    <span>[[_charCounterStr]]</span>
`,

	  is: 'paper-input-char-counter',
	  behaviors: [PaperInputAddonBehavior],
	  properties: {_charCounterStr: {type: String, value: '0'}},

	  /**
	   * This overrides the update function in PaperInputAddonBehavior.
	   * @param {{
	   *   inputElement: (Element|undefined),
	   *   value: (string|undefined),
	   *   invalid: boolean
	   * }} state -
	   *     inputElement: The input element.
	   *     value: The input value.
	   *     invalid: True if the input value is invalid.
	   */
	  update: function(state) {
	    if (!state.inputElement) {
	      return;
	    }

	    state.value = state.value || '';

	    var counter = state.value.toString().length.toString();

	    if (state.inputElement.hasAttribute('maxlength')) {
	      counter += '/' + state.inputElement.getAttribute('maxlength');
	    }

	    this._charCounterStr = counter;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$3 = html`
<custom-style>
  <style is="custom-style">
    html {

      /* Material Design color palette for Google products */

      --google-red-100: #f4c7c3;
      --google-red-300: #e67c73;
      --google-red-500: #db4437;
      --google-red-700: #c53929;

      --google-blue-100: #c6dafc;
      --google-blue-300: #7baaf7;
      --google-blue-500: #4285f4;
      --google-blue-700: #3367d6;

      --google-green-100: #b7e1cd;
      --google-green-300: #57bb8a;
      --google-green-500: #0f9d58;
      --google-green-700: #0b8043;

      --google-yellow-100: #fce8b2;
      --google-yellow-300: #f7cb4d;
      --google-yellow-500: #f4b400;
      --google-yellow-700: #f09300;

      --google-grey-100: #f5f5f5;
      --google-grey-300: #e0e0e0;
      --google-grey-500: #9e9e9e;
      --google-grey-700: #616161;

      /* Material Design color palette from online spec document */

      --paper-red-50: #ffebee;
      --paper-red-100: #ffcdd2;
      --paper-red-200: #ef9a9a;
      --paper-red-300: #e57373;
      --paper-red-400: #ef5350;
      --paper-red-500: #f44336;
      --paper-red-600: #e53935;
      --paper-red-700: #d32f2f;
      --paper-red-800: #c62828;
      --paper-red-900: #b71c1c;
      --paper-red-a100: #ff8a80;
      --paper-red-a200: #ff5252;
      --paper-red-a400: #ff1744;
      --paper-red-a700: #d50000;

      --paper-pink-50: #fce4ec;
      --paper-pink-100: #f8bbd0;
      --paper-pink-200: #f48fb1;
      --paper-pink-300: #f06292;
      --paper-pink-400: #ec407a;
      --paper-pink-500: #e91e63;
      --paper-pink-600: #d81b60;
      --paper-pink-700: #c2185b;
      --paper-pink-800: #ad1457;
      --paper-pink-900: #880e4f;
      --paper-pink-a100: #ff80ab;
      --paper-pink-a200: #ff4081;
      --paper-pink-a400: #f50057;
      --paper-pink-a700: #c51162;

      --paper-purple-50: #f3e5f5;
      --paper-purple-100: #e1bee7;
      --paper-purple-200: #ce93d8;
      --paper-purple-300: #ba68c8;
      --paper-purple-400: #ab47bc;
      --paper-purple-500: #9c27b0;
      --paper-purple-600: #8e24aa;
      --paper-purple-700: #7b1fa2;
      --paper-purple-800: #6a1b9a;
      --paper-purple-900: #4a148c;
      --paper-purple-a100: #ea80fc;
      --paper-purple-a200: #e040fb;
      --paper-purple-a400: #d500f9;
      --paper-purple-a700: #aa00ff;

      --paper-deep-purple-50: #ede7f6;
      --paper-deep-purple-100: #d1c4e9;
      --paper-deep-purple-200: #b39ddb;
      --paper-deep-purple-300: #9575cd;
      --paper-deep-purple-400: #7e57c2;
      --paper-deep-purple-500: #673ab7;
      --paper-deep-purple-600: #5e35b1;
      --paper-deep-purple-700: #512da8;
      --paper-deep-purple-800: #4527a0;
      --paper-deep-purple-900: #311b92;
      --paper-deep-purple-a100: #b388ff;
      --paper-deep-purple-a200: #7c4dff;
      --paper-deep-purple-a400: #651fff;
      --paper-deep-purple-a700: #6200ea;

      --paper-indigo-50: #e8eaf6;
      --paper-indigo-100: #c5cae9;
      --paper-indigo-200: #9fa8da;
      --paper-indigo-300: #7986cb;
      --paper-indigo-400: #5c6bc0;
      --paper-indigo-500: #3f51b5;
      --paper-indigo-600: #3949ab;
      --paper-indigo-700: #303f9f;
      --paper-indigo-800: #283593;
      --paper-indigo-900: #1a237e;
      --paper-indigo-a100: #8c9eff;
      --paper-indigo-a200: #536dfe;
      --paper-indigo-a400: #3d5afe;
      --paper-indigo-a700: #304ffe;

      --paper-blue-50: #e3f2fd;
      --paper-blue-100: #bbdefb;
      --paper-blue-200: #90caf9;
      --paper-blue-300: #64b5f6;
      --paper-blue-400: #42a5f5;
      --paper-blue-500: #2196f3;
      --paper-blue-600: #1e88e5;
      --paper-blue-700: #1976d2;
      --paper-blue-800: #1565c0;
      --paper-blue-900: #0d47a1;
      --paper-blue-a100: #82b1ff;
      --paper-blue-a200: #448aff;
      --paper-blue-a400: #2979ff;
      --paper-blue-a700: #2962ff;

      --paper-light-blue-50: #e1f5fe;
      --paper-light-blue-100: #b3e5fc;
      --paper-light-blue-200: #81d4fa;
      --paper-light-blue-300: #4fc3f7;
      --paper-light-blue-400: #29b6f6;
      --paper-light-blue-500: #03a9f4;
      --paper-light-blue-600: #039be5;
      --paper-light-blue-700: #0288d1;
      --paper-light-blue-800: #0277bd;
      --paper-light-blue-900: #01579b;
      --paper-light-blue-a100: #80d8ff;
      --paper-light-blue-a200: #40c4ff;
      --paper-light-blue-a400: #00b0ff;
      --paper-light-blue-a700: #0091ea;

      --paper-cyan-50: #e0f7fa;
      --paper-cyan-100: #b2ebf2;
      --paper-cyan-200: #80deea;
      --paper-cyan-300: #4dd0e1;
      --paper-cyan-400: #26c6da;
      --paper-cyan-500: #00bcd4;
      --paper-cyan-600: #00acc1;
      --paper-cyan-700: #0097a7;
      --paper-cyan-800: #00838f;
      --paper-cyan-900: #006064;
      --paper-cyan-a100: #84ffff;
      --paper-cyan-a200: #18ffff;
      --paper-cyan-a400: #00e5ff;
      --paper-cyan-a700: #00b8d4;

      --paper-teal-50: #e0f2f1;
      --paper-teal-100: #b2dfdb;
      --paper-teal-200: #80cbc4;
      --paper-teal-300: #4db6ac;
      --paper-teal-400: #26a69a;
      --paper-teal-500: #009688;
      --paper-teal-600: #00897b;
      --paper-teal-700: #00796b;
      --paper-teal-800: #00695c;
      --paper-teal-900: #004d40;
      --paper-teal-a100: #a7ffeb;
      --paper-teal-a200: #64ffda;
      --paper-teal-a400: #1de9b6;
      --paper-teal-a700: #00bfa5;

      --paper-green-50: #e8f5e9;
      --paper-green-100: #c8e6c9;
      --paper-green-200: #a5d6a7;
      --paper-green-300: #81c784;
      --paper-green-400: #66bb6a;
      --paper-green-500: #4caf50;
      --paper-green-600: #43a047;
      --paper-green-700: #388e3c;
      --paper-green-800: #2e7d32;
      --paper-green-900: #1b5e20;
      --paper-green-a100: #b9f6ca;
      --paper-green-a200: #69f0ae;
      --paper-green-a400: #00e676;
      --paper-green-a700: #00c853;

      --paper-light-green-50: #f1f8e9;
      --paper-light-green-100: #dcedc8;
      --paper-light-green-200: #c5e1a5;
      --paper-light-green-300: #aed581;
      --paper-light-green-400: #9ccc65;
      --paper-light-green-500: #8bc34a;
      --paper-light-green-600: #7cb342;
      --paper-light-green-700: #689f38;
      --paper-light-green-800: #558b2f;
      --paper-light-green-900: #33691e;
      --paper-light-green-a100: #ccff90;
      --paper-light-green-a200: #b2ff59;
      --paper-light-green-a400: #76ff03;
      --paper-light-green-a700: #64dd17;

      --paper-lime-50: #f9fbe7;
      --paper-lime-100: #f0f4c3;
      --paper-lime-200: #e6ee9c;
      --paper-lime-300: #dce775;
      --paper-lime-400: #d4e157;
      --paper-lime-500: #cddc39;
      --paper-lime-600: #c0ca33;
      --paper-lime-700: #afb42b;
      --paper-lime-800: #9e9d24;
      --paper-lime-900: #827717;
      --paper-lime-a100: #f4ff81;
      --paper-lime-a200: #eeff41;
      --paper-lime-a400: #c6ff00;
      --paper-lime-a700: #aeea00;

      --paper-yellow-50: #fffde7;
      --paper-yellow-100: #fff9c4;
      --paper-yellow-200: #fff59d;
      --paper-yellow-300: #fff176;
      --paper-yellow-400: #ffee58;
      --paper-yellow-500: #ffeb3b;
      --paper-yellow-600: #fdd835;
      --paper-yellow-700: #fbc02d;
      --paper-yellow-800: #f9a825;
      --paper-yellow-900: #f57f17;
      --paper-yellow-a100: #ffff8d;
      --paper-yellow-a200: #ffff00;
      --paper-yellow-a400: #ffea00;
      --paper-yellow-a700: #ffd600;

      --paper-amber-50: #fff8e1;
      --paper-amber-100: #ffecb3;
      --paper-amber-200: #ffe082;
      --paper-amber-300: #ffd54f;
      --paper-amber-400: #ffca28;
      --paper-amber-500: #ffc107;
      --paper-amber-600: #ffb300;
      --paper-amber-700: #ffa000;
      --paper-amber-800: #ff8f00;
      --paper-amber-900: #ff6f00;
      --paper-amber-a100: #ffe57f;
      --paper-amber-a200: #ffd740;
      --paper-amber-a400: #ffc400;
      --paper-amber-a700: #ffab00;

      --paper-orange-50: #fff3e0;
      --paper-orange-100: #ffe0b2;
      --paper-orange-200: #ffcc80;
      --paper-orange-300: #ffb74d;
      --paper-orange-400: #ffa726;
      --paper-orange-500: #ff9800;
      --paper-orange-600: #fb8c00;
      --paper-orange-700: #f57c00;
      --paper-orange-800: #ef6c00;
      --paper-orange-900: #e65100;
      --paper-orange-a100: #ffd180;
      --paper-orange-a200: #ffab40;
      --paper-orange-a400: #ff9100;
      --paper-orange-a700: #ff6500;

      --paper-deep-orange-50: #fbe9e7;
      --paper-deep-orange-100: #ffccbc;
      --paper-deep-orange-200: #ffab91;
      --paper-deep-orange-300: #ff8a65;
      --paper-deep-orange-400: #ff7043;
      --paper-deep-orange-500: #ff5722;
      --paper-deep-orange-600: #f4511e;
      --paper-deep-orange-700: #e64a19;
      --paper-deep-orange-800: #d84315;
      --paper-deep-orange-900: #bf360c;
      --paper-deep-orange-a100: #ff9e80;
      --paper-deep-orange-a200: #ff6e40;
      --paper-deep-orange-a400: #ff3d00;
      --paper-deep-orange-a700: #dd2c00;

      --paper-brown-50: #efebe9;
      --paper-brown-100: #d7ccc8;
      --paper-brown-200: #bcaaa4;
      --paper-brown-300: #a1887f;
      --paper-brown-400: #8d6e63;
      --paper-brown-500: #795548;
      --paper-brown-600: #6d4c41;
      --paper-brown-700: #5d4037;
      --paper-brown-800: #4e342e;
      --paper-brown-900: #3e2723;

      --paper-grey-50: #fafafa;
      --paper-grey-100: #f5f5f5;
      --paper-grey-200: #eeeeee;
      --paper-grey-300: #e0e0e0;
      --paper-grey-400: #bdbdbd;
      --paper-grey-500: #9e9e9e;
      --paper-grey-600: #757575;
      --paper-grey-700: #616161;
      --paper-grey-800: #424242;
      --paper-grey-900: #212121;

      --paper-blue-grey-50: #eceff1;
      --paper-blue-grey-100: #cfd8dc;
      --paper-blue-grey-200: #b0bec5;
      --paper-blue-grey-300: #90a4ae;
      --paper-blue-grey-400: #78909c;
      --paper-blue-grey-500: #607d8b;
      --paper-blue-grey-600: #546e7a;
      --paper-blue-grey-700: #455a64;
      --paper-blue-grey-800: #37474f;
      --paper-blue-grey-900: #263238;

      /* opacity for dark text on a light background */
      --dark-divider-opacity: 0.12;
      --dark-disabled-opacity: 0.38; /* or hint text or icon */
      --dark-secondary-opacity: 0.54;
      --dark-primary-opacity: 0.87;

      /* opacity for light text on a dark background */
      --light-divider-opacity: 0.12;
      --light-disabled-opacity: 0.3; /* or hint text or icon */
      --light-secondary-opacity: 0.7;
      --light-primary-opacity: 1.0;

    }

  </style>
</custom-style>
`;
	template$3.setAttribute('style', 'display: none;');
	document.head.appendChild(template$3.content);

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$4 = html`
<custom-style>
  <style is="custom-style">
    html {
      /*
       * You can use these generic variables in your elements for easy theming.
       * For example, if all your elements use \`--primary-text-color\` as its main
       * color, then switching from a light to a dark theme is just a matter of
       * changing the value of \`--primary-text-color\` in your application.
       */
      --primary-text-color: var(--light-theme-text-color);
      --primary-background-color: var(--light-theme-background-color);
      --secondary-text-color: var(--light-theme-secondary-color);
      --disabled-text-color: var(--light-theme-disabled-color);
      --divider-color: var(--light-theme-divider-color);
      --error-color: var(--paper-deep-orange-a700);

      /*
       * Primary and accent colors. Also see color.js for more colors.
       */
      --primary-color: var(--paper-indigo-500);
      --light-primary-color: var(--paper-indigo-100);
      --dark-primary-color: var(--paper-indigo-700);

      --accent-color: var(--paper-pink-a200);
      --light-accent-color: var(--paper-pink-a100);
      --dark-accent-color: var(--paper-pink-a400);


      /*
       * Material Design Light background theme
       */
      --light-theme-background-color: #ffffff;
      --light-theme-base-color: #000000;
      --light-theme-text-color: var(--paper-grey-900);
      --light-theme-secondary-color: #737373;  /* for secondary text and icons */
      --light-theme-disabled-color: #9b9b9b;  /* disabled/hint text */
      --light-theme-divider-color: #dbdbdb;

      /*
       * Material Design Dark background theme
       */
      --dark-theme-background-color: var(--paper-grey-900);
      --dark-theme-base-color: #ffffff;
      --dark-theme-text-color: #ffffff;
      --dark-theme-secondary-color: #bcbcbc;  /* for secondary text and icons */
      --dark-theme-disabled-color: #646464;  /* disabled/hint text */
      --dark-theme-divider-color: #3c3c3c;

      /*
       * Deprecated values because of their confusing names.
       */
      --text-primary-color: var(--dark-theme-text-color);
      --default-primary-color: var(--primary-color);
    }
  </style>
</custom-style>`;
	template$4.setAttribute('style', 'display: none;');
	document.head.appendChild(template$4.content);

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$5 = html`
<custom-style>
  <style is="custom-style">
    html {
      --paper-input-container-shared-input-style: {
        position: relative; /* to make a stacking context */
        outline: none;
        box-shadow: none;
        padding: 0;
        margin: 0;
        width: 100%;
        max-width: 100%;
        background: transparent;
        border: none;
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        -webkit-appearance: none;
        text-align: inherit;
        vertical-align: var(--paper-input-container-input-align, bottom);

        @apply --paper-font-subhead;
      };
    }
  </style>
</custom-style>
`;
	template$5.setAttribute('style', 'display: none;');
	document.head.appendChild(template$5.content);

	/*
	`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or
	`<textarea>` and optional add-on elements such as an error message or character
	counter, used to implement Material Design text fields.

	For example:

	    <paper-input-container>
	      <label slot="label">Your name</label>
	      <iron-input slot="input">
	        <input>
	      </iron-input>
	      // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
	instead of the above.
	    </paper-input-container>

	You can style the nested `<input>` however you want; if you want it to look like
	a Material Design input, you can style it with the
	--paper-input-container-shared-input-style mixin.

	Do not wrap `<paper-input-container>` around elements that already include it,
	such as `<paper-input>`. Doing so may cause events to bounce infinitely between
	the container and its contained element.

	### Listening for input changes

	By default, it listens for changes on the `bind-value` attribute on its children
	nodes and perform tasks such as auto-validating and label styling when the
	`bind-value` changes. You can configure the attribute it listens to with the
	`attr-for-value` attribute.

	### Using a custom input element

	You can use a custom input element in a `<paper-input-container>`, for example
	to implement a compound input field like a social security number input. The
	custom input element should have the `paper-input-input` class, have a
	`notify:true` value property and optionally implements
	`Polymer.IronValidatableBehavior` if it is validatable.

	    <paper-input-container attr-for-value="ssn-value">
	      <label slot="label">Social security number</label>
	      <ssn-input slot="input" class="paper-input-input"></ssn-input>
	    </paper-input-container>


	If you're using a `<paper-input-container>` imperatively, it's important to make
	sure that you attach its children (the `iron-input` and the optional `label`)
	before you attach the `<paper-input-container>` itself, so that it can be set up
	correctly.

	### Validation

	If the `auto-validate` attribute is set, the input container will validate the
	input and update the container styling when the input value changes.

	### Add-ons

	Add-ons are child elements of a `<paper-input-container>` with the `add-on`
	attribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They
	are notified when the input value or validity changes, and may implement
	functionality such as error messages or character counters. They appear at the
	bottom of the input.

	### Prefixes and suffixes
	These are child elements of a `<paper-input-container>` with the `prefix`
	or `suffix` attribute, and are displayed inline with the input, before or after.

	    <paper-input-container>
	      <div slot="prefix">$</div>
	      <label slot="label">Total</label>
	      <iron-input slot="input">
	        <input>
	      </iron-input>
	      // In Polymer 1.0, you would use `<input is="iron-input" slot="input">`
	instead of the above. <paper-icon-button slot="suffix"
	icon="clear"></paper-icon-button>
	    </paper-input-container>

	### Styling

	The following custom properties and mixins are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`
	`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`
	`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`
	`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`
	`--paper-input-container` | Mixin applied to the container | `{}`
	`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`
	`--paper-input-container-label` | Mixin applied to the label | `{}`
	`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`
	`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`
	`--paper-input-container-input` | Mixin applied to the input | `{}`
	`--paper-input-container-input-align` | The vertical-align property of the input | `bottom`
	`--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`
	`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`
	`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`
	`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`
	`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`
	`--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`
	`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`
	`--paper-input-container-underline` | Mixin applied to the underline | `{}`
	`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`
	`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`
	`--paper-input-prefix` | Mixin applied to the input prefix | `{}`
	`--paper-input-suffix` | Mixin applied to the input suffix | `{}`

	This element is `display:block` by default, but you can set the `inline`
	attribute to make it `display:inline-block`.
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
        padding: 8px 0;
        @apply --paper-input-container;
      }

      :host([inline]) {
        display: inline-block;
      }

      :host([disabled]) {
        pointer-events: none;
        opacity: 0.33;

        @apply --paper-input-container-disabled;
      }

      :host([hidden]) {
        display: none !important;
      }

      [hidden] {
        display: none !important;
      }

      .floated-label-placeholder {
        @apply --paper-font-caption;
      }

      .underline {
        height: 2px;
        position: relative;
      }

      .focused-line {
        @apply --layout-fit;
        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));

        -webkit-transform-origin: center center;
        transform-origin: center center;
        -webkit-transform: scale3d(0,1,1);
        transform: scale3d(0,1,1);

        @apply --paper-input-container-underline-focus;
      }

      .underline.is-highlighted .focused-line {
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .underline.is-invalid .focused-line {
        border-color: var(--paper-input-container-invalid-color, var(--error-color));
        -webkit-transform: none;
        transform: none;
        -webkit-transition: -webkit-transform 0.25s;
        transition: transform 0.25s;

        @apply --paper-transition-easing;
      }

      .unfocused-line {
        @apply --layout-fit;
        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline;
      }

      :host([disabled]) .unfocused-line {
        border-bottom: 1px dashed;
        border-color: var(--paper-input-container-color, var(--secondary-text-color));
        @apply --paper-input-container-underline-disabled;
      }

      .input-wrapper {
        @apply --layout-horizontal;
        @apply --layout-center;
        position: relative;
      }

      .input-content {
        @apply --layout-flex-auto;
        @apply --layout-relative;
        max-width: 100%;
      }

      .input-content ::slotted(label),
      .input-content ::slotted(.paper-input-label) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        font: inherit;
        color: var(--paper-input-container-color, var(--secondary-text-color));
        -webkit-transition: -webkit-transform 0.25s, width 0.25s;
        transition: transform 0.25s, width 0.25s;
        -webkit-transform-origin: left top;
        transform-origin: left top;
        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */
        min-height: 1px;

        @apply --paper-font-common-nowrap;
        @apply --paper-font-subhead;
        @apply --paper-input-container-label;
        @apply --paper-transition-easing;
      }

      .input-content.label-is-floating ::slotted(label),
      .input-content.label-is-floating ::slotted(.paper-input-label) {
        -webkit-transform: translateY(-75%) scale(0.75);
        transform: translateY(-75%) scale(0.75);

        /* Since we scale to 75/100 of the size, we actually have 100/75 of the
        original space now available */
        width: 133%;

        @apply --paper-input-container-label-floating;
      }

      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),
      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {
        right: 0;
        left: auto;
        -webkit-transform-origin: right top;
        transform-origin: right top;
      }

      .input-content.label-is-highlighted ::slotted(label),
      .input-content.label-is-highlighted ::slotted(.paper-input-label) {
        color: var(--paper-input-container-focus-color, var(--primary-color));

        @apply --paper-input-container-label-focus;
      }

      .input-content.is-invalid ::slotted(label),
      .input-content.is-invalid ::slotted(.paper-input-label) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .input-content.label-is-hidden ::slotted(label),
      .input-content.label-is-hidden ::slotted(.paper-input-label) {
        visibility: hidden;
      }

      .input-content ::slotted(input),
      .input-content ::slotted(iron-input),
      .input-content ::slotted(textarea),
      .input-content ::slotted(iron-autogrow-textarea),
      .input-content ::slotted(.paper-input-input) {
        @apply --paper-input-container-shared-input-style;
        /* The apply shim doesn't apply the nested color custom property,
          so we have to re-apply it here. */
        color: var(--paper-input-container-input-color, var(--primary-text-color));
        @apply --paper-input-container-input;
      }

      .input-content ::slotted(input)::-webkit-outer-spin-button,
      .input-content ::slotted(input)::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      .input-content.focused ::slotted(input),
      .input-content.focused ::slotted(iron-input),
      .input-content.focused ::slotted(textarea),
      .input-content.focused ::slotted(iron-autogrow-textarea),
      .input-content.focused ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-focus;
      }

      .input-content.is-invalid ::slotted(input),
      .input-content.is-invalid ::slotted(iron-input),
      .input-content.is-invalid ::slotted(textarea),
      .input-content.is-invalid ::slotted(iron-autogrow-textarea),
      .input-content.is-invalid ::slotted(.paper-input-input) {
        @apply --paper-input-container-input-invalid;
      }

      .prefix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;
        @apply --paper-input-prefix;
      }

      .suffix ::slotted(*) {
        display: inline-block;
        @apply --paper-font-subhead;
        @apply --layout-flex-none;

        @apply --paper-input-suffix;
      }

      /* Firefox sets a min-width on the input, which can cause layout issues */
      .input-content ::slotted(input) {
        min-width: 0;
      }

      .input-content ::slotted(textarea) {
        resize: none;
      }

      .add-on-content {
        position: relative;
      }

      .add-on-content.is-invalid ::slotted(*) {
        color: var(--paper-input-container-invalid-color, var(--error-color));
      }

      .add-on-content.is-highlighted ::slotted(*) {
        color: var(--paper-input-container-focus-color, var(--primary-color));
      }
    </style>

    <div class="floated-label-placeholder" aria-hidden="true" hidden="[[noLabelFloat]]">&nbsp;</div>

    <div class="input-wrapper">
      <span class="prefix"><slot name="prefix"></slot></span>

      <div class\$="[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]" id="labelAndInputContainer">
        <slot name="label"></slot>
        <slot name="input"></slot>
      </div>

      <span class="suffix"><slot name="suffix"></slot></span>
    </div>

    <div class\$="[[_computeUnderlineClass(focused,invalid)]]">
      <div class="unfocused-line"></div>
      <div class="focused-line"></div>
    </div>

    <div class\$="[[_computeAddOnContentClass(focused,invalid)]]">
      <slot name="add-on"></slot>
    </div>
`,

	  is: 'paper-input-container',

	  properties: {
	    /**
	     * Set to true to disable the floating label. The label disappears when the
	     * input value is not null.
	     */
	    noLabelFloat: {type: Boolean, value: false},

	    /**
	     * Set to true to always float the floating label.
	     */
	    alwaysFloatLabel: {type: Boolean, value: false},

	    /**
	     * The attribute to listen for value changes on.
	     */
	    attrForValue: {type: String, value: 'bind-value'},

	    /**
	     * Set to true to auto-validate the input value when it changes.
	     */
	    autoValidate: {type: Boolean, value: false},

	    /**
	     * True if the input is invalid. This property is set automatically when the
	     * input value changes if auto-validating, or when the `iron-input-validate`
	     * event is heard from a child.
	     */
	    invalid: {observer: '_invalidChanged', type: Boolean, value: false},

	    /**
	     * True if the input has focus.
	     */
	    focused: {readOnly: true, type: Boolean, value: false, notify: true},

	    _addons: {
	      type: Array
	      // do not set a default value here intentionally - it will be initialized
	      // lazily when a distributed child is attached, which may occur before
	      // configuration for this element in polyfill.
	    },

	    _inputHasContent: {type: Boolean, value: false},

	    _inputSelector:
	        {type: String, value: 'input,iron-input,textarea,.paper-input-input'},

	    _boundOnFocus: {
	      type: Function,
	      value: function() {
	        return this._onFocus.bind(this);
	      }
	    },

	    _boundOnBlur: {
	      type: Function,
	      value: function() {
	        return this._onBlur.bind(this);
	      }
	    },

	    _boundOnInput: {
	      type: Function,
	      value: function() {
	        return this._onInput.bind(this);
	      }
	    },

	    _boundValueChanged: {
	      type: Function,
	      value: function() {
	        return this._onValueChanged.bind(this);
	      }
	    }
	  },

	  listeners: {
	    'addon-attached': '_onAddonAttached',
	    'iron-input-validate': '_onIronInputValidate'
	  },

	  get _valueChangedEvent() {
	    return this.attrForValue + '-changed';
	  },

	  get _propertyForValue() {
	    return dashToCamelCase(this.attrForValue);
	  },

	  get _inputElement() {
	    return dom(this).querySelector(this._inputSelector);
	  },

	  get _inputElementValue() {
	    return this._inputElement[this._propertyForValue] ||
	        this._inputElement.value;
	  },

	  ready: function() {
	    // Paper-input treats a value of undefined differently at startup than
	    // the rest of the time (specifically: it does not validate it at startup,
	    // but it does after that. We need to track whether the first time we
	    // encounter the value is basically this first time, so that we can validate
	    // it correctly the rest of the time. See
	    // https://github.com/PolymerElements/paper-input/issues/605
	    this.__isFirstValueUpdate = true;
	    if (!this._addons) {
	      this._addons = [];
	    }
	    this.addEventListener('focus', this._boundOnFocus, true);
	    this.addEventListener('blur', this._boundOnBlur, true);
	  },

	  attached: function() {
	    if (this.attrForValue) {
	      this._inputElement.addEventListener(
	          this._valueChangedEvent, this._boundValueChanged);
	    } else {
	      this.addEventListener('input', this._onInput);
	    }

	    // Only validate when attached if the input already has a value.
	    if (this._inputElementValue && this._inputElementValue != '') {
	      this._handleValueAndAutoValidate(this._inputElement);
	    } else {
	      this._handleValue(this._inputElement);
	    }
	  },

	  /** @private */
	  _onAddonAttached: function(event) {
	    if (!this._addons) {
	      this._addons = [];
	    }
	    var target = event.target;
	    if (this._addons.indexOf(target) === -1) {
	      this._addons.push(target);
	      if (this.isAttached) {
	        this._handleValue(this._inputElement);
	      }
	    }
	  },

	  /** @private */
	  _onFocus: function() {
	    this._setFocused(true);
	  },

	  /** @private */
	  _onBlur: function() {
	    this._setFocused(false);
	    this._handleValueAndAutoValidate(this._inputElement);
	  },

	  /** @private */
	  _onInput: function(event) {
	    this._handleValueAndAutoValidate(event.target);
	  },

	  /** @private */
	  _onValueChanged: function(event) {
	    var input = event.target;

	    // Paper-input treats a value of undefined differently at startup than
	    // the rest of the time (specifically: it does not validate it at startup,
	    // but it does after that. If this is in fact the bootup case, ignore
	    // validation, just this once.
	    if (this.__isFirstValueUpdate) {
	      this.__isFirstValueUpdate = false;
	      if (input.value === undefined || input.value === '') {
	        return;
	      }
	    }

	    this._handleValueAndAutoValidate(event.target);
	  },

	  /** @private */
	  _handleValue: function(inputElement) {
	    var value = this._inputElementValue;

	    // type="number" hack needed because this.value is empty until it's valid
	    if (value || value === 0 ||
	        (inputElement.type === 'number' && !inputElement.checkValidity())) {
	      this._inputHasContent = true;
	    } else {
	      this._inputHasContent = false;
	    }

	    this.updateAddons(
	        {inputElement: inputElement, value: value, invalid: this.invalid});
	  },

	  /** @private */
	  _handleValueAndAutoValidate: function(inputElement) {
	    if (this.autoValidate && inputElement) {
	      var valid;

	      if (inputElement.validate) {
	        valid = inputElement.validate(this._inputElementValue);
	      } else {
	        valid = inputElement.checkValidity();
	      }
	      this.invalid = !valid;
	    }

	    // Call this last to notify the add-ons.
	    this._handleValue(inputElement);
	  },

	  /** @private */
	  _onIronInputValidate: function(event) {
	    this.invalid = this._inputElement.invalid;
	  },

	  /** @private */
	  _invalidChanged: function() {
	    if (this._addons) {
	      this.updateAddons({invalid: this.invalid});
	    }
	  },

	  /**
	   * Call this to update the state of add-ons.
	   * @param {Object} state Add-on state.
	   */
	  updateAddons: function(state) {
	    for (var addon, index = 0; addon = this._addons[index]; index++) {
	      addon.update(state);
	    }
	  },

	  /** @private */
	  _computeInputContentClass: function(
	      noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {
	    var cls = 'input-content';
	    if (!noLabelFloat) {
	      var label = this.querySelector('label');

	      if (alwaysFloatLabel || _inputHasContent) {
	        cls += ' label-is-floating';
	        // If the label is floating, ignore any offsets that may have been
	        // applied from a prefix element.
	        this.$.labelAndInputContainer.style.position = 'static';

	        if (invalid) {
	          cls += ' is-invalid';
	        } else if (focused) {
	          cls += ' label-is-highlighted';
	        }
	      } else {
	        // When the label is not floating, it should overlap the input element.
	        if (label) {
	          this.$.labelAndInputContainer.style.position = 'relative';
	        }
	        if (invalid) {
	          cls += ' is-invalid';
	        }
	      }
	    } else {
	      if (_inputHasContent) {
	        cls += ' label-is-hidden';
	      }
	      if (invalid) {
	        cls += ' is-invalid';
	      }
	    }
	    if (focused) {
	      cls += ' focused';
	    }
	    return cls;
	  },

	  /** @private */
	  _computeUnderlineClass: function(focused, invalid) {
	    var cls = 'underline';
	    if (invalid) {
	      cls += ' is-invalid';
	    } else if (focused) {
	      cls += ' is-highlighted';
	    }
	    return cls;
	  },

	  /** @private */
	  _computeAddOnContentClass: function(focused, invalid) {
	    var cls = 'add-on-content';
	    if (invalid) {
	      cls += ' is-invalid';
	    } else if (focused) {
	      cls += ' is-highlighted';
	    }
	    return cls;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/*
	`<paper-input-error>` is an error message for use with
	`<paper-input-container>`. The error is displayed when the
	`<paper-input-container>` is `invalid`.

	    <paper-input-container>
	      <input pattern="[0-9]*">
	      <paper-input-error slot="add-on">Only numbers are
	allowed!</paper-input-error>
	    </paper-input-container>

	### Styling

	The following custom properties and mixins are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`
	`--paper-input-error` | Mixin applied to the error | `{}`
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
        visibility: hidden;

        color: var(--paper-input-container-invalid-color, var(--error-color));

        @apply --paper-font-caption;
        @apply --paper-input-error;
        position: absolute;
        left:0;
        right:0;
      }

      :host([invalid]) {
        visibility: visible;
      };
    </style>

    <slot></slot>
`,

	  is: 'paper-input-error',
	  behaviors: [PaperInputAddonBehavior],

	  properties: {
	    /**
	     * True if the error is showing.
	     */
	    invalid: {readOnly: true, reflectToAttribute: true, type: Boolean}
	  },

	  /**
	   * This overrides the update function in PaperInputAddonBehavior.
	   * @param {{
	   *   inputElement: (Element|undefined),
	   *   value: (string|undefined),
	   *   invalid: boolean
	   * }} state -
	   *     inputElement: The input element.
	   *     value: The input value.
	   *     invalid: True if the input value is invalid.
	   */
	  update: function(state) {
	    this._setInvalid(state.invalid);
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	  IronFormElementBehavior adds a `name`, `value` and `required` properties to
	  a custom element. It mostly exists for backcompatibility with Polymer 1.x, and
	  is probably not something you want to use.

	  @demo demo/index.html
	  @polymerBehavior
	 */
	const IronFormElementBehavior = {

	  properties: {
	    /**
	     * The name of this element.
	     */
	    name: {type: String},

	    /**
	     * The value for this element.
	     * @type {*}
	     */
	    value: {notify: true, type: String},

	    /**
	     * Set to true to mark the input as required. If used in a form, a
	     * custom element that uses this behavior should also use
	     * IronValidatableBehavior and define a custom validation method.
	     * Otherwise, a `required` element will always be considered valid.
	     * It's also strongly recommended to provide a visual style for the element
	     * when its value is invalid.
	     */
	    required: {type: Boolean, value: false},
	  },

	  // Empty implementations for backcompatibility.
	  attached: function() {},
	  detached: function() {}
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * Chrome uses an older version of DOM Level 3 Keyboard Events
	 *
	 * Most keys are labeled as text, but some are Unicode codepoints.
	 * Values taken from:
	 * http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set
	 */
	var KEY_IDENTIFIER = {
	  'U+0008': 'backspace',
	  'U+0009': 'tab',
	  'U+001B': 'esc',
	  'U+0020': 'space',
	  'U+007F': 'del'
	};

	/**
	 * Special table for KeyboardEvent.keyCode.
	 * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better
	 * than that.
	 *
	 * Values from:
	 * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode
	 */
	var KEY_CODE = {
	  8: 'backspace',
	  9: 'tab',
	  13: 'enter',
	  27: 'esc',
	  33: 'pageup',
	  34: 'pagedown',
	  35: 'end',
	  36: 'home',
	  32: 'space',
	  37: 'left',
	  38: 'up',
	  39: 'right',
	  40: 'down',
	  46: 'del',
	  106: '*'
	};

	/**
	 * MODIFIER_KEYS maps the short name for modifier keys used in a key
	 * combo string to the property name that references those same keys
	 * in a KeyboardEvent instance.
	 */
	var MODIFIER_KEYS = {
	  'shift': 'shiftKey',
	  'ctrl': 'ctrlKey',
	  'alt': 'altKey',
	  'meta': 'metaKey'
	};

	/**
	 * KeyboardEvent.key is mostly represented by printable character made by
	 * the keyboard, with unprintable keys labeled nicely.
	 *
	 * However, on OS X, Alt+char can make a Unicode character that follows an
	 * Apple-specific mapping. In this case, we fall back to .keyCode.
	 */
	var KEY_CHAR = /[a-z0-9*]/;

	/**
	 * Matches a keyIdentifier string.
	 */
	var IDENT_CHAR = /U\+/;

	/**
	 * Matches arrow keys in Gecko 27.0+
	 */
	var ARROW_KEY = /^arrow/;

	/**
	 * Matches space keys everywhere (notably including IE10's exceptional name
	 * `spacebar`).
	 */
	var SPACE_KEY = /^space(bar)?/;

	/**
	 * Matches ESC key.
	 *
	 * Value from: http://w3c.github.io/uievents-key/#key-Escape
	 */
	var ESC_KEY = /^escape$/;

	/**
	 * Transforms the key.
	 * @param {string} key The KeyBoardEvent.key
	 * @param {Boolean} [noSpecialChars] Limits the transformation to
	 * alpha-numeric characters.
	 */
	function transformKey(key, noSpecialChars) {
	  var validKey = '';
	  if (key) {
	    var lKey = key.toLowerCase();
	    if (lKey === ' ' || SPACE_KEY.test(lKey)) {
	      validKey = 'space';
	    } else if (ESC_KEY.test(lKey)) {
	      validKey = 'esc';
	    } else if (lKey.length == 1) {
	      if (!noSpecialChars || KEY_CHAR.test(lKey)) {
	        validKey = lKey;
	      }
	    } else if (ARROW_KEY.test(lKey)) {
	      validKey = lKey.replace('arrow', '');
	    } else if (lKey == 'multiply') {
	      // numpad '*' can map to Multiply on IE/Windows
	      validKey = '*';
	    } else {
	      validKey = lKey;
	    }
	  }
	  return validKey;
	}

	function transformKeyIdentifier(keyIdent) {
	  var validKey = '';
	  if (keyIdent) {
	    if (keyIdent in KEY_IDENTIFIER) {
	      validKey = KEY_IDENTIFIER[keyIdent];
	    } else if (IDENT_CHAR.test(keyIdent)) {
	      keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);
	      validKey = String.fromCharCode(keyIdent).toLowerCase();
	    } else {
	      validKey = keyIdent.toLowerCase();
	    }
	  }
	  return validKey;
	}

	function transformKeyCode(keyCode) {
	  var validKey = '';
	  if (Number(keyCode)) {
	    if (keyCode >= 65 && keyCode <= 90) {
	      // ascii a-z
	      // lowercase is 32 offset from uppercase
	      validKey = String.fromCharCode(32 + keyCode);
	    } else if (keyCode >= 112 && keyCode <= 123) {
	      // function keys f1-f12
	      validKey = 'f' + (keyCode - 112 + 1);
	    } else if (keyCode >= 48 && keyCode <= 57) {
	      // top 0-9 keys
	      validKey = String(keyCode - 48);
	    } else if (keyCode >= 96 && keyCode <= 105) {
	      // num pad 0-9
	      validKey = String(keyCode - 96);
	    } else {
	      validKey = KEY_CODE[keyCode];
	    }
	  }
	  return validKey;
	}

	/**
	 * Calculates the normalized key for a KeyboardEvent.
	 * @param {KeyboardEvent} keyEvent
	 * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key
	 * transformation to alpha-numeric chars. This is useful with key
	 * combinations like shift + 2, which on FF for MacOS produces
	 * keyEvent.key = @
	 * To get 2 returned, set noSpecialChars = true
	 * To get @ returned, set noSpecialChars = false
	 */
	function normalizedKeyForEvent(keyEvent, noSpecialChars) {
	  // Fall back from .key, to .detail.key for artifical keyboard events,
	  // and then to deprecated .keyIdentifier and .keyCode.
	  if (keyEvent.key) {
	    return transformKey(keyEvent.key, noSpecialChars);
	  }
	  if (keyEvent.detail && keyEvent.detail.key) {
	    return transformKey(keyEvent.detail.key, noSpecialChars);
	  }
	  return transformKeyIdentifier(keyEvent.keyIdentifier) ||
	      transformKeyCode(keyEvent.keyCode) || '';
	}

	function keyComboMatchesEvent(keyCombo, event) {
	  // For combos with modifiers we support only alpha-numeric keys
	  var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);
	  return keyEvent === keyCombo.key &&
	      (!keyCombo.hasModifiers ||
	       (!!event.shiftKey === !!keyCombo.shiftKey &&
	        !!event.ctrlKey === !!keyCombo.ctrlKey &&
	        !!event.altKey === !!keyCombo.altKey &&
	        !!event.metaKey === !!keyCombo.metaKey));
	}

	function parseKeyComboString(keyComboString) {
	  if (keyComboString.length === 1) {
	    return {combo: keyComboString, key: keyComboString, event: 'keydown'};
	  }
	  return keyComboString.split('+')
	      .reduce(function(parsedKeyCombo, keyComboPart) {
	        var eventParts = keyComboPart.split(':');
	        var keyName = eventParts[0];
	        var event = eventParts[1];

	        if (keyName in MODIFIER_KEYS) {
	          parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;
	          parsedKeyCombo.hasModifiers = true;
	        } else {
	          parsedKeyCombo.key = keyName;
	          parsedKeyCombo.event = event || 'keydown';
	        }

	        return parsedKeyCombo;
	      }, {combo: keyComboString.split(':').shift()});
	}

	function parseEventString(eventString) {
	  return eventString.trim().split(' ').map(function(keyComboString) {
	    return parseKeyComboString(keyComboString);
	  });
	}

	/**
	 * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing
	 * keyboard commands that pertain to [WAI-ARIA best
	 * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The
	 * element takes care of browser differences with respect to Keyboard events and
	 * uses an expressive syntax to filter key presses.
	 *
	 * Use the `keyBindings` prototype property to express what combination of keys
	 * will trigger the callback. A key binding has the format
	 * `"KEY+MODIFIER:EVENT": "callback"` (`"KEY": "callback"` or
	 * `"KEY:EVENT": "callback"` are valid as well). Some examples:
	 *
	 *      keyBindings: {
	 *        'space': '_onKeydown', // same as 'space:keydown'
	 *        'shift+tab': '_onKeydown',
	 *        'enter:keypress': '_onKeypress',
	 *        'esc:keyup': '_onKeyup'
	 *      }
	 *
	 * The callback will receive with an event containing the following information
	 * in `event.detail`:
	 *
	 *      _onKeydown: function(event) {
	 *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. "shift+tab"
	 *        console.log(event.detail.key); // KEY only, e.g. "tab"
	 *        console.log(event.detail.event); // EVENT, e.g. "keydown"
	 *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent
	 *      }
	 *
	 * Use the `keyEventTarget` attribute to set up event handlers on a specific
	 * node.
	 *
	 * See the [demo source
	 * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)
	 * for an example.
	 *
	 * @demo demo/index.html
	 * @polymerBehavior
	 */
	const IronA11yKeysBehavior = {
	  properties: {
	    /**
	     * The EventTarget that will be firing relevant KeyboardEvents. Set it to
	     * `null` to disable the listeners.
	     * @type {?EventTarget}
	     */
	    keyEventTarget: {
	      type: Object,
	      value: function() {
	        return this;
	      }
	    },

	    /**
	     * If true, this property will cause the implementing element to
	     * automatically stop propagation on any handled KeyboardEvents.
	     */
	    stopKeyboardEventPropagation: {type: Boolean, value: false},

	    _boundKeyHandlers: {
	      type: Array,
	      value: function() {
	        return [];
	      }
	    },

	    // We use this due to a limitation in IE10 where instances will have
	    // own properties of everything on the "prototype".
	    _imperativeKeyBindings: {
	      type: Object,
	      value: function() {
	        return {};
	      }
	    }
	  },

	  observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],


	  /**
	   * To be used to express what combination of keys  will trigger the relative
	   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`
	   * @type {!Object}
	   */
	  keyBindings: {},

	  registered: function() {
	    this._prepKeyBindings();
	  },

	  attached: function() {
	    this._listenKeyEventListeners();
	  },

	  detached: function() {
	    this._unlistenKeyEventListeners();
	  },

	  /**
	   * Can be used to imperatively add a key binding to the implementing
	   * element. This is the imperative equivalent of declaring a keybinding
	   * in the `keyBindings` prototype property.
	   *
	   * @param {string} eventString
	   * @param {string} handlerName
	   */
	  addOwnKeyBinding: function(eventString, handlerName) {
	    this._imperativeKeyBindings[eventString] = handlerName;
	    this._prepKeyBindings();
	    this._resetKeyEventListeners();
	  },

	  /**
	   * When called, will remove all imperatively-added key bindings.
	   */
	  removeOwnKeyBindings: function() {
	    this._imperativeKeyBindings = {};
	    this._prepKeyBindings();
	    this._resetKeyEventListeners();
	  },

	  /**
	   * Returns true if a keyboard event matches `eventString`.
	   *
	   * @param {KeyboardEvent} event
	   * @param {string} eventString
	   * @return {boolean}
	   */
	  keyboardEventMatchesKeys: function(event, eventString) {
	    var keyCombos = parseEventString(eventString);
	    for (var i = 0; i < keyCombos.length; ++i) {
	      if (keyComboMatchesEvent(keyCombos[i], event)) {
	        return true;
	      }
	    }
	    return false;
	  },

	  _collectKeyBindings: function() {
	    var keyBindings = this.behaviors.map(function(behavior) {
	      return behavior.keyBindings;
	    });

	    if (keyBindings.indexOf(this.keyBindings) === -1) {
	      keyBindings.push(this.keyBindings);
	    }

	    return keyBindings;
	  },

	  _prepKeyBindings: function() {
	    this._keyBindings = {};

	    this._collectKeyBindings().forEach(function(keyBindings) {
	      for (var eventString in keyBindings) {
	        this._addKeyBinding(eventString, keyBindings[eventString]);
	      }
	    }, this);

	    for (var eventString in this._imperativeKeyBindings) {
	      this._addKeyBinding(
	          eventString, this._imperativeKeyBindings[eventString]);
	    }

	    // Give precedence to combos with modifiers to be checked first.
	    for (var eventName in this._keyBindings) {
	      this._keyBindings[eventName].sort(function(kb1, kb2) {
	        var b1 = kb1[0].hasModifiers;
	        var b2 = kb2[0].hasModifiers;
	        return (b1 === b2) ? 0 : b1 ? -1 : 1;
	      });
	    }
	  },

	  _addKeyBinding: function(eventString, handlerName) {
	    parseEventString(eventString).forEach(function(keyCombo) {
	      this._keyBindings[keyCombo.event] =
	          this._keyBindings[keyCombo.event] || [];

	      this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);
	    }, this);
	  },

	  _resetKeyEventListeners: function() {
	    this._unlistenKeyEventListeners();

	    if (this.isAttached) {
	      this._listenKeyEventListeners();
	    }
	  },

	  _listenKeyEventListeners: function() {
	    if (!this.keyEventTarget) {
	      return;
	    }
	    Object.keys(this._keyBindings).forEach(function(eventName) {
	      var keyBindings = this._keyBindings[eventName];
	      var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);

	      this._boundKeyHandlers.push(
	          [this.keyEventTarget, eventName, boundKeyHandler]);

	      this.keyEventTarget.addEventListener(eventName, boundKeyHandler);
	    }, this);
	  },

	  _unlistenKeyEventListeners: function() {
	    var keyHandlerTuple;
	    var keyEventTarget;
	    var eventName;
	    var boundKeyHandler;

	    while (this._boundKeyHandlers.length) {
	      // My kingdom for block-scope binding and destructuring assignment..
	      keyHandlerTuple = this._boundKeyHandlers.pop();
	      keyEventTarget = keyHandlerTuple[0];
	      eventName = keyHandlerTuple[1];
	      boundKeyHandler = keyHandlerTuple[2];

	      keyEventTarget.removeEventListener(eventName, boundKeyHandler);
	    }
	  },

	  _onKeyBindingEvent: function(keyBindings, event) {
	    if (this.stopKeyboardEventPropagation) {
	      event.stopPropagation();
	    }

	    // if event has been already prevented, don't do anything
	    if (event.defaultPrevented) {
	      return;
	    }

	    for (var i = 0; i < keyBindings.length; i++) {
	      var keyCombo = keyBindings[i][0];
	      var handlerName = keyBindings[i][1];
	      if (keyComboMatchesEvent(keyCombo, event)) {
	        this._triggerKeyHandler(keyCombo, handlerName, event);
	        // exit the loop if eventDefault was prevented
	        if (event.defaultPrevented) {
	          return;
	        }
	      }
	    }
	  },

	  _triggerKeyHandler: function(keyCombo, handlerName, keyboardEvent) {
	    var detail = Object.create(keyCombo);
	    detail.keyboardEvent = keyboardEvent;
	    var event =
	        new CustomEvent(keyCombo.event, {detail: detail, cancelable: true});
	    this[handlerName].call(this, event);
	    if (event.defaultPrevented) {
	      keyboardEvent.preventDefault();
	    }
	  }
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @demo demo/index.html
	 * @polymerBehavior
	 */
	const IronControlState = {

	  properties: {

	    /**
	     * If true, the element currently has focus.
	     */
	    focused: {
	      type: Boolean,
	      value: false,
	      notify: true,
	      readOnly: true,
	      reflectToAttribute: true
	    },

	    /**
	     * If true, the user cannot interact with this element.
	     */
	    disabled: {
	      type: Boolean,
	      value: false,
	      notify: true,
	      observer: '_disabledChanged',
	      reflectToAttribute: true
	    },

	    /**
	     * Value of the `tabindex` attribute before `disabled` was activated.
	     * `null` means the attribute was not present.
	     * @type {?string|undefined}
	     */
	    _oldTabIndex: {type: String},

	    _boundFocusBlurHandler: {
	      type: Function,
	      value: function() {
	        return this._focusBlurHandler.bind(this);
	      }
	    }
	  },

	  observers: ['_changedControlState(focused, disabled)'],

	  /**
	   * @return {void}
	   */
	  ready: function() {
	    this.addEventListener('focus', this._boundFocusBlurHandler, true);
	    this.addEventListener('blur', this._boundFocusBlurHandler, true);
	  },

	  _focusBlurHandler: function(event) {
	    // Polymer takes care of retargeting events.
	    this._setFocused(event.type === 'focus');
	    return;
	  },

	  _disabledChanged: function(disabled, old) {
	    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');
	    this.style.pointerEvents = disabled ? 'none' : '';
	    if (disabled) {
	      // Read the `tabindex` attribute instead of the `tabIndex` property.
	      // The property returns `-1` if there is no `tabindex` attribute.
	      // This distinction is important when restoring the value because
	      // leaving `-1` hides shadow root children from the tab order.
	      this._oldTabIndex = this.getAttribute('tabindex');
	      this._setFocused(false);
	      this.tabIndex = -1;
	      this.blur();
	    } else if (this._oldTabIndex !== undefined) {
	      if (this._oldTabIndex === null) {
	        this.removeAttribute('tabindex');
	      } else {
	        this.setAttribute('tabindex', this._oldTabIndex);
	      }
	    }
	  },

	  _changedControlState: function() {
	    // _controlStateChanged is abstract, follow-on behaviors may implement it
	    if (this._controlStateChanged) {
	      this._controlStateChanged();
	    }
	  }

	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	// Generate unique, monotonically increasing IDs for labels (needed by
	// aria-labelledby) and add-ons.
	const PaperInputHelper = {};

	PaperInputHelper.NextLabelID = 1;
	PaperInputHelper.NextAddonID = 1;
	PaperInputHelper.NextInputID = 1;

	/**
	 * Use `PaperInputBehavior` to implement inputs with `<paper-input-container>`.
	 * This behavior is implemented by `<paper-input>`. It exposes a number of
	 * properties from `<paper-input-container>` and `<input is="iron-input">` and
	 * they should be bound in your template.
	 *
	 * The input element can be accessed by the `inputElement` property if you need
	 * to access properties or methods that are not exposed.
	 * @polymerBehavior PaperInputBehavior
	 */
	const PaperInputBehaviorImpl = {

	  properties: {
	    /**
	     * Fired when the input changes due to user interaction.
	     *
	     * @event change
	     */

	    /**
	     * The label for this input. If you're using PaperInputBehavior to
	     * implement your own paper-input-like element, bind this to
	     * `<label>`'s content and `hidden` property, e.g.
	     * `<label hidden$="[[!label]]">[[label]]</label>` in your `template`
	     */
	    label: {type: String},

	    /**
	     * The value for this input. If you're using PaperInputBehavior to
	     * implement your own paper-input-like element, bind this to
	     * the `<iron-input>`'s `bindValue`
	     * property, or the value property of your input that is `notify:true`.
	     * @type {*}
	     */
	    value: {notify: true, type: String},

	    /**
	     * Set to true to disable this input. If you're using PaperInputBehavior to
	     * implement your own paper-input-like element, bind this to
	     * both the `<paper-input-container>`'s and the input's `disabled` property.
	     */
	    disabled: {type: Boolean, value: false},

	    /**
	     * Returns true if the value is invalid. If you're using PaperInputBehavior
	     * to implement your own paper-input-like element, bind this to both the
	     * `<paper-input-container>`'s and the input's `invalid` property.
	     *
	     * If `autoValidate` is true, the `invalid` attribute is managed
	     * automatically, which can clobber attempts to manage it manually.
	     */
	    invalid: {type: Boolean, value: false, notify: true},

	    /**
	     * Set this to specify the pattern allowed by `preventInvalidInput`. If
	     * you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `allowedPattern`
	     * property.
	     */
	    allowedPattern: {type: String},

	    /**
	     * The type of the input. The supported types are the
	     * [native input's
	     * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the (Polymer 1) `<input is="iron-input">`'s or
	     * (Polymer 2)
	     * `<iron-input>`'s `type` property.
	     */
	    type: {type: String},

	    /**
	     * The datalist of the input (if any). This should match the id of an
	     * existing `<datalist>`. If you're using PaperInputBehavior to implement
	     * your own paper-input-like element, bind this to the `<input
	     * is="iron-input">`'s `list` property.
	     */
	    list: {type: String},

	    /**
	     * A pattern to validate the `input` with. If you're using
	     * PaperInputBehavior to implement your own paper-input-like element, bind
	     * this to the `<input is="iron-input">`'s `pattern` property.
	     */
	    pattern: {type: String},

	    /**
	     * Set to true to mark the input as required. If you're using
	     * PaperInputBehavior to implement your own paper-input-like element, bind
	     * this to the `<input is="iron-input">`'s `required` property.
	     */
	    required: {type: Boolean, value: false},

	    /**
	     * The error message to display when the input is invalid. If you're using
	     * PaperInputBehavior to implement your own paper-input-like element,
	     * bind this to the `<paper-input-error>`'s content, if using.
	     */
	    errorMessage: {type: String},

	    /**
	     * Set to true to show a character counter.
	     */
	    charCounter: {type: Boolean, value: false},

	    /**
	     * Set to true to disable the floating label. If you're using
	     * PaperInputBehavior to implement your own paper-input-like element, bind
	     * this to the `<paper-input-container>`'s `noLabelFloat` property.
	     */
	    noLabelFloat: {type: Boolean, value: false},

	    /**
	     * Set to true to always float the label. If you're using PaperInputBehavior
	     * to implement your own paper-input-like element, bind this to the
	     * `<paper-input-container>`'s `alwaysFloatLabel` property.
	     */
	    alwaysFloatLabel: {type: Boolean, value: false},

	    /**
	     * Set to true to auto-validate the input value. If you're using
	     * PaperInputBehavior to implement your own paper-input-like element, bind
	     * this to the `<paper-input-container>`'s `autoValidate` property.
	     */
	    autoValidate: {type: Boolean, value: false},

	    /**
	     * Name of the validator to use. If you're using PaperInputBehavior to
	     * implement your own paper-input-like element, bind this to
	     * the `<input is="iron-input">`'s `validator` property.
	     */
	    validator: {type: String},

	    // HTMLInputElement attributes for binding if needed

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `autocomplete`
	     * property.
	     */
	    autocomplete: {type: String, value: 'off'},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `autofocus`
	     * property.
	     */
	    autofocus: {type: Boolean, observer: '_autofocusChanged'},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `inputmode`
	     * property.
	     */
	    inputmode: {type: String},

	    /**
	     * The minimum length of the input value.
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `minlength`
	     * property.
	     */
	    minlength: {type: Number},

	    /**
	     * The maximum length of the input value.
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `maxlength`
	     * property.
	     */
	    maxlength: {type: Number},

	    /**
	     * The minimum (numeric or date-time) input value.
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `min` property.
	     */
	    min: {type: String},

	    /**
	     * The maximum (numeric or date-time) input value.
	     * Can be a String (e.g. `"2000-01-01"`) or a Number (e.g. `2`).
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `max` property.
	     */
	    max: {type: String},

	    /**
	     * Limits the numeric or date-time increments.
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `step` property.
	     */
	    step: {type: String},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `name` property.
	     */
	    name: {type: String},

	    /**
	     * A placeholder string in addition to the label. If this is set, the label
	     * will always float.
	     */
	    placeholder: {
	      type: String,
	      // need to set a default so _computeAlwaysFloatLabel is run
	      value: ''
	    },

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `readonly`
	     * property.
	     */
	    readonly: {type: Boolean, value: false},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `size` property.
	     */
	    size: {type: Number},

	    // Nonstandard attributes for binding if needed

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `autocapitalize`
	     * property.
	     */
	    autocapitalize: {type: String, value: 'none'},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `autocorrect`
	     * property.
	     */
	    autocorrect: {type: String, value: 'off'},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `autosave`
	     * property, used with type=search.
	     */
	    autosave: {type: String},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `results` property,
	     * used with type=search.
	     */
	    results: {type: Number},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the `<input is="iron-input">`'s `accept` property,
	     * used with type=file.
	     */
	    accept: {type: String},

	    /**
	     * If you're using PaperInputBehavior to implement your own paper-input-like
	     * element, bind this to the`<input is="iron-input">`'s `multiple` property,
	     * used with type=file.
	     */
	    multiple: {type: Boolean},

	    /** @private */
	    _ariaDescribedBy: {type: String, value: ''},

	    /** @private */
	    _ariaLabelledBy: {type: String, value: ''},

	    /** @private */
	    _inputId: {type: String, value: ''}
	  },

	  listeners: {
	    'addon-attached': '_onAddonAttached',
	  },

	  /**
	   * @type {!Object}
	   */
	  keyBindings: {'shift+tab:keydown': '_onShiftTabDown'},

	  /** @private */
	  hostAttributes: {tabindex: 0},

	  /**
	   * Returns a reference to the input element.
	   * @return {!HTMLElement}
	   */
	  get inputElement() {
	    // Chrome generates audit errors if an <input type="password"> has a
	    // duplicate ID, which is almost always true in Shady DOM. Generate
	    // a unique ID instead.
	    if (!this.$) {
	      this.$ = {};
	    }
	    if (!this.$.input) {
	      this._generateInputId();
	      this.$.input = this.$$('#' + this._inputId);
	    }
	    return this.$.input;
	  },

	  /**
	   * Returns a reference to the focusable element.
	   * @return {!HTMLElement}
	   */
	  get _focusableElement() {
	    return this.inputElement;
	  },

	  created: function() {
	    // These types have some default placeholder text; overlapping
	    // the label on top of it looks terrible. Auto-float the label in this case.
	    this._typesThatHaveText =
	        ['date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'];
	  },

	  attached: function() {
	    this._updateAriaLabelledBy();

	    // In the 2.0 version of the element, this is handled in `onIronInputReady`,
	    // i.e. after the native input has finished distributing. In the 1.0
	    // version, the input is in the shadow tree, so it's already available.
	    if (!PolymerElement && this.inputElement &&
	        this._typesThatHaveText.indexOf(this.inputElement.type) !== -1) {
	      this.alwaysFloatLabel = true;
	    }
	  },

	  _appendStringWithSpace: function(str, more) {
	    if (str) {
	      str = str + ' ' + more;
	    } else {
	      str = more;
	    }
	    return str;
	  },

	  _onAddonAttached: function(event) {
	    var target = dom(event).rootTarget;
	    if (target.id) {
	      this._ariaDescribedBy =
	          this._appendStringWithSpace(this._ariaDescribedBy, target.id);
	    } else {
	      var id = 'paper-input-add-on-' + PaperInputHelper.NextAddonID++;
	      target.id = id;
	      this._ariaDescribedBy =
	          this._appendStringWithSpace(this._ariaDescribedBy, id);
	    }
	  },

	  /**
	   * Validates the input element and sets an error style if needed.
	   *
	   * @return {boolean}
	   */
	  validate: function() {
	    return this.inputElement.validate();
	  },

	  /**
	   * Forward focus to inputElement. Overriden from IronControlState.
	   */
	  _focusBlurHandler: function(event) {
	    IronControlState._focusBlurHandler.call(this, event);

	    // Forward the focus to the nested input.
	    if (this.focused && !this._shiftTabPressed && this._focusableElement) {
	      this._focusableElement.focus();
	    }
	  },

	  /**
	   * Handler that is called when a shift+tab keypress is detected by the menu.
	   *
	   * @param {CustomEvent} event A key combination event.
	   */
	  _onShiftTabDown: function(event) {
	    var oldTabIndex = this.getAttribute('tabindex');
	    this._shiftTabPressed = true;
	    this.setAttribute('tabindex', '-1');
	    this.async(function() {
	      this.setAttribute('tabindex', oldTabIndex);
	      this._shiftTabPressed = false;
	    }, 1);
	  },

	  /**
	   * If `autoValidate` is true, then validates the element.
	   */
	  _handleAutoValidate: function() {
	    if (this.autoValidate)
	      this.validate();
	  },

	  /**
	   * Restores the cursor to its original position after updating the value.
	   * @param {string} newValue The value that should be saved.
	   */
	  updateValueAndPreserveCaret: function(newValue) {
	    // Not all elements might have selection, and even if they have the
	    // right properties, accessing them might throw an exception (like for
	    // <input type=number>)
	    try {
	      var start = this.inputElement.selectionStart;
	      this.value = newValue;

	      // The cursor automatically jumps to the end after re-setting the value,
	      // so restore it to its original position.
	      this.inputElement.selectionStart = start;
	      this.inputElement.selectionEnd = start;
	    } catch (e) {
	      // Just set the value and give up on the caret.
	      this.value = newValue;
	    }
	  },

	  _computeAlwaysFloatLabel: function(alwaysFloatLabel, placeholder) {
	    return placeholder || alwaysFloatLabel;
	  },

	  _updateAriaLabelledBy: function() {
	    var label = dom(this.root).querySelector('label');
	    if (!label) {
	      this._ariaLabelledBy = '';
	      return;
	    }
	    var labelledBy;
	    if (label.id) {
	      labelledBy = label.id;
	    } else {
	      labelledBy = 'paper-input-label-' + PaperInputHelper.NextLabelID++;
	      label.id = labelledBy;
	    }
	    this._ariaLabelledBy = labelledBy;
	  },

	  _generateInputId: function() {
	    if (!this._inputId || this._inputId === '') {
	      this._inputId = 'input-' + PaperInputHelper.NextInputID++;
	    }
	  },

	  _onChange: function(event) {
	    // In the Shadow DOM, the `change` event is not leaked into the
	    // ancestor tree, so we must do this manually.
	    // See
	    // https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.
	    if (this.shadowRoot) {
	      this.fire(
	          event.type,
	          {sourceEvent: event},
	          {node: this, bubbles: event.bubbles, cancelable: event.cancelable});
	    }
	  },

	  _autofocusChanged: function() {
	    // Firefox doesn't respect the autofocus attribute if it's applied after
	    // the page is loaded (Chrome/WebKit do respect it), preventing an
	    // autofocus attribute specified in markup from taking effect when the
	    // element is upgraded. As a workaround, if the autofocus property is set,
	    // and the focus hasn't already been moved elsewhere, we take focus.
	    if (this.autofocus && this._focusableElement) {
	      // In IE 11, the default document.activeElement can be the page's
	      // outermost html element, but there are also cases (under the
	      // polyfill?) in which the activeElement is not a real HTMLElement, but
	      // just a plain object. We identify the latter case as having no valid
	      // activeElement.
	      var activeElement = document.activeElement;
	      var isActiveElementValid = activeElement instanceof HTMLElement;

	      // Has some other element has already taken the focus?
	      var isSomeElementActive = isActiveElementValid &&
	          activeElement !== document.body &&
	          activeElement !== document.documentElement; /* IE 11 */
	      if (!isSomeElementActive) {
	        // No specific element has taken the focus yet, so we can take it.
	        this._focusableElement.focus();
	      }
	    }
	  }
	};

	/** @polymerBehavior */
	const PaperInputBehavior =
	    [IronControlState, IronA11yKeysBehavior, PaperInputBehaviorImpl];

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	Material design: [Text
	fields](https://www.google.com/design/spec/components/text-fields.html)

	`<paper-input>` is a single-line text field with Material Design styling.

	    <paper-input label="Input label"></paper-input>

	It may include an optional error message or character counter.

	    <paper-input error-message="Invalid input!" label="Input
	label"></paper-input> <paper-input char-counter label="Input
	label"></paper-input>

	It can also include custom prefix or suffix elements, which are displayed
	before or after the text input itself. In order for an element to be
	considered as a prefix, it must have the `prefix` attribute (and similarly
	for `suffix`).

	    <paper-input label="total">
	      <div prefix>$</div>
	      <paper-icon-button slot="suffix" icon="clear"></paper-icon-button>
	    </paper-input>

	A `paper-input` can use the native `type=search` or `type=file` features.
	However, since we can't control the native styling of the input (search icon,
	file button, date placeholder, etc.), in these cases the label will be
	automatically floated. The `placeholder` attribute can still be used for
	additional informational text.

	    <paper-input label="search!" type="search"
	        placeholder="search for cats" autosave="test" results="5">
	    </paper-input>

	See `Polymer.PaperInputBehavior` for more API docs.

	### Focus

	To focus a paper-input, you can call the native `focus()` method as long as the
	paper input has a tab index. Similarly, `blur()` will blur the element.

	### Styling

	See `Polymer.PaperInputContainer` for a list of custom properties used to
	style this element.

	The following custom properties and mixins are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}

	@group Paper Elements
	@element paper-input
	@hero hero.svg
	@demo demo/index.html
	*/
	Polymer({
	  is: 'paper-input',

	  _template: html`
    <style>
      :host {
        display: block;
      }

      :host([focused]) {
        outline: none;
      }

      :host([hidden]) {
        display: none !important;
      }

      input {
        /* Firefox sets a min-width on the input, which can cause layout issues */
        min-width: 0;
      }

      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.
      In 2.x the <iron-input> is distributed to paper-input-container, which styles
      it, but in order for this to work correctly, we need to reset some
      of the native input's properties to inherit (from the iron-input) */
      iron-input > input {
        @apply --paper-input-container-shared-input-style;
        font-family: inherit;
        font-weight: inherit;
        font-size: inherit;
        letter-spacing: inherit;
        word-spacing: inherit;
        line-height: inherit;
        text-shadow: inherit;
        color: inherit;
        cursor: inherit;
      }

      input:disabled {
        @apply --paper-input-container-input-disabled;
      }

      input::-webkit-outer-spin-button,
      input::-webkit-inner-spin-button {
        @apply --paper-input-container-input-webkit-spinner;
      }

      input::-webkit-clear-button {
        @apply --paper-input-container-input-webkit-clear;
      }

      input::-webkit-calendar-picker-indicator {
        @apply --paper-input-container-input-webkit-calendar-picker-indicator;
      }

      input::-webkit-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input:-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-moz-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      input::-ms-clear {
        @apply --paper-input-container-ms-clear;
      }

      input::-ms-reveal {
        @apply --paper-input-container-ms-reveal;
      }

      input:-ms-input-placeholder {
        color: var(--paper-input-container-color, var(--secondary-text-color));
      }

      label {
        pointer-events: none;
      }
    </style>

    <paper-input-container id="container" no-label-float="[[noLabelFloat]]" always-float-label="[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]" auto-validate\$="[[autoValidate]]" disabled\$="[[disabled]]" invalid="[[invalid]]">

      <slot name="prefix" slot="prefix"></slot>

      <label hidden\$="[[!label]]" aria-hidden="true" for\$="[[_inputId]]" slot="label">[[label]]</label>

      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->
      <iron-input bind-value="{{value}}" slot="input" class="input-element" id\$="[[_inputId]]" maxlength\$="[[maxlength]]" allowed-pattern="[[allowedPattern]]" invalid="{{invalid}}" validator="[[validator]]">
        <input aria-labelledby\$="[[_ariaLabelledBy]]" aria-describedby\$="[[_ariaDescribedBy]]" disabled\$="[[disabled]]" title\$="[[title]]" type\$="[[type]]" pattern\$="[[pattern]]" required\$="[[required]]" autocomplete\$="[[autocomplete]]" autofocus\$="[[autofocus]]" inputmode\$="[[inputmode]]" minlength\$="[[minlength]]" maxlength\$="[[maxlength]]" min\$="[[min]]" max\$="[[max]]" step\$="[[step]]" name\$="[[name]]" placeholder\$="[[placeholder]]" readonly\$="[[readonly]]" list\$="[[list]]" size\$="[[size]]" autocapitalize\$="[[autocapitalize]]" autocorrect\$="[[autocorrect]]" on-change="_onChange" tabindex\$="[[tabIndex]]" autosave\$="[[autosave]]" results\$="[[results]]" accept\$="[[accept]]" multiple\$="[[multiple]]">
      </iron-input>

      <slot name="suffix" slot="suffix"></slot>

      <template is="dom-if" if="[[errorMessage]]">
        <paper-input-error aria-live="assertive" slot="add-on">[[errorMessage]]</paper-input-error>
      </template>

      <template is="dom-if" if="[[charCounter]]">
        <paper-input-char-counter slot="add-on"></paper-input-char-counter>
      </template>

    </paper-input-container>
  `,

	  behaviors: [PaperInputBehavior, IronFormElementBehavior],

	  properties: {
	    value: {
	      // Required for the correct TypeScript type-generation
	      type: String
	    }
	  },

	  /**
	   * Returns a reference to the focusable element. Overridden from
	   * PaperInputBehavior to correctly focus the native input.
	   *
	   * @return {!HTMLElement}
	   */
	  get _focusableElement() {
	    return this.inputElement._inputElement;
	  },

	  // Note: This event is only available in the 1.0 version of this element.
	  // In 2.0, the functionality of `_onIronInputReady` is done in
	  // PaperInputBehavior::attached.
	  listeners: {'iron-input-ready': '_onIronInputReady'},

	  _onIronInputReady: function() {
	    // Even though this is only used in the next line, save this for
	    // backwards compatibility, since the native input had this ID until 2.0.5.
	    if (!this.$.nativeInput) {
	      this.$.nativeInput = this.$$('input');
	    }
	    if (this.inputElement &&
	        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {
	      this.alwaysFloatLabel = true;
	    }

	    // Only validate when attached if the input already has a value.
	    if (!!this.inputElement.bindValue) {
	      this.$.container._handleValueAndAutoValidate(this.inputElement);
	    }
	  },
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`iron-autogrow-textarea` is an element containing a textarea that grows in
	height as more lines of input are entered. Unless an explicit height or the
	`maxRows` property is set, it will never scroll.

	Example:

	    <iron-autogrow-textarea></iron-autogrow-textarea>

	### Styling

	The following custom properties and mixins are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`
	`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`

	@group Iron Elements
	@hero hero.svg
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
        position: relative;
        width: 400px;
        border: 1px solid;
        padding: 2px;
        -moz-appearance: textarea;
        -webkit-appearance: textarea;
        overflow: hidden;
      }

      .mirror-text {
        visibility: hidden;
        word-wrap: break-word;
        @apply --iron-autogrow-textarea;
      }

      .fit {
        @apply --layout-fit;
      }

      textarea {
        position: relative;
        outline: none;
        border: none;
        resize: none;
        background: inherit;
        color: inherit;
        /* see comments in template */
        width: 100%;
        height: 100%;
        font-size: inherit;
        font-family: inherit;
        line-height: inherit;
        text-align: inherit;
        @apply --iron-autogrow-textarea;
      }

      textarea::-webkit-input-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea:-moz-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea::-moz-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }

      textarea:-ms-input-placeholder {
        @apply --iron-autogrow-textarea-placeholder;
      }
    </style>

    <!-- the mirror sizes the input/textarea so it grows with typing -->
    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->
    <div id="mirror" class="mirror-text" aria-hidden="true">&nbsp;</div>

    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->
    <div class="textarea-container fit">
      <textarea id="textarea" name\$="[[name]]" aria-label\$="[[label]]" autocomplete\$="[[autocomplete]]" autofocus\$="[[autofocus]]" inputmode\$="[[inputmode]]" placeholder\$="[[placeholder]]" readonly\$="[[readonly]]" required\$="[[required]]" disabled\$="[[disabled]]" rows\$="[[rows]]" minlength\$="[[minlength]]" maxlength\$="[[maxlength]]"></textarea>
    </div>
`,

	  is: 'iron-autogrow-textarea',
	  behaviors: [IronValidatableBehavior, IronControlState],

	  properties: {
	    /**
	     * Use this property instead of `bind-value` for two-way data binding.
	     * @type {string|number}
	     */
	    value: {observer: '_valueChanged', type: String, notify: true},

	    /**
	     * This property is deprecated, and just mirrors `value`. Use `value`
	     * instead.
	     * @type {string|number}
	     */
	    bindValue: {observer: '_bindValueChanged', type: String, notify: true},

	    /**
	     * The initial number of rows.
	     *
	     * @attribute rows
	     * @type number
	     * @default 1
	     */
	    rows: {type: Number, value: 1, observer: '_updateCached'},

	    /**
	     * The maximum number of rows this element can grow to until it
	     * scrolls. 0 means no maximum.
	     *
	     * @attribute maxRows
	     * @type number
	     * @default 0
	     */
	    maxRows: {type: Number, value: 0, observer: '_updateCached'},

	    /**
	     * Bound to the textarea's `autocomplete` attribute.
	     */
	    autocomplete: {type: String, value: 'off'},

	    /**
	     * Bound to the textarea's `autofocus` attribute.
	     */
	    autofocus: {type: Boolean, value: false},

	    /**
	     * Bound to the textarea's `inputmode` attribute.
	     */
	    inputmode: {type: String},

	    /**
	     * Bound to the textarea's `placeholder` attribute.
	     */
	    placeholder: {type: String},

	    /**
	     * Bound to the textarea's `readonly` attribute.
	     */
	    readonly: {type: String},

	    /**
	     * Set to true to mark the textarea as required.
	     */
	    required: {type: Boolean},

	    /**
	     * The minimum length of the input value.
	     */
	    minlength: {type: Number},

	    /**
	     * The maximum length of the input value.
	     */
	    maxlength: {type: Number},

	    /**
	     * Bound to the textarea's `aria-label` attribute.
	     */
	    label: {type: String}

	  },

	  listeners: {'input': '_onInput'},

	  /**
	   * Returns the underlying textarea.
	   * @return {!HTMLTextAreaElement}
	   */
	  get textarea() {
	    return this.$.textarea;
	  },

	  /**
	   * Returns textarea's selection start.
	   * @return {number}
	   */
	  get selectionStart() {
	    return this.$.textarea.selectionStart;
	  },

	  /**
	   * Returns textarea's selection end.
	   * @return {number}
	   */
	  get selectionEnd() {
	    return this.$.textarea.selectionEnd;
	  },

	  /**
	   * Sets the textarea's selection start.
	   */
	  set selectionStart(value) {
	    this.$.textarea.selectionStart = value;
	  },

	  /**
	   * Sets the textarea's selection end.
	   */
	  set selectionEnd(value) {
	    this.$.textarea.selectionEnd = value;
	  },

	  attached: function() {
	    /* iOS has an arbitrary left margin of 3px that isn't present
	     * in any other browser, and means that the paper-textarea's cursor
	     * overlaps the label.
	     * See https://github.com/PolymerElements/paper-input/issues/468.
	     */
	    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);
	    if (IS_IOS) {
	      this.$.textarea.style.marginLeft = '-3px';
	    }
	  },

	  /**
	   * Returns true if `value` is valid. The validator provided in `validator`
	   * will be used first, if it exists; otherwise, the `textarea`'s validity
	   * is used.
	   * @return {boolean} True if the value is valid.
	   */
	  validate: function() {
	    // Use the nested input's native validity.
	    var valid = this.$.textarea.validity.valid;

	    // Only do extra checking if the browser thought this was valid.
	    if (valid) {
	      // Empty, required input is invalid
	      if (this.required && this.value === '') {
	        valid = false;
	      } else if (this.hasValidator()) {
	        valid = IronValidatableBehavior.validate.call(this, this.value);
	      }
	    }

	    this.invalid = !valid;
	    this.fire('iron-input-validate');
	    return valid;
	  },

	  _bindValueChanged: function(bindValue) {
	    this.value = bindValue;
	  },

	  _valueChanged: function(value) {
	    var textarea = this.textarea;
	    if (!textarea) {
	      return;
	    }

	    // If the bindValue changed manually, then we need to also update
	    // the underlying textarea's value. Otherwise this change was probably
	    // generated from the _onInput handler, and the two values are already
	    // the same.
	    if (textarea.value !== value) {
	      textarea.value = !(value || value === 0) ? '' : value;
	    }

	    this.bindValue = value;
	    this.$.mirror.innerHTML = this._valueForMirror();

	    // Manually notify because we don't want to notify until after setting
	    // value.
	    this.fire('bind-value-changed', {value: this.bindValue});
	  },

	  _onInput: function(event) {
	    var eventPath = dom(event).path;
	    this.value = eventPath ? eventPath[0].value : event.target.value;
	  },

	  _constrain: function(tokens) {
	    var _tokens;
	    tokens = tokens || [''];
	    // Enforce the min and max heights for a multiline input to avoid
	    // measurement
	    if (this.maxRows > 0 && tokens.length > this.maxRows) {
	      _tokens = tokens.slice(0, this.maxRows);
	    } else {
	      _tokens = tokens.slice(0);
	    }
	    while (this.rows > 0 && _tokens.length < this.rows) {
	      _tokens.push('');
	    }
	    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.
	    return _tokens.join('<br/>') + '&#160;';
	  },

	  _valueForMirror: function() {
	    var input = this.textarea;
	    if (!input) {
	      return;
	    }
	    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')
	                                               .replace(/"/gm, '&quot;')
	                                               .replace(/'/gm, '&#39;')
	                                               .replace(/</gm, '&lt;')
	                                               .replace(/>/gm, '&gt;')
	                                               .split('\n') :
	                                           [''];
	    return this._constrain(this.tokens);
	  },

	  _updateCached: function() {
	    this.$.mirror.innerHTML = this._constrain(this.tokens);
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/*
	`<paper-textarea>` is a multi-line text field with Material Design styling.

	    <paper-textarea label="Textarea label"></paper-textarea>

	See `Polymer.PaperInputBehavior` for more API docs.

	### Validation

	Currently only `required` and `maxlength` validation is supported.

	### Styling

	See `Polymer.PaperInputContainer` for a list of custom properties used to
	style this element.
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
      }

      :host([hidden]) {
        display: none !important;
      }

      label {
        pointer-events: none;
      }
    </style>

    <paper-input-container no-label-float\$="[[noLabelFloat]]" always-float-label="[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]" auto-validate\$="[[autoValidate]]" disabled\$="[[disabled]]" invalid="[[invalid]]">

      <label hidden\$="[[!label]]" aria-hidden="true" for\$="[[_inputId]]" slot="label">[[label]]</label>

      <iron-autogrow-textarea class="paper-input-input" slot="input" id\$="[[_inputId]]" aria-labelledby\$="[[_ariaLabelledBy]]" aria-describedby\$="[[_ariaDescribedBy]]" bind-value="{{value}}" invalid="{{invalid}}" validator\$="[[validator]]" disabled\$="[[disabled]]" autocomplete\$="[[autocomplete]]" autofocus\$="[[autofocus]]" inputmode\$="[[inputmode]]" name\$="[[name]]" placeholder\$="[[placeholder]]" readonly\$="[[readonly]]" required\$="[[required]]" minlength\$="[[minlength]]" maxlength\$="[[maxlength]]" autocapitalize\$="[[autocapitalize]]" rows\$="[[rows]]" max-rows\$="[[maxRows]]" on-change="_onChange"></iron-autogrow-textarea>

      <template is="dom-if" if="[[errorMessage]]">
        <paper-input-error aria-live="assertive" slot="add-on">[[errorMessage]]</paper-input-error>
      </template>

      <template is="dom-if" if="[[charCounter]]">
        <paper-input-char-counter slot="add-on"></paper-input-char-counter>
      </template>

    </paper-input-container>
`,

	  is: 'paper-textarea',

	  behaviors: [
	    PaperInputBehavior,
	    IronFormElementBehavior,
	  ],

	  properties: {
	    _ariaLabelledBy: {
	      observer: '_ariaLabelledByChanged',
	      type: String,
	    },

	    _ariaDescribedBy: {
	      observer: '_ariaDescribedByChanged',
	      type: String,
	    },

	    value: {
	      // Required for the correct TypeScript type-generation
	      type: String,
	    },

	    /**
	     * The initial number of rows.
	     *
	     * @attribute rows
	     * @type {number}
	     * @default 1
	     */
	    rows: {
	      type: Number,
	      value: 1,
	    },

	    /**
	     * The maximum number of rows this element can grow to until it
	     * scrolls. 0 means no maximum.
	     *
	     * @attribute maxRows
	     * @type {number}
	     * @default 0
	     */
	    maxRows: {
	      type: Number,
	      value: 0,
	    },
	  },

	  /**
	   * @return {number}
	   */
	  get selectionStart() {
	    return this.$.input.textarea.selectionStart;
	  },

	  set selectionStart(start) {
	    this.$.input.textarea.selectionStart = start;
	  },

	  /**
	   * @return {number}
	   */
	  get selectionEnd() {
	    return this.$.input.textarea.selectionEnd;
	  },

	  set selectionEnd(end) {
	    this.$.input.textarea.selectionEnd = end;
	  },

	  _ariaLabelledByChanged: function(ariaLabelledBy) {
	    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);
	  },

	  _ariaDescribedByChanged: function(ariaDescribedBy) {
	    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);
	  },

	  get _focusableElement() {
	    return this.inputElement.textarea;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$6 = html`
<custom-style>
  <style is="custom-style">
    html {

      --shadow-transition: {
        transition: box-shadow 0.28s cubic-bezier(0.4, 0, 0.2, 1);
      };

      --shadow-none: {
        box-shadow: none;
      };

      /* from http://codepen.io/shyndman/pen/c5394ddf2e8b2a5c9185904b57421cdb */

      --shadow-elevation-2dp: {
        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
                    0 1px 5px 0 rgba(0, 0, 0, 0.12),
                    0 3px 1px -2px rgba(0, 0, 0, 0.2);
      };

      --shadow-elevation-3dp: {
        box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14),
                    0 1px 8px 0 rgba(0, 0, 0, 0.12),
                    0 3px 3px -2px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-4dp: {
        box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),
                    0 1px 10px 0 rgba(0, 0, 0, 0.12),
                    0 2px 4px -1px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-6dp: {
        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14),
                    0 1px 18px 0 rgba(0, 0, 0, 0.12),
                    0 3px 5px -1px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-8dp: {
        box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),
                    0 3px 14px 2px rgba(0, 0, 0, 0.12),
                    0 5px 5px -3px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-12dp: {
        box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),
                    0 4px 22px 3px rgba(0, 0, 0, 0.12),
                    0 6px 7px -4px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-16dp: {
        box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),
                    0  6px 30px 5px rgba(0, 0, 0, 0.12),
                    0  8px 10px -5px rgba(0, 0, 0, 0.4);
      };

      --shadow-elevation-24dp: {
        box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),
                    0 9px 46px 8px rgba(0, 0, 0, 0.12),
                    0 11px 15px -7px rgba(0, 0, 0, 0.4);
      };
    }
  </style>
</custom-style>`;
	template$6.setAttribute('style', 'display: none;');
	document.head.appendChild(template$6.content);

	/**
	@license
	Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/
	const template$7 = html`
<dom-module id="paper-material-styles">
  <template>
    <style>
      html {
        --paper-material: {
          display: block;
          position: relative;
        };
        --paper-material-elevation-1: {
          @apply --shadow-elevation-2dp;
        };
        --paper-material-elevation-2: {
          @apply --shadow-elevation-4dp;
        };
        --paper-material-elevation-3: {
          @apply --shadow-elevation-6dp;
        };
        --paper-material-elevation-4: {
          @apply --shadow-elevation-8dp;
        };
        --paper-material-elevation-5: {
          @apply --shadow-elevation-16dp;
        };
      }
      .paper-material {
        @apply --paper-material;
      }
      .paper-material[elevation="1"] {
        @apply --paper-material-elevation-1;
      }
      .paper-material[elevation="2"] {
        @apply --paper-material-elevation-2;
      }
      .paper-material[elevation="3"] {
        @apply --paper-material-elevation-3;
      }
      .paper-material[elevation="4"] {
        @apply --paper-material-elevation-4;
      }
      .paper-material[elevation="5"] {
        @apply --paper-material-elevation-5;
      }

      /* Duplicate the styles because of https://github.com/webcomponents/shadycss/issues/193 */
      :host {
        --paper-material: {
          display: block;
          position: relative;
        };
        --paper-material-elevation-1: {
          @apply --shadow-elevation-2dp;
        };
        --paper-material-elevation-2: {
          @apply --shadow-elevation-4dp;
        };
        --paper-material-elevation-3: {
          @apply --shadow-elevation-6dp;
        };
        --paper-material-elevation-4: {
          @apply --shadow-elevation-8dp;
        };
        --paper-material-elevation-5: {
          @apply --shadow-elevation-16dp;
        };
      }
      :host(.paper-material) {
        @apply --paper-material;
      }
      :host(.paper-material[elevation="1"]) {
        @apply --paper-material-elevation-1;
      }
      :host(.paper-material[elevation="2"]) {
        @apply --paper-material-elevation-2;
      }
      :host(.paper-material[elevation="3"]) {
        @apply --paper-material-elevation-3;
      }
      :host(.paper-material[elevation="4"]) {
        @apply --paper-material-elevation-4;
      }
      :host(.paper-material[elevation="5"]) {
        @apply --paper-material-elevation-5;
      }
    </style>
  </template>
</dom-module>`;
	template$7.setAttribute('style', 'display: none;');
	document.head.appendChild(template$7.content);

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * @demo demo/index.html
	 * @polymerBehavior IronButtonState
	 */
	const IronButtonStateImpl = {

	  properties: {

	    /**
	     * If true, the user is currently holding down the button.
	     */
	    pressed: {
	      type: Boolean,
	      readOnly: true,
	      value: false,
	      reflectToAttribute: true,
	      observer: '_pressedChanged'
	    },

	    /**
	     * If true, the button toggles the active state with each tap or press
	     * of the spacebar.
	     */
	    toggles: {type: Boolean, value: false, reflectToAttribute: true},

	    /**
	     * If true, the button is a toggle and is currently in the active state.
	     */
	    active:
	        {type: Boolean, value: false, notify: true, reflectToAttribute: true},

	    /**
	     * True if the element is currently being pressed by a "pointer," which
	     * is loosely defined as mouse or touch input (but specifically excluding
	     * keyboard input).
	     */
	    pointerDown: {type: Boolean, readOnly: true, value: false},

	    /**
	     * True if the input device that caused the element to receive focus
	     * was a keyboard.
	     */
	    receivedFocusFromKeyboard: {type: Boolean, readOnly: true},

	    /**
	     * The aria attribute to be set if the button is a toggle and in the
	     * active state.
	     */
	    ariaActiveAttribute: {
	      type: String,
	      value: 'aria-pressed',
	      observer: '_ariaActiveAttributeChanged'
	    }
	  },

	  listeners: {down: '_downHandler', up: '_upHandler', tap: '_tapHandler'},

	  observers:
	      ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],

	  /**
	   * @type {!Object}
	   */
	  keyBindings: {
	    'enter:keydown': '_asyncClick',
	    'space:keydown': '_spaceKeyDownHandler',
	    'space:keyup': '_spaceKeyUpHandler',
	  },

	  _mouseEventRe: /^mouse/,

	  _tapHandler: function() {
	    if (this.toggles) {
	      // a tap is needed to toggle the active state
	      this._userActivate(!this.active);
	    } else {
	      this.active = false;
	    }
	  },

	  _focusChanged: function(focused) {
	    this._detectKeyboardFocus(focused);

	    if (!focused) {
	      this._setPressed(false);
	    }
	  },

	  _detectKeyboardFocus: function(focused) {
	    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);
	  },

	  // to emulate native checkbox, (de-)activations from a user interaction fire
	  // 'change' events
	  _userActivate: function(active) {
	    if (this.active !== active) {
	      this.active = active;
	      this.fire('change');
	    }
	  },

	  _downHandler: function(event) {
	    this._setPointerDown(true);
	    this._setPressed(true);
	    this._setReceivedFocusFromKeyboard(false);
	  },

	  _upHandler: function() {
	    this._setPointerDown(false);
	    this._setPressed(false);
	  },

	  /**
	   * @param {!KeyboardEvent} event .
	   */
	  _spaceKeyDownHandler: function(event) {
	    var keyboardEvent = event.detail.keyboardEvent;
	    var target = dom(keyboardEvent).localTarget;

	    // Ignore the event if this is coming from a focused light child, since that
	    // element will deal with it.
	    if (this.isLightDescendant(/** @type {Node} */ (target)))
	      return;

	    keyboardEvent.preventDefault();
	    keyboardEvent.stopImmediatePropagation();
	    this._setPressed(true);
	  },

	  /**
	   * @param {!KeyboardEvent} event .
	   */
	  _spaceKeyUpHandler: function(event) {
	    var keyboardEvent = event.detail.keyboardEvent;
	    var target = dom(keyboardEvent).localTarget;

	    // Ignore the event if this is coming from a focused light child, since that
	    // element will deal with it.
	    if (this.isLightDescendant(/** @type {Node} */ (target)))
	      return;

	    if (this.pressed) {
	      this._asyncClick();
	    }
	    this._setPressed(false);
	  },

	  // trigger click asynchronously, the asynchrony is useful to allow one
	  // event handler to unwind before triggering another event
	  _asyncClick: function() {
	    this.async(function() {
	      this.click();
	    }, 1);
	  },

	  // any of these changes are considered a change to button state

	  _pressedChanged: function(pressed) {
	    this._changedButtonState();
	  },

	  _ariaActiveAttributeChanged: function(value, oldValue) {
	    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {
	      this.removeAttribute(oldValue);
	    }
	  },

	  _activeChanged: function(active, ariaActiveAttribute) {
	    if (this.toggles) {
	      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');
	    } else {
	      this.removeAttribute(this.ariaActiveAttribute);
	    }
	    this._changedButtonState();
	  },

	  _controlStateChanged: function() {
	    if (this.disabled) {
	      this._setPressed(false);
	    } else {
	      this._changedButtonState();
	    }
	  },

	  // provide hook for follow-on behaviors to react to button-state

	  _changedButtonState: function() {
	    if (this._buttonStateChanged) {
	      this._buttonStateChanged();  // abstract
	    }
	  }

	};

	/** @polymerBehavior */
	const IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];

	/**
	@license
	Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	var Utility = {
	  distance: function(x1, y1, x2, y2) {
	    var xDelta = (x1 - x2);
	    var yDelta = (y1 - y2);

	    return Math.sqrt(xDelta * xDelta + yDelta * yDelta);
	  },

	  now: window.performance && window.performance.now ?
	      window.performance.now.bind(window.performance) :
	      Date.now
	};

	/**
	 * @param {HTMLElement} element
	 * @constructor
	 */
	function ElementMetrics(element) {
	  this.element = element;
	  this.width = this.boundingRect.width;
	  this.height = this.boundingRect.height;

	  this.size = Math.max(this.width, this.height);
	}

	ElementMetrics.prototype = {
	  get boundingRect() {
	    return this.element.getBoundingClientRect();
	  },

	  furthestCornerDistanceFrom: function(x, y) {
	    var topLeft = Utility.distance(x, y, 0, 0);
	    var topRight = Utility.distance(x, y, this.width, 0);
	    var bottomLeft = Utility.distance(x, y, 0, this.height);
	    var bottomRight = Utility.distance(x, y, this.width, this.height);

	    return Math.max(topLeft, topRight, bottomLeft, bottomRight);
	  }
	};

	/**
	 * @param {HTMLElement} element
	 * @constructor
	 */
	function Ripple(element) {
	  this.element = element;
	  this.color = window.getComputedStyle(element).color;

	  this.wave = document.createElement('div');
	  this.waveContainer = document.createElement('div');
	  this.wave.style.backgroundColor = this.color;
	  this.wave.classList.add('wave');
	  this.waveContainer.classList.add('wave-container');
	  dom(this.waveContainer).appendChild(this.wave);

	  this.resetInteractionState();
	}

	Ripple.MAX_RADIUS = 300;

	Ripple.prototype = {
	  get recenters() {
	    return this.element.recenters;
	  },

	  get center() {
	    return this.element.center;
	  },

	  get mouseDownElapsed() {
	    var elapsed;

	    if (!this.mouseDownStart) {
	      return 0;
	    }

	    elapsed = Utility.now() - this.mouseDownStart;

	    if (this.mouseUpStart) {
	      elapsed -= this.mouseUpElapsed;
	    }

	    return elapsed;
	  },

	  get mouseUpElapsed() {
	    return this.mouseUpStart ? Utility.now() - this.mouseUpStart : 0;
	  },

	  get mouseDownElapsedSeconds() {
	    return this.mouseDownElapsed / 1000;
	  },

	  get mouseUpElapsedSeconds() {
	    return this.mouseUpElapsed / 1000;
	  },

	  get mouseInteractionSeconds() {
	    return this.mouseDownElapsedSeconds + this.mouseUpElapsedSeconds;
	  },

	  get initialOpacity() {
	    return this.element.initialOpacity;
	  },

	  get opacityDecayVelocity() {
	    return this.element.opacityDecayVelocity;
	  },

	  get radius() {
	    var width2 = this.containerMetrics.width * this.containerMetrics.width;
	    var height2 = this.containerMetrics.height * this.containerMetrics.height;
	    var waveRadius =
	        Math.min(Math.sqrt(width2 + height2), Ripple.MAX_RADIUS) * 1.1 + 5;

	    var duration = 1.1 - 0.2 * (waveRadius / Ripple.MAX_RADIUS);
	    var timeNow = this.mouseInteractionSeconds / duration;
	    var size = waveRadius * (1 - Math.pow(80, -timeNow));

	    return Math.abs(size);
	  },

	  get opacity() {
	    if (!this.mouseUpStart) {
	      return this.initialOpacity;
	    }

	    return Math.max(
	        0,
	        this.initialOpacity -
	            this.mouseUpElapsedSeconds * this.opacityDecayVelocity);
	  },

	  get outerOpacity() {
	    // Linear increase in background opacity, capped at the opacity
	    // of the wavefront (waveOpacity).
	    var outerOpacity = this.mouseUpElapsedSeconds * 0.3;
	    var waveOpacity = this.opacity;

	    return Math.max(0, Math.min(outerOpacity, waveOpacity));
	  },

	  get isOpacityFullyDecayed() {
	    return this.opacity < 0.01 &&
	        this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);
	  },

	  get isRestingAtMaxRadius() {
	    return this.opacity >= this.initialOpacity &&
	        this.radius >= Math.min(this.maxRadius, Ripple.MAX_RADIUS);
	  },

	  get isAnimationComplete() {
	    return this.mouseUpStart ? this.isOpacityFullyDecayed :
	                               this.isRestingAtMaxRadius;
	  },

	  get translationFraction() {
	    return Math.min(
	        1, this.radius / this.containerMetrics.size * 2 / Math.sqrt(2));
	  },

	  get xNow() {
	    if (this.xEnd) {
	      return this.xStart + this.translationFraction * (this.xEnd - this.xStart);
	    }

	    return this.xStart;
	  },

	  get yNow() {
	    if (this.yEnd) {
	      return this.yStart + this.translationFraction * (this.yEnd - this.yStart);
	    }

	    return this.yStart;
	  },

	  get isMouseDown() {
	    return this.mouseDownStart && !this.mouseUpStart;
	  },

	  resetInteractionState: function() {
	    this.maxRadius = 0;
	    this.mouseDownStart = 0;
	    this.mouseUpStart = 0;

	    this.xStart = 0;
	    this.yStart = 0;
	    this.xEnd = 0;
	    this.yEnd = 0;
	    this.slideDistance = 0;

	    this.containerMetrics = new ElementMetrics(this.element);
	  },

	  draw: function() {
	    var scale;
	    var dx;
	    var dy;

	    this.wave.style.opacity = this.opacity;

	    scale = this.radius / (this.containerMetrics.size / 2);
	    dx = this.xNow - (this.containerMetrics.width / 2);
	    dy = this.yNow - (this.containerMetrics.height / 2);


	    // 2d transform for safari because of border-radius and overflow:hidden
	    // clipping bug. https://bugs.webkit.org/show_bug.cgi?id=98538
	    this.waveContainer.style.webkitTransform =
	        'translate(' + dx + 'px, ' + dy + 'px)';
	    this.waveContainer.style.transform =
	        'translate3d(' + dx + 'px, ' + dy + 'px, 0)';
	    this.wave.style.webkitTransform = 'scale(' + scale + ',' + scale + ')';
	    this.wave.style.transform = 'scale3d(' + scale + ',' + scale + ',1)';
	  },

	  /** @param {Event=} event */
	  downAction: function(event) {
	    var xCenter = this.containerMetrics.width / 2;
	    var yCenter = this.containerMetrics.height / 2;

	    this.resetInteractionState();
	    this.mouseDownStart = Utility.now();

	    if (this.center) {
	      this.xStart = xCenter;
	      this.yStart = yCenter;
	      this.slideDistance =
	          Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);
	    } else {
	      this.xStart = event ?
	          event.detail.x - this.containerMetrics.boundingRect.left :
	          this.containerMetrics.width / 2;
	      this.yStart = event ?
	          event.detail.y - this.containerMetrics.boundingRect.top :
	          this.containerMetrics.height / 2;
	    }

	    if (this.recenters) {
	      this.xEnd = xCenter;
	      this.yEnd = yCenter;
	      this.slideDistance =
	          Utility.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);
	    }

	    this.maxRadius = this.containerMetrics.furthestCornerDistanceFrom(
	        this.xStart, this.yStart);

	    this.waveContainer.style.top =
	        (this.containerMetrics.height - this.containerMetrics.size) / 2 + 'px';
	    this.waveContainer.style.left =
	        (this.containerMetrics.width - this.containerMetrics.size) / 2 + 'px';

	    this.waveContainer.style.width = this.containerMetrics.size + 'px';
	    this.waveContainer.style.height = this.containerMetrics.size + 'px';
	  },

	  /** @param {Event=} event */
	  upAction: function(event) {
	    if (!this.isMouseDown) {
	      return;
	    }

	    this.mouseUpStart = Utility.now();
	  },

	  remove: function() {
	    dom(this.waveContainer.parentNode).removeChild(this.waveContainer);
	  }
	};

	/**
	Material design: [Surface
	reaction](https://www.google.com/design/spec/animation/responsive-interaction.html#responsive-interaction-surface-reaction)

	`paper-ripple` provides a visual effect that other paper elements can
	use to simulate a rippling effect emanating from the point of contact.  The
	effect can be visualized as a concentric circle with motion.

	Example:

	    <div style="position:relative">
	      <paper-ripple></paper-ripple>
	    </div>

	Note, it's important that the parent container of the ripple be relative
	position, otherwise the ripple will emanate outside of the desired container.

	`paper-ripple` listens to "mousedown" and "mouseup" events so it would display
	ripple effect when touches on it.  You can also defeat the default behavior and
	manually route the down and up actions to the ripple element.  Note that it is
	important if you call `downAction()` you will have to make sure to call
	`upAction()` so that `paper-ripple` would end the animation loop.

	Example:

	    <paper-ripple id="ripple" style="pointer-events: none;"></paper-ripple>
	    ...
	    downAction: function(e) {
	      this.$.ripple.downAction(e.detail);
	    },
	    upAction: function(e) {
	      this.$.ripple.upAction();
	    }

	Styling ripple effect:

	  Use CSS color property to style the ripple:

	    paper-ripple {
	      color: #4285f4;
	    }

	  Note that CSS color property is inherited so it is not required to set it on
	  the `paper-ripple` element directly.

	By default, the ripple is centered on the point of contact.  Apply the
	`recenters` attribute to have the ripple grow toward the center of its
	container.

	    <paper-ripple recenters></paper-ripple>

	You can also  center the ripple inside its container from the start.

	    <paper-ripple center></paper-ripple>

	Apply `circle` class to make the rippling effect within a circle.

	    <paper-ripple class="circle"></paper-ripple>

	@group Paper Elements
	@element paper-ripple
	@hero hero.svg
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: block;
        position: absolute;
        border-radius: inherit;
        overflow: hidden;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;

        /* See PolymerElements/paper-behaviors/issues/34. On non-Chrome browsers,
         * creating a node (with a position:absolute) in the middle of an event
         * handler "interrupts" that event handler (which happens when the
         * ripple is created on demand) */
        pointer-events: none;
      }

      :host([animating]) {
        /* This resolves a rendering issue in Chrome (as of 40) where the
           ripple is not properly clipped by its parent (which may have
           rounded corners). See: http://jsbin.com/temexa/4

           Note: We only apply this style conditionally. Otherwise, the browser
           will create a new compositing layer for every ripple element on the
           page, and that would be bad. */
        -webkit-transform: translate(0, 0);
        transform: translate3d(0, 0, 0);
      }

      #background,
      #waves,
      .wave-container,
      .wave {
        pointer-events: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }

      #background,
      .wave {
        opacity: 0;
      }

      #waves,
      .wave {
        overflow: hidden;
      }

      .wave-container,
      .wave {
        border-radius: 50%;
      }

      :host(.circle) #background,
      :host(.circle) #waves {
        border-radius: 50%;
      }

      :host(.circle) .wave-container {
        overflow: hidden;
      }
    </style>

    <div id="background"></div>
    <div id="waves"></div>
`,

	  is: 'paper-ripple',
	  behaviors: [IronA11yKeysBehavior],

	  properties: {
	    /**
	     * The initial opacity set on the wave.
	     *
	     * @attribute initialOpacity
	     * @type number
	     * @default 0.25
	     */
	    initialOpacity: {type: Number, value: 0.25},

	    /**
	     * How fast (opacity per second) the wave fades out.
	     *
	     * @attribute opacityDecayVelocity
	     * @type number
	     * @default 0.8
	     */
	    opacityDecayVelocity: {type: Number, value: 0.8},

	    /**
	     * If true, ripples will exhibit a gravitational pull towards
	     * the center of their container as they fade away.
	     *
	     * @attribute recenters
	     * @type boolean
	     * @default false
	     */
	    recenters: {type: Boolean, value: false},

	    /**
	     * If true, ripples will center inside its container
	     *
	     * @attribute recenters
	     * @type boolean
	     * @default false
	     */
	    center: {type: Boolean, value: false},

	    /**
	     * A list of the visual ripples.
	     *
	     * @attribute ripples
	     * @type Array
	     * @default []
	     */
	    ripples: {
	      type: Array,
	      value: function() {
	        return [];
	      }
	    },

	    /**
	     * True when there are visible ripples animating within the
	     * element.
	     */
	    animating:
	        {type: Boolean, readOnly: true, reflectToAttribute: true, value: false},

	    /**
	     * If true, the ripple will remain in the "down" state until `holdDown`
	     * is set to false again.
	     */
	    holdDown: {type: Boolean, value: false, observer: '_holdDownChanged'},

	    /**
	     * If true, the ripple will not generate a ripple effect
	     * via pointer interaction.
	     * Calling ripple's imperative api like `simulatedRipple` will
	     * still generate the ripple effect.
	     */
	    noink: {type: Boolean, value: false},

	    _animating: {type: Boolean},

	    _boundAnimate: {
	      type: Function,
	      value: function() {
	        return this.animate.bind(this);
	      }
	    }
	  },

	  get target() {
	    return this.keyEventTarget;
	  },

	  /**
	   * @type {!Object}
	   */
	  keyBindings: {
	    'enter:keydown': '_onEnterKeydown',
	    'space:keydown': '_onSpaceKeydown',
	    'space:keyup': '_onSpaceKeyup'
	  },

	  attached: function() {
	    // Set up a11yKeysBehavior to listen to key events on the target,
	    // so that space and enter activate the ripple even if the target doesn't
	    // handle key events. The key handlers deal with `noink` themselves.
	    if (this.parentNode.nodeType == 11) {  // DOCUMENT_FRAGMENT_NODE
	      this.keyEventTarget = dom(this).getOwnerRoot().host;
	    } else {
	      this.keyEventTarget = this.parentNode;
	    }
	    var keyEventTarget = /** @type {!EventTarget} */ (this.keyEventTarget);
	    this.listen(keyEventTarget, 'up', 'uiUpAction');
	    this.listen(keyEventTarget, 'down', 'uiDownAction');
	  },

	  detached: function() {
	    this.unlisten(this.keyEventTarget, 'up', 'uiUpAction');
	    this.unlisten(this.keyEventTarget, 'down', 'uiDownAction');
	    this.keyEventTarget = null;
	  },

	  get shouldKeepAnimating() {
	    for (var index = 0; index < this.ripples.length; ++index) {
	      if (!this.ripples[index].isAnimationComplete) {
	        return true;
	      }
	    }

	    return false;
	  },

	  simulatedRipple: function() {
	    this.downAction(null);

	    // Please see polymer/polymer#1305
	    this.async(function() {
	      this.upAction();
	    }, 1);
	  },

	  /**
	   * Provokes a ripple down effect via a UI event,
	   * respecting the `noink` property.
	   * @param {Event=} event
	   */
	  uiDownAction: function(event) {
	    if (!this.noink) {
	      this.downAction(event);
	    }
	  },

	  /**
	   * Provokes a ripple down effect via a UI event,
	   * *not* respecting the `noink` property.
	   * @param {Event=} event
	   */
	  downAction: function(event) {
	    if (this.holdDown && this.ripples.length > 0) {
	      return;
	    }

	    var ripple = this.addRipple();

	    ripple.downAction(event);

	    if (!this._animating) {
	      this._animating = true;
	      this.animate();
	    }
	  },

	  /**
	   * Provokes a ripple up effect via a UI event,
	   * respecting the `noink` property.
	   * @param {Event=} event
	   */
	  uiUpAction: function(event) {
	    if (!this.noink) {
	      this.upAction(event);
	    }
	  },

	  /**
	   * Provokes a ripple up effect via a UI event,
	   * *not* respecting the `noink` property.
	   * @param {Event=} event
	   */
	  upAction: function(event) {
	    if (this.holdDown) {
	      return;
	    }

	    this.ripples.forEach(function(ripple) {
	      ripple.upAction(event);
	    });

	    this._animating = true;
	    this.animate();
	  },

	  onAnimationComplete: function() {
	    this._animating = false;
	    this.$.background.style.backgroundColor = null;
	    this.fire('transitionend');
	  },

	  addRipple: function() {
	    var ripple = new Ripple(this);

	    dom(this.$.waves).appendChild(ripple.waveContainer);
	    this.$.background.style.backgroundColor = ripple.color;
	    this.ripples.push(ripple);

	    this._setAnimating(true);

	    return ripple;
	  },

	  removeRipple: function(ripple) {
	    var rippleIndex = this.ripples.indexOf(ripple);

	    if (rippleIndex < 0) {
	      return;
	    }

	    this.ripples.splice(rippleIndex, 1);

	    ripple.remove();

	    if (!this.ripples.length) {
	      this._setAnimating(false);
	    }
	  },

	  /**
	   * Deprecated. Please use animateRipple() instead.
	   *
	   * This method name conflicts with Element#animate().
	   * https://developer.mozilla.org/en-US/docs/Web/API/Element/animate.
	   *
	   * @suppress {checkTypes}
	   */
	  animate: function() {
	    if (!this._animating) {
	      return;
	    }
	    var index;
	    var ripple;

	    for (index = 0; index < this.ripples.length; ++index) {
	      ripple = this.ripples[index];

	      ripple.draw();

	      this.$.background.style.opacity = ripple.outerOpacity;

	      if (ripple.isOpacityFullyDecayed && !ripple.isRestingAtMaxRadius) {
	        this.removeRipple(ripple);
	      }
	    }

	    if (!this.shouldKeepAnimating && this.ripples.length === 0) {
	      this.onAnimationComplete();
	    } else {
	      window.requestAnimationFrame(this._boundAnimate);
	    }
	  },

	  /**
	   * An alias for animate() whose name does not conflict with the platform
	   * Element.animate() method.
	   */
	  animateRipple: function() {
	    return this.animate();
	  },

	  _onEnterKeydown: function() {
	    this.uiDownAction();
	    this.async(this.uiUpAction, 1);
	  },

	  _onSpaceKeydown: function() {
	    this.uiDownAction();
	  },

	  _onSpaceKeyup: function() {
	    this.uiUpAction();
	  },

	  // note: holdDown does not respect noink since it can be a focus based
	  // effect.
	  _holdDownChanged: function(newVal, oldVal) {
	    if (oldVal === undefined) {
	      return;
	    }
	    if (newVal) {
	      this.downAction();
	    } else {
	      this.upAction();
	    }
	  }

	  /**
	  Fired when the animation finishes.
	  This is useful if you want to wait until
	  the ripple animation finishes to perform some action.

	  @event transitionend
	  @param {{node: Object}} detail Contains the animated node.
	  */
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	 * `PaperRippleBehavior` dynamically implements a ripple when the element has
	 * focus via pointer or keyboard.
	 *
	 * NOTE: This behavior is intended to be used in conjunction with and after
	 * `IronButtonState` and `IronControlState`.
	 *
	 * @polymerBehavior PaperRippleBehavior
	 */
	const PaperRippleBehavior = {
	  properties: {
	    /**
	     * If true, the element will not produce a ripple effect when interacted
	     * with via the pointer.
	     */
	    noink: {type: Boolean, observer: '_noinkChanged'},

	    /**
	     * @type {Element|undefined}
	     */
	    _rippleContainer: {
	      type: Object,
	    }
	  },

	  /**
	   * Ensures a `<paper-ripple>` element is available when the element is
	   * focused.
	   */
	  _buttonStateChanged: function() {
	    if (this.focused) {
	      this.ensureRipple();
	    }
	  },

	  /**
	   * In addition to the functionality provided in `IronButtonState`, ensures
	   * a ripple effect is created when the element is in a `pressed` state.
	   */
	  _downHandler: function(event) {
	    IronButtonStateImpl._downHandler.call(this, event);
	    if (this.pressed) {
	      this.ensureRipple(event);
	    }
	  },

	  /**
	   * Ensures this element contains a ripple effect. For startup efficiency
	   * the ripple effect is dynamically on demand when needed.
	   * @param {!Event=} optTriggeringEvent (optional) event that triggered the
	   * ripple.
	   */
	  ensureRipple: function(optTriggeringEvent) {
	    if (!this.hasRipple()) {
	      this._ripple = this._createRipple();
	      this._ripple.noink = this.noink;
	      var rippleContainer = this._rippleContainer || this.root;
	      if (rippleContainer) {
	        dom(rippleContainer).appendChild(this._ripple);
	      }
	      if (optTriggeringEvent) {
	        // Check if the event happened inside of the ripple container
	        // Fall back to host instead of the root because distributed text
	        // nodes are not valid event targets
	        var domContainer = dom(this._rippleContainer || this);
	        var target = dom(optTriggeringEvent).rootTarget;
	        if (domContainer.deepContains(/** @type {Node} */ (target))) {
	          this._ripple.uiDownAction(optTriggeringEvent);
	        }
	      }
	    }
	  },

	  /**
	   * Returns the `<paper-ripple>` element used by this element to create
	   * ripple effects. The element's ripple is created on demand, when
	   * necessary, and calling this method will force the
	   * ripple to be created.
	   */
	  getRipple: function() {
	    this.ensureRipple();
	    return this._ripple;
	  },

	  /**
	   * Returns true if this element currently contains a ripple effect.
	   * @return {boolean}
	   */
	  hasRipple: function() {
	    return Boolean(this._ripple);
	  },

	  /**
	   * Create the element's ripple effect via creating a `<paper-ripple>`.
	   * Override this method to customize the ripple element.
	   * @return {!PaperRippleElement} Returns a `<paper-ripple>` element.
	   */
	  _createRipple: function() {
	    var element = /** @type {!PaperRippleElement} */ (
	        document.createElement('paper-ripple'));
	    return element;
	  },

	  _noinkChanged: function(noink) {
	    if (this.hasRipple()) {
	      this._ripple.noink = noink;
	    }
	  }
	};

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/** @polymerBehavior PaperButtonBehavior */
	const PaperButtonBehaviorImpl = {
	  properties: {
	    /**
	     * The z-depth of this element, from 0-5. Setting to 0 will remove the
	     * shadow, and each increasing number greater than 0 will be "deeper"
	     * than the last.
	     *
	     * @attribute elevation
	     * @type number
	     * @default 1
	     */
	    elevation: {type: Number, reflectToAttribute: true, readOnly: true}
	  },

	  observers: [
	    '_calculateElevation(focused, disabled, active, pressed, receivedFocusFromKeyboard)',
	    '_computeKeyboardClass(receivedFocusFromKeyboard)'
	  ],

	  hostAttributes: {role: 'button', tabindex: '0', animated: true},

	  _calculateElevation: function() {
	    var e = 1;
	    if (this.disabled) {
	      e = 0;
	    } else if (this.active || this.pressed) {
	      e = 4;
	    } else if (this.receivedFocusFromKeyboard) {
	      e = 3;
	    }
	    this._setElevation(e);
	  },

	  _computeKeyboardClass: function(receivedFocusFromKeyboard) {
	    this.toggleClass('keyboard-focus', receivedFocusFromKeyboard);
	  },

	  /**
	   * In addition to `IronButtonState` behavior, when space key goes down,
	   * create a ripple down effect.
	   *
	   * @param {!KeyboardEvent} event .
	   */
	  _spaceKeyDownHandler: function(event) {
	    IronButtonStateImpl._spaceKeyDownHandler.call(this, event);
	    // Ensure that there is at most one ripple when the space key is held down.
	    if (this.hasRipple() && this.getRipple().ripples.length < 1) {
	      this._ripple.uiDownAction();
	    }
	  },

	  /**
	   * In addition to `IronButtonState` behavior, when space key goes up,
	   * create a ripple up effect.
	   *
	   * @param {!KeyboardEvent} event .
	   */
	  _spaceKeyUpHandler: function(event) {
	    IronButtonStateImpl._spaceKeyUpHandler.call(this, event);
	    if (this.hasRipple()) {
	      this._ripple.uiUpAction();
	    }
	  }
	};

	/** @polymerBehavior */
	const PaperButtonBehavior = [
	  IronButtonState,
	  IronControlState,
	  PaperRippleBehavior,
	  PaperButtonBehaviorImpl
	];

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	const template$8 = html`
  <style include="paper-material-styles">
    /* Need to specify the same specificity as the styles imported from paper-material. */
    :host {
      @apply --layout-inline;
      @apply --layout-center-center;
      position: relative;
      box-sizing: border-box;
      min-width: 5.14em;
      margin: 0 0.29em;
      background: transparent;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      -webkit-tap-highlight-color: transparent;
      font: inherit;
      text-transform: uppercase;
      outline-width: 0;
      border-radius: 3px;
      -moz-user-select: none;
      -ms-user-select: none;
      -webkit-user-select: none;
      user-select: none;
      cursor: pointer;
      z-index: 0;
      padding: 0.7em 0.57em;

      @apply --paper-font-common-base;
      @apply --paper-button;
    }

    :host([elevation="1"]) {
      @apply --paper-material-elevation-1;
    }

    :host([elevation="2"]) {
      @apply --paper-material-elevation-2;
    }

    :host([elevation="3"]) {
      @apply --paper-material-elevation-3;
    }

    :host([elevation="4"]) {
      @apply --paper-material-elevation-4;
    }

    :host([elevation="5"]) {
      @apply --paper-material-elevation-5;
    }

    :host([hidden]) {
      display: none !important;
    }

    :host([raised].keyboard-focus) {
      font-weight: bold;
      @apply --paper-button-raised-keyboard-focus;
    }

    :host(:not([raised]).keyboard-focus) {
      font-weight: bold;
      @apply --paper-button-flat-keyboard-focus;
    }

    :host([disabled]) {
      background: none;
      color: #a8a8a8;
      cursor: auto;
      pointer-events: none;

      @apply --paper-button-disabled;
    }

    :host([disabled][raised]) {
      background: #eaeaea;
    }


    :host([animated]) {
      @apply --shadow-transition;
    }

    paper-ripple {
      color: var(--paper-button-ink-color);
    }
  </style>

  <slot></slot>`;

	template$8.setAttribute('strip-whitespace', '');

	/**
	Material design:
	[Buttons](https://www.google.com/design/spec/components/buttons.html)

	`paper-button` is a button. When the user touches the button, a ripple effect
	emanates from the point of contact. It may be flat or raised. A raised button is
	styled with a shadow.

	Example:

	    <paper-button>Flat button</paper-button>
	    <paper-button raised>Raised button</paper-button>
	    <paper-button noink>No ripple effect</paper-button>
	    <paper-button toggles>Toggle-able button</paper-button>

	A button that has `toggles` true will remain `active` after being clicked (and
	will have an `active` attribute set). For more information, see the
	`IronButtonState` behavior.

	You may use custom DOM in the button body to create a variety of buttons. For
	example, to create a button with an icon and some text:

	    <paper-button>
	      <iron-icon icon="favorite"></iron-icon>
	      custom button content
	    </paper-button>

	To use `paper-button` as a link, wrap it in an anchor tag. Since `paper-button`
	will already receive focus, you may want to prevent the anchor tag from
	receiving focus as well by setting its tabindex to -1.

	    <a href="https://www.polymer-project.org/" tabindex="-1">
	      <paper-button raised>Polymer Project</paper-button>
	    </a>

	### Styling

	Style the button with CSS as you would a normal DOM element.

	    paper-button.fancy {
	      background: green;
	      color: yellow;
	    }

	    paper-button.fancy:hover {
	      background: lime;
	    }

	    paper-button[disabled],
	    paper-button[toggles][active] {
	      background: red;
	    }

	By default, the ripple is the same color as the foreground at 25% opacity. You
	may customize the color using the `--paper-button-ink-color` custom property.

	The following custom properties and mixins are also available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-button-ink-color` | Background color of the ripple | `Based on the button's color`
	`--paper-button` | Mixin applied to the button | `{}`
	`--paper-button-disabled` | Mixin applied to the disabled button. Note that you can also use the `paper-button[disabled]` selector | `{}`
	`--paper-button-flat-keyboard-focus` | Mixin applied to a flat button after it's been focused using the keyboard | `{}`
	`--paper-button-raised-keyboard-focus` | Mixin applied to a raised button after it's been focused using the keyboard | `{}`

	@demo demo/index.html
	*/
	Polymer({
	  _template: template$8,

	  is: 'paper-button',

	  behaviors: [PaperButtonBehavior],

	  properties: {
	    /**
	     * If true, the button should be styled with a shadow.
	     */
	    raised: {
	      type: Boolean,
	      reflectToAttribute: true,
	      value: false,
	      observer: '_calculateElevation',
	    }
	  },

	  _calculateElevation: function() {
	    if (!this.raised) {
	      this._setElevation(0);
	    } else {
	      PaperButtonBehaviorImpl._calculateElevation.apply(this);
	    }
	  }

	  /**
	  Fired when the animation finishes.
	  This is useful if you want to wait until
	  the ripple animation finishes to perform some action.

	  @event transitionend
	  Event param: {{node: Object}} detail Contains the animated node.
	  */
	});

	var linkStyle = (css="%3Ahost%7B--link-border-width%3A%200%7D.link%7Bdisplay%3Ainline-block%3Btext-decoration%3Anone%7D.link__content%7Bdisplay%3Aflex%3Balign-items%3Acenter%7D.link__text%7Bdisplay%3Ainline-block%3Bposition%3Arelative%3Bcolor%3Avar(--darker)%7D.link__text%3Abefore%7Bcontent%3A'%20'%3Bposition%3Aabsolute%3Bborder-bottom%3A1px%20solid%3Bbottom%3A0%3Bleft%3A50%25%3Btransform%3AtranslateX(-50%25)%3Btransition%3Aall%200.3s%20cubic-bezier(0.17%2C%200.67%2C%200.83%2C%200.67)%3Bwidth%3Avar(--link-border-width)%7D.link__icon%7Bdisplay%3Ainline-block%3Bwidth%3A15px%3Bmargin-right%3A5px%7D.link__icon%20my-svg%7B--icon-size%3A%20100%25%3B--icon-color%3A%20var(--darker)%7D.link%3Ahover%20.link__text%7B--link-border-width%3A%20100%25%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	linkStyle()('link-style');

	class Link extends PolymerElement {
	    static get template() {
	        return html`
    <style include="common-styles link-style"></style>
    <a class="link" target="_blank" href="{{href}}">
        <div class="link__content ">
          <template is="dom-if" if="{{icon}}">
              <div class="link__icon">
                  <my-svg icon="{{icon}}"></my-svg>
              </div>
          </template>
          <div class="link__text">{{text}}</div>        
        </div>
    </a>
    `
	    }

	    static get properties() {
	        return {
	            icon: {
	                type: String
	            },
	            href: {
	                type: String
	            },
	            text: {
	                type: String
	            }
	        }
	    }
	}

	customElements.define('my-link', Link);

	var contactStyle = (css="%3Ahost%7B--form-spacing%3A%2010px%3B--grid-template-columns%3A%201fr%201fr%3B--grid-template-rows%3A%2060px%2080px%201fr%2080px%3B--form-notes-grid-row-start%3A%202%3B--form-notes-grid-row-end%3A%204%3B--form-notes-grid-column-start%3A%202%3B--form-important-nodes-grid-column-end%3A%203%3B--form-top-space%3A%20calc(var(--form-spacing)%20*%2010)%3B--form-bottom-space%3A%20calc(var(--form-spacing)%20*%203)%3B--contact-message-padding%3A%200px%7D.contact__message%7Bpadding%3Avar(--contact-message-padding)%7D.contact__form%7Bdisplay%3Agrid%3Bgrid-template-columns%3Avar(--grid-template-columns)%3Bgrid-template-rows%3Avar(--grid-template-rows)%3Bmargin-top%3Avar(--form-top-space)%3Bmargin-bottom%3Avar(--form-bottom-space)%7D.contact__header%7Bgrid-row-start%3A1%3Bgrid-column-start%3A1%3Bgrid-column-end%3Avar(--form-important-nodes-grid-column-end)%3Bmargin%3A0%3Bdisplay%3Aflex%3Bjustify-content%3Acenter%3Balign-items%3Acenter%3Bcolor%3Avar(--darkest)%3Bborder-bottom%3A1px%20solid%20var(--darker)%3Bbox-shadow%3A0%204px%202px%20-4px%20var(--darker)%7D.contact__iron-input%7B--primary-text-color%3A%20var(--darkest)%3B--paper-input-container-input-color%3A%20var(--darkest)%3B--paper-input-container-color%3A%20var(--darkest)%3B--secondary-text-color%3A%20var(--darkest)%3Bpadding%3A0%20var(--form-spacing)%7D.contact__form-notes%7Bgrid-row-start%3Avar(--form-notes-grid-row-start)%3Bgrid-row-end%3Avar(--form-notes-grid-row-end)%3Bgrid-column-start%3Avar(--form-notes-grid-column-start)%7D.contact__form-submit%7Bborder-radius%3A0%3Bmargin%3A0%3Bmargin-top%3Acalc(var(--form-spacing)%20*%202)%3Bgrid-column-start%3A1%3Bgrid-column-end%3Avar(--form-important-nodes-grid-column-end)%3Bbackground-color%3Avar(--darkest)%3Bcolor%3Avar(--lighter)%3Btext-transform%3Ainitial%3Bbox-shadow%3A0%20-3px%202px%20-2px%20var(--darker)%7D.contact__form-submit%20iron-icon%7Bmargin-right%3A5px%7D%40media%20only%20screen%20and%20(max-width%3A%20750px)%7B.contact__message%7B--contact-message-padding%3A%200%2010px%7D.contact__form%7B--form-top-space%3A%20calc(var(--form-spacing)%20*%205)%3B--form-bottom-space%3A%20calc(var(--form-spacing)%20*%208)%3B--grid-template-columns%3A%201fr%3B--grid-template-rows%3A%2060px%2080px%2080px%201fr%2080px%7D.contact__form-notes%7B--form-notes-grid-row-start%3A%204%3B--form-notes-grid-row-end%3A%205%3B--form-notes-grid-column-start%3A%201%7D.contact__form-submit%2C.contact__header%7B--form-important-nodes-grid-column-end%3A%202%7D%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	const getHeaders = opts => {
	    const headersConfig = {
	        ...(opts.headers || {}),
	        'Content-Type': 'application/json'
	    };

	    const headers = new Headers();

	    for(const header in headersConfig) {
	        headers.append(header, headersConfig[header]);
	    }

	    return headers
	};

	const request = (endpoint, opts) => {
	    const headers = getHeaders(opts);

	    const options = {
	        ...opts,
	        headers
	    };

	    return fetch(endpoint, options).then(async response => {
	        const json = await response.json();
	        if (!response.ok) {
	            return Promise.reject(json)
	        }

	        return Promise.resolve(json)
	    })
	};

	const postJSON = (endpoint, data, opts) => {
	    const options = {
	        ...opts,
	        method: 'POST',
	        body: JSON.stringify(data)
	    };

	    return request(endpoint, options)
	};

	const sendEmail = (data) => {
	    const body = {
	        emails: [{
	            ...data,
	            email: 'car_25_ixco@hotmail.com'
	        }],
	        subject: 'Someone wants to get in touch!'
	    };

	    return postJSON('https://us-central1-project-takama.cloudfunctions.net/api/mailer', body, {
	        headers: {
	            'client-id': "06da73c9-872c-442f-b3eb-152a5a2372b1"
	        }
	    })
	};

	contactStyle()('contact-style');

	const DEFAULT_SEND_MSG = 'Send It';

	class Contact extends PolymerElement {
	    static get template() {
	        return html`
      <style include="common-styles contact-style"></style>
      <div class="contact">
        <h2>Contact Me</h2>
        <hr />
        <p class="contact__message">
          You can connect with me through 
          <my-link href="https://www.linkedin.com/in/brion25" text="LinkedIn" icon="linkedin"></my-link>
          or send me an email using the form below:
        </p>
        <iron-form id="contactForm" allow-redirect="false">
          <form class="contact__form">
            <h3 class="contact__header">Send me an Email!</h3>
            <paper-input class="contact__iron-input contact__form-input" name="recluiterName" label="Name" value="" required>
              <iron-icon icon="face" slot="prefix"></iron-icon>
            </paper-input>
            <paper-input class="contact__iron-input contact__form-input" name="recluiterEmail" label="Email" value="" type="email" required>
              <iron-icon icon="mail" slot="prefix"></iron-icon>
            </paper-input>
            <paper-textarea class="contact__iron-input contact__form-notes" name="recluiterNotes" label="Notes (The field is auto-sizing)" required></paper-textarea>
            <paper-button on-tap="_submit" class="contact__form-submit" raised disabled="{{disableSendMsgBtn}}">
              <iron-icon icon="send"></iron-icon>
              {{sendMsgBtn}}
            </paper-button>          
          </form>
        </iron-form>
      </div>
    `
	    }

	    static get properties() {
	        return {
	            sendMsgBtn: {
	                type: String
	            },
	            disableSendMsgBtn: {
	                type: Boolean
	            }
	        }
	    }

	    connectedCallback() {
	        super.connectedCallback();

	        this.sendMsgBtn = DEFAULT_SEND_MSG;
	        this.disableSendMsgBtn = false;
	    }

	    _submit() {
	        this.sendMsgBtn = DEFAULT_SEND_MSG;
	        const form = this.$.contactForm;

	        if (form.validate()) {
	            this.sendMsgBtn = 'Sending...';
	            this.disableSendMsgBtn = true;
	            const body = form.serializeForm();
	            sendEmail(body)
	                .then(() => {
	                    this.sendMsgBtn = 'Email Sent!';
	                    this.disableSendMsgBtn = false;
	                })
	                .catch(() => {
	                    this.sendMsgBtn = 'Something went wrong, try again later...';
	                    this.disableSendMsgBtn = false;
	                });
	        }
	    }
	}

	customElements.define('my-contact', Contact);

	var contact = /*#__PURE__*/Object.freeze({

	});

	/**
	@license
	Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	Code distributed by Google as part of the polymer project is also
	subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	`iron-image` is an element for displaying an image that provides useful sizing and
	preloading options not found on the standard `<img>` tag.

	The `sizing` option allows the image to be either cropped (`cover`) or
	letterboxed (`contain`) to fill a fixed user-size placed on the element.

	The `preload` option prevents the browser from rendering the image until the
	image is fully loaded.  In the interim, either the element's CSS `background-color`
	can be be used as the placeholder, or the `placeholder` property can be
	set to a URL (preferably a data-URI, for instant rendering) for an
	placeholder image.

	The `fade` option (only valid when `preload` is set) will cause the placeholder
	image/color to be faded out once the image is rendered.

	Examples:

	  Basically identical to `<img src="...">` tag:

	    <iron-image src="http://lorempixel.com/400/400"></iron-image>

	  Will letterbox the image to fit:

	    <iron-image style="width:400px; height:400px;" sizing="contain"
	      src="http://lorempixel.com/600/400"></iron-image>

	  Will crop the image to fit:

	    <iron-image style="width:400px; height:400px;" sizing="cover"
	      src="http://lorempixel.com/600/400"></iron-image>

	  Will show light-gray background until the image loads:

	    <iron-image style="width:400px; height:400px; background-color: lightgray;"
	      sizing="cover" preload src="http://lorempixel.com/600/400"></iron-image>

	  Will show a base-64 encoded placeholder image until the image loads:

	    <iron-image style="width:400px; height:400px;" placeholder="data:image/gif;base64,..."
	      sizing="cover" preload src="http://lorempixel.com/600/400"></iron-image>

	  Will fade the light-gray background out once the image is loaded:

	    <iron-image style="width:400px; height:400px; background-color: lightgray;"
	      sizing="cover" preload fade src="http://lorempixel.com/600/400"></iron-image>

	Custom property | Description | Default
	----------------|-------------|----------
	`--iron-image-placeholder` | Mixin applied to #placeholder | `{}`
	`--iron-image-width` | Sets the width of the wrapped image | `auto`
	`--iron-image-height` | Sets the height of the wrapped image | `auto`

	@group Iron Elements
	@element iron-image
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style>
      :host {
        display: inline-block;
        overflow: hidden;
        position: relative;
      }

      #baseURIAnchor {
        display: none;
      }

      #sizedImgDiv {
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;

        display: none;
      }

      #img {
        display: block;
        width: var(--iron-image-width, auto);
        height: var(--iron-image-height, auto);
      }

      :host([sizing]) #sizedImgDiv {
        display: block;
      }

      :host([sizing]) #img {
        display: none;
      }

      #placeholder {
        position: absolute;
        top: 0px;
        right: 0px;
        bottom: 0px;
        left: 0px;

        background-color: inherit;
        opacity: 1;

        @apply --iron-image-placeholder;
      }

      #placeholder.faded-out {
        transition: opacity 0.5s linear;
        opacity: 0;
      }
    </style>

    <a id="baseURIAnchor" href="#"></a>
    <div id="sizedImgDiv" role="img" hidden\$="[[_computeImgDivHidden(sizing)]]" aria-hidden\$="[[_computeImgDivARIAHidden(alt)]]" aria-label\$="[[_computeImgDivARIALabel(alt, src)]]"></div>
    <img id="img" alt\$="[[alt]]" hidden\$="[[_computeImgHidden(sizing)]]" crossorigin\$="[[crossorigin]]" on-load="_imgOnLoad" on-error="_imgOnError">
    <div id="placeholder" hidden\$="[[_computePlaceholderHidden(preload, fade, loading, loaded)]]" class\$="[[_computePlaceholderClassName(preload, fade, loading, loaded)]]"></div>
`,

	  is: 'iron-image',

	  properties: {
	    /**
	     * The URL of an image.
	     */
	    src: {type: String, value: ''},

	    /**
	     * A short text alternative for the image.
	     */
	    alt: {type: String, value: null},

	    /**
	     * CORS enabled images support:
	     * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image
	     */
	    crossorigin: {type: String, value: null},

	    /**
	     * When true, the image is prevented from loading and any placeholder is
	     * shown.  This may be useful when a binding to the src property is known to
	     * be invalid, to prevent 404 requests.
	     */
	    preventLoad: {type: Boolean, value: false},

	    /**
	     * Sets a sizing option for the image.  Valid values are `contain` (full
	     * aspect ratio of the image is contained within the element and
	     * letterboxed) or `cover` (image is cropped in order to fully cover the
	     * bounds of the element), or `null` (default: image takes natural size).
	     */
	    sizing: {type: String, value: null, reflectToAttribute: true},

	    /**
	     * When a sizing option is used (`cover` or `contain`), this determines
	     * how the image is aligned within the element bounds.
	     */
	    position: {type: String, value: 'center'},

	    /**
	     * When `true`, any change to the `src` property will cause the
	     * `placeholder` image to be shown until the new image has loaded.
	     */
	    preload: {type: Boolean, value: false},

	    /**
	     * This image will be used as a background/placeholder until the src image
	     * has loaded.  Use of a data-URI for placeholder is encouraged for instant
	     * rendering.
	     */
	    placeholder: {type: String, value: null, observer: '_placeholderChanged'},

	    /**
	     * When `preload` is true, setting `fade` to true will cause the image to
	     * fade into place.
	     */
	    fade: {type: Boolean, value: false},

	    /**
	     * Read-only value that is true when the image is loaded.
	     */
	    loaded: {notify: true, readOnly: true, type: Boolean, value: false},

	    /**
	     * Read-only value that tracks the loading state of the image when the
	     * `preload` option is used.
	     */
	    loading: {notify: true, readOnly: true, type: Boolean, value: false},

	    /**
	     * Read-only value that indicates that the last set `src` failed to load.
	     */
	    error: {notify: true, readOnly: true, type: Boolean, value: false},

	    /**
	     * Can be used to set the width of image (e.g. via binding); size may also
	     * be set via CSS.
	     */
	    width: {observer: '_widthChanged', type: Number, value: null},

	    /**
	     * Can be used to set the height of image (e.g. via binding); size may also
	     * be set via CSS.
	     *
	     * @attribute height
	     * @type number
	     * @default null
	     */
	    height: {observer: '_heightChanged', type: Number, value: null},
	  },

	  observers: [
	    '_transformChanged(sizing, position)',
	    '_loadStateObserver(src, preventLoad)'
	  ],

	  created: function() {
	    this._resolvedSrc = '';
	  },

	  _imgOnLoad: function() {
	    if (this.$.img.src !== this._resolveSrc(this.src)) {
	      return;
	    }

	    this._setLoading(false);
	    this._setLoaded(true);
	    this._setError(false);
	  },

	  _imgOnError: function() {
	    if (this.$.img.src !== this._resolveSrc(this.src)) {
	      return;
	    }

	    this.$.img.removeAttribute('src');
	    this.$.sizedImgDiv.style.backgroundImage = '';

	    this._setLoading(false);
	    this._setLoaded(false);
	    this._setError(true);
	  },

	  _computePlaceholderHidden: function() {
	    return !this.preload || (!this.fade && !this.loading && this.loaded);
	  },

	  _computePlaceholderClassName: function() {
	    return (this.preload && this.fade && !this.loading && this.loaded) ?
	        'faded-out' :
	        '';
	  },

	  _computeImgDivHidden: function() {
	    return !this.sizing;
	  },

	  _computeImgDivARIAHidden: function() {
	    return this.alt === '' ? 'true' : undefined;
	  },

	  _computeImgDivARIALabel: function() {
	    if (this.alt !== null) {
	      return this.alt;
	    }

	    // Polymer.ResolveUrl.resolveUrl will resolve '' relative to a URL x to
	    // that URL x, but '' is the default for src.
	    if (this.src === '') {
	      return '';
	    }

	    // NOTE: Use of `URL` was removed here because IE11 doesn't support
	    // constructing it. If this ends up being problematic, we should
	    // consider reverting and adding the URL polyfill as a dev dependency.
	    var resolved = this._resolveSrc(this.src);
	    // Remove query parts, get file name.
	    return resolved.replace(/[?|#].*/g, '').split('/').pop();
	  },

	  _computeImgHidden: function() {
	    return !!this.sizing;
	  },

	  _widthChanged: function() {
	    this.style.width = isNaN(this.width) ? this.width : this.width + 'px';
	  },

	  _heightChanged: function() {
	    this.style.height = isNaN(this.height) ? this.height : this.height + 'px';
	  },

	  _loadStateObserver: function(src, preventLoad) {
	    var newResolvedSrc = this._resolveSrc(src);
	    if (newResolvedSrc === this._resolvedSrc) {
	      return;
	    }

	    this._resolvedSrc = '';
	    this.$.img.removeAttribute('src');
	    this.$.sizedImgDiv.style.backgroundImage = '';

	    if (src === '' || preventLoad) {
	      this._setLoading(false);
	      this._setLoaded(false);
	      this._setError(false);
	    } else {
	      this._resolvedSrc = newResolvedSrc;
	      this.$.img.src = this._resolvedSrc;
	      this.$.sizedImgDiv.style.backgroundImage =
	          'url("' + this._resolvedSrc + '")';

	      this._setLoading(true);
	      this._setLoaded(false);
	      this._setError(false);
	    }
	  },

	  _placeholderChanged: function() {
	    this.$.placeholder.style.backgroundImage =
	        this.placeholder ? 'url("' + this.placeholder + '")' : '';
	  },

	  _transformChanged: function() {
	    var sizedImgDivStyle = this.$.sizedImgDiv.style;
	    var placeholderStyle = this.$.placeholder.style;

	    sizedImgDivStyle.backgroundSize = placeholderStyle.backgroundSize =
	        this.sizing;

	    sizedImgDivStyle.backgroundPosition = placeholderStyle.backgroundPosition =
	        this.sizing ? this.position : '';

	    sizedImgDivStyle.backgroundRepeat = placeholderStyle.backgroundRepeat =
	        this.sizing ? 'no-repeat' : '';
	  },

	  _resolveSrc: function(testSrc) {
	    var resolved = resolveUrl(testSrc, this.$.baseURIAnchor.href);
	    // NOTE: Use of `URL` was removed here because IE11 doesn't support
	    // constructing it. If this ends up being problematic, we should
	    // consider reverting and adding the URL polyfill as a dev dependency.
	    if (resolved[0] === '/') {
	      // In IE location.origin might not work
	      // https://connect.microsoft.com/IE/feedback/details/1763802/location-origin-is-undefined-in-ie-11-on-windows-10-but-works-on-windows-7
	      resolved = (location.origin || location.protocol + '//' + location.host) +
	          resolved;
	    }
	    return resolved;
	  }
	});

	/**
	@license
	Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
	This code may only be used under the BSD style license found at
	http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
	http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
	found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
	part of the polymer project is also subject to an additional IP rights grant
	found at http://polymer.github.io/PATENTS.txt
	*/

	/**
	Material design:
	[Cards](https://www.google.com/design/spec/components/cards.html)

	`paper-card` is a container with a drop shadow.

	Example:

	    <paper-card heading="Card Title">
	      <div class="card-content">Some content</div>
	      <div class="card-actions">
	        <paper-button>Some action</paper-button>
	      </div>
	    </paper-card>

	Example - top card image:

	    <paper-card heading="Card Title" image="/path/to/image.png" alt="image">
	      ...
	    </paper-card>

	### Accessibility

	By default, the `aria-label` will be set to the value of the `heading`
	attribute.

	### Styling

	The following custom properties and mixins are available for styling:

	Custom property | Description | Default
	----------------|-------------|----------
	`--paper-card-background-color` | The background color of the card | `--primary-background-color`
	`--paper-card-header-color` | The color of the header text | `#000`
	`--paper-card-header` | Mixin applied to the card header section | `{}`
	`--paper-card-header-text` | Mixin applied to the title in the card header section | `{}`
	`--paper-card-header-image` | Mixin applied to the image in the card header section | `{}`
	`--paper-card-header-image-text` | Mixin applied to the text overlapping the image in the card header section | `{}`
	`--paper-card-content` | Mixin applied to the card content section| `{}`
	`--paper-card-actions` | Mixin applied to the card action section | `{}`
	`--paper-card` | Mixin applied to the card | `{}`

	@group Paper Elements
	@element paper-card
	@demo demo/index.html
	*/
	Polymer({
	  _template: html`
    <style include="paper-material-styles">
      :host {
        display: inline-block;
        position: relative;
        box-sizing: border-box;
        background-color: var(--paper-card-background-color, var(--primary-background-color));
        border-radius: 2px;

        @apply --paper-font-common-base;
        @apply --paper-card;
      }

      /* IE 10 support for HTML5 hidden attr */
      :host([hidden]), [hidden] {
        display: none !important;
      }

      .header {
        position: relative;
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
        overflow: hidden;

        @apply --paper-card-header;
      }

      .header iron-image {
        display: block;
        width: 100%;
        --iron-image-width: 100%;
        pointer-events: none;

        @apply --paper-card-header-image;
      }

      .header .title-text {
        padding: 16px;
        font-size: 24px;
        font-weight: 400;
        color: var(--paper-card-header-color, #000);

        @apply --paper-card-header-text;
      }

      .header .title-text.over-image {
        position: absolute;
        bottom: 0px;

        @apply --paper-card-header-image-text;
      }

      :host ::slotted(.card-content) {
        padding: 16px;
        position:relative;

        @apply --paper-card-content;
      }

      :host ::slotted(.card-actions) {
        border-top: 1px solid #e8e8e8;
        padding: 5px 16px;
        position:relative;

        @apply --paper-card-actions;
      }

      :host([elevation="1"]) {
        @apply --paper-material-elevation-1;
      }

      :host([elevation="2"]) {
        @apply --paper-material-elevation-2;
      }

      :host([elevation="3"]) {
        @apply --paper-material-elevation-3;
      }

      :host([elevation="4"]) {
        @apply --paper-material-elevation-4;
      }

      :host([elevation="5"]) {
        @apply --paper-material-elevation-5;
      }
    </style>

    <div class="header">
      <iron-image hidden\$="[[!image]]" aria-hidden\$="[[_isHidden(image)]]" src="[[image]]" alt="[[alt]]" placeholder="[[placeholderImage]]" preload="[[preloadImage]]" fade="[[fadeImage]]"></iron-image>
      <div hidden\$="[[!heading]]" class\$="title-text [[_computeHeadingClass(image)]]">[[heading]]</div>
    </div>

    <slot></slot>
`,

	  is: 'paper-card',

	  properties: {
	    /**
	     * The title of the card.
	     */
	    heading: {type: String, value: '', observer: '_headingChanged'},

	    /**
	     * The url of the title image of the card.
	     */
	    image: {type: String, value: ''},

	    /**
	     * The text alternative of the card's title image.
	     */
	    alt: {type: String},

	    /**
	     * When `true`, any change to the image url property will cause the
	     * `placeholder` image to be shown until the image is fully rendered.
	     */
	    preloadImage: {type: Boolean, value: false},

	    /**
	     * When `preloadImage` is true, setting `fadeImage` to true will cause the
	     * image to fade into place.
	     */
	    fadeImage: {type: Boolean, value: false},

	    /**
	     * This image will be used as a background/placeholder until the src image
	     * has loaded. Use of a data-URI for placeholder is encouraged for instant
	     * rendering.
	     */
	    placeholderImage: {type: String, value: null},

	    /**
	     * The z-depth of the card, from 0-5.
	     */
	    elevation: {type: Number, value: 1, reflectToAttribute: true},

	    /**
	     * Set this to true to animate the card shadow when setting a new
	     * `z` value.
	     */
	    animatedShadow: {type: Boolean, value: false},

	    /**
	     * Read-only property used to pass down the `animatedShadow` value to
	     * the underlying paper-material style (since they have different names).
	     */
	    animated: {
	      type: Boolean,
	      reflectToAttribute: true,
	      readOnly: true,
	      computed: '_computeAnimated(animatedShadow)'
	    }
	  },

	  /**
	   * Format function for aria-hidden. Use the ! operator results in the
	   * empty string when given a falsy value.
	   */
	  _isHidden: function(image) {
	    return image ? 'false' : 'true';
	  },

	  _headingChanged: function(heading) {
	    var currentHeading = this.getAttribute('heading'),
	        currentLabel = this.getAttribute('aria-label');

	    if (typeof currentLabel !== 'string' || currentLabel === currentHeading) {
	      this.setAttribute('aria-label', heading);
	    }
	  },

	  _computeHeadingClass: function(image) {
	    return image ? ' over-image' : '';
	  },

	  _computeAnimated: function(animatedShadow) {
	    return animatedShadow;
	  }
	});

	var challengesStyles = (css="%3Ahost%7B--challenges-records-grid-columns-template%3A%201fr%201fr%201fr%3B--challenges-records-grid-gap%3A%2020px%3B--challenges-min-height%3A%200%7D.challenges%7Bmin-height%3Avar(--challenges-min-height)%7D.challenges__records%7Bdisplay%3Agrid%3Bgrid-template-columns%3Avar(--challenges-records-grid-columns-template)%3Bgrid-column-gap%3Avar(--challenges-records-grid-gap)%3Bgrid-row-gap%3Avar(--challenges-records-grid-gap)%3Bpadding%3Avar(--challenges-records-grid-gap)%200%7D%40media%20only%20screen%20and%20(max-width%3A%20750px)%7B.challenges%7B--challenges-min-height%3A%20110vh%7D.challenges__records%7Bpadding%3Avar(--challenges-records-grid-gap)%3B--challenges-records-grid-columns-template%3A%201fr%7D%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	var showdown = createCommonjsModule(function (module) {
	(function(){
	/**
	 * Created by Tivie on 13-07-2015.
	 */

	function getDefaultOpts (simple) {

	  var defaultOptions = {
	    omitExtraWLInCodeBlocks: {
	      defaultValue: false,
	      describe: 'Omit the default extra whiteline added to code blocks',
	      type: 'boolean'
	    },
	    noHeaderId: {
	      defaultValue: false,
	      describe: 'Turn on/off generated header id',
	      type: 'boolean'
	    },
	    prefixHeaderId: {
	      defaultValue: false,
	      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
	      type: 'string'
	    },
	    rawPrefixHeaderId: {
	      defaultValue: false,
	      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
	      type: 'boolean'
	    },
	    ghCompatibleHeaderId: {
	      defaultValue: false,
	      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
	      type: 'boolean'
	    },
	    rawHeaderId: {
	      defaultValue: false,
	      describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
	      type: 'boolean'
	    },
	    headerLevelStart: {
	      defaultValue: false,
	      describe: 'The header blocks level start',
	      type: 'integer'
	    },
	    parseImgDimensions: {
	      defaultValue: false,
	      describe: 'Turn on/off image dimension parsing',
	      type: 'boolean'
	    },
	    simplifiedAutoLink: {
	      defaultValue: false,
	      describe: 'Turn on/off GFM autolink style',
	      type: 'boolean'
	    },
	    excludeTrailingPunctuationFromURLs: {
	      defaultValue: false,
	      describe: 'Excludes trailing punctuation from links generated with autoLinking',
	      type: 'boolean'
	    },
	    literalMidWordUnderscores: {
	      defaultValue: false,
	      describe: 'Parse midword underscores as literal underscores',
	      type: 'boolean'
	    },
	    literalMidWordAsterisks: {
	      defaultValue: false,
	      describe: 'Parse midword asterisks as literal asterisks',
	      type: 'boolean'
	    },
	    strikethrough: {
	      defaultValue: false,
	      describe: 'Turn on/off strikethrough support',
	      type: 'boolean'
	    },
	    tables: {
	      defaultValue: false,
	      describe: 'Turn on/off tables support',
	      type: 'boolean'
	    },
	    tablesHeaderId: {
	      defaultValue: false,
	      describe: 'Add an id to table headers',
	      type: 'boolean'
	    },
	    ghCodeBlocks: {
	      defaultValue: true,
	      describe: 'Turn on/off GFM fenced code blocks support',
	      type: 'boolean'
	    },
	    tasklists: {
	      defaultValue: false,
	      describe: 'Turn on/off GFM tasklist support',
	      type: 'boolean'
	    },
	    smoothLivePreview: {
	      defaultValue: false,
	      describe: 'Prevents weird effects in live previews due to incomplete input',
	      type: 'boolean'
	    },
	    smartIndentationFix: {
	      defaultValue: false,
	      description: 'Tries to smartly fix indentation in es6 strings',
	      type: 'boolean'
	    },
	    disableForced4SpacesIndentedSublists: {
	      defaultValue: false,
	      description: 'Disables the requirement of indenting nested sublists by 4 spaces',
	      type: 'boolean'
	    },
	    simpleLineBreaks: {
	      defaultValue: false,
	      description: 'Parses simple line breaks as <br> (GFM Style)',
	      type: 'boolean'
	    },
	    requireSpaceBeforeHeadingText: {
	      defaultValue: false,
	      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
	      type: 'boolean'
	    },
	    ghMentions: {
	      defaultValue: false,
	      description: 'Enables github @mentions',
	      type: 'boolean'
	    },
	    ghMentionsLink: {
	      defaultValue: 'https://github.com/{u}',
	      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
	      type: 'string'
	    },
	    encodeEmails: {
	      defaultValue: true,
	      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',
	      type: 'boolean'
	    },
	    openLinksInNewWindow: {
	      defaultValue: false,
	      description: 'Open all links in new windows',
	      type: 'boolean'
	    },
	    backslashEscapesHTMLTags: {
	      defaultValue: false,
	      description: 'Support for HTML Tag escaping. ex: \<div>foo\</div>',
	      type: 'boolean'
	    },
	    emoji: {
	      defaultValue: false,
	      description: 'Enable emoji support. Ex: `this is a :smile: emoji`',
	      type: 'boolean'
	    },
	    underline: {
	      defaultValue: false,
	      description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',
	      type: 'boolean'
	    },
	    completeHTMLDocument: {
	      defaultValue: false,
	      description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',
	      type: 'boolean'
	    },
	    metadata: {
	      defaultValue: false,
	      description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',
	      type: 'boolean'
	    },
	    splitAdjacentBlockquotes: {
	      defaultValue: false,
	      description: 'Split adjacent blockquote blocks',
	      type: 'boolean'
	    }
	  };
	  if (simple === false) {
	    return JSON.parse(JSON.stringify(defaultOptions));
	  }
	  var ret = {};
	  for (var opt in defaultOptions) {
	    if (defaultOptions.hasOwnProperty(opt)) {
	      ret[opt] = defaultOptions[opt].defaultValue;
	    }
	  }
	  return ret;
	}

	function allOptionsOn () {
	  var options = getDefaultOpts(true),
	      ret = {};
	  for (var opt in options) {
	    if (options.hasOwnProperty(opt)) {
	      ret[opt] = true;
	    }
	  }
	  return ret;
	}

	/**
	 * Created by Tivie on 06-01-2015.
	 */

	// Private properties
	var showdown = {},
	    parsers = {},
	    extensions = {},
	    globalOptions = getDefaultOpts(true),
	    setFlavor = 'vanilla',
	    flavor = {
	      github: {
	        omitExtraWLInCodeBlocks:              true,
	        simplifiedAutoLink:                   true,
	        excludeTrailingPunctuationFromURLs:   true,
	        literalMidWordUnderscores:            true,
	        strikethrough:                        true,
	        tables:                               true,
	        tablesHeaderId:                       true,
	        ghCodeBlocks:                         true,
	        tasklists:                            true,
	        disableForced4SpacesIndentedSublists: true,
	        simpleLineBreaks:                     true,
	        requireSpaceBeforeHeadingText:        true,
	        ghCompatibleHeaderId:                 true,
	        ghMentions:                           true,
	        backslashEscapesHTMLTags:             true,
	        emoji:                                true,
	        splitAdjacentBlockquotes:             true
	      },
	      original: {
	        noHeaderId:                           true,
	        ghCodeBlocks:                         false
	      },
	      ghost: {
	        omitExtraWLInCodeBlocks:              true,
	        parseImgDimensions:                   true,
	        simplifiedAutoLink:                   true,
	        excludeTrailingPunctuationFromURLs:   true,
	        literalMidWordUnderscores:            true,
	        strikethrough:                        true,
	        tables:                               true,
	        tablesHeaderId:                       true,
	        ghCodeBlocks:                         true,
	        tasklists:                            true,
	        smoothLivePreview:                    true,
	        simpleLineBreaks:                     true,
	        requireSpaceBeforeHeadingText:        true,
	        ghMentions:                           false,
	        encodeEmails:                         true
	      },
	      vanilla: getDefaultOpts(true),
	      allOn: allOptionsOn()
	    };

	/**
	 * helper namespace
	 * @type {{}}
	 */
	showdown.helper = {};

	/**
	 * TODO LEGACY SUPPORT CODE
	 * @type {{}}
	 */
	showdown.extensions = {};

	/**
	 * Set a global option
	 * @static
	 * @param {string} key
	 * @param {*} value
	 * @returns {showdown}
	 */
	showdown.setOption = function (key, value) {
	  globalOptions[key] = value;
	  return this;
	};

	/**
	 * Get a global option
	 * @static
	 * @param {string} key
	 * @returns {*}
	 */
	showdown.getOption = function (key) {
	  return globalOptions[key];
	};

	/**
	 * Get the global options
	 * @static
	 * @returns {{}}
	 */
	showdown.getOptions = function () {
	  return globalOptions;
	};

	/**
	 * Reset global options to the default values
	 * @static
	 */
	showdown.resetOptions = function () {
	  globalOptions = getDefaultOpts(true);
	};

	/**
	 * Set the flavor showdown should use as default
	 * @param {string} name
	 */
	showdown.setFlavor = function (name) {
	  if (!flavor.hasOwnProperty(name)) {
	    throw Error(name + ' flavor was not found');
	  }
	  showdown.resetOptions();
	  var preset = flavor[name];
	  setFlavor = name;
	  for (var option in preset) {
	    if (preset.hasOwnProperty(option)) {
	      globalOptions[option] = preset[option];
	    }
	  }
	};

	/**
	 * Get the currently set flavor
	 * @returns {string}
	 */
	showdown.getFlavor = function () {
	  return setFlavor;
	};

	/**
	 * Get the options of a specified flavor. Returns undefined if the flavor was not found
	 * @param {string} name Name of the flavor
	 * @returns {{}|undefined}
	 */
	showdown.getFlavorOptions = function (name) {
	  if (flavor.hasOwnProperty(name)) {
	    return flavor[name];
	  }
	};

	/**
	 * Get the default options
	 * @static
	 * @param {boolean} [simple=true]
	 * @returns {{}}
	 */
	showdown.getDefaultOptions = function (simple) {
	  return getDefaultOpts(simple);
	};

	/**
	 * Get or set a subParser
	 *
	 * subParser(name)       - Get a registered subParser
	 * subParser(name, func) - Register a subParser
	 * @static
	 * @param {string} name
	 * @param {function} [func]
	 * @returns {*}
	 */
	showdown.subParser = function (name, func) {
	  if (showdown.helper.isString(name)) {
	    if (typeof func !== 'undefined') {
	      parsers[name] = func;
	    } else {
	      if (parsers.hasOwnProperty(name)) {
	        return parsers[name];
	      } else {
	        throw Error('SubParser named ' + name + ' not registered!');
	      }
	    }
	  }
	};

	/**
	 * Gets or registers an extension
	 * @static
	 * @param {string} name
	 * @param {object|function=} ext
	 * @returns {*}
	 */
	showdown.extension = function (name, ext) {

	  if (!showdown.helper.isString(name)) {
	    throw Error('Extension \'name\' must be a string');
	  }

	  name = showdown.helper.stdExtName(name);

	  // Getter
	  if (showdown.helper.isUndefined(ext)) {
	    if (!extensions.hasOwnProperty(name)) {
	      throw Error('Extension named ' + name + ' is not registered!');
	    }
	    return extensions[name];

	    // Setter
	  } else {
	    // Expand extension if it's wrapped in a function
	    if (typeof ext === 'function') {
	      ext = ext();
	    }

	    // Ensure extension is an array
	    if (!showdown.helper.isArray(ext)) {
	      ext = [ext];
	    }

	    var validExtension = validate(ext, name);

	    if (validExtension.valid) {
	      extensions[name] = ext;
	    } else {
	      throw Error(validExtension.error);
	    }
	  }
	};

	/**
	 * Gets all extensions registered
	 * @returns {{}}
	 */
	showdown.getAllExtensions = function () {
	  return extensions;
	};

	/**
	 * Remove an extension
	 * @param {string} name
	 */
	showdown.removeExtension = function (name) {
	  delete extensions[name];
	};

	/**
	 * Removes all extensions
	 */
	showdown.resetExtensions = function () {
	  extensions = {};
	};

	/**
	 * Validate extension
	 * @param {array} extension
	 * @param {string} name
	 * @returns {{valid: boolean, error: string}}
	 */
	function validate (extension, name) {

	  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',
	      ret = {
	        valid: true,
	        error: ''
	      };

	  if (!showdown.helper.isArray(extension)) {
	    extension = [extension];
	  }

	  for (var i = 0; i < extension.length; ++i) {
	    var baseMsg = errMsg + ' sub-extension ' + i + ': ',
	        ext = extension[i];
	    if (typeof ext !== 'object') {
	      ret.valid = false;
	      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';
	      return ret;
	    }

	    if (!showdown.helper.isString(ext.type)) {
	      ret.valid = false;
	      ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + ' given';
	      return ret;
	    }

	    var type = ext.type = ext.type.toLowerCase();

	    // normalize extension type
	    if (type === 'language') {
	      type = ext.type = 'lang';
	    }

	    if (type === 'html') {
	      type = ext.type = 'output';
	    }

	    if (type !== 'lang' && type !== 'output' && type !== 'listener') {
	      ret.valid = false;
	      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
	      return ret;
	    }

	    if (type === 'listener') {
	      if (showdown.helper.isUndefined(ext.listeners)) {
	        ret.valid = false;
	        ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
	        return ret;
	      }
	    } else {
	      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {
	        ret.valid = false;
	        ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
	        return ret;
	      }
	    }

	    if (ext.listeners) {
	      if (typeof ext.listeners !== 'object') {
	        ret.valid = false;
	        ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + ' given';
	        return ret;
	      }
	      for (var ln in ext.listeners) {
	        if (ext.listeners.hasOwnProperty(ln)) {
	          if (typeof ext.listeners[ln] !== 'function') {
	            ret.valid = false;
	            ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln +
	              ' must be a function but ' + typeof ext.listeners[ln] + ' given';
	            return ret;
	          }
	        }
	      }
	    }

	    if (ext.filter) {
	      if (typeof ext.filter !== 'function') {
	        ret.valid = false;
	        ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + ' given';
	        return ret;
	      }
	    } else if (ext.regex) {
	      if (showdown.helper.isString(ext.regex)) {
	        ext.regex = new RegExp(ext.regex, 'g');
	      }
	      if (!(ext.regex instanceof RegExp)) {
	        ret.valid = false;
	        ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';
	        return ret;
	      }
	      if (showdown.helper.isUndefined(ext.replace)) {
	        ret.valid = false;
	        ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
	        return ret;
	      }
	    }
	  }
	  return ret;
	}

	/**
	 * Validate extension
	 * @param {object} ext
	 * @returns {boolean}
	 */
	showdown.validateExtension = function (ext) {

	  var validateExtension = validate(ext, null);
	  if (!validateExtension.valid) {
	    console.warn(validateExtension.error);
	    return false;
	  }
	  return true;
	};

	/**
	 * showdownjs helper functions
	 */

	if (!showdown.hasOwnProperty('helper')) {
	  showdown.helper = {};
	}

	/**
	 * Check if var is string
	 * @static
	 * @param {string} a
	 * @returns {boolean}
	 */
	showdown.helper.isString = function (a) {
	  return (typeof a === 'string' || a instanceof String);
	};

	/**
	 * Check if var is a function
	 * @static
	 * @param {*} a
	 * @returns {boolean}
	 */
	showdown.helper.isFunction = function (a) {
	  var getType = {};
	  return a && getType.toString.call(a) === '[object Function]';
	};

	/**
	 * isArray helper function
	 * @static
	 * @param {*} a
	 * @returns {boolean}
	 */
	showdown.helper.isArray = function (a) {
	  return Array.isArray(a);
	};

	/**
	 * Check if value is undefined
	 * @static
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 */
	showdown.helper.isUndefined = function (value) {
	  return typeof value === 'undefined';
	};

	/**
	 * ForEach helper function
	 * Iterates over Arrays and Objects (own properties only)
	 * @static
	 * @param {*} obj
	 * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object
	 */
	showdown.helper.forEach = function (obj, callback) {
	  // check if obj is defined
	  if (showdown.helper.isUndefined(obj)) {
	    throw new Error('obj param is required');
	  }

	  if (showdown.helper.isUndefined(callback)) {
	    throw new Error('callback param is required');
	  }

	  if (!showdown.helper.isFunction(callback)) {
	    throw new Error('callback param must be a function/closure');
	  }

	  if (typeof obj.forEach === 'function') {
	    obj.forEach(callback);
	  } else if (showdown.helper.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      callback(obj[i], i, obj);
	    }
	  } else if (typeof (obj) === 'object') {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        callback(obj[prop], prop, obj);
	      }
	    }
	  } else {
	    throw new Error('obj does not seem to be an array or an iterable object');
	  }
	};

	/**
	 * Standardidize extension name
	 * @static
	 * @param {string} s extension name
	 * @returns {string}
	 */
	showdown.helper.stdExtName = function (s) {
	  return s.replace(/[_?*+\/\\.^-]/g, '').replace(/\s/g, '').toLowerCase();
	};

	function escapeCharactersCallback (wholeMatch, m1) {
	  var charCodeToEscape = m1.charCodeAt(0);
	  return '¨E' + charCodeToEscape + 'E';
	}

	/**
	 * Callback used to escape characters when passing through String.replace
	 * @static
	 * @param {string} wholeMatch
	 * @param {string} m1
	 * @returns {string}
	 */
	showdown.helper.escapeCharactersCallback = escapeCharactersCallback;

	/**
	 * Escape characters in a string
	 * @static
	 * @param {string} text
	 * @param {string} charsToEscape
	 * @param {boolean} afterBackslash
	 * @returns {XML|string|void|*}
	 */
	showdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {
	  // First we have to escape the escape characters so that
	  // we can build a character class out of them
	  var regexString = '([' + charsToEscape.replace(/([\[\]\\])/g, '\\$1') + '])';

	  if (afterBackslash) {
	    regexString = '\\\\' + regexString;
	  }

	  var regex = new RegExp(regexString, 'g');
	  text = text.replace(regex, escapeCharactersCallback);

	  return text;
	};

	/**
	 * Unescape HTML entities
	 * @param txt
	 * @returns {string}
	 */
	showdown.helper.unescapeHTMLEntities = function (txt) {

	  return txt
	    .replace(/&quot;/g, '"')
	    .replace(/&lt;/g, '<')
	    .replace(/&gt;/g, '>')
	    .replace(/&amp;/g, '&');
	};

	var rgxFindMatchPos = function (str, left, right, flags) {
	  var f = flags || '',
	      g = f.indexOf('g') > -1,
	      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),
	      l = new RegExp(left, f.replace(/g/g, '')),
	      pos = [],
	      t, s, m, start, end;

	  do {
	    t = 0;
	    while ((m = x.exec(str))) {
	      if (l.test(m[0])) {
	        if (!(t++)) {
	          s = x.lastIndex;
	          start = s - m[0].length;
	        }
	      } else if (t) {
	        if (!--t) {
	          end = m.index + m[0].length;
	          var obj = {
	            left: {start: start, end: s},
	            match: {start: s, end: m.index},
	            right: {start: m.index, end: end},
	            wholeMatch: {start: start, end: end}
	          };
	          pos.push(obj);
	          if (!g) {
	            return pos;
	          }
	        }
	      }
	    }
	  } while (t && (x.lastIndex = s));

	  return pos;
	};

	/**
	 * matchRecursiveRegExp
	 *
	 * (c) 2007 Steven Levithan <stevenlevithan.com>
	 * MIT License
	 *
	 * Accepts a string to search, a left and right format delimiter
	 * as regex patterns, and optional regex flags. Returns an array
	 * of matches, allowing nested instances of left/right delimiters.
	 * Use the "g" flag to return all matches, otherwise only the
	 * first is returned. Be careful to ensure that the left and
	 * right format delimiters produce mutually exclusive matches.
	 * Backreferences are not supported within the right delimiter
	 * due to how it is internally combined with the left delimiter.
	 * When matching strings whose format delimiters are unbalanced
	 * to the left or right, the output is intentionally as a
	 * conventional regex library with recursion support would
	 * produce, e.g. "<<x>" and "<x>>" both produce ["x"] when using
	 * "<" and ">" as the delimiters (both strings contain a single,
	 * balanced instance of "<x>").
	 *
	 * examples:
	 * matchRecursiveRegExp("test", "\\(", "\\)")
	 * returns: []
	 * matchRecursiveRegExp("<t<<e>><s>>t<>", "<", ">", "g")
	 * returns: ["t<<e>><s>", ""]
	 * matchRecursiveRegExp("<div id=\"x\">test</div>", "<div\\b[^>]*>", "</div>", "gi")
	 * returns: ["test"]
	 */
	showdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {

	  var matchPos = rgxFindMatchPos (str, left, right, flags),
	      results = [];

	  for (var i = 0; i < matchPos.length; ++i) {
	    results.push([
	      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
	      str.slice(matchPos[i].match.start, matchPos[i].match.end),
	      str.slice(matchPos[i].left.start, matchPos[i].left.end),
	      str.slice(matchPos[i].right.start, matchPos[i].right.end)
	    ]);
	  }
	  return results;
	};

	/**
	 *
	 * @param {string} str
	 * @param {string|function} replacement
	 * @param {string} left
	 * @param {string} right
	 * @param {string} flags
	 * @returns {string}
	 */
	showdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {

	  if (!showdown.helper.isFunction(replacement)) {
	    var repStr = replacement;
	    replacement = function () {
	      return repStr;
	    };
	  }

	  var matchPos = rgxFindMatchPos(str, left, right, flags),
	      finalStr = str,
	      lng = matchPos.length;

	  if (lng > 0) {
	    var bits = [];
	    if (matchPos[0].wholeMatch.start !== 0) {
	      bits.push(str.slice(0, matchPos[0].wholeMatch.start));
	    }
	    for (var i = 0; i < lng; ++i) {
	      bits.push(
	        replacement(
	          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),
	          str.slice(matchPos[i].match.start, matchPos[i].match.end),
	          str.slice(matchPos[i].left.start, matchPos[i].left.end),
	          str.slice(matchPos[i].right.start, matchPos[i].right.end)
	        )
	      );
	      if (i < lng - 1) {
	        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));
	      }
	    }
	    if (matchPos[lng - 1].wholeMatch.end < str.length) {
	      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
	    }
	    finalStr = bits.join('');
	  }
	  return finalStr;
	};

	/**
	 * Returns the index within the passed String object of the first occurrence of the specified regex,
	 * starting the search at fromIndex. Returns -1 if the value is not found.
	 *
	 * @param {string} str string to search
	 * @param {RegExp} regex Regular expression to search
	 * @param {int} [fromIndex = 0] Index to start the search
	 * @returns {Number}
	 * @throws InvalidArgumentError
	 */
	showdown.helper.regexIndexOf = function (str, regex, fromIndex) {
	  if (!showdown.helper.isString(str)) {
	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
	  }
	  if (regex instanceof RegExp === false) {
	    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';
	  }
	  var indexOf = str.substring(fromIndex || 0).search(regex);
	  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;
	};

	/**
	 * Splits the passed string object at the defined index, and returns an array composed of the two substrings
	 * @param {string} str string to split
	 * @param {int} index index to split string at
	 * @returns {[string,string]}
	 * @throws InvalidArgumentError
	 */
	showdown.helper.splitAtIndex = function (str, index) {
	  if (!showdown.helper.isString(str)) {
	    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';
	  }
	  return [str.substring(0, index), str.substring(index)];
	};

	/**
	 * Obfuscate an e-mail address through the use of Character Entities,
	 * transforming ASCII characters into their equivalent decimal or hex entities.
	 *
	 * Since it has a random component, subsequent calls to this function produce different results
	 *
	 * @param {string} mail
	 * @returns {string}
	 */
	showdown.helper.encodeEmailAddress = function (mail) {
	  var encode = [
	    function (ch) {
	      return '&#' + ch.charCodeAt(0) + ';';
	    },
	    function (ch) {
	      return '&#x' + ch.charCodeAt(0).toString(16) + ';';
	    },
	    function (ch) {
	      return ch;
	    }
	  ];

	  mail = mail.replace(/./g, function (ch) {
	    if (ch === '@') {
	      // this *must* be encoded. I insist.
	      ch = encode[Math.floor(Math.random() * 2)](ch);
	    } else {
	      var r = Math.random();
	      // roughly 10% raw, 45% hex, 45% dec
	      ch = (
	        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)
	      );
	    }
	    return ch;
	  });

	  return mail;
	};

	/**
	 *
	 * @param str
	 * @param targetLength
	 * @param padString
	 * @returns {string}
	 */
	showdown.helper.padEnd = function padEnd (str, targetLength, padString) {
	  /*jshint bitwise: false*/
	  // eslint-disable-next-line space-infix-ops
	  targetLength = targetLength>>0; //floor if number or convert non-number to 0;
	  /*jshint bitwise: true*/
	  padString = String(padString || ' ');
	  if (str.length > targetLength) {
	    return String(str);
	  } else {
	    targetLength = targetLength - str.length;
	    if (targetLength > padString.length) {
	      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed
	    }
	    return String(str) + padString.slice(0,targetLength);
	  }
	};

	/**
	 * POLYFILLS
	 */
	// use this instead of builtin is undefined for IE8 compatibility
	if (typeof(console) === 'undefined') {
	  console = {
	    warn: function (msg) {
	      alert(msg);
	    },
	    log: function (msg) {
	      alert(msg);
	    },
	    error: function (msg) {
	      throw msg;
	    }
	  };
	}

	/**
	 * Common regexes.
	 * We declare some common regexes to improve performance
	 */
	showdown.helper.regexes = {
	  asteriskDashAndColon: /([*_:~])/g
	};

	/**
	 * EMOJIS LIST
	 */
	showdown.helper.emojis = {
	  '+1':'\ud83d\udc4d',
	  '-1':'\ud83d\udc4e',
	  '100':'\ud83d\udcaf',
	  '1234':'\ud83d\udd22',
	  '1st_place_medal':'\ud83e\udd47',
	  '2nd_place_medal':'\ud83e\udd48',
	  '3rd_place_medal':'\ud83e\udd49',
	  '8ball':'\ud83c\udfb1',
	  'a':'\ud83c\udd70\ufe0f',
	  'ab':'\ud83c\udd8e',
	  'abc':'\ud83d\udd24',
	  'abcd':'\ud83d\udd21',
	  'accept':'\ud83c\ude51',
	  'aerial_tramway':'\ud83d\udea1',
	  'airplane':'\u2708\ufe0f',
	  'alarm_clock':'\u23f0',
	  'alembic':'\u2697\ufe0f',
	  'alien':'\ud83d\udc7d',
	  'ambulance':'\ud83d\ude91',
	  'amphora':'\ud83c\udffa',
	  'anchor':'\u2693\ufe0f',
	  'angel':'\ud83d\udc7c',
	  'anger':'\ud83d\udca2',
	  'angry':'\ud83d\ude20',
	  'anguished':'\ud83d\ude27',
	  'ant':'\ud83d\udc1c',
	  'apple':'\ud83c\udf4e',
	  'aquarius':'\u2652\ufe0f',
	  'aries':'\u2648\ufe0f',
	  'arrow_backward':'\u25c0\ufe0f',
	  'arrow_double_down':'\u23ec',
	  'arrow_double_up':'\u23eb',
	  'arrow_down':'\u2b07\ufe0f',
	  'arrow_down_small':'\ud83d\udd3d',
	  'arrow_forward':'\u25b6\ufe0f',
	  'arrow_heading_down':'\u2935\ufe0f',
	  'arrow_heading_up':'\u2934\ufe0f',
	  'arrow_left':'\u2b05\ufe0f',
	  'arrow_lower_left':'\u2199\ufe0f',
	  'arrow_lower_right':'\u2198\ufe0f',
	  'arrow_right':'\u27a1\ufe0f',
	  'arrow_right_hook':'\u21aa\ufe0f',
	  'arrow_up':'\u2b06\ufe0f',
	  'arrow_up_down':'\u2195\ufe0f',
	  'arrow_up_small':'\ud83d\udd3c',
	  'arrow_upper_left':'\u2196\ufe0f',
	  'arrow_upper_right':'\u2197\ufe0f',
	  'arrows_clockwise':'\ud83d\udd03',
	  'arrows_counterclockwise':'\ud83d\udd04',
	  'art':'\ud83c\udfa8',
	  'articulated_lorry':'\ud83d\ude9b',
	  'artificial_satellite':'\ud83d\udef0',
	  'astonished':'\ud83d\ude32',
	  'athletic_shoe':'\ud83d\udc5f',
	  'atm':'\ud83c\udfe7',
	  'atom_symbol':'\u269b\ufe0f',
	  'avocado':'\ud83e\udd51',
	  'b':'\ud83c\udd71\ufe0f',
	  'baby':'\ud83d\udc76',
	  'baby_bottle':'\ud83c\udf7c',
	  'baby_chick':'\ud83d\udc24',
	  'baby_symbol':'\ud83d\udebc',
	  'back':'\ud83d\udd19',
	  'bacon':'\ud83e\udd53',
	  'badminton':'\ud83c\udff8',
	  'baggage_claim':'\ud83d\udec4',
	  'baguette_bread':'\ud83e\udd56',
	  'balance_scale':'\u2696\ufe0f',
	  'balloon':'\ud83c\udf88',
	  'ballot_box':'\ud83d\uddf3',
	  'ballot_box_with_check':'\u2611\ufe0f',
	  'bamboo':'\ud83c\udf8d',
	  'banana':'\ud83c\udf4c',
	  'bangbang':'\u203c\ufe0f',
	  'bank':'\ud83c\udfe6',
	  'bar_chart':'\ud83d\udcca',
	  'barber':'\ud83d\udc88',
	  'baseball':'\u26be\ufe0f',
	  'basketball':'\ud83c\udfc0',
	  'basketball_man':'\u26f9\ufe0f',
	  'basketball_woman':'\u26f9\ufe0f&zwj;\u2640\ufe0f',
	  'bat':'\ud83e\udd87',
	  'bath':'\ud83d\udec0',
	  'bathtub':'\ud83d\udec1',
	  'battery':'\ud83d\udd0b',
	  'beach_umbrella':'\ud83c\udfd6',
	  'bear':'\ud83d\udc3b',
	  'bed':'\ud83d\udecf',
	  'bee':'\ud83d\udc1d',
	  'beer':'\ud83c\udf7a',
	  'beers':'\ud83c\udf7b',
	  'beetle':'\ud83d\udc1e',
	  'beginner':'\ud83d\udd30',
	  'bell':'\ud83d\udd14',
	  'bellhop_bell':'\ud83d\udece',
	  'bento':'\ud83c\udf71',
	  'biking_man':'\ud83d\udeb4',
	  'bike':'\ud83d\udeb2',
	  'biking_woman':'\ud83d\udeb4&zwj;\u2640\ufe0f',
	  'bikini':'\ud83d\udc59',
	  'biohazard':'\u2623\ufe0f',
	  'bird':'\ud83d\udc26',
	  'birthday':'\ud83c\udf82',
	  'black_circle':'\u26ab\ufe0f',
	  'black_flag':'\ud83c\udff4',
	  'black_heart':'\ud83d\udda4',
	  'black_joker':'\ud83c\udccf',
	  'black_large_square':'\u2b1b\ufe0f',
	  'black_medium_small_square':'\u25fe\ufe0f',
	  'black_medium_square':'\u25fc\ufe0f',
	  'black_nib':'\u2712\ufe0f',
	  'black_small_square':'\u25aa\ufe0f',
	  'black_square_button':'\ud83d\udd32',
	  'blonde_man':'\ud83d\udc71',
	  'blonde_woman':'\ud83d\udc71&zwj;\u2640\ufe0f',
	  'blossom':'\ud83c\udf3c',
	  'blowfish':'\ud83d\udc21',
	  'blue_book':'\ud83d\udcd8',
	  'blue_car':'\ud83d\ude99',
	  'blue_heart':'\ud83d\udc99',
	  'blush':'\ud83d\ude0a',
	  'boar':'\ud83d\udc17',
	  'boat':'\u26f5\ufe0f',
	  'bomb':'\ud83d\udca3',
	  'book':'\ud83d\udcd6',
	  'bookmark':'\ud83d\udd16',
	  'bookmark_tabs':'\ud83d\udcd1',
	  'books':'\ud83d\udcda',
	  'boom':'\ud83d\udca5',
	  'boot':'\ud83d\udc62',
	  'bouquet':'\ud83d\udc90',
	  'bowing_man':'\ud83d\ude47',
	  'bow_and_arrow':'\ud83c\udff9',
	  'bowing_woman':'\ud83d\ude47&zwj;\u2640\ufe0f',
	  'bowling':'\ud83c\udfb3',
	  'boxing_glove':'\ud83e\udd4a',
	  'boy':'\ud83d\udc66',
	  'bread':'\ud83c\udf5e',
	  'bride_with_veil':'\ud83d\udc70',
	  'bridge_at_night':'\ud83c\udf09',
	  'briefcase':'\ud83d\udcbc',
	  'broken_heart':'\ud83d\udc94',
	  'bug':'\ud83d\udc1b',
	  'building_construction':'\ud83c\udfd7',
	  'bulb':'\ud83d\udca1',
	  'bullettrain_front':'\ud83d\ude85',
	  'bullettrain_side':'\ud83d\ude84',
	  'burrito':'\ud83c\udf2f',
	  'bus':'\ud83d\ude8c',
	  'business_suit_levitating':'\ud83d\udd74',
	  'busstop':'\ud83d\ude8f',
	  'bust_in_silhouette':'\ud83d\udc64',
	  'busts_in_silhouette':'\ud83d\udc65',
	  'butterfly':'\ud83e\udd8b',
	  'cactus':'\ud83c\udf35',
	  'cake':'\ud83c\udf70',
	  'calendar':'\ud83d\udcc6',
	  'call_me_hand':'\ud83e\udd19',
	  'calling':'\ud83d\udcf2',
	  'camel':'\ud83d\udc2b',
	  'camera':'\ud83d\udcf7',
	  'camera_flash':'\ud83d\udcf8',
	  'camping':'\ud83c\udfd5',
	  'cancer':'\u264b\ufe0f',
	  'candle':'\ud83d\udd6f',
	  'candy':'\ud83c\udf6c',
	  'canoe':'\ud83d\udef6',
	  'capital_abcd':'\ud83d\udd20',
	  'capricorn':'\u2651\ufe0f',
	  'car':'\ud83d\ude97',
	  'card_file_box':'\ud83d\uddc3',
	  'card_index':'\ud83d\udcc7',
	  'card_index_dividers':'\ud83d\uddc2',
	  'carousel_horse':'\ud83c\udfa0',
	  'carrot':'\ud83e\udd55',
	  'cat':'\ud83d\udc31',
	  'cat2':'\ud83d\udc08',
	  'cd':'\ud83d\udcbf',
	  'chains':'\u26d3',
	  'champagne':'\ud83c\udf7e',
	  'chart':'\ud83d\udcb9',
	  'chart_with_downwards_trend':'\ud83d\udcc9',
	  'chart_with_upwards_trend':'\ud83d\udcc8',
	  'checkered_flag':'\ud83c\udfc1',
	  'cheese':'\ud83e\uddc0',
	  'cherries':'\ud83c\udf52',
	  'cherry_blossom':'\ud83c\udf38',
	  'chestnut':'\ud83c\udf30',
	  'chicken':'\ud83d\udc14',
	  'children_crossing':'\ud83d\udeb8',
	  'chipmunk':'\ud83d\udc3f',
	  'chocolate_bar':'\ud83c\udf6b',
	  'christmas_tree':'\ud83c\udf84',
	  'church':'\u26ea\ufe0f',
	  'cinema':'\ud83c\udfa6',
	  'circus_tent':'\ud83c\udfaa',
	  'city_sunrise':'\ud83c\udf07',
	  'city_sunset':'\ud83c\udf06',
	  'cityscape':'\ud83c\udfd9',
	  'cl':'\ud83c\udd91',
	  'clamp':'\ud83d\udddc',
	  'clap':'\ud83d\udc4f',
	  'clapper':'\ud83c\udfac',
	  'classical_building':'\ud83c\udfdb',
	  'clinking_glasses':'\ud83e\udd42',
	  'clipboard':'\ud83d\udccb',
	  'clock1':'\ud83d\udd50',
	  'clock10':'\ud83d\udd59',
	  'clock1030':'\ud83d\udd65',
	  'clock11':'\ud83d\udd5a',
	  'clock1130':'\ud83d\udd66',
	  'clock12':'\ud83d\udd5b',
	  'clock1230':'\ud83d\udd67',
	  'clock130':'\ud83d\udd5c',
	  'clock2':'\ud83d\udd51',
	  'clock230':'\ud83d\udd5d',
	  'clock3':'\ud83d\udd52',
	  'clock330':'\ud83d\udd5e',
	  'clock4':'\ud83d\udd53',
	  'clock430':'\ud83d\udd5f',
	  'clock5':'\ud83d\udd54',
	  'clock530':'\ud83d\udd60',
	  'clock6':'\ud83d\udd55',
	  'clock630':'\ud83d\udd61',
	  'clock7':'\ud83d\udd56',
	  'clock730':'\ud83d\udd62',
	  'clock8':'\ud83d\udd57',
	  'clock830':'\ud83d\udd63',
	  'clock9':'\ud83d\udd58',
	  'clock930':'\ud83d\udd64',
	  'closed_book':'\ud83d\udcd5',
	  'closed_lock_with_key':'\ud83d\udd10',
	  'closed_umbrella':'\ud83c\udf02',
	  'cloud':'\u2601\ufe0f',
	  'cloud_with_lightning':'\ud83c\udf29',
	  'cloud_with_lightning_and_rain':'\u26c8',
	  'cloud_with_rain':'\ud83c\udf27',
	  'cloud_with_snow':'\ud83c\udf28',
	  'clown_face':'\ud83e\udd21',
	  'clubs':'\u2663\ufe0f',
	  'cocktail':'\ud83c\udf78',
	  'coffee':'\u2615\ufe0f',
	  'coffin':'\u26b0\ufe0f',
	  'cold_sweat':'\ud83d\ude30',
	  'comet':'\u2604\ufe0f',
	  'computer':'\ud83d\udcbb',
	  'computer_mouse':'\ud83d\uddb1',
	  'confetti_ball':'\ud83c\udf8a',
	  'confounded':'\ud83d\ude16',
	  'confused':'\ud83d\ude15',
	  'congratulations':'\u3297\ufe0f',
	  'construction':'\ud83d\udea7',
	  'construction_worker_man':'\ud83d\udc77',
	  'construction_worker_woman':'\ud83d\udc77&zwj;\u2640\ufe0f',
	  'control_knobs':'\ud83c\udf9b',
	  'convenience_store':'\ud83c\udfea',
	  'cookie':'\ud83c\udf6a',
	  'cool':'\ud83c\udd92',
	  'policeman':'\ud83d\udc6e',
	  'copyright':'\u00a9\ufe0f',
	  'corn':'\ud83c\udf3d',
	  'couch_and_lamp':'\ud83d\udecb',
	  'couple':'\ud83d\udc6b',
	  'couple_with_heart_woman_man':'\ud83d\udc91',
	  'couple_with_heart_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc68',
	  'couple_with_heart_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc69',
	  'couplekiss_man_man':'\ud83d\udc68&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc68',
	  'couplekiss_man_woman':'\ud83d\udc8f',
	  'couplekiss_woman_woman':'\ud83d\udc69&zwj;\u2764\ufe0f&zwj;\ud83d\udc8b&zwj;\ud83d\udc69',
	  'cow':'\ud83d\udc2e',
	  'cow2':'\ud83d\udc04',
	  'cowboy_hat_face':'\ud83e\udd20',
	  'crab':'\ud83e\udd80',
	  'crayon':'\ud83d\udd8d',
	  'credit_card':'\ud83d\udcb3',
	  'crescent_moon':'\ud83c\udf19',
	  'cricket':'\ud83c\udfcf',
	  'crocodile':'\ud83d\udc0a',
	  'croissant':'\ud83e\udd50',
	  'crossed_fingers':'\ud83e\udd1e',
	  'crossed_flags':'\ud83c\udf8c',
	  'crossed_swords':'\u2694\ufe0f',
	  'crown':'\ud83d\udc51',
	  'cry':'\ud83d\ude22',
	  'crying_cat_face':'\ud83d\ude3f',
	  'crystal_ball':'\ud83d\udd2e',
	  'cucumber':'\ud83e\udd52',
	  'cupid':'\ud83d\udc98',
	  'curly_loop':'\u27b0',
	  'currency_exchange':'\ud83d\udcb1',
	  'curry':'\ud83c\udf5b',
	  'custard':'\ud83c\udf6e',
	  'customs':'\ud83d\udec3',
	  'cyclone':'\ud83c\udf00',
	  'dagger':'\ud83d\udde1',
	  'dancer':'\ud83d\udc83',
	  'dancing_women':'\ud83d\udc6f',
	  'dancing_men':'\ud83d\udc6f&zwj;\u2642\ufe0f',
	  'dango':'\ud83c\udf61',
	  'dark_sunglasses':'\ud83d\udd76',
	  'dart':'\ud83c\udfaf',
	  'dash':'\ud83d\udca8',
	  'date':'\ud83d\udcc5',
	  'deciduous_tree':'\ud83c\udf33',
	  'deer':'\ud83e\udd8c',
	  'department_store':'\ud83c\udfec',
	  'derelict_house':'\ud83c\udfda',
	  'desert':'\ud83c\udfdc',
	  'desert_island':'\ud83c\udfdd',
	  'desktop_computer':'\ud83d\udda5',
	  'male_detective':'\ud83d\udd75\ufe0f',
	  'diamond_shape_with_a_dot_inside':'\ud83d\udca0',
	  'diamonds':'\u2666\ufe0f',
	  'disappointed':'\ud83d\ude1e',
	  'disappointed_relieved':'\ud83d\ude25',
	  'dizzy':'\ud83d\udcab',
	  'dizzy_face':'\ud83d\ude35',
	  'do_not_litter':'\ud83d\udeaf',
	  'dog':'\ud83d\udc36',
	  'dog2':'\ud83d\udc15',
	  'dollar':'\ud83d\udcb5',
	  'dolls':'\ud83c\udf8e',
	  'dolphin':'\ud83d\udc2c',
	  'door':'\ud83d\udeaa',
	  'doughnut':'\ud83c\udf69',
	  'dove':'\ud83d\udd4a',
	  'dragon':'\ud83d\udc09',
	  'dragon_face':'\ud83d\udc32',
	  'dress':'\ud83d\udc57',
	  'dromedary_camel':'\ud83d\udc2a',
	  'drooling_face':'\ud83e\udd24',
	  'droplet':'\ud83d\udca7',
	  'drum':'\ud83e\udd41',
	  'duck':'\ud83e\udd86',
	  'dvd':'\ud83d\udcc0',
	  'e-mail':'\ud83d\udce7',
	  'eagle':'\ud83e\udd85',
	  'ear':'\ud83d\udc42',
	  'ear_of_rice':'\ud83c\udf3e',
	  'earth_africa':'\ud83c\udf0d',
	  'earth_americas':'\ud83c\udf0e',
	  'earth_asia':'\ud83c\udf0f',
	  'egg':'\ud83e\udd5a',
	  'eggplant':'\ud83c\udf46',
	  'eight_pointed_black_star':'\u2734\ufe0f',
	  'eight_spoked_asterisk':'\u2733\ufe0f',
	  'electric_plug':'\ud83d\udd0c',
	  'elephant':'\ud83d\udc18',
	  'email':'\u2709\ufe0f',
	  'end':'\ud83d\udd1a',
	  'envelope_with_arrow':'\ud83d\udce9',
	  'euro':'\ud83d\udcb6',
	  'european_castle':'\ud83c\udff0',
	  'european_post_office':'\ud83c\udfe4',
	  'evergreen_tree':'\ud83c\udf32',
	  'exclamation':'\u2757\ufe0f',
	  'expressionless':'\ud83d\ude11',
	  'eye':'\ud83d\udc41',
	  'eye_speech_bubble':'\ud83d\udc41&zwj;\ud83d\udde8',
	  'eyeglasses':'\ud83d\udc53',
	  'eyes':'\ud83d\udc40',
	  'face_with_head_bandage':'\ud83e\udd15',
	  'face_with_thermometer':'\ud83e\udd12',
	  'fist_oncoming':'\ud83d\udc4a',
	  'factory':'\ud83c\udfed',
	  'fallen_leaf':'\ud83c\udf42',
	  'family_man_woman_boy':'\ud83d\udc6a',
	  'family_man_boy':'\ud83d\udc68&zwj;\ud83d\udc66',
	  'family_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
	  'family_man_girl':'\ud83d\udc68&zwj;\ud83d\udc67',
	  'family_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
	  'family_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
	  'family_man_man_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66',
	  'family_man_man_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
	  'family_man_man_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67',
	  'family_man_man_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
	  'family_man_man_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc68&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
	  'family_man_woman_boy_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
	  'family_man_woman_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
	  'family_man_woman_girl_boy':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
	  'family_man_woman_girl_girl':'\ud83d\udc68&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
	  'family_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc66',
	  'family_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
	  'family_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc67',
	  'family_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
	  'family_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
	  'family_woman_woman_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66',
	  'family_woman_woman_boy_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc66&zwj;\ud83d\udc66',
	  'family_woman_woman_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67',
	  'family_woman_woman_girl_boy':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc66',
	  'family_woman_woman_girl_girl':'\ud83d\udc69&zwj;\ud83d\udc69&zwj;\ud83d\udc67&zwj;\ud83d\udc67',
	  'fast_forward':'\u23e9',
	  'fax':'\ud83d\udce0',
	  'fearful':'\ud83d\ude28',
	  'feet':'\ud83d\udc3e',
	  'female_detective':'\ud83d\udd75\ufe0f&zwj;\u2640\ufe0f',
	  'ferris_wheel':'\ud83c\udfa1',
	  'ferry':'\u26f4',
	  'field_hockey':'\ud83c\udfd1',
	  'file_cabinet':'\ud83d\uddc4',
	  'file_folder':'\ud83d\udcc1',
	  'film_projector':'\ud83d\udcfd',
	  'film_strip':'\ud83c\udf9e',
	  'fire':'\ud83d\udd25',
	  'fire_engine':'\ud83d\ude92',
	  'fireworks':'\ud83c\udf86',
	  'first_quarter_moon':'\ud83c\udf13',
	  'first_quarter_moon_with_face':'\ud83c\udf1b',
	  'fish':'\ud83d\udc1f',
	  'fish_cake':'\ud83c\udf65',
	  'fishing_pole_and_fish':'\ud83c\udfa3',
	  'fist_raised':'\u270a',
	  'fist_left':'\ud83e\udd1b',
	  'fist_right':'\ud83e\udd1c',
	  'flags':'\ud83c\udf8f',
	  'flashlight':'\ud83d\udd26',
	  'fleur_de_lis':'\u269c\ufe0f',
	  'flight_arrival':'\ud83d\udeec',
	  'flight_departure':'\ud83d\udeeb',
	  'floppy_disk':'\ud83d\udcbe',
	  'flower_playing_cards':'\ud83c\udfb4',
	  'flushed':'\ud83d\ude33',
	  'fog':'\ud83c\udf2b',
	  'foggy':'\ud83c\udf01',
	  'football':'\ud83c\udfc8',
	  'footprints':'\ud83d\udc63',
	  'fork_and_knife':'\ud83c\udf74',
	  'fountain':'\u26f2\ufe0f',
	  'fountain_pen':'\ud83d\udd8b',
	  'four_leaf_clover':'\ud83c\udf40',
	  'fox_face':'\ud83e\udd8a',
	  'framed_picture':'\ud83d\uddbc',
	  'free':'\ud83c\udd93',
	  'fried_egg':'\ud83c\udf73',
	  'fried_shrimp':'\ud83c\udf64',
	  'fries':'\ud83c\udf5f',
	  'frog':'\ud83d\udc38',
	  'frowning':'\ud83d\ude26',
	  'frowning_face':'\u2639\ufe0f',
	  'frowning_man':'\ud83d\ude4d&zwj;\u2642\ufe0f',
	  'frowning_woman':'\ud83d\ude4d',
	  'middle_finger':'\ud83d\udd95',
	  'fuelpump':'\u26fd\ufe0f',
	  'full_moon':'\ud83c\udf15',
	  'full_moon_with_face':'\ud83c\udf1d',
	  'funeral_urn':'\u26b1\ufe0f',
	  'game_die':'\ud83c\udfb2',
	  'gear':'\u2699\ufe0f',
	  'gem':'\ud83d\udc8e',
	  'gemini':'\u264a\ufe0f',
	  'ghost':'\ud83d\udc7b',
	  'gift':'\ud83c\udf81',
	  'gift_heart':'\ud83d\udc9d',
	  'girl':'\ud83d\udc67',
	  'globe_with_meridians':'\ud83c\udf10',
	  'goal_net':'\ud83e\udd45',
	  'goat':'\ud83d\udc10',
	  'golf':'\u26f3\ufe0f',
	  'golfing_man':'\ud83c\udfcc\ufe0f',
	  'golfing_woman':'\ud83c\udfcc\ufe0f&zwj;\u2640\ufe0f',
	  'gorilla':'\ud83e\udd8d',
	  'grapes':'\ud83c\udf47',
	  'green_apple':'\ud83c\udf4f',
	  'green_book':'\ud83d\udcd7',
	  'green_heart':'\ud83d\udc9a',
	  'green_salad':'\ud83e\udd57',
	  'grey_exclamation':'\u2755',
	  'grey_question':'\u2754',
	  'grimacing':'\ud83d\ude2c',
	  'grin':'\ud83d\ude01',
	  'grinning':'\ud83d\ude00',
	  'guardsman':'\ud83d\udc82',
	  'guardswoman':'\ud83d\udc82&zwj;\u2640\ufe0f',
	  'guitar':'\ud83c\udfb8',
	  'gun':'\ud83d\udd2b',
	  'haircut_woman':'\ud83d\udc87',
	  'haircut_man':'\ud83d\udc87&zwj;\u2642\ufe0f',
	  'hamburger':'\ud83c\udf54',
	  'hammer':'\ud83d\udd28',
	  'hammer_and_pick':'\u2692',
	  'hammer_and_wrench':'\ud83d\udee0',
	  'hamster':'\ud83d\udc39',
	  'hand':'\u270b',
	  'handbag':'\ud83d\udc5c',
	  'handshake':'\ud83e\udd1d',
	  'hankey':'\ud83d\udca9',
	  'hatched_chick':'\ud83d\udc25',
	  'hatching_chick':'\ud83d\udc23',
	  'headphones':'\ud83c\udfa7',
	  'hear_no_evil':'\ud83d\ude49',
	  'heart':'\u2764\ufe0f',
	  'heart_decoration':'\ud83d\udc9f',
	  'heart_eyes':'\ud83d\ude0d',
	  'heart_eyes_cat':'\ud83d\ude3b',
	  'heartbeat':'\ud83d\udc93',
	  'heartpulse':'\ud83d\udc97',
	  'hearts':'\u2665\ufe0f',
	  'heavy_check_mark':'\u2714\ufe0f',
	  'heavy_division_sign':'\u2797',
	  'heavy_dollar_sign':'\ud83d\udcb2',
	  'heavy_heart_exclamation':'\u2763\ufe0f',
	  'heavy_minus_sign':'\u2796',
	  'heavy_multiplication_x':'\u2716\ufe0f',
	  'heavy_plus_sign':'\u2795',
	  'helicopter':'\ud83d\ude81',
	  'herb':'\ud83c\udf3f',
	  'hibiscus':'\ud83c\udf3a',
	  'high_brightness':'\ud83d\udd06',
	  'high_heel':'\ud83d\udc60',
	  'hocho':'\ud83d\udd2a',
	  'hole':'\ud83d\udd73',
	  'honey_pot':'\ud83c\udf6f',
	  'horse':'\ud83d\udc34',
	  'horse_racing':'\ud83c\udfc7',
	  'hospital':'\ud83c\udfe5',
	  'hot_pepper':'\ud83c\udf36',
	  'hotdog':'\ud83c\udf2d',
	  'hotel':'\ud83c\udfe8',
	  'hotsprings':'\u2668\ufe0f',
	  'hourglass':'\u231b\ufe0f',
	  'hourglass_flowing_sand':'\u23f3',
	  'house':'\ud83c\udfe0',
	  'house_with_garden':'\ud83c\udfe1',
	  'houses':'\ud83c\udfd8',
	  'hugs':'\ud83e\udd17',
	  'hushed':'\ud83d\ude2f',
	  'ice_cream':'\ud83c\udf68',
	  'ice_hockey':'\ud83c\udfd2',
	  'ice_skate':'\u26f8',
	  'icecream':'\ud83c\udf66',
	  'id':'\ud83c\udd94',
	  'ideograph_advantage':'\ud83c\ude50',
	  'imp':'\ud83d\udc7f',
	  'inbox_tray':'\ud83d\udce5',
	  'incoming_envelope':'\ud83d\udce8',
	  'tipping_hand_woman':'\ud83d\udc81',
	  'information_source':'\u2139\ufe0f',
	  'innocent':'\ud83d\ude07',
	  'interrobang':'\u2049\ufe0f',
	  'iphone':'\ud83d\udcf1',
	  'izakaya_lantern':'\ud83c\udfee',
	  'jack_o_lantern':'\ud83c\udf83',
	  'japan':'\ud83d\uddfe',
	  'japanese_castle':'\ud83c\udfef',
	  'japanese_goblin':'\ud83d\udc7a',
	  'japanese_ogre':'\ud83d\udc79',
	  'jeans':'\ud83d\udc56',
	  'joy':'\ud83d\ude02',
	  'joy_cat':'\ud83d\ude39',
	  'joystick':'\ud83d\udd79',
	  'kaaba':'\ud83d\udd4b',
	  'key':'\ud83d\udd11',
	  'keyboard':'\u2328\ufe0f',
	  'keycap_ten':'\ud83d\udd1f',
	  'kick_scooter':'\ud83d\udef4',
	  'kimono':'\ud83d\udc58',
	  'kiss':'\ud83d\udc8b',
	  'kissing':'\ud83d\ude17',
	  'kissing_cat':'\ud83d\ude3d',
	  'kissing_closed_eyes':'\ud83d\ude1a',
	  'kissing_heart':'\ud83d\ude18',
	  'kissing_smiling_eyes':'\ud83d\ude19',
	  'kiwi_fruit':'\ud83e\udd5d',
	  'koala':'\ud83d\udc28',
	  'koko':'\ud83c\ude01',
	  'label':'\ud83c\udff7',
	  'large_blue_circle':'\ud83d\udd35',
	  'large_blue_diamond':'\ud83d\udd37',
	  'large_orange_diamond':'\ud83d\udd36',
	  'last_quarter_moon':'\ud83c\udf17',
	  'last_quarter_moon_with_face':'\ud83c\udf1c',
	  'latin_cross':'\u271d\ufe0f',
	  'laughing':'\ud83d\ude06',
	  'leaves':'\ud83c\udf43',
	  'ledger':'\ud83d\udcd2',
	  'left_luggage':'\ud83d\udec5',
	  'left_right_arrow':'\u2194\ufe0f',
	  'leftwards_arrow_with_hook':'\u21a9\ufe0f',
	  'lemon':'\ud83c\udf4b',
	  'leo':'\u264c\ufe0f',
	  'leopard':'\ud83d\udc06',
	  'level_slider':'\ud83c\udf9a',
	  'libra':'\u264e\ufe0f',
	  'light_rail':'\ud83d\ude88',
	  'link':'\ud83d\udd17',
	  'lion':'\ud83e\udd81',
	  'lips':'\ud83d\udc44',
	  'lipstick':'\ud83d\udc84',
	  'lizard':'\ud83e\udd8e',
	  'lock':'\ud83d\udd12',
	  'lock_with_ink_pen':'\ud83d\udd0f',
	  'lollipop':'\ud83c\udf6d',
	  'loop':'\u27bf',
	  'loud_sound':'\ud83d\udd0a',
	  'loudspeaker':'\ud83d\udce2',
	  'love_hotel':'\ud83c\udfe9',
	  'love_letter':'\ud83d\udc8c',
	  'low_brightness':'\ud83d\udd05',
	  'lying_face':'\ud83e\udd25',
	  'm':'\u24c2\ufe0f',
	  'mag':'\ud83d\udd0d',
	  'mag_right':'\ud83d\udd0e',
	  'mahjong':'\ud83c\udc04\ufe0f',
	  'mailbox':'\ud83d\udceb',
	  'mailbox_closed':'\ud83d\udcea',
	  'mailbox_with_mail':'\ud83d\udcec',
	  'mailbox_with_no_mail':'\ud83d\udced',
	  'man':'\ud83d\udc68',
	  'man_artist':'\ud83d\udc68&zwj;\ud83c\udfa8',
	  'man_astronaut':'\ud83d\udc68&zwj;\ud83d\ude80',
	  'man_cartwheeling':'\ud83e\udd38&zwj;\u2642\ufe0f',
	  'man_cook':'\ud83d\udc68&zwj;\ud83c\udf73',
	  'man_dancing':'\ud83d\udd7a',
	  'man_facepalming':'\ud83e\udd26&zwj;\u2642\ufe0f',
	  'man_factory_worker':'\ud83d\udc68&zwj;\ud83c\udfed',
	  'man_farmer':'\ud83d\udc68&zwj;\ud83c\udf3e',
	  'man_firefighter':'\ud83d\udc68&zwj;\ud83d\ude92',
	  'man_health_worker':'\ud83d\udc68&zwj;\u2695\ufe0f',
	  'man_in_tuxedo':'\ud83e\udd35',
	  'man_judge':'\ud83d\udc68&zwj;\u2696\ufe0f',
	  'man_juggling':'\ud83e\udd39&zwj;\u2642\ufe0f',
	  'man_mechanic':'\ud83d\udc68&zwj;\ud83d\udd27',
	  'man_office_worker':'\ud83d\udc68&zwj;\ud83d\udcbc',
	  'man_pilot':'\ud83d\udc68&zwj;\u2708\ufe0f',
	  'man_playing_handball':'\ud83e\udd3e&zwj;\u2642\ufe0f',
	  'man_playing_water_polo':'\ud83e\udd3d&zwj;\u2642\ufe0f',
	  'man_scientist':'\ud83d\udc68&zwj;\ud83d\udd2c',
	  'man_shrugging':'\ud83e\udd37&zwj;\u2642\ufe0f',
	  'man_singer':'\ud83d\udc68&zwj;\ud83c\udfa4',
	  'man_student':'\ud83d\udc68&zwj;\ud83c\udf93',
	  'man_teacher':'\ud83d\udc68&zwj;\ud83c\udfeb',
	  'man_technologist':'\ud83d\udc68&zwj;\ud83d\udcbb',
	  'man_with_gua_pi_mao':'\ud83d\udc72',
	  'man_with_turban':'\ud83d\udc73',
	  'tangerine':'\ud83c\udf4a',
	  'mans_shoe':'\ud83d\udc5e',
	  'mantelpiece_clock':'\ud83d\udd70',
	  'maple_leaf':'\ud83c\udf41',
	  'martial_arts_uniform':'\ud83e\udd4b',
	  'mask':'\ud83d\ude37',
	  'massage_woman':'\ud83d\udc86',
	  'massage_man':'\ud83d\udc86&zwj;\u2642\ufe0f',
	  'meat_on_bone':'\ud83c\udf56',
	  'medal_military':'\ud83c\udf96',
	  'medal_sports':'\ud83c\udfc5',
	  'mega':'\ud83d\udce3',
	  'melon':'\ud83c\udf48',
	  'memo':'\ud83d\udcdd',
	  'men_wrestling':'\ud83e\udd3c&zwj;\u2642\ufe0f',
	  'menorah':'\ud83d\udd4e',
	  'mens':'\ud83d\udeb9',
	  'metal':'\ud83e\udd18',
	  'metro':'\ud83d\ude87',
	  'microphone':'\ud83c\udfa4',
	  'microscope':'\ud83d\udd2c',
	  'milk_glass':'\ud83e\udd5b',
	  'milky_way':'\ud83c\udf0c',
	  'minibus':'\ud83d\ude90',
	  'minidisc':'\ud83d\udcbd',
	  'mobile_phone_off':'\ud83d\udcf4',
	  'money_mouth_face':'\ud83e\udd11',
	  'money_with_wings':'\ud83d\udcb8',
	  'moneybag':'\ud83d\udcb0',
	  'monkey':'\ud83d\udc12',
	  'monkey_face':'\ud83d\udc35',
	  'monorail':'\ud83d\ude9d',
	  'moon':'\ud83c\udf14',
	  'mortar_board':'\ud83c\udf93',
	  'mosque':'\ud83d\udd4c',
	  'motor_boat':'\ud83d\udee5',
	  'motor_scooter':'\ud83d\udef5',
	  'motorcycle':'\ud83c\udfcd',
	  'motorway':'\ud83d\udee3',
	  'mount_fuji':'\ud83d\uddfb',
	  'mountain':'\u26f0',
	  'mountain_biking_man':'\ud83d\udeb5',
	  'mountain_biking_woman':'\ud83d\udeb5&zwj;\u2640\ufe0f',
	  'mountain_cableway':'\ud83d\udea0',
	  'mountain_railway':'\ud83d\ude9e',
	  'mountain_snow':'\ud83c\udfd4',
	  'mouse':'\ud83d\udc2d',
	  'mouse2':'\ud83d\udc01',
	  'movie_camera':'\ud83c\udfa5',
	  'moyai':'\ud83d\uddff',
	  'mrs_claus':'\ud83e\udd36',
	  'muscle':'\ud83d\udcaa',
	  'mushroom':'\ud83c\udf44',
	  'musical_keyboard':'\ud83c\udfb9',
	  'musical_note':'\ud83c\udfb5',
	  'musical_score':'\ud83c\udfbc',
	  'mute':'\ud83d\udd07',
	  'nail_care':'\ud83d\udc85',
	  'name_badge':'\ud83d\udcdb',
	  'national_park':'\ud83c\udfde',
	  'nauseated_face':'\ud83e\udd22',
	  'necktie':'\ud83d\udc54',
	  'negative_squared_cross_mark':'\u274e',
	  'nerd_face':'\ud83e\udd13',
	  'neutral_face':'\ud83d\ude10',
	  'new':'\ud83c\udd95',
	  'new_moon':'\ud83c\udf11',
	  'new_moon_with_face':'\ud83c\udf1a',
	  'newspaper':'\ud83d\udcf0',
	  'newspaper_roll':'\ud83d\uddde',
	  'next_track_button':'\u23ed',
	  'ng':'\ud83c\udd96',
	  'no_good_man':'\ud83d\ude45&zwj;\u2642\ufe0f',
	  'no_good_woman':'\ud83d\ude45',
	  'night_with_stars':'\ud83c\udf03',
	  'no_bell':'\ud83d\udd15',
	  'no_bicycles':'\ud83d\udeb3',
	  'no_entry':'\u26d4\ufe0f',
	  'no_entry_sign':'\ud83d\udeab',
	  'no_mobile_phones':'\ud83d\udcf5',
	  'no_mouth':'\ud83d\ude36',
	  'no_pedestrians':'\ud83d\udeb7',
	  'no_smoking':'\ud83d\udead',
	  'non-potable_water':'\ud83d\udeb1',
	  'nose':'\ud83d\udc43',
	  'notebook':'\ud83d\udcd3',
	  'notebook_with_decorative_cover':'\ud83d\udcd4',
	  'notes':'\ud83c\udfb6',
	  'nut_and_bolt':'\ud83d\udd29',
	  'o':'\u2b55\ufe0f',
	  'o2':'\ud83c\udd7e\ufe0f',
	  'ocean':'\ud83c\udf0a',
	  'octopus':'\ud83d\udc19',
	  'oden':'\ud83c\udf62',
	  'office':'\ud83c\udfe2',
	  'oil_drum':'\ud83d\udee2',
	  'ok':'\ud83c\udd97',
	  'ok_hand':'\ud83d\udc4c',
	  'ok_man':'\ud83d\ude46&zwj;\u2642\ufe0f',
	  'ok_woman':'\ud83d\ude46',
	  'old_key':'\ud83d\udddd',
	  'older_man':'\ud83d\udc74',
	  'older_woman':'\ud83d\udc75',
	  'om':'\ud83d\udd49',
	  'on':'\ud83d\udd1b',
	  'oncoming_automobile':'\ud83d\ude98',
	  'oncoming_bus':'\ud83d\ude8d',
	  'oncoming_police_car':'\ud83d\ude94',
	  'oncoming_taxi':'\ud83d\ude96',
	  'open_file_folder':'\ud83d\udcc2',
	  'open_hands':'\ud83d\udc50',
	  'open_mouth':'\ud83d\ude2e',
	  'open_umbrella':'\u2602\ufe0f',
	  'ophiuchus':'\u26ce',
	  'orange_book':'\ud83d\udcd9',
	  'orthodox_cross':'\u2626\ufe0f',
	  'outbox_tray':'\ud83d\udce4',
	  'owl':'\ud83e\udd89',
	  'ox':'\ud83d\udc02',
	  'package':'\ud83d\udce6',
	  'page_facing_up':'\ud83d\udcc4',
	  'page_with_curl':'\ud83d\udcc3',
	  'pager':'\ud83d\udcdf',
	  'paintbrush':'\ud83d\udd8c',
	  'palm_tree':'\ud83c\udf34',
	  'pancakes':'\ud83e\udd5e',
	  'panda_face':'\ud83d\udc3c',
	  'paperclip':'\ud83d\udcce',
	  'paperclips':'\ud83d\udd87',
	  'parasol_on_ground':'\u26f1',
	  'parking':'\ud83c\udd7f\ufe0f',
	  'part_alternation_mark':'\u303d\ufe0f',
	  'partly_sunny':'\u26c5\ufe0f',
	  'passenger_ship':'\ud83d\udef3',
	  'passport_control':'\ud83d\udec2',
	  'pause_button':'\u23f8',
	  'peace_symbol':'\u262e\ufe0f',
	  'peach':'\ud83c\udf51',
	  'peanuts':'\ud83e\udd5c',
	  'pear':'\ud83c\udf50',
	  'pen':'\ud83d\udd8a',
	  'pencil2':'\u270f\ufe0f',
	  'penguin':'\ud83d\udc27',
	  'pensive':'\ud83d\ude14',
	  'performing_arts':'\ud83c\udfad',
	  'persevere':'\ud83d\ude23',
	  'person_fencing':'\ud83e\udd3a',
	  'pouting_woman':'\ud83d\ude4e',
	  'phone':'\u260e\ufe0f',
	  'pick':'\u26cf',
	  'pig':'\ud83d\udc37',
	  'pig2':'\ud83d\udc16',
	  'pig_nose':'\ud83d\udc3d',
	  'pill':'\ud83d\udc8a',
	  'pineapple':'\ud83c\udf4d',
	  'ping_pong':'\ud83c\udfd3',
	  'pisces':'\u2653\ufe0f',
	  'pizza':'\ud83c\udf55',
	  'place_of_worship':'\ud83d\uded0',
	  'plate_with_cutlery':'\ud83c\udf7d',
	  'play_or_pause_button':'\u23ef',
	  'point_down':'\ud83d\udc47',
	  'point_left':'\ud83d\udc48',
	  'point_right':'\ud83d\udc49',
	  'point_up':'\u261d\ufe0f',
	  'point_up_2':'\ud83d\udc46',
	  'police_car':'\ud83d\ude93',
	  'policewoman':'\ud83d\udc6e&zwj;\u2640\ufe0f',
	  'poodle':'\ud83d\udc29',
	  'popcorn':'\ud83c\udf7f',
	  'post_office':'\ud83c\udfe3',
	  'postal_horn':'\ud83d\udcef',
	  'postbox':'\ud83d\udcee',
	  'potable_water':'\ud83d\udeb0',
	  'potato':'\ud83e\udd54',
	  'pouch':'\ud83d\udc5d',
	  'poultry_leg':'\ud83c\udf57',
	  'pound':'\ud83d\udcb7',
	  'rage':'\ud83d\ude21',
	  'pouting_cat':'\ud83d\ude3e',
	  'pouting_man':'\ud83d\ude4e&zwj;\u2642\ufe0f',
	  'pray':'\ud83d\ude4f',
	  'prayer_beads':'\ud83d\udcff',
	  'pregnant_woman':'\ud83e\udd30',
	  'previous_track_button':'\u23ee',
	  'prince':'\ud83e\udd34',
	  'princess':'\ud83d\udc78',
	  'printer':'\ud83d\udda8',
	  'purple_heart':'\ud83d\udc9c',
	  'purse':'\ud83d\udc5b',
	  'pushpin':'\ud83d\udccc',
	  'put_litter_in_its_place':'\ud83d\udeae',
	  'question':'\u2753',
	  'rabbit':'\ud83d\udc30',
	  'rabbit2':'\ud83d\udc07',
	  'racehorse':'\ud83d\udc0e',
	  'racing_car':'\ud83c\udfce',
	  'radio':'\ud83d\udcfb',
	  'radio_button':'\ud83d\udd18',
	  'radioactive':'\u2622\ufe0f',
	  'railway_car':'\ud83d\ude83',
	  'railway_track':'\ud83d\udee4',
	  'rainbow':'\ud83c\udf08',
	  'rainbow_flag':'\ud83c\udff3\ufe0f&zwj;\ud83c\udf08',
	  'raised_back_of_hand':'\ud83e\udd1a',
	  'raised_hand_with_fingers_splayed':'\ud83d\udd90',
	  'raised_hands':'\ud83d\ude4c',
	  'raising_hand_woman':'\ud83d\ude4b',
	  'raising_hand_man':'\ud83d\ude4b&zwj;\u2642\ufe0f',
	  'ram':'\ud83d\udc0f',
	  'ramen':'\ud83c\udf5c',
	  'rat':'\ud83d\udc00',
	  'record_button':'\u23fa',
	  'recycle':'\u267b\ufe0f',
	  'red_circle':'\ud83d\udd34',
	  'registered':'\u00ae\ufe0f',
	  'relaxed':'\u263a\ufe0f',
	  'relieved':'\ud83d\ude0c',
	  'reminder_ribbon':'\ud83c\udf97',
	  'repeat':'\ud83d\udd01',
	  'repeat_one':'\ud83d\udd02',
	  'rescue_worker_helmet':'\u26d1',
	  'restroom':'\ud83d\udebb',
	  'revolving_hearts':'\ud83d\udc9e',
	  'rewind':'\u23ea',
	  'rhinoceros':'\ud83e\udd8f',
	  'ribbon':'\ud83c\udf80',
	  'rice':'\ud83c\udf5a',
	  'rice_ball':'\ud83c\udf59',
	  'rice_cracker':'\ud83c\udf58',
	  'rice_scene':'\ud83c\udf91',
	  'right_anger_bubble':'\ud83d\uddef',
	  'ring':'\ud83d\udc8d',
	  'robot':'\ud83e\udd16',
	  'rocket':'\ud83d\ude80',
	  'rofl':'\ud83e\udd23',
	  'roll_eyes':'\ud83d\ude44',
	  'roller_coaster':'\ud83c\udfa2',
	  'rooster':'\ud83d\udc13',
	  'rose':'\ud83c\udf39',
	  'rosette':'\ud83c\udff5',
	  'rotating_light':'\ud83d\udea8',
	  'round_pushpin':'\ud83d\udccd',
	  'rowing_man':'\ud83d\udea3',
	  'rowing_woman':'\ud83d\udea3&zwj;\u2640\ufe0f',
	  'rugby_football':'\ud83c\udfc9',
	  'running_man':'\ud83c\udfc3',
	  'running_shirt_with_sash':'\ud83c\udfbd',
	  'running_woman':'\ud83c\udfc3&zwj;\u2640\ufe0f',
	  'sa':'\ud83c\ude02\ufe0f',
	  'sagittarius':'\u2650\ufe0f',
	  'sake':'\ud83c\udf76',
	  'sandal':'\ud83d\udc61',
	  'santa':'\ud83c\udf85',
	  'satellite':'\ud83d\udce1',
	  'saxophone':'\ud83c\udfb7',
	  'school':'\ud83c\udfeb',
	  'school_satchel':'\ud83c\udf92',
	  'scissors':'\u2702\ufe0f',
	  'scorpion':'\ud83e\udd82',
	  'scorpius':'\u264f\ufe0f',
	  'scream':'\ud83d\ude31',
	  'scream_cat':'\ud83d\ude40',
	  'scroll':'\ud83d\udcdc',
	  'seat':'\ud83d\udcba',
	  'secret':'\u3299\ufe0f',
	  'see_no_evil':'\ud83d\ude48',
	  'seedling':'\ud83c\udf31',
	  'selfie':'\ud83e\udd33',
	  'shallow_pan_of_food':'\ud83e\udd58',
	  'shamrock':'\u2618\ufe0f',
	  'shark':'\ud83e\udd88',
	  'shaved_ice':'\ud83c\udf67',
	  'sheep':'\ud83d\udc11',
	  'shell':'\ud83d\udc1a',
	  'shield':'\ud83d\udee1',
	  'shinto_shrine':'\u26e9',
	  'ship':'\ud83d\udea2',
	  'shirt':'\ud83d\udc55',
	  'shopping':'\ud83d\udecd',
	  'shopping_cart':'\ud83d\uded2',
	  'shower':'\ud83d\udebf',
	  'shrimp':'\ud83e\udd90',
	  'signal_strength':'\ud83d\udcf6',
	  'six_pointed_star':'\ud83d\udd2f',
	  'ski':'\ud83c\udfbf',
	  'skier':'\u26f7',
	  'skull':'\ud83d\udc80',
	  'skull_and_crossbones':'\u2620\ufe0f',
	  'sleeping':'\ud83d\ude34',
	  'sleeping_bed':'\ud83d\udecc',
	  'sleepy':'\ud83d\ude2a',
	  'slightly_frowning_face':'\ud83d\ude41',
	  'slightly_smiling_face':'\ud83d\ude42',
	  'slot_machine':'\ud83c\udfb0',
	  'small_airplane':'\ud83d\udee9',
	  'small_blue_diamond':'\ud83d\udd39',
	  'small_orange_diamond':'\ud83d\udd38',
	  'small_red_triangle':'\ud83d\udd3a',
	  'small_red_triangle_down':'\ud83d\udd3b',
	  'smile':'\ud83d\ude04',
	  'smile_cat':'\ud83d\ude38',
	  'smiley':'\ud83d\ude03',
	  'smiley_cat':'\ud83d\ude3a',
	  'smiling_imp':'\ud83d\ude08',
	  'smirk':'\ud83d\ude0f',
	  'smirk_cat':'\ud83d\ude3c',
	  'smoking':'\ud83d\udeac',
	  'snail':'\ud83d\udc0c',
	  'snake':'\ud83d\udc0d',
	  'sneezing_face':'\ud83e\udd27',
	  'snowboarder':'\ud83c\udfc2',
	  'snowflake':'\u2744\ufe0f',
	  'snowman':'\u26c4\ufe0f',
	  'snowman_with_snow':'\u2603\ufe0f',
	  'sob':'\ud83d\ude2d',
	  'soccer':'\u26bd\ufe0f',
	  'soon':'\ud83d\udd1c',
	  'sos':'\ud83c\udd98',
	  'sound':'\ud83d\udd09',
	  'space_invader':'\ud83d\udc7e',
	  'spades':'\u2660\ufe0f',
	  'spaghetti':'\ud83c\udf5d',
	  'sparkle':'\u2747\ufe0f',
	  'sparkler':'\ud83c\udf87',
	  'sparkles':'\u2728',
	  'sparkling_heart':'\ud83d\udc96',
	  'speak_no_evil':'\ud83d\ude4a',
	  'speaker':'\ud83d\udd08',
	  'speaking_head':'\ud83d\udde3',
	  'speech_balloon':'\ud83d\udcac',
	  'speedboat':'\ud83d\udea4',
	  'spider':'\ud83d\udd77',
	  'spider_web':'\ud83d\udd78',
	  'spiral_calendar':'\ud83d\uddd3',
	  'spiral_notepad':'\ud83d\uddd2',
	  'spoon':'\ud83e\udd44',
	  'squid':'\ud83e\udd91',
	  'stadium':'\ud83c\udfdf',
	  'star':'\u2b50\ufe0f',
	  'star2':'\ud83c\udf1f',
	  'star_and_crescent':'\u262a\ufe0f',
	  'star_of_david':'\u2721\ufe0f',
	  'stars':'\ud83c\udf20',
	  'station':'\ud83d\ude89',
	  'statue_of_liberty':'\ud83d\uddfd',
	  'steam_locomotive':'\ud83d\ude82',
	  'stew':'\ud83c\udf72',
	  'stop_button':'\u23f9',
	  'stop_sign':'\ud83d\uded1',
	  'stopwatch':'\u23f1',
	  'straight_ruler':'\ud83d\udccf',
	  'strawberry':'\ud83c\udf53',
	  'stuck_out_tongue':'\ud83d\ude1b',
	  'stuck_out_tongue_closed_eyes':'\ud83d\ude1d',
	  'stuck_out_tongue_winking_eye':'\ud83d\ude1c',
	  'studio_microphone':'\ud83c\udf99',
	  'stuffed_flatbread':'\ud83e\udd59',
	  'sun_behind_large_cloud':'\ud83c\udf25',
	  'sun_behind_rain_cloud':'\ud83c\udf26',
	  'sun_behind_small_cloud':'\ud83c\udf24',
	  'sun_with_face':'\ud83c\udf1e',
	  'sunflower':'\ud83c\udf3b',
	  'sunglasses':'\ud83d\ude0e',
	  'sunny':'\u2600\ufe0f',
	  'sunrise':'\ud83c\udf05',
	  'sunrise_over_mountains':'\ud83c\udf04',
	  'surfing_man':'\ud83c\udfc4',
	  'surfing_woman':'\ud83c\udfc4&zwj;\u2640\ufe0f',
	  'sushi':'\ud83c\udf63',
	  'suspension_railway':'\ud83d\ude9f',
	  'sweat':'\ud83d\ude13',
	  'sweat_drops':'\ud83d\udca6',
	  'sweat_smile':'\ud83d\ude05',
	  'sweet_potato':'\ud83c\udf60',
	  'swimming_man':'\ud83c\udfca',
	  'swimming_woman':'\ud83c\udfca&zwj;\u2640\ufe0f',
	  'symbols':'\ud83d\udd23',
	  'synagogue':'\ud83d\udd4d',
	  'syringe':'\ud83d\udc89',
	  'taco':'\ud83c\udf2e',
	  'tada':'\ud83c\udf89',
	  'tanabata_tree':'\ud83c\udf8b',
	  'taurus':'\u2649\ufe0f',
	  'taxi':'\ud83d\ude95',
	  'tea':'\ud83c\udf75',
	  'telephone_receiver':'\ud83d\udcde',
	  'telescope':'\ud83d\udd2d',
	  'tennis':'\ud83c\udfbe',
	  'tent':'\u26fa\ufe0f',
	  'thermometer':'\ud83c\udf21',
	  'thinking':'\ud83e\udd14',
	  'thought_balloon':'\ud83d\udcad',
	  'ticket':'\ud83c\udfab',
	  'tickets':'\ud83c\udf9f',
	  'tiger':'\ud83d\udc2f',
	  'tiger2':'\ud83d\udc05',
	  'timer_clock':'\u23f2',
	  'tipping_hand_man':'\ud83d\udc81&zwj;\u2642\ufe0f',
	  'tired_face':'\ud83d\ude2b',
	  'tm':'\u2122\ufe0f',
	  'toilet':'\ud83d\udebd',
	  'tokyo_tower':'\ud83d\uddfc',
	  'tomato':'\ud83c\udf45',
	  'tongue':'\ud83d\udc45',
	  'top':'\ud83d\udd1d',
	  'tophat':'\ud83c\udfa9',
	  'tornado':'\ud83c\udf2a',
	  'trackball':'\ud83d\uddb2',
	  'tractor':'\ud83d\ude9c',
	  'traffic_light':'\ud83d\udea5',
	  'train':'\ud83d\ude8b',
	  'train2':'\ud83d\ude86',
	  'tram':'\ud83d\ude8a',
	  'triangular_flag_on_post':'\ud83d\udea9',
	  'triangular_ruler':'\ud83d\udcd0',
	  'trident':'\ud83d\udd31',
	  'triumph':'\ud83d\ude24',
	  'trolleybus':'\ud83d\ude8e',
	  'trophy':'\ud83c\udfc6',
	  'tropical_drink':'\ud83c\udf79',
	  'tropical_fish':'\ud83d\udc20',
	  'truck':'\ud83d\ude9a',
	  'trumpet':'\ud83c\udfba',
	  'tulip':'\ud83c\udf37',
	  'tumbler_glass':'\ud83e\udd43',
	  'turkey':'\ud83e\udd83',
	  'turtle':'\ud83d\udc22',
	  'tv':'\ud83d\udcfa',
	  'twisted_rightwards_arrows':'\ud83d\udd00',
	  'two_hearts':'\ud83d\udc95',
	  'two_men_holding_hands':'\ud83d\udc6c',
	  'two_women_holding_hands':'\ud83d\udc6d',
	  'u5272':'\ud83c\ude39',
	  'u5408':'\ud83c\ude34',
	  'u55b6':'\ud83c\ude3a',
	  'u6307':'\ud83c\ude2f\ufe0f',
	  'u6708':'\ud83c\ude37\ufe0f',
	  'u6709':'\ud83c\ude36',
	  'u6e80':'\ud83c\ude35',
	  'u7121':'\ud83c\ude1a\ufe0f',
	  'u7533':'\ud83c\ude38',
	  'u7981':'\ud83c\ude32',
	  'u7a7a':'\ud83c\ude33',
	  'umbrella':'\u2614\ufe0f',
	  'unamused':'\ud83d\ude12',
	  'underage':'\ud83d\udd1e',
	  'unicorn':'\ud83e\udd84',
	  'unlock':'\ud83d\udd13',
	  'up':'\ud83c\udd99',
	  'upside_down_face':'\ud83d\ude43',
	  'v':'\u270c\ufe0f',
	  'vertical_traffic_light':'\ud83d\udea6',
	  'vhs':'\ud83d\udcfc',
	  'vibration_mode':'\ud83d\udcf3',
	  'video_camera':'\ud83d\udcf9',
	  'video_game':'\ud83c\udfae',
	  'violin':'\ud83c\udfbb',
	  'virgo':'\u264d\ufe0f',
	  'volcano':'\ud83c\udf0b',
	  'volleyball':'\ud83c\udfd0',
	  'vs':'\ud83c\udd9a',
	  'vulcan_salute':'\ud83d\udd96',
	  'walking_man':'\ud83d\udeb6',
	  'walking_woman':'\ud83d\udeb6&zwj;\u2640\ufe0f',
	  'waning_crescent_moon':'\ud83c\udf18',
	  'waning_gibbous_moon':'\ud83c\udf16',
	  'warning':'\u26a0\ufe0f',
	  'wastebasket':'\ud83d\uddd1',
	  'watch':'\u231a\ufe0f',
	  'water_buffalo':'\ud83d\udc03',
	  'watermelon':'\ud83c\udf49',
	  'wave':'\ud83d\udc4b',
	  'wavy_dash':'\u3030\ufe0f',
	  'waxing_crescent_moon':'\ud83c\udf12',
	  'wc':'\ud83d\udebe',
	  'weary':'\ud83d\ude29',
	  'wedding':'\ud83d\udc92',
	  'weight_lifting_man':'\ud83c\udfcb\ufe0f',
	  'weight_lifting_woman':'\ud83c\udfcb\ufe0f&zwj;\u2640\ufe0f',
	  'whale':'\ud83d\udc33',
	  'whale2':'\ud83d\udc0b',
	  'wheel_of_dharma':'\u2638\ufe0f',
	  'wheelchair':'\u267f\ufe0f',
	  'white_check_mark':'\u2705',
	  'white_circle':'\u26aa\ufe0f',
	  'white_flag':'\ud83c\udff3\ufe0f',
	  'white_flower':'\ud83d\udcae',
	  'white_large_square':'\u2b1c\ufe0f',
	  'white_medium_small_square':'\u25fd\ufe0f',
	  'white_medium_square':'\u25fb\ufe0f',
	  'white_small_square':'\u25ab\ufe0f',
	  'white_square_button':'\ud83d\udd33',
	  'wilted_flower':'\ud83e\udd40',
	  'wind_chime':'\ud83c\udf90',
	  'wind_face':'\ud83c\udf2c',
	  'wine_glass':'\ud83c\udf77',
	  'wink':'\ud83d\ude09',
	  'wolf':'\ud83d\udc3a',
	  'woman':'\ud83d\udc69',
	  'woman_artist':'\ud83d\udc69&zwj;\ud83c\udfa8',
	  'woman_astronaut':'\ud83d\udc69&zwj;\ud83d\ude80',
	  'woman_cartwheeling':'\ud83e\udd38&zwj;\u2640\ufe0f',
	  'woman_cook':'\ud83d\udc69&zwj;\ud83c\udf73',
	  'woman_facepalming':'\ud83e\udd26&zwj;\u2640\ufe0f',
	  'woman_factory_worker':'\ud83d\udc69&zwj;\ud83c\udfed',
	  'woman_farmer':'\ud83d\udc69&zwj;\ud83c\udf3e',
	  'woman_firefighter':'\ud83d\udc69&zwj;\ud83d\ude92',
	  'woman_health_worker':'\ud83d\udc69&zwj;\u2695\ufe0f',
	  'woman_judge':'\ud83d\udc69&zwj;\u2696\ufe0f',
	  'woman_juggling':'\ud83e\udd39&zwj;\u2640\ufe0f',
	  'woman_mechanic':'\ud83d\udc69&zwj;\ud83d\udd27',
	  'woman_office_worker':'\ud83d\udc69&zwj;\ud83d\udcbc',
	  'woman_pilot':'\ud83d\udc69&zwj;\u2708\ufe0f',
	  'woman_playing_handball':'\ud83e\udd3e&zwj;\u2640\ufe0f',
	  'woman_playing_water_polo':'\ud83e\udd3d&zwj;\u2640\ufe0f',
	  'woman_scientist':'\ud83d\udc69&zwj;\ud83d\udd2c',
	  'woman_shrugging':'\ud83e\udd37&zwj;\u2640\ufe0f',
	  'woman_singer':'\ud83d\udc69&zwj;\ud83c\udfa4',
	  'woman_student':'\ud83d\udc69&zwj;\ud83c\udf93',
	  'woman_teacher':'\ud83d\udc69&zwj;\ud83c\udfeb',
	  'woman_technologist':'\ud83d\udc69&zwj;\ud83d\udcbb',
	  'woman_with_turban':'\ud83d\udc73&zwj;\u2640\ufe0f',
	  'womans_clothes':'\ud83d\udc5a',
	  'womans_hat':'\ud83d\udc52',
	  'women_wrestling':'\ud83e\udd3c&zwj;\u2640\ufe0f',
	  'womens':'\ud83d\udeba',
	  'world_map':'\ud83d\uddfa',
	  'worried':'\ud83d\ude1f',
	  'wrench':'\ud83d\udd27',
	  'writing_hand':'\u270d\ufe0f',
	  'x':'\u274c',
	  'yellow_heart':'\ud83d\udc9b',
	  'yen':'\ud83d\udcb4',
	  'yin_yang':'\u262f\ufe0f',
	  'yum':'\ud83d\ude0b',
	  'zap':'\u26a1\ufe0f',
	  'zipper_mouth_face':'\ud83e\udd10',
	  'zzz':'\ud83d\udca4',

	  /* special emojis :P */
	  'octocat':  '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
	  'showdown': '<span style="font-family: \'Anonymous Pro\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>'
	};

	/**
	 * Created by Estevao on 31-05-2015.
	 */

	/**
	 * Showdown Converter class
	 * @class
	 * @param {object} [converterOptions]
	 * @returns {Converter}
	 */
	showdown.Converter = function (converterOptions) {

	  var
	      /**
	       * Options used by this converter
	       * @private
	       * @type {{}}
	       */
	      options = {},

	      /**
	       * Language extensions used by this converter
	       * @private
	       * @type {Array}
	       */
	      langExtensions = [],

	      /**
	       * Output modifiers extensions used by this converter
	       * @private
	       * @type {Array}
	       */
	      outputModifiers = [],

	      /**
	       * Event listeners
	       * @private
	       * @type {{}}
	       */
	      listeners = {},

	      /**
	       * The flavor set in this converter
	       */
	      setConvFlavor = setFlavor,

	    /**
	     * Metadata of the document
	     * @type {{parsed: {}, raw: string, format: string}}
	     */
	      metadata = {
	        parsed: {},
	        raw: '',
	        format: ''
	      };

	  _constructor();

	  /**
	   * Converter constructor
	   * @private
	   */
	  function _constructor () {
	    converterOptions = converterOptions || {};

	    for (var gOpt in globalOptions) {
	      if (globalOptions.hasOwnProperty(gOpt)) {
	        options[gOpt] = globalOptions[gOpt];
	      }
	    }

	    // Merge options
	    if (typeof converterOptions === 'object') {
	      for (var opt in converterOptions) {
	        if (converterOptions.hasOwnProperty(opt)) {
	          options[opt] = converterOptions[opt];
	        }
	      }
	    } else {
	      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +
	      ' was passed instead.');
	    }

	    if (options.extensions) {
	      showdown.helper.forEach(options.extensions, _parseExtension);
	    }
	  }

	  /**
	   * Parse extension
	   * @param {*} ext
	   * @param {string} [name='']
	   * @private
	   */
	  function _parseExtension (ext, name) {

	    name = name || null;
	    // If it's a string, the extension was previously loaded
	    if (showdown.helper.isString(ext)) {
	      ext = showdown.helper.stdExtName(ext);
	      name = ext;

	      // LEGACY_SUPPORT CODE
	      if (showdown.extensions[ext]) {
	        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +
	          'Please inform the developer that the extension should be updated!');
	        legacyExtensionLoading(showdown.extensions[ext], ext);
	        return;
	      // END LEGACY SUPPORT CODE

	      } else if (!showdown.helper.isUndefined(extensions[ext])) {
	        ext = extensions[ext];

	      } else {
	        throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
	      }
	    }

	    if (typeof ext === 'function') {
	      ext = ext();
	    }

	    if (!showdown.helper.isArray(ext)) {
	      ext = [ext];
	    }

	    var validExt = validate(ext, name);
	    if (!validExt.valid) {
	      throw Error(validExt.error);
	    }

	    for (var i = 0; i < ext.length; ++i) {
	      switch (ext[i].type) {

	        case 'lang':
	          langExtensions.push(ext[i]);
	          break;

	        case 'output':
	          outputModifiers.push(ext[i]);
	          break;
	      }
	      if (ext[i].hasOwnProperty('listeners')) {
	        for (var ln in ext[i].listeners) {
	          if (ext[i].listeners.hasOwnProperty(ln)) {
	            listen(ln, ext[i].listeners[ln]);
	          }
	        }
	      }
	    }

	  }

	  /**
	   * LEGACY_SUPPORT
	   * @param {*} ext
	   * @param {string} name
	   */
	  function legacyExtensionLoading (ext, name) {
	    if (typeof ext === 'function') {
	      ext = ext(new showdown.Converter());
	    }
	    if (!showdown.helper.isArray(ext)) {
	      ext = [ext];
	    }
	    var valid = validate(ext, name);

	    if (!valid.valid) {
	      throw Error(valid.error);
	    }

	    for (var i = 0; i < ext.length; ++i) {
	      switch (ext[i].type) {
	        case 'lang':
	          langExtensions.push(ext[i]);
	          break;
	        case 'output':
	          outputModifiers.push(ext[i]);
	          break;
	        default:// should never reach here
	          throw Error('Extension loader error: Type unrecognized!!!');
	      }
	    }
	  }

	  /**
	   * Listen to an event
	   * @param {string} name
	   * @param {function} callback
	   */
	  function listen (name, callback) {
	    if (!showdown.helper.isString(name)) {
	      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');
	    }

	    if (typeof callback !== 'function') {
	      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');
	    }

	    if (!listeners.hasOwnProperty(name)) {
	      listeners[name] = [];
	    }
	    listeners[name].push(callback);
	  }

	  function rTrimInputText (text) {
	    var rsp = text.match(/^\s*/)[0].length,
	        rgx = new RegExp('^\\s{0,' + rsp + '}', 'gm');
	    return text.replace(rgx, '');
	  }

	  /**
	   * Dispatch an event
	   * @private
	   * @param {string} evtName Event name
	   * @param {string} text Text
	   * @param {{}} options Converter Options
	   * @param {{}} globals
	   * @returns {string}
	   */
	  this._dispatch = function dispatch (evtName, text, options, globals) {
	    if (listeners.hasOwnProperty(evtName)) {
	      for (var ei = 0; ei < listeners[evtName].length; ++ei) {
	        var nText = listeners[evtName][ei](evtName, text, this, options, globals);
	        if (nText && typeof nText !== 'undefined') {
	          text = nText;
	        }
	      }
	    }
	    return text;
	  };

	  /**
	   * Listen to an event
	   * @param {string} name
	   * @param {function} callback
	   * @returns {showdown.Converter}
	   */
	  this.listen = function (name, callback) {
	    listen(name, callback);
	    return this;
	  };

	  /**
	   * Converts a markdown string into HTML
	   * @param {string} text
	   * @returns {*}
	   */
	  this.makeHtml = function (text) {
	    //check if text is not falsy
	    if (!text) {
	      return text;
	    }

	    var globals = {
	      gHtmlBlocks:     [],
	      gHtmlMdBlocks:   [],
	      gHtmlSpans:      [],
	      gUrls:           {},
	      gTitles:         {},
	      gDimensions:     {},
	      gListLevel:      0,
	      hashLinkCounts:  {},
	      langExtensions:  langExtensions,
	      outputModifiers: outputModifiers,
	      converter:       this,
	      ghCodeBlocks:    [],
	      metadata: {
	        parsed: {},
	        raw: '',
	        format: ''
	      }
	    };

	    // This lets us use ¨ trema as an escape char to avoid md5 hashes
	    // The choice of character is arbitrary; anything that isn't
	    // magic in Markdown will work.
	    text = text.replace(/¨/g, '¨T');

	    // Replace $ with ¨D
	    // RegExp interprets $ as a special character
	    // when it's in a replacement string
	    text = text.replace(/\$/g, '¨D');

	    // Standardize line endings
	    text = text.replace(/\r\n/g, '\n'); // DOS to Unix
	    text = text.replace(/\r/g, '\n'); // Mac to Unix

	    // Stardardize line spaces
	    text = text.replace(/\u00A0/g, '&nbsp;');

	    if (options.smartIndentationFix) {
	      text = rTrimInputText(text);
	    }

	    // Make sure text begins and ends with a couple of newlines:
	    text = '\n\n' + text + '\n\n';

	    // detab
	    text = showdown.subParser('detab')(text, options, globals);

	    /**
	     * Strip any lines consisting only of spaces and tabs.
	     * This makes subsequent regexs easier to write, because we can
	     * match consecutive blank lines with /\n+/ instead of something
	     * contorted like /[ \t]*\n+/
	     */
	    text = text.replace(/^[ \t]+$/mg, '');

	    //run languageExtensions
	    showdown.helper.forEach(langExtensions, function (ext) {
	      text = showdown.subParser('runExtension')(ext, text, options, globals);
	    });

	    // run the sub parsers
	    text = showdown.subParser('metadata')(text, options, globals);
	    text = showdown.subParser('hashPreCodeTags')(text, options, globals);
	    text = showdown.subParser('githubCodeBlocks')(text, options, globals);
	    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
	    text = showdown.subParser('hashCodeTags')(text, options, globals);
	    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);
	    text = showdown.subParser('blockGamut')(text, options, globals);
	    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);
	    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);

	    // attacklab: Restore dollar signs
	    text = text.replace(/¨D/g, '$$');

	    // attacklab: Restore tremas
	    text = text.replace(/¨T/g, '¨');

	    // render a complete html document instead of a partial if the option is enabled
	    text = showdown.subParser('completeHTMLDocument')(text, options, globals);

	    // Run output modifiers
	    showdown.helper.forEach(outputModifiers, function (ext) {
	      text = showdown.subParser('runExtension')(ext, text, options, globals);
	    });

	    // update metadata
	    metadata = globals.metadata;
	    return text;
	  };

	  /**
	   * Converts an HTML string into a markdown string
	   * @param src
	   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.
	   * @returns {string}
	   */
	  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {

	    // replace \r\n with \n
	    src = src.replace(/\r\n/g, '\n');
	    src = src.replace(/\r/g, '\n'); // old macs

	    // due to an edge case, we need to find this: > <
	    // to prevent removing of non silent white spaces
	    // ex: <em>this is</em> <strong>sparta</strong>
	    src = src.replace(/>[ \t]+</, '>¨NBSP;<');

	    if (!HTMLParser) {
	      if (window && window.document) {
	        HTMLParser = window.document;
	      } else {
	        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');
	      }
	    }

	    var doc = HTMLParser.createElement('div');
	    doc.innerHTML = src;

	    var globals = {
	      preList: substitutePreCodeTags(doc)
	    };

	    // remove all newlines and collapse spaces
	    clean(doc);

	    // some stuff, like accidental reference links must now be escaped
	    // TODO
	    // doc.innerHTML = doc.innerHTML.replace(/\[[\S\t ]]/);

	    var nodes = doc.childNodes,
	        mdDoc = '';

	    for (var i = 0; i < nodes.length; i++) {
	      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);
	    }

	    function clean (node) {
	      for (var n = 0; n < node.childNodes.length; ++n) {
	        var child = node.childNodes[n];
	        if (child.nodeType === 3) {
	          if (!/\S/.test(child.nodeValue)) {
	            node.removeChild(child);
	            --n;
	          } else {
	            child.nodeValue = child.nodeValue.split('\n').join(' ');
	            child.nodeValue = child.nodeValue.replace(/(\s)+/g, '$1');
	          }
	        } else if (child.nodeType === 1) {
	          clean(child);
	        }
	      }
	    }

	    // find all pre tags and replace contents with placeholder
	    // we need this so that we can remove all indentation from html
	    // to ease up parsing
	    function substitutePreCodeTags (doc) {

	      var pres = doc.querySelectorAll('pre'),
	          presPH = [];

	      for (var i = 0; i < pres.length; ++i) {

	        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {
	          var content = pres[i].firstChild.innerHTML.trim(),
	              language = pres[i].firstChild.getAttribute('data-language') || '';

	          // if data-language attribute is not defined, then we look for class language-*
	          if (language === '') {
	            var classes = pres[i].firstChild.className.split(' ');
	            for (var c = 0; c < classes.length; ++c) {
	              var matches = classes[c].match(/^language-(.+)$/);
	              if (matches !== null) {
	                language = matches[1];
	                break;
	              }
	            }
	          }

	          // unescape html entities in content
	          content = showdown.helper.unescapeHTMLEntities(content);

	          presPH.push(content);
	          pres[i].outerHTML = '<precode language="' + language + '" precodenum="' + i.toString() + '"></precode>';
	        } else {
	          presPH.push(pres[i].innerHTML);
	          pres[i].innerHTML = '';
	          pres[i].setAttribute('prenum', i.toString());
	        }
	      }
	      return presPH;
	    }

	    return mdDoc;
	  };

	  /**
	   * Set an option of this Converter instance
	   * @param {string} key
	   * @param {*} value
	   */
	  this.setOption = function (key, value) {
	    options[key] = value;
	  };

	  /**
	   * Get the option of this Converter instance
	   * @param {string} key
	   * @returns {*}
	   */
	  this.getOption = function (key) {
	    return options[key];
	  };

	  /**
	   * Get the options of this Converter instance
	   * @returns {{}}
	   */
	  this.getOptions = function () {
	    return options;
	  };

	  /**
	   * Add extension to THIS converter
	   * @param {{}} extension
	   * @param {string} [name=null]
	   */
	  this.addExtension = function (extension, name) {
	    name = name || null;
	    _parseExtension(extension, name);
	  };

	  /**
	   * Use a global registered extension with THIS converter
	   * @param {string} extensionName Name of the previously registered extension
	   */
	  this.useExtension = function (extensionName) {
	    _parseExtension(extensionName);
	  };

	  /**
	   * Set the flavor THIS converter should use
	   * @param {string} name
	   */
	  this.setFlavor = function (name) {
	    if (!flavor.hasOwnProperty(name)) {
	      throw Error(name + ' flavor was not found');
	    }
	    var preset = flavor[name];
	    setConvFlavor = name;
	    for (var option in preset) {
	      if (preset.hasOwnProperty(option)) {
	        options[option] = preset[option];
	      }
	    }
	  };

	  /**
	   * Get the currently set flavor of this converter
	   * @returns {string}
	   */
	  this.getFlavor = function () {
	    return setConvFlavor;
	  };

	  /**
	   * Remove an extension from THIS converter.
	   * Note: This is a costly operation. It's better to initialize a new converter
	   * and specify the extensions you wish to use
	   * @param {Array} extension
	   */
	  this.removeExtension = function (extension) {
	    if (!showdown.helper.isArray(extension)) {
	      extension = [extension];
	    }
	    for (var a = 0; a < extension.length; ++a) {
	      var ext = extension[a];
	      for (var i = 0; i < langExtensions.length; ++i) {
	        if (langExtensions[i] === ext) {
	          langExtensions[i].splice(i, 1);
	        }
	      }
	      for (var ii = 0; ii < outputModifiers.length; ++i) {
	        if (outputModifiers[ii] === ext) {
	          outputModifiers[ii].splice(i, 1);
	        }
	      }
	    }
	  };

	  /**
	   * Get all extension of THIS converter
	   * @returns {{language: Array, output: Array}}
	   */
	  this.getAllExtensions = function () {
	    return {
	      language: langExtensions,
	      output: outputModifiers
	    };
	  };

	  /**
	   * Get the metadata of the previously parsed document
	   * @param raw
	   * @returns {string|{}}
	   */
	  this.getMetadata = function (raw) {
	    if (raw) {
	      return metadata.raw;
	    } else {
	      return metadata.parsed;
	    }
	  };

	  /**
	   * Get the metadata format of the previously parsed document
	   * @returns {string}
	   */
	  this.getMetadataFormat = function () {
	    return metadata.format;
	  };

	  /**
	   * Private: set a single key, value metadata pair
	   * @param {string} key
	   * @param {string} value
	   */
	  this._setMetadataPair = function (key, value) {
	    metadata.parsed[key] = value;
	  };

	  /**
	   * Private: set metadata format
	   * @param {string} format
	   */
	  this._setMetadataFormat = function (format) {
	    metadata.format = format;
	  };

	  /**
	   * Private: set metadata raw text
	   * @param {string} raw
	   */
	  this._setMetadataRaw = function (raw) {
	    metadata.raw = raw;
	  };
	};

	/**
	 * Turn Markdown link shortcuts into XHTML <a> tags.
	 */
	showdown.subParser('anchors', function (text, options, globals) {

	  text = globals.converter._dispatch('anchors.before', text, options, globals);

	  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {
	    if (showdown.helper.isUndefined(title)) {
	      title = '';
	    }
	    linkId = linkId.toLowerCase();

	    // Special case for explicit empty url
	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
	      url = '';
	    } else if (!url) {
	      if (!linkId) {
	        // lower-case and turn embedded newlines into spaces
	        linkId = linkText.toLowerCase().replace(/ ?\n/g, ' ');
	      }
	      url = '#' + linkId;

	      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {
	        url = globals.gUrls[linkId];
	        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {
	          title = globals.gTitles[linkId];
	        }
	      } else {
	        return wholeMatch;
	      }
	    }

	    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance
	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);

	    var result = '<a href="' + url + '"';

	    if (title !== '' && title !== null) {
	      title = title.replace(/"/g, '&quot;');
	      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance
	      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
	      result += ' title="' + title + '"';
	    }

	    // optionLinksInNewWindow only applies
	    // to external links. Hash links (#) open in same page
	    if (options.openLinksInNewWindow && !/^#/.test(url)) {
	      // escaped _
	      result += ' target="¨E95Eblank"';
	    }

	    result += '>' + linkText + '</a>';

	    return result;
	  };

	  // First, handle reference-style links: [link text] [id]
	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);

	  // Next, inline-style links: [link text](url "optional title")
	  // cases with crazy urls like ./image/cat1).png
	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
	    writeAnchorTag);

	  // normal cases
	  text = text.replace(/\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
	                      writeAnchorTag);

	  // handle reference-style shortcuts: [link text]
	  // These must come last in case you've also got [link test][1]
	  // or [link test](/foo)
	  text = text.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);

	  // Lastly handle GithubMentions if option is enabled
	  if (options.ghMentions) {
	    text = text.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function (wm, st, escape, mentions, username) {
	      if (escape === '\\') {
	        return st + mentions;
	      }

	      //check if options.ghMentionsLink is a string
	      if (!showdown.helper.isString(options.ghMentionsLink)) {
	        throw new Error('ghMentionsLink option must be a string');
	      }
	      var lnk = options.ghMentionsLink.replace(/\{u}/g, username),
	          target = '';
	      if (options.openLinksInNewWindow) {
	        target = ' target="¨E95Eblank"';
	      }
	      return st + '<a href="' + lnk + '"' + target + '>' + mentions + '</a>';
	    });
	  }

	  text = globals.converter._dispatch('anchors.after', text, options, globals);
	  return text;
	});

	// url allowed chars [a-z\d_.~:/?#[]@!$&'()*+,;=-]

	var simpleURLRegex  = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi,
	    simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi,
	    delimUrlRegex   = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi,
	    simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi,
	    delimMailRegex  = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi,

	    replaceLink = function (options) {
	      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
	        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
	        var lnkTxt = link,
	            append = '',
	            target = '',
	            lmc    = leadingMagicChars || '',
	            tmc    = trailingMagicChars || '';
	        if (/^www\./i.test(link)) {
	          link = link.replace(/^www\./i, 'http://www.');
	        }
	        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
	          append = trailingPunctuation;
	        }
	        if (options.openLinksInNewWindow) {
	          target = ' target="¨E95Eblank"';
	        }
	        return lmc + '<a href="' + link + '"' + target + '>' + lnkTxt + '</a>' + append + tmc;
	      };
	    },

	    replaceMail = function (options, globals) {
	      return function (wholeMatch, b, mail) {
	        var href = 'mailto:';
	        b = b || '';
	        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);
	        if (options.encodeEmails) {
	          href = showdown.helper.encodeEmailAddress(href + mail);
	          mail = showdown.helper.encodeEmailAddress(mail);
	        } else {
	          href = href + mail;
	        }
	        return b + '<a href="' + href + '">' + mail + '</a>';
	      };
	    };

	showdown.subParser('autoLinks', function (text, options, globals) {

	  text = globals.converter._dispatch('autoLinks.before', text, options, globals);

	  text = text.replace(delimUrlRegex, replaceLink(options));
	  text = text.replace(delimMailRegex, replaceMail(options, globals));

	  text = globals.converter._dispatch('autoLinks.after', text, options, globals);

	  return text;
	});

	showdown.subParser('simplifiedAutoLinks', function (text, options, globals) {

	  if (!options.simplifiedAutoLink) {
	    return text;
	  }

	  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);

	  if (options.excludeTrailingPunctuationFromURLs) {
	    text = text.replace(simpleURLRegex2, replaceLink(options));
	  } else {
	    text = text.replace(simpleURLRegex, replaceLink(options));
	  }
	  text = text.replace(simpleMailRegex, replaceMail(options, globals));

	  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);

	  return text;
	});

	/**
	 * These are all the transformations that form block-level
	 * tags like paragraphs, headers, and list items.
	 */
	showdown.subParser('blockGamut', function (text, options, globals) {

	  text = globals.converter._dispatch('blockGamut.before', text, options, globals);

	  // we parse blockquotes first so that we can have headings and hrs
	  // inside blockquotes
	  text = showdown.subParser('blockQuotes')(text, options, globals);
	  text = showdown.subParser('headers')(text, options, globals);

	  // Do Horizontal Rules:
	  text = showdown.subParser('horizontalRule')(text, options, globals);

	  text = showdown.subParser('lists')(text, options, globals);
	  text = showdown.subParser('codeBlocks')(text, options, globals);
	  text = showdown.subParser('tables')(text, options, globals);

	  // We already ran _HashHTMLBlocks() before, in Markdown(), but that
	  // was to escape raw HTML in the original Markdown source. This time,
	  // we're escaping the markup we've just created, so that we don't wrap
	  // <p> tags around block-level tags.
	  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);
	  text = showdown.subParser('paragraphs')(text, options, globals);

	  text = globals.converter._dispatch('blockGamut.after', text, options, globals);

	  return text;
	});

	showdown.subParser('blockQuotes', function (text, options, globals) {

	  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);

	  // add a couple extra lines after the text and endtext mark
	  text = text + '\n\n';

	  var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;

	  if (options.splitAdjacentBlockquotes) {
	    rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
	  }

	  text = text.replace(rgx, function (bq) {
	    // attacklab: hack around Konqueror 3.5.4 bug:
	    // "----------bug".replace(/^-/g,"") == "bug"
	    bq = bq.replace(/^[ \t]*>[ \t]?/gm, ''); // trim one level of quoting

	    // attacklab: clean up hack
	    bq = bq.replace(/¨0/g, '');

	    bq = bq.replace(/^[ \t]+$/gm, ''); // trim whitespace-only lines
	    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);
	    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse

	    bq = bq.replace(/(^|\n)/g, '$1  ');
	    // These leading spaces screw with <pre> content, so we need to fix that:
	    bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function (wholeMatch, m1) {
	      var pre = m1;
	      // attacklab: hack around Konqueror 3.5.4 bug:
	      pre = pre.replace(/^  /mg, '¨0');
	      pre = pre.replace(/¨0/g, '');
	      return pre;
	    });

	    return showdown.subParser('hashBlock')('<blockquote>\n' + bq + '\n</blockquote>', options, globals);
	  });

	  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);
	  return text;
	});

	/**
	 * Process Markdown `<pre><code>` blocks.
	 */
	showdown.subParser('codeBlocks', function (text, options, globals) {

	  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);

	  // sentinel workarounds for lack of \A and \Z, safari\khtml bug
	  text += '¨0';

	  var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
	  text = text.replace(pattern, function (wholeMatch, m1, m2) {
	    var codeblock = m1,
	        nextChar = m2,
	        end = '\n';

	    codeblock = showdown.subParser('outdent')(codeblock, options, globals);
	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing newlines

	    if (options.omitExtraWLInCodeBlocks) {
	      end = '';
	    }

	    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';

	    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;
	  });

	  // strip sentinel
	  text = text.replace(/¨0/, '');

	  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);
	  return text;
	});

	/**
	 *
	 *   *  Backtick quotes are used for <code></code> spans.
	 *
	 *   *  You can use multiple backticks as the delimiters if you want to
	 *     include literal backticks in the code span. So, this input:
	 *
	 *         Just type ``foo `bar` baz`` at the prompt.
	 *
	 *       Will translate to:
	 *
	 *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>
	 *
	 *    There's no arbitrary limit to the number of backticks you
	 *    can use as delimters. If you need three consecutive backticks
	 *    in your code, use four for delimiters, etc.
	 *
	 *  *  You can use spaces to get literal backticks at the edges:
	 *
	 *         ... type `` `bar` `` ...
	 *
	 *       Turns to:
	 *
	 *         ... type <code>`bar`</code> ...
	 */
	showdown.subParser('codeSpans', function (text, options, globals) {

	  text = globals.converter._dispatch('codeSpans.before', text, options, globals);

	  if (typeof(text) === 'undefined') {
	    text = '';
	  }
	  text = text.replace(/(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
	    function (wholeMatch, m1, m2, m3) {
	      var c = m3;
	      c = c.replace(/^([ \t]*)/g, '');	// leading whitespace
	      c = c.replace(/[ \t]*$/g, '');	// trailing whitespace
	      c = showdown.subParser('encodeCode')(c, options, globals);
	      c = m1 + '<code>' + c + '</code>';
	      c = showdown.subParser('hashHTMLSpans')(c, options, globals);
	      return c;
	    }
	  );

	  text = globals.converter._dispatch('codeSpans.after', text, options, globals);
	  return text;
	});

	/**
	 * Create a full HTML document from the processed markdown
	 */
	showdown.subParser('completeHTMLDocument', function (text, options, globals) {

	  if (!options.completeHTMLDocument) {
	    return text;
	  }

	  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);

	  var doctype = 'html',
	      doctypeParsed = '<!DOCTYPE HTML>\n',
	      title = '',
	      charset = '<meta charset="utf-8">\n',
	      lang = '',
	      metadata = '';

	  if (typeof globals.metadata.parsed.doctype !== 'undefined') {
	    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\n';
	    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
	    if (doctype === 'html' || doctype === 'html5') {
	      charset = '<meta charset="utf-8">';
	    }
	  }

	  for (var meta in globals.metadata.parsed) {
	    if (globals.metadata.parsed.hasOwnProperty(meta)) {
	      switch (meta.toLowerCase()) {
	        case 'doctype':
	          break;

	        case 'title':
	          title = '<title>' +  globals.metadata.parsed.title + '</title>\n';
	          break;

	        case 'charset':
	          if (doctype === 'html' || doctype === 'html5') {
	            charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
	          } else {
	            charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
	          }
	          break;

	        case 'language':
	        case 'lang':
	          lang = ' lang="' + globals.metadata.parsed[meta] + '"';
	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
	          break;

	        default:
	          metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
	      }
	    }
	  }

	  text = doctypeParsed + '<html' + lang + '>\n<head>\n' + title + charset + metadata + '</head>\n<body>\n' + text.trim() + '\n</body>\n</html>';

	  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);
	  return text;
	});

	/**
	 * Convert all tabs to spaces
	 */
	showdown.subParser('detab', function (text, options, globals) {
	  text = globals.converter._dispatch('detab.before', text, options, globals);

	  // expand first n-1 tabs
	  text = text.replace(/\t(?=\t)/g, '    '); // g_tab_width

	  // replace the nth with two sentinels
	  text = text.replace(/\t/g, '¨A¨B');

	  // use the sentinel to anchor our regex so it doesn't explode
	  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {
	    var leadingText = m1,
	        numSpaces = 4 - leadingText.length % 4;  // g_tab_width

	    // there *must* be a better way to do this:
	    for (var i = 0; i < numSpaces; i++) {
	      leadingText += ' ';
	    }

	    return leadingText;
	  });

	  // clean up sentinels
	  text = text.replace(/¨A/g, '    ');  // g_tab_width
	  text = text.replace(/¨B/g, '');

	  text = globals.converter._dispatch('detab.after', text, options, globals);
	  return text;
	});

	showdown.subParser('ellipsis', function (text, options, globals) {

	  text = globals.converter._dispatch('ellipsis.before', text, options, globals);

	  text = text.replace(/\.\.\./g, '…');

	  text = globals.converter._dispatch('ellipsis.after', text, options, globals);

	  return text;
	});

	/**
	 * Turn emoji codes into emojis
	 *
	 * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis
	 */
	showdown.subParser('emoji', function (text, options, globals) {

	  if (!options.emoji) {
	    return text;
	  }

	  text = globals.converter._dispatch('emoji.before', text, options, globals);

	  var emojiRgx = /:([\S]+?):/g;

	  text = text.replace(emojiRgx, function (wm, emojiCode) {
	    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {
	      return showdown.helper.emojis[emojiCode];
	    }
	    return wm;
	  });

	  text = globals.converter._dispatch('emoji.after', text, options, globals);

	  return text;
	});

	/**
	 * Smart processing for ampersands and angle brackets that need to be encoded.
	 */
	showdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {
	  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);

	  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:
	  // http://bumppo.net/projects/amputator/
	  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, '&amp;');

	  // Encode naked <'s
	  text = text.replace(/<(?![a-z\/?$!])/gi, '&lt;');

	  // Encode <
	  text = text.replace(/</g, '&lt;');

	  // Encode >
	  text = text.replace(/>/g, '&gt;');

	  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);
	  return text;
	});

	/**
	 * Returns the string, with after processing the following backslash escape sequences.
	 *
	 * attacklab: The polite way to do this is with the new escapeCharacters() function:
	 *
	 *    text = escapeCharacters(text,"\\",true);
	 *    text = escapeCharacters(text,"`*_{}[]()>#+-.!",true);
	 *
	 * ...but we're sidestepping its use of the (slow) RegExp constructor
	 * as an optimization for Firefox.  This function gets called a LOT.
	 */
	showdown.subParser('encodeBackslashEscapes', function (text, options, globals) {
	  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);

	  text = text.replace(/\\(\\)/g, showdown.helper.escapeCharactersCallback);
	  text = text.replace(/\\([`*_{}\[\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);

	  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);
	  return text;
	});

	/**
	 * Encode/escape certain characters inside Markdown code runs.
	 * The point is that in code, these characters are literals,
	 * and lose their special Markdown meanings.
	 */
	showdown.subParser('encodeCode', function (text, options, globals) {

	  text = globals.converter._dispatch('encodeCode.before', text, options, globals);

	  // Encode all ampersands; HTML entities are not
	  // entities within a Markdown code span.
	  text = text
	    .replace(/&/g, '&amp;')
	  // Do the angle bracket song and dance:
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;')
	  // Now, escape characters that are magic in Markdown:
	    .replace(/([*_{}\[\]\\=~-])/g, showdown.helper.escapeCharactersCallback);

	  text = globals.converter._dispatch('encodeCode.after', text, options, globals);
	  return text;
	});

	/**
	 * Within tags -- meaning between < and > -- encode [\ ` * _ ~ =] so they
	 * don't conflict with their use in Markdown for code, italics and strong.
	 */
	showdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {
	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);

	  // Build a regex to find HTML tags.
	  var tags     = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi,
	      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;

	  text = text.replace(tags, function (wholeMatch) {
	    return wholeMatch
	      .replace(/(.)<\/?code>(?=.)/g, '$1`')
	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
	  });

	  text = text.replace(comments, function (wholeMatch) {
	    return wholeMatch
	      .replace(/([\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);
	  });

	  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);
	  return text;
	});

	/**
	 * Handle github codeblocks prior to running HashHTML so that
	 * HTML contained within the codeblock gets escaped properly
	 * Example:
	 * ```ruby
	 *     def hello_world(x)
	 *       puts "Hello, #{x}"
	 *     end
	 * ```
	 */
	showdown.subParser('githubCodeBlocks', function (text, options, globals) {

	  // early exit if option is not enabled
	  if (!options.ghCodeBlocks) {
	    return text;
	  }

	  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);

	  text += '¨0';

	  text = text.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function (wholeMatch, delim, language, codeblock) {
	    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\n';

	    // First parse the github code block
	    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);
	    codeblock = showdown.subParser('detab')(codeblock, options, globals);
	    codeblock = codeblock.replace(/^\n+/g, ''); // trim leading newlines
	    codeblock = codeblock.replace(/\n+$/g, ''); // trim trailing whitespace

	    codeblock = '<pre><code' + (language ? ' class="' + language + ' language-' + language + '"' : '') + '>' + codeblock + end + '</code></pre>';

	    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);

	    // Since GHCodeblocks can be false positives, we need to
	    // store the primitive text and the parsed text in a global var,
	    // and then return a token
	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
	  });

	  // attacklab: strip sentinel
	  text = text.replace(/¨0/, '');

	  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);
	});

	showdown.subParser('hashBlock', function (text, options, globals) {
	  text = globals.converter._dispatch('hashBlock.before', text, options, globals);
	  text = text.replace(/(^\n+|\n+$)/g, '');
	  text = '\n\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\n\n';
	  text = globals.converter._dispatch('hashBlock.after', text, options, globals);
	  return text;
	});

	/**
	 * Hash and escape <code> elements that should not be parsed as markdown
	 */
	showdown.subParser('hashCodeTags', function (text, options, globals) {
	  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);

	  var repFunc = function (wholeMatch, match, left, right) {
	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
	    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';
	  };

	  // Hash naked <code>
	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\b[^>]*>', '</code>', 'gim');

	  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);
	  return text;
	});

	showdown.subParser('hashElement', function (text, options, globals) {

	  return function (wholeMatch, m1) {
	    var blockText = m1;

	    // Undo double lines
	    blockText = blockText.replace(/\n\n/g, '\n');
	    blockText = blockText.replace(/^\n/, '');

	    // strip trailing blank lines
	    blockText = blockText.replace(/\n+$/g, '');

	    // Replace the element text with a marker ("¨KxK" where x is its key)
	    blockText = '\n\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\n\n';

	    return blockText;
	  };
	});

	showdown.subParser('hashHTMLBlocks', function (text, options, globals) {
	  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);

	  var blockTags = [
	        'pre',
	        'div',
	        'h1',
	        'h2',
	        'h3',
	        'h4',
	        'h5',
	        'h6',
	        'blockquote',
	        'table',
	        'dl',
	        'ol',
	        'ul',
	        'script',
	        'noscript',
	        'form',
	        'fieldset',
	        'iframe',
	        'math',
	        'style',
	        'section',
	        'header',
	        'footer',
	        'nav',
	        'article',
	        'aside',
	        'address',
	        'audio',
	        'canvas',
	        'figure',
	        'hgroup',
	        'output',
	        'video',
	        'p'
	      ],
	      repFunc = function (wholeMatch, match, left, right) {
	        var txt = wholeMatch;
	        // check if this html element is marked as markdown
	        // if so, it's contents should be parsed as markdown
	        if (left.search(/\bmarkdown\b/) !== -1) {
	          txt = left + globals.converter.makeHtml(match) + right;
	        }
	        return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
	      };

	  if (options.backslashEscapesHTMLTags) {
	    // encode backslash escaped HTML tags
	    text = text.replace(/\\<(\/?[^>]+?)>/g, function (wm, inside) {
	      return '&lt;' + inside + '&gt;';
	    });
	  }

	  // hash HTML Blocks
	  for (var i = 0; i < blockTags.length; ++i) {

	    var opTagPos,
	        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\b[^>]*>)', 'im'),
	        patLeft  = '<' + blockTags[i] + '\\b[^>]*>',
	        patRight = '</' + blockTags[i] + '>';
	    // 1. Look for the first position of the first opening HTML tag in the text
	    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {

	      // if the HTML tag is \ escaped, we need to escape it and break


	      //2. Split the text in that position
	      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),
	      //3. Match recursively
	          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');

	      // prevent an infinite loop
	      if (newSubText1 === subTexts[1]) {
	        break;
	      }
	      text = subTexts[0].concat(newSubText1);
	    }
	  }
	  // HR SPECIAL CASE
	  text = text.replace(/(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
	    showdown.subParser('hashElement')(text, options, globals));

	  // Special case for standalone HTML comments
	  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {
	    return '\n\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\n\n';
	  }, '^ {0,3}<!--', '-->', 'gm');

	  // PHP and ASP-style processor instructions (<?...?> and <%...%>)
	  text = text.replace(/(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
	    showdown.subParser('hashElement')(text, options, globals));

	  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);
	  return text;
	});

	/**
	 * Hash span elements that should not be parsed as markdown
	 */
	showdown.subParser('hashHTMLSpans', function (text, options, globals) {
	  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);

	  function hashHTMLSpan (html) {
	    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';
	  }

	  // Hash Self Closing tags
	  text = text.replace(/<[^>]+?\/>/gi, function (wm) {
	    return hashHTMLSpan(wm);
	  });

	  // Hash tags without properties
	  text = text.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function (wm) {
	    return hashHTMLSpan(wm);
	  });

	  // Hash tags with properties
	  text = text.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function (wm) {
	    return hashHTMLSpan(wm);
	  });

	  // Hash self closing tags without />
	  text = text.replace(/<[^>]+?>/gi, function (wm) {
	    return hashHTMLSpan(wm);
	  });

	  /*showdown.helper.matchRecursiveRegExp(text, '<code\\b[^>]*>', '</code>', 'gi');*/

	  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);
	  return text;
	});

	/**
	 * Unhash HTML spans
	 */
	showdown.subParser('unhashHTMLSpans', function (text, options, globals) {
	  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);

	  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {
	    var repText = globals.gHtmlSpans[i],
	        // limiter to prevent infinite loop (assume 10 as limit for recurse)
	        limit = 0;

	    while (/¨C(\d+)C/.test(repText)) {
	      var num = RegExp.$1;
	      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);
	      if (limit === 10) {
	        console.error('maximum nesting of 10 spans reached!!!');
	        break;
	      }
	      ++limit;
	    }
	    text = text.replace('¨C' + i + 'C', repText);
	  }

	  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);
	  return text;
	});

	/**
	 * Hash and escape <pre><code> elements that should not be parsed as markdown
	 */
	showdown.subParser('hashPreCodeTags', function (text, options, globals) {
	  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);

	  var repFunc = function (wholeMatch, match, left, right) {
	    // encode html entities
	    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;
	    return '\n\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\n\n';
	  };

	  // Hash <pre><code>
	  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>', '^ {0,3}</code>\\s*</pre>', 'gim');

	  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);
	  return text;
	});

	showdown.subParser('headers', function (text, options, globals) {

	  text = globals.converter._dispatch('headers.before', text, options, globals);

	  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),

	  // Set text-style headers:
	  //	Header 1
	  //	========
	  //
	  //	Header 2
	  //	--------
	  //
	      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm,
	      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;

	  text = text.replace(setextRegexH1, function (wholeMatch, m1) {

	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
	        hLevel = headerLevelStart,
	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
	  });

	  text = text.replace(setextRegexH2, function (matchFound, m1) {
	    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),
	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m1) + '"',
	        hLevel = headerLevelStart + 1,
	        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';
	    return showdown.subParser('hashBlock')(hashBlock, options, globals);
	  });

	  // atx-style headers:
	  //  # Header 1
	  //  ## Header 2
	  //  ## Header 2 with closing hashes ##
	  //  ...
	  //  ###### Header 6
	  //
	  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;

	  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {
	    var hText = m2;
	    if (options.customizedHeaderId) {
	      hText = m2.replace(/\s?\{([^{]+?)}\s*$/, '');
	    }

	    var span = showdown.subParser('spanGamut')(hText, options, globals),
	        hID = (options.noHeaderId) ? '' : ' id="' + headerId(m2) + '"',
	        hLevel = headerLevelStart - 1 + m1.length,
	        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';

	    return showdown.subParser('hashBlock')(header, options, globals);
	  });

	  function headerId (m) {
	    var title,
	        prefix;

	    // It is separate from other options to allow combining prefix and customized
	    if (options.customizedHeaderId) {
	      var match = m.match(/\{([^{]+?)}\s*$/);
	      if (match && match[1]) {
	        m = match[1];
	      }
	    }

	    title = m;

	    // Prefix id to prevent causing inadvertent pre-existing style matches.
	    if (showdown.helper.isString(options.prefixHeaderId)) {
	      prefix = options.prefixHeaderId;
	    } else if (options.prefixHeaderId === true) {
	      prefix = 'section-';
	    } else {
	      prefix = '';
	    }

	    if (!options.rawPrefixHeaderId) {
	      title = prefix + title;
	    }

	    if (options.ghCompatibleHeaderId) {
	      title = title
	        .replace(/ /g, '-')
	        // replace previously escaped chars (&, ¨ and $)
	        .replace(/&amp;/g, '')
	        .replace(/¨T/g, '')
	        .replace(/¨D/g, '')
	        // replace rest of the chars (&~$ are repeated as they might have been escaped)
	        // borrowed from github's redcarpet (some they should produce similar results)
	        .replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, '')
	        .toLowerCase();
	    } else if (options.rawHeaderId) {
	      title = title
	        .replace(/ /g, '-')
	        // replace previously escaped chars (&, ¨ and $)
	        .replace(/&amp;/g, '&')
	        .replace(/¨T/g, '¨')
	        .replace(/¨D/g, '$')
	        // replace " and '
	        .replace(/["']/g, '-')
	        .toLowerCase();
	    } else {
	      title = title
	        .replace(/[^\w]/g, '')
	        .toLowerCase();
	    }

	    if (options.rawPrefixHeaderId) {
	      title = prefix + title;
	    }

	    if (globals.hashLinkCounts[title]) {
	      title = title + '-' + (globals.hashLinkCounts[title]++);
	    } else {
	      globals.hashLinkCounts[title] = 1;
	    }
	    return title;
	  }

	  text = globals.converter._dispatch('headers.after', text, options, globals);
	  return text;
	});

	/**
	 * Turn Markdown link shortcuts into XHTML <a> tags.
	 */
	showdown.subParser('horizontalRule', function (text, options, globals) {
	  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);

	  var key = showdown.subParser('hashBlock')('<hr />', options, globals);
	  text = text.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
	  text = text.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
	  text = text.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);

	  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);
	  return text;
	});

	/**
	 * Turn Markdown image shortcuts into <img> tags.
	 */
	showdown.subParser('images', function (text, options, globals) {

	  text = globals.converter._dispatch('images.before', text, options, globals);

	  var inlineRegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
	      crazyRegExp       = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g,
	      base64RegExp      = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g,
	      referenceRegExp   = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g,
	      refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;

	  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {
	    url = url.replace(/\s/g, '');
	    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);
	  }

	  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {

	    var gUrls   = globals.gUrls,
	        gTitles = globals.gTitles,
	        gDims   = globals.gDimensions;

	    linkId = linkId.toLowerCase();

	    if (!title) {
	      title = '';
	    }
	    // Special case for explicit empty url
	    if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
	      url = '';

	    } else if (url === '' || url === null) {
	      if (linkId === '' || linkId === null) {
	        // lower-case and turn embedded newlines into spaces
	        linkId = altText.toLowerCase().replace(/ ?\n/g, ' ');
	      }
	      url = '#' + linkId;

	      if (!showdown.helper.isUndefined(gUrls[linkId])) {
	        url = gUrls[linkId];
	        if (!showdown.helper.isUndefined(gTitles[linkId])) {
	          title = gTitles[linkId];
	        }
	        if (!showdown.helper.isUndefined(gDims[linkId])) {
	          width = gDims[linkId].width;
	          height = gDims[linkId].height;
	        }
	      } else {
	        return wholeMatch;
	      }
	    }

	    altText = altText
	      .replace(/"/g, '&quot;')
	    //altText = showdown.helper.escapeCharacters(altText, '*_', false);
	      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
	    //url = showdown.helper.escapeCharacters(url, '*_', false);
	    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
	    var result = '<img src="' + url + '" alt="' + altText + '"';

	    if (title && showdown.helper.isString(title)) {
	      title = title
	        .replace(/"/g, '&quot;')
	      //title = showdown.helper.escapeCharacters(title, '*_', false);
	        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);
	      result += ' title="' + title + '"';
	    }

	    if (width && height) {
	      width  = (width === '*') ? 'auto' : width;
	      height = (height === '*') ? 'auto' : height;

	      result += ' width="' + width + '"';
	      result += ' height="' + height + '"';
	    }

	    result += ' />';

	    return result;
	  }

	  // First, handle reference-style labeled images: ![alt text][id]
	  text = text.replace(referenceRegExp, writeImageTag);

	  // Next, handle inline images:  ![alt text](url =<width>x<height> "optional title")

	  // base64 encoded images
	  text = text.replace(base64RegExp, writeImageTagBase64);

	  // cases with crazy urls like ./image/cat1).png
	  text = text.replace(crazyRegExp, writeImageTag);

	  // normal cases
	  text = text.replace(inlineRegExp, writeImageTag);

	  // handle reference-style shortcuts: ![img text]
	  text = text.replace(refShortcutRegExp, writeImageTag);

	  text = globals.converter._dispatch('images.after', text, options, globals);
	  return text;
	});

	showdown.subParser('italicsAndBold', function (text, options, globals) {

	  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);

	  // it's faster to have 3 separate regexes for each case than have just one
	  // because of backtracing, in some cases, it could lead to an exponential effect
	  // called "catastrophic backtrace". Ominous!

	  function parseInside (txt, left, right) {
	    /*
	    if (options.simplifiedAutoLink) {
	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
	    }
	    */
	    return left + txt + right;
	  }

	  // Parse underscores
	  if (options.literalMidWordUnderscores) {
	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
	      return parseInside (txt, '<strong><em>', '</em></strong>');
	    });
	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
	      return parseInside (txt, '<strong>', '</strong>');
	    });
	    text = text.replace(/\b_(\S[\s\S]*?)_\b/g, function (wm, txt) {
	      return parseInside (txt, '<em>', '</em>');
	    });
	  } else {
	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
	    });
	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
	    });
	    text = text.replace(/_([^\s_][\s\S]*?)_/g, function (wm, m) {
	      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)
	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
	    });
	  }

	  // Now parse asterisks
	  if (options.literalMidWordAsterisks) {
	    text = text.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function (wm, lead, txt) {
	      return parseInside (txt, lead + '<strong><em>', '</em></strong>');
	    });
	    text = text.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function (wm, lead, txt) {
	      return parseInside (txt, lead + '<strong>', '</strong>');
	    });
	    text = text.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function (wm, lead, txt) {
	      return parseInside (txt, lead + '<em>', '</em>');
	    });
	  } else {
	    text = text.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function (wm, m) {
	      return (/\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;
	    });
	    text = text.replace(/\*\*(\S[\s\S]*?)\*\*/g, function (wm, m) {
	      return (/\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;
	    });
	    text = text.replace(/\*([^\s*][\s\S]*?)\*/g, function (wm, m) {
	      // !/^\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)
	      return (/\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;
	    });
	  }


	  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);
	  return text;
	});

	/**
	 * Form HTML ordered (numbered) and unordered (bulleted) lists.
	 */
	showdown.subParser('lists', function (text, options, globals) {

	  /**
	   * Process the contents of a single ordered or unordered list, splitting it
	   * into individual list items.
	   * @param {string} listStr
	   * @param {boolean} trimTrailing
	   * @returns {string}
	   */
	  function processListItems (listStr, trimTrailing) {
	    // The $g_list_level global keeps track of when we're inside a list.
	    // Each time we enter a list, we increment it; when we leave a list,
	    // we decrement. If it's zero, we're not in a list anymore.
	    //
	    // We do this because when we're not inside a list, we want to treat
	    // something like this:
	    //
	    //    I recommend upgrading to version
	    //    8. Oops, now this line is treated
	    //    as a sub-list.
	    //
	    // As a single paragraph, despite the fact that the second line starts
	    // with a digit-period-space sequence.
	    //
	    // Whereas when we're inside a list (or sub-list), that line will be
	    // treated as the start of a sub-list. What a kludge, huh? This is
	    // an aspect of Markdown's syntax that's hard to parse perfectly
	    // without resorting to mind-reading. Perhaps the solution is to
	    // change the syntax rules such that sub-lists must start with a
	    // starting cardinal number; e.g. "1." or "a.".
	    globals.gListLevel++;

	    // trim trailing blank lines:
	    listStr = listStr.replace(/\n{2,}$/, '\n');

	    // attacklab: add sentinel to emulate \z
	    listStr += '¨0';

	    var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm,
	        isParagraphed = (/\n[ \t]*\n(?!¨0)/.test(listStr));

	    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,
	    // which is a syntax breaking change
	    // activating this option reverts to old behavior
	    if (options.disableForced4SpacesIndentedSublists) {
	      rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
	    }

	    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
	      checked = (checked && checked.trim() !== '');

	      var item = showdown.subParser('outdent')(m4, options, globals),
	          bulletStyle = '';

	      // Support for github tasklists
	      if (taskbtn && options.tasklists) {
	        bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
	        item = item.replace(/^[ \t]*\[(x|X| )?]/m, function () {
	          var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
	          if (checked) {
	            otp += ' checked';
	          }
	          otp += '>';
	          return otp;
	        });
	      }

	      // ISSUE #312
	      // This input: - - - a
	      // causes trouble to the parser, since it interprets it as:
	      // <ul><li><li><li>a</li></li></li></ul>
	      // instead of:
	      // <ul><li>- - a</li></ul>
	      // So, to prevent it, we will put a marker (¨A)in the beginning of the line
	      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser
	      item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function (wm2) {
	        return '¨A' + wm2;
	      });

	      // m1 - Leading line or
	      // Has a double return (multi paragraph) or
	      // Has sublist
	      if (m1 || (item.search(/\n{2,}/) > -1)) {
	        item = showdown.subParser('githubCodeBlocks')(item, options, globals);
	        item = showdown.subParser('blockGamut')(item, options, globals);
	      } else {
	        // Recursion for sub-lists:
	        item = showdown.subParser('lists')(item, options, globals);
	        item = item.replace(/\n$/, ''); // chomp(item)
	        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);

	        // Colapse double linebreaks
	        item = item.replace(/\n\n+/g, '\n\n');
	        if (isParagraphed) {
	          item = showdown.subParser('paragraphs')(item, options, globals);
	        } else {
	          item = showdown.subParser('spanGamut')(item, options, globals);
	        }
	      }

	      // now we need to remove the marker (¨A)
	      item = item.replace('¨A', '');
	      // we can finally wrap the line in list item tags
	      item =  '<li' + bulletStyle + '>' + item + '</li>\n';

	      return item;
	    });

	    // attacklab: strip sentinel
	    listStr = listStr.replace(/¨0/g, '');

	    globals.gListLevel--;

	    if (trimTrailing) {
	      listStr = listStr.replace(/\s+$/, '');
	    }

	    return listStr;
	  }

	  function styleStartNumber (list, listType) {
	    // check if ol and starts by a number different than 1
	    if (listType === 'ol') {
	      var res = list.match(/^ *(\d+)\./);
	      if (res && res[1] !== '1') {
	        return ' start="' + res[1] + '"';
	      }
	    }
	    return '';
	  }

	  /**
	   * Check and parse consecutive lists (better fix for issue #142)
	   * @param {string} list
	   * @param {string} listType
	   * @param {boolean} trimTrailing
	   * @returns {string}
	   */
	  function parseConsecutiveLists (list, listType, trimTrailing) {
	    // check if we caught 2 or more consecutive lists by mistake
	    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa
	    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm,
	        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm,
	        counterRxg = (listType === 'ul') ? olRgx : ulRgx,
	        result = '';

	    if (list.search(counterRxg) !== -1) {
	      (function parseCL (txt) {
	        var pos = txt.search(counterRxg),
	            style = styleStartNumber(list, listType);
	        if (pos !== -1) {
	          // slice
	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\n';

	          // invert counterType and listType
	          listType = (listType === 'ul') ? 'ol' : 'ul';
	          counterRxg = (listType === 'ul') ? olRgx : ulRgx;

	          //recurse
	          parseCL(txt.slice(pos));
	        } else {
	          result += '\n\n<' + listType + style + '>\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\n';
	        }
	      })(list);
	    } else {
	      var style = styleStartNumber(list, listType);
	      result = '\n\n<' + listType + style + '>\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\n';
	    }

	    return result;
	  }

	  /** Start of list parsing **/
	  text = globals.converter._dispatch('lists.before', text, options, globals);
	  // add sentinel to hack around khtml/safari bug:
	  // http://bugs.webkit.org/show_bug.cgi?id=11231
	  text += '¨0';

	  if (globals.gListLevel) {
	    text = text.replace(/^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
	      function (wholeMatch, list, m2) {
	        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
	        return parseConsecutiveLists(list, listType, true);
	      }
	    );
	  } else {
	    text = text.replace(/(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
	      function (wholeMatch, m1, list, m3) {
	        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';
	        return parseConsecutiveLists(list, listType, false);
	      }
	    );
	  }

	  // strip sentinel
	  text = text.replace(/¨0/, '');
	  text = globals.converter._dispatch('lists.after', text, options, globals);
	  return text;
	});

	/**
	 * Parse metadata at the top of the document
	 */
	showdown.subParser('metadata', function (text, options, globals) {

	  if (!options.metadata) {
	    return text;
	  }

	  text = globals.converter._dispatch('metadata.before', text, options, globals);

	  function parseMetadataContents (content) {
	    // raw is raw so it's not changed in any way
	    globals.metadata.raw = content;

	    // escape chars forbidden in html attributes
	    // double quotes
	    content = content
	      // ampersand first
	      .replace(/&/g, '&amp;')
	      // double quotes
	      .replace(/"/g, '&quot;');

	    content = content.replace(/\n {4}/g, ' ');
	    content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function (wm, key, value) {
	      globals.metadata.parsed[key] = value;
	      return '';
	    });
	  }

	  text = text.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function (wholematch, format, content) {
	    parseMetadataContents(content);
	    return '¨M';
	  });

	  text = text.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function (wholematch, format, content) {
	    if (format) {
	      globals.metadata.format = format;
	    }
	    parseMetadataContents(content);
	    return '¨M';
	  });

	  text = text.replace(/¨M/g, '');

	  text = globals.converter._dispatch('metadata.after', text, options, globals);
	  return text;
	});

	/**
	 * Remove one level of line-leading tabs or spaces
	 */
	showdown.subParser('outdent', function (text, options, globals) {
	  text = globals.converter._dispatch('outdent.before', text, options, globals);

	  // attacklab: hack around Konqueror 3.5.4 bug:
	  // "----------bug".replace(/^-/g,"") == "bug"
	  text = text.replace(/^(\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width

	  // attacklab: clean up hack
	  text = text.replace(/¨0/g, '');

	  text = globals.converter._dispatch('outdent.after', text, options, globals);
	  return text;
	});

	/**
	 *
	 */
	showdown.subParser('paragraphs', function (text, options, globals) {

	  text = globals.converter._dispatch('paragraphs.before', text, options, globals);
	  // Strip leading and trailing lines:
	  text = text.replace(/^\n+/g, '');
	  text = text.replace(/\n+$/g, '');

	  var grafs = text.split(/\n{2,}/g),
	      grafsOut = [],
	      end = grafs.length; // Wrap <p> tags

	  for (var i = 0; i < end; i++) {
	    var str = grafs[i];
	    // if this is an HTML marker, copy it
	    if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
	      grafsOut.push(str);

	    // test for presence of characters to prevent empty lines being parsed
	    // as paragraphs (resulting in undesired extra empty paragraphs)
	    } else if (str.search(/\S/) >= 0) {
	      str = showdown.subParser('spanGamut')(str, options, globals);
	      str = str.replace(/^([ \t]*)/g, '<p>');
	      str += '</p>';
	      grafsOut.push(str);
	    }
	  }

	  /** Unhashify HTML blocks */
	  end = grafsOut.length;
	  for (i = 0; i < end; i++) {
	    var blockText = '',
	        grafsOutIt = grafsOut[i],
	        codeFlag = false;
	    // if this is a marker for an html block...
	    // use RegExp.test instead of string.search because of QML bug
	    while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
	      var delim = RegExp.$1,
	          num   = RegExp.$2;

	      if (delim === 'K') {
	        blockText = globals.gHtmlBlocks[num];
	      } else {
	        // we need to check if ghBlock is a false positive
	        if (codeFlag) {
	          // use encoded version of all text
	          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);
	        } else {
	          blockText = globals.ghCodeBlocks[num].codeblock;
	        }
	      }
	      blockText = blockText.replace(/\$/g, '$$$$'); // Escape any dollar signs

	      grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
	      // Check if grafsOutIt is a pre->code
	      if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
	        codeFlag = true;
	      }
	    }
	    grafsOut[i] = grafsOutIt;
	  }
	  text = grafsOut.join('\n');
	  // Strip leading and trailing lines:
	  text = text.replace(/^\n+/g, '');
	  text = text.replace(/\n+$/g, '');
	  return globals.converter._dispatch('paragraphs.after', text, options, globals);
	});

	/**
	 * Run extension
	 */
	showdown.subParser('runExtension', function (ext, text, options, globals) {

	  if (ext.filter) {
	    text = ext.filter(text, globals.converter, options);

	  } else if (ext.regex) {
	    // TODO remove this when old extension loading mechanism is deprecated
	    var re = ext.regex;
	    if (!(re instanceof RegExp)) {
	      re = new RegExp(re, 'g');
	    }
	    text = text.replace(re, ext.replace);
	  }

	  return text;
	});

	/**
	 * These are all the transformations that occur *within* block-level
	 * tags like paragraphs, headers, and list items.
	 */
	showdown.subParser('spanGamut', function (text, options, globals) {

	  text = globals.converter._dispatch('spanGamut.before', text, options, globals);
	  text = showdown.subParser('codeSpans')(text, options, globals);
	  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);
	  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);

	  // Process anchor and image tags. Images must come first,
	  // because ![foo][f] looks like an anchor.
	  text = showdown.subParser('images')(text, options, globals);
	  text = showdown.subParser('anchors')(text, options, globals);

	  // Make links out of things like `<http://example.com/>`
	  // Must come after anchors, because you can use < and >
	  // delimiters in inline links like [this](<url>).
	  text = showdown.subParser('autoLinks')(text, options, globals);
	  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);
	  text = showdown.subParser('emoji')(text, options, globals);
	  text = showdown.subParser('underline')(text, options, globals);
	  text = showdown.subParser('italicsAndBold')(text, options, globals);
	  text = showdown.subParser('strikethrough')(text, options, globals);
	  text = showdown.subParser('ellipsis')(text, options, globals);

	  // we need to hash HTML tags inside spans
	  text = showdown.subParser('hashHTMLSpans')(text, options, globals);

	  // now we encode amps and angles
	  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);

	  // Do hard breaks
	  if (options.simpleLineBreaks) {
	    // GFM style hard breaks
	    // only add line breaks if the text does not contain a block (special case for lists)
	    if (!/\n\n¨K/.test(text)) {
	      text = text.replace(/\n+/g, '<br />\n');
	    }
	  } else {
	    // Vanilla hard breaks
	    text = text.replace(/  +\n/g, '<br />\n');
	  }

	  text = globals.converter._dispatch('spanGamut.after', text, options, globals);
	  return text;
	});

	showdown.subParser('strikethrough', function (text, options, globals) {

	  function parseInside (txt) {
	    if (options.simplifiedAutoLink) {
	      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);
	    }
	    return '<del>' + txt + '</del>';
	  }

	  if (options.strikethrough) {
	    text = globals.converter._dispatch('strikethrough.before', text, options, globals);
	    text = text.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });
	    text = globals.converter._dispatch('strikethrough.after', text, options, globals);
	  }

	  return text;
	});

	/**
	 * Strips link definitions from text, stores the URLs and titles in
	 * hash references.
	 * Link defs are in the form: ^[id]: url "optional title"
	 */
	showdown.subParser('stripLinkDefinitions', function (text, options, globals) {

	  var regex       = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm,
	      base64Regex = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;

	  // attacklab: sentinel workarounds for lack of \A and \Z, safari\khtml bug
	  text += '¨0';

	  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {
	    linkId = linkId.toLowerCase();
	    if (url.match(/^data:.+?\/.+?;base64,/)) {
	      // remove newlines
	      globals.gUrls[linkId] = url.replace(/\s/g, '');
	    } else {
	      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive
	    }

	    if (blankLines) {
	      // Oops, found blank lines, so it's not a title.
	      // Put back the parenthetical statement we stole.
	      return blankLines + title;

	    } else {
	      if (title) {
	        globals.gTitles[linkId] = title.replace(/"|'/g, '&quot;');
	      }
	      if (options.parseImgDimensions && width && height) {
	        globals.gDimensions[linkId] = {
	          width:  width,
	          height: height
	        };
	      }
	    }
	    // Completely remove the definition from the text
	    return '';
	  };

	  // first we try to find base64 link references
	  text = text.replace(base64Regex, replaceFunc);

	  text = text.replace(regex, replaceFunc);

	  // attacklab: strip sentinel
	  text = text.replace(/¨0/, '');

	  return text;
	});

	showdown.subParser('tables', function (text, options, globals) {

	  if (!options.tables) {
	    return text;
	  }

	  var tableRgx       = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm,
	    //singeColTblRgx = /^ {0,3}\|.+\|\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n(?: {0,3}\|.+\|\n)+(?:\n\n|¨0)/gm;
	      singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;

	  function parseStyles (sLine) {
	    if (/^:[ \t]*--*$/.test(sLine)) {
	      return ' style="text-align:left;"';
	    } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
	      return ' style="text-align:right;"';
	    } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
	      return ' style="text-align:center;"';
	    } else {
	      return '';
	    }
	  }

	  function parseHeaders (header, style) {
	    var id = '';
	    header = header.trim();
	    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility
	    if (options.tablesHeaderId || options.tableHeaderId) {
	      id = ' id="' + header.replace(/ /g, '_').toLowerCase() + '"';
	    }
	    header = showdown.subParser('spanGamut')(header, options, globals);

	    return '<th' + id + style + '>' + header + '</th>\n';
	  }

	  function parseCells (cell, style) {
	    var subText = showdown.subParser('spanGamut')(cell, options, globals);
	    return '<td' + style + '>' + subText + '</td>\n';
	  }

	  function buildTable (headers, cells) {
	    var tb = '<table>\n<thead>\n<tr>\n',
	        tblLgn = headers.length;

	    for (var i = 0; i < tblLgn; ++i) {
	      tb += headers[i];
	    }
	    tb += '</tr>\n</thead>\n<tbody>\n';

	    for (i = 0; i < cells.length; ++i) {
	      tb += '<tr>\n';
	      for (var ii = 0; ii < tblLgn; ++ii) {
	        tb += cells[i][ii];
	      }
	      tb += '</tr>\n';
	    }
	    tb += '</tbody>\n</table>\n';
	    return tb;
	  }

	  function parseTable (rawTable) {
	    var i, tableLines = rawTable.split('\n');

	    for (i = 0; i < tableLines.length; ++i) {
	      // strip wrong first and last column if wrapped tables are used
	      if (/^ {0,3}\|/.test(tableLines[i])) {
	        tableLines[i] = tableLines[i].replace(/^ {0,3}\|/, '');
	      }
	      if (/\|[ \t]*$/.test(tableLines[i])) {
	        tableLines[i] = tableLines[i].replace(/\|[ \t]*$/, '');
	      }
	      // parse code spans first, but we only support one line code spans
	      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);
	    }

	    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),
	        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),
	        rawCells = [],
	        headers = [],
	        styles = [],
	        cells = [];

	    tableLines.shift();
	    tableLines.shift();

	    for (i = 0; i < tableLines.length; ++i) {
	      if (tableLines[i].trim() === '') {
	        continue;
	      }
	      rawCells.push(
	        tableLines[i]
	          .split('|')
	          .map(function (s) {
	            return s.trim();
	          })
	      );
	    }

	    if (rawHeaders.length < rawStyles.length) {
	      return rawTable;
	    }

	    for (i = 0; i < rawStyles.length; ++i) {
	      styles.push(parseStyles(rawStyles[i]));
	    }

	    for (i = 0; i < rawHeaders.length; ++i) {
	      if (showdown.helper.isUndefined(styles[i])) {
	        styles[i] = '';
	      }
	      headers.push(parseHeaders(rawHeaders[i], styles[i]));
	    }

	    for (i = 0; i < rawCells.length; ++i) {
	      var row = [];
	      for (var ii = 0; ii < headers.length; ++ii) {
	        if (showdown.helper.isUndefined(rawCells[i][ii])) ;
	        row.push(parseCells(rawCells[i][ii], styles[ii]));
	      }
	      cells.push(row);
	    }

	    return buildTable(headers, cells);
	  }

	  text = globals.converter._dispatch('tables.before', text, options, globals);

	  // find escaped pipe characters
	  text = text.replace(/\\(\|)/g, showdown.helper.escapeCharactersCallback);

	  // parse multi column tables
	  text = text.replace(tableRgx, parseTable);

	  // parse one column tables
	  text = text.replace(singeColTblRgx, parseTable);

	  text = globals.converter._dispatch('tables.after', text, options, globals);

	  return text;
	});

	showdown.subParser('underline', function (text, options, globals) {

	  if (!options.underline) {
	    return text;
	  }

	  text = globals.converter._dispatch('underline.before', text, options, globals);

	  if (options.literalMidWordUnderscores) {
	    text = text.replace(/\b___(\S[\s\S]*?)___\b/g, function (wm, txt) {
	      return '<u>' + txt + '</u>';
	    });
	    text = text.replace(/\b__(\S[\s\S]*?)__\b/g, function (wm, txt) {
	      return '<u>' + txt + '</u>';
	    });
	  } else {
	    text = text.replace(/___(\S[\s\S]*?)___/g, function (wm, m) {
	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
	    });
	    text = text.replace(/__(\S[\s\S]*?)__/g, function (wm, m) {
	      return (/\S$/.test(m)) ? '<u>' + m + '</u>' : wm;
	    });
	  }

	  // escape remaining underscores to prevent them being parsed by italic and bold
	  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);

	  text = globals.converter._dispatch('underline.after', text, options, globals);

	  return text;
	});

	/**
	 * Swap back in all the special characters we've hidden.
	 */
	showdown.subParser('unescapeSpecialChars', function (text, options, globals) {
	  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);

	  text = text.replace(/¨E(\d+)E/g, function (wholeMatch, m1) {
	    var charCodeToReplace = parseInt(m1);
	    return String.fromCharCode(charCodeToReplace);
	  });

	  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);
	  return text;
	});

	showdown.subParser('makeMarkdown.blockquote', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes()) {
	    var children = node.childNodes,
	        childrenLength = children.length;

	    for (var i = 0; i < childrenLength; ++i) {
	      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);

	      if (innerTxt === '') {
	        continue;
	      }
	      txt += innerTxt;
	    }
	  }
	  // cleanup
	  txt = txt.trim();
	  txt = '> ' + txt.split('\n').join('\n> ');
	  return txt;
	});

	showdown.subParser('makeMarkdown.codeBlock', function (node, globals) {

	  var lang = node.getAttribute('language'),
	      num  = node.getAttribute('precodenum');
	  return '```' + lang + '\n' + globals.preList[num] + '\n```';
	});

	showdown.subParser('makeMarkdown.codeSpan', function (node) {

	  return '`' + node.innerHTML + '`';
	});

	showdown.subParser('makeMarkdown.emphasis', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes()) {
	    txt += '*';
	    var children = node.childNodes,
	        childrenLength = children.length;
	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	    txt += '*';
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {

	  var headerMark = new Array(headerLevel + 1).join('#'),
	      txt = '';

	  if (node.hasChildNodes()) {
	    txt = headerMark + ' ';
	    var children = node.childNodes,
	        childrenLength = children.length;

	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.hr', function () {

	  return '---';
	});

	showdown.subParser('makeMarkdown.image', function (node) {

	  var txt = '';
	  if (node.hasAttribute('src')) {
	    txt += '![' + node.getAttribute('alt') + '](';
	    txt += '<' + node.getAttribute('src') + '>';
	    if (node.hasAttribute('width') && node.hasAttribute('height')) {
	      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');
	    }

	    if (node.hasAttribute('title')) {
	      txt += ' "' + node.getAttribute('title') + '"';
	    }
	    txt += ')';
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.links', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes() && node.hasAttribute('href')) {
	    var children = node.childNodes,
	        childrenLength = children.length;
	    txt = '[';
	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	    txt += '](';
	    txt += '<' + node.getAttribute('href') + '>';
	    if (node.hasAttribute('title')) {
	      txt += ' "' + node.getAttribute('title') + '"';
	    }
	    txt += ')';
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.list', function (node, globals, type) {

	  var txt = '';
	  if (!node.hasChildNodes()) {
	    return '';
	  }
	  var listItems       = node.childNodes,
	      listItemsLenght = listItems.length,
	      listNum = node.getAttribute('start') || 1;

	  for (var i = 0; i < listItemsLenght; ++i) {
	    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {
	      continue;
	    }

	    // define the bullet to use in list
	    var bullet = '';
	    if (type === 'ol') {
	      bullet = listNum.toString() + '. ';
	    } else {
	      bullet = '- ';
	    }

	    // parse list item
	    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);
	    ++listNum;
	  }

	  // add comment at the end to prevent consecutive lists to be parsed as one
	  txt += '\n<!-- -->\n';
	  return txt.trim();
	});

	showdown.subParser('makeMarkdown.listItem', function (node, globals) {

	  var listItemTxt = '';

	  var children = node.childNodes,
	      childrenLenght = children.length;

	  for (var i = 0; i < childrenLenght; ++i) {
	    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	  }
	  // if it's only one liner, we need to add a newline at the end
	  if (!/\n$/.test(listItemTxt)) {
	    listItemTxt += '\n';
	  } else {
	    // it's multiparagraph, so we need to indent
	    listItemTxt = listItemTxt
	      .split('\n')
	      .join('\n    ')
	      .replace(/^ {4}$/gm, '')
	      .replace(/\n\n+/g, '\n\n');
	  }

	  return listItemTxt;
	});



	showdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {

	  spansOnly = spansOnly || false;

	  var txt = '';

	  // edge case of text without wrapper paragraph
	  if (node.nodeType === 3) {
	    return showdown.subParser('makeMarkdown.txt')(node, globals);
	  }

	  // HTML comment
	  if (node.nodeType === 8) {
	    return '<!--' + node.data + '-->\n\n';
	  }

	  // process only node elements
	  if (node.nodeType !== 1) {
	    return '';
	  }

	  var tagName = node.tagName.toLowerCase();

	  switch (tagName) {

	    //
	    // BLOCKS
	    //
	    case 'h1':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\n\n'; }
	      break;
	    case 'h2':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\n\n'; }
	      break;
	    case 'h3':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\n\n'; }
	      break;
	    case 'h4':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\n\n'; }
	      break;
	    case 'h5':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\n\n'; }
	      break;
	    case 'h6':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\n\n'; }
	      break;

	    case 'p':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\n\n'; }
	      break;

	    case 'blockquote':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\n\n'; }
	      break;

	    case 'hr':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\n\n'; }
	      break;

	    case 'ol':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\n\n'; }
	      break;

	    case 'ul':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\n\n'; }
	      break;

	    case 'precode':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\n\n'; }
	      break;

	    case 'pre':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\n\n'; }
	      break;

	    case 'table':
	      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\n\n'; }
	      break;

	    //
	    // SPANS
	    //
	    case 'code':
	      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);
	      break;

	    case 'em':
	    case 'i':
	      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);
	      break;

	    case 'strong':
	    case 'b':
	      txt = showdown.subParser('makeMarkdown.strong')(node, globals);
	      break;

	    case 'del':
	      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);
	      break;

	    case 'a':
	      txt = showdown.subParser('makeMarkdown.links')(node, globals);
	      break;

	    case 'img':
	      txt = showdown.subParser('makeMarkdown.image')(node, globals);
	      break;

	    default:
	      txt = node.outerHTML + '\n\n';
	  }

	  // common normalization
	  // TODO eventually

	  return txt;
	});

	showdown.subParser('makeMarkdown.paragraph', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes()) {
	    var children = node.childNodes,
	        childrenLength = children.length;
	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	  }

	  // some text normalization
	  txt = txt.trim();

	  return txt;
	});

	showdown.subParser('makeMarkdown.pre', function (node, globals) {

	  var num  = node.getAttribute('prenum');
	  return '<pre>' + globals.preList[num] + '</pre>';
	});

	showdown.subParser('makeMarkdown.strikethrough', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes()) {
	    txt += '~~';
	    var children = node.childNodes,
	        childrenLength = children.length;
	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	    txt += '~~';
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.strong', function (node, globals) {

	  var txt = '';
	  if (node.hasChildNodes()) {
	    txt += '**';
	    var children = node.childNodes,
	        childrenLength = children.length;
	    for (var i = 0; i < childrenLength; ++i) {
	      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);
	    }
	    txt += '**';
	  }
	  return txt;
	});

	showdown.subParser('makeMarkdown.table', function (node, globals) {

	  var txt = '',
	      tableArray = [[], []],
	      headings   = node.querySelectorAll('thead>tr>th'),
	      rows       = node.querySelectorAll('tbody>tr'),
	      i, ii;
	  for (i = 0; i < headings.length; ++i) {
	    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),
	        allign = '---';

	    if (headings[i].hasAttribute('style')) {
	      var style = headings[i].getAttribute('style').toLowerCase().replace(/\s/g, '');
	      switch (style) {
	        case 'text-align:left;':
	          allign = ':---';
	          break;
	        case 'text-align:right;':
	          allign = '---:';
	          break;
	        case 'text-align:center;':
	          allign = ':---:';
	          break;
	      }
	    }
	    tableArray[0][i] = headContent.trim();
	    tableArray[1][i] = allign;
	  }

	  for (i = 0; i < rows.length; ++i) {
	    var r = tableArray.push([]) - 1,
	        cols = rows[i].getElementsByTagName('td');

	    for (ii = 0; ii < headings.length; ++ii) {
	      var cellContent = ' ';
	      if (typeof cols[ii] !== 'undefined') {
	        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);
	      }
	      tableArray[r].push(cellContent);
	    }
	  }

	  var cellSpacesCount = 3;
	  for (i = 0; i < tableArray.length; ++i) {
	    for (ii = 0; ii < tableArray[i].length; ++ii) {
	      var strLen = tableArray[i][ii].length;
	      if (strLen > cellSpacesCount) {
	        cellSpacesCount = strLen;
	      }
	    }
	  }

	  for (i = 0; i < tableArray.length; ++i) {
	    for (ii = 0; ii < tableArray[i].length; ++ii) {
	      if (i === 1) {
	        if (tableArray[i][ii].slice(-1) === ':') {
	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';
	        } else {
	          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');
	        }
	      } else {
	        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);
	      }
	    }
	    txt += '| ' + tableArray[i].join(' | ') + ' |\n';
	  }

	  return txt.trim();
	});

	showdown.subParser('makeMarkdown.tableCell', function (node, globals) {

	  var txt = '';
	  if (!node.hasChildNodes()) {
	    return '';
	  }
	  var children = node.childNodes,
	      childrenLength = children.length;

	  for (var i = 0; i < childrenLength; ++i) {
	    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);
	  }
	  return txt.trim();
	});

	showdown.subParser('makeMarkdown.txt', function (node) {

	  var txt = node.nodeValue;

	  // multiple spaces are collapsed
	  txt = txt.replace(/ +/g, ' ');

	  // replace the custom ¨NBSP; with a space
	  txt = txt.replace(/¨NBSP;/g, ' ');

	  // ", <, > and & should replace escaped html entities
	  txt = showdown.helper.unescapeHTMLEntities(txt);

	  // escape markdown magic characters
	  // emphasis, strong and strikethrough - can appear everywhere
	  // we also escape pipe (|) because of tables
	  // and escape ` because of code blocks and spans
	  txt = txt.replace(/([*_~|`])/g, '\\$1');

	  // escape > because of blockquotes
	  txt = txt.replace(/^(\s*)>/g, '\\$1>');

	  // hash character, only troublesome at the beginning of a line because of headers
	  txt = txt.replace(/^#/gm, '\\#');

	  // horizontal rules
	  txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, '$1\\$2$3');

	  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer
	  txt = txt.replace(/^( {0,3}\d+)\./gm, '$1\\.');

	  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)
	  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\$2');

	  // images and links, ] followed by ( is problematic, so we escape it
	  txt = txt.replace(/]([\s]*)\(/g, '\\]$1\\(');

	  // reference URIs must also be escaped
	  txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, '\\[$1]:');

	  return txt;
	});

	var root = this;

	// AMD Loader
	if (module.exports) {
	  module.exports = showdown;

	// Regular Browser loader
	} else {
	  root.showdown = showdown;
	}
	}).call(commonjsGlobal);


	});

	// Using CDN fiel since the NPM package is broken for Web
	const { Backendless } = window;

	Backendless.initApp("F1B988E2-FAC7-A27A-FF5C-EC00C0402A00", "92F296C8-2424-2159-FFB0-0824B95F1000");

	class BackendlessAdapter {
	    /**
	   * Function to get an storage from a model name
	   * @param {String} model
	   * @returns {*|DataStore}
	   */
	    static getStorage(model) {
	        return Backendless.Data.of(model)
	    }

	    /**
	   * Function to returns a new query
	   * @param {Object} options
	   * @returns {*|DataQuery}
	   */
	    static createQuery(options = {}) {
	        const query = Backendless.DataQueryBuilder.create();

	        if (options.sortBy) {
	            query.setSortBy(options.sortBy);
	        }

	        if (options.where) {
	            query.setWhereClause(options.where);
	        }

	        return query
	    }

	    /**
	   * Function to get Data from an storage
	   * @param {String} model
	   * @param {Object} options
	   * @returns {Promise}
	   */
	    getStorageData(model, options = {}) {
	        const storage = BackendlessAdapter.getStorage(model);
	        const query = BackendlessAdapter.createQuery(options);

	        return storage.find(query)
	    }
	}

	const backendless = new BackendlessAdapter();

	const getChallenges = () => {
	    return backendless.getStorageData('challenges', { sortBy: 'created' })
	};

	const getChallenge = id => {
	    return backendless.getStorageData('challenges', { where: `id = '${id}'` })
	        .then(challenges => {
	            const converter = new showdown.Converter();
	            const challenge = challenges[0] || {};

	            challenge.html = converter.makeHtml(challenge.description || '');

	            return challenge
	        })
	};

	challengesStyles()('challenges-style');

	class Challenges extends PolymerElement {
	    static get template() {
	        return html`
      <style include="common-styles challenges-style"></style>
      <div class="challenges">
        <h2>Are you ready to test yous skills?</h2>
        <hr />
        <div class="challenges__records">
          <dom-repeat items="{{records}}" as="record">
            <template>
              <paper-card heading="{{record.name}}" image="{{record.image}}">
                <div class="card-content">{{record.abstractDescription}}</div>
                <div class="card-actions">
                  <a href="#/challenge/{{record.id}}">
                    <paper-button>Explore</paper-button>
                  </a>
                  <paper-button on-click="_copyClipboard">Share</paper-button>
                </div>
              </paper-card>        
            </template>
          </dom-repeat>
        </div>
      </div>
    `
	    }

	    static get properties() {
	        return {
	            records: {
	                type: Array
	            }
	        }
	    }

	    connectedCallback() {
	        super.connectedCallback();

	        getChallenges().then(challenges => this.records = challenges);
	    }

	    _copyClipboard(e) {
	        const input = document.createElement('input');
	        const href = window.location.href;
	        input.value = `${href.substr(0, href.length - 1)}/${e.model.record.id}`;

	        document.body.appendChild(input);

	        input.focus();
	        input.select();
	        document.execCommand('copy');

	        document.body.removeChild(input);

	        alert('URL copied to Clipboard!');
	    }
	}

	customElements.define('my-challenges', Challenges);

	var challenges = /*#__PURE__*/Object.freeze({

	});

	var hookCallback;

	function hooks () {
	    return hookCallback.apply(null, arguments);
	}

	// This is done to register the method called with moment()
	// without creating circular dependencies.
	function setHookCallback (callback) {
	    hookCallback = callback;
	}

	function isArray(input) {
	    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
	}

	function isObject(input) {
	    // IE8 will treat undefined and null as object if it wasn't for
	    // input != null
	    return input != null && Object.prototype.toString.call(input) === '[object Object]';
	}

	function isObjectEmpty(obj) {
	    if (Object.getOwnPropertyNames) {
	        return (Object.getOwnPropertyNames(obj).length === 0);
	    } else {
	        var k;
	        for (k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                return false;
	            }
	        }
	        return true;
	    }
	}

	function isUndefined(input) {
	    return input === void 0;
	}

	function isNumber(input) {
	    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
	}

	function isDate(input) {
	    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
	}

	function map(arr, fn) {
	    var res = [], i;
	    for (i = 0; i < arr.length; ++i) {
	        res.push(fn(arr[i], i));
	    }
	    return res;
	}

	function hasOwnProp(a, b) {
	    return Object.prototype.hasOwnProperty.call(a, b);
	}

	function extend(a, b) {
	    for (var i in b) {
	        if (hasOwnProp(b, i)) {
	            a[i] = b[i];
	        }
	    }

	    if (hasOwnProp(b, 'toString')) {
	        a.toString = b.toString;
	    }

	    if (hasOwnProp(b, 'valueOf')) {
	        a.valueOf = b.valueOf;
	    }

	    return a;
	}

	function createUTC (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, true).utc();
	}

	function defaultParsingFlags() {
	    // We need to deep clone this object.
	    return {
	        empty           : false,
	        unusedTokens    : [],
	        unusedInput     : [],
	        overflow        : -2,
	        charsLeftOver   : 0,
	        nullInput       : false,
	        invalidMonth    : null,
	        invalidFormat   : false,
	        userInvalidated : false,
	        iso             : false,
	        parsedDateParts : [],
	        meridiem        : null,
	        rfc2822         : false,
	        weekdayMismatch : false
	    };
	}

	function getParsingFlags(m) {
	    if (m._pf == null) {
	        m._pf = defaultParsingFlags();
	    }
	    return m._pf;
	}

	var some;
	if (Array.prototype.some) {
	    some = Array.prototype.some;
	} else {
	    some = function (fun) {
	        var t = Object(this);
	        var len = t.length >>> 0;

	        for (var i = 0; i < len; i++) {
	            if (i in t && fun.call(this, t[i], i, t)) {
	                return true;
	            }
	        }

	        return false;
	    };
	}

	function isValid$1(m) {
	    if (m._isValid == null) {
	        var flags = getParsingFlags(m);
	        var parsedParts = some.call(flags.parsedDateParts, function (i) {
	            return i != null;
	        });
	        var isNowValid = !isNaN(m._d.getTime()) &&
	            flags.overflow < 0 &&
	            !flags.empty &&
	            !flags.invalidMonth &&
	            !flags.invalidWeekday &&
	            !flags.weekdayMismatch &&
	            !flags.nullInput &&
	            !flags.invalidFormat &&
	            !flags.userInvalidated &&
	            (!flags.meridiem || (flags.meridiem && parsedParts));

	        if (m._strict) {
	            isNowValid = isNowValid &&
	                flags.charsLeftOver === 0 &&
	                flags.unusedTokens.length === 0 &&
	                flags.bigHour === undefined;
	        }

	        if (Object.isFrozen == null || !Object.isFrozen(m)) {
	            m._isValid = isNowValid;
	        }
	        else {
	            return isNowValid;
	        }
	    }
	    return m._isValid;
	}

	function createInvalid (flags) {
	    var m = createUTC(NaN);
	    if (flags != null) {
	        extend(getParsingFlags(m), flags);
	    }
	    else {
	        getParsingFlags(m).userInvalidated = true;
	    }

	    return m;
	}

	// Plugins that add properties should also add the key here (null value),
	// so we can properly clone ourselves.
	var momentProperties = hooks.momentProperties = [];

	function copyConfig(to, from) {
	    var i, prop, val;

	    if (!isUndefined(from._isAMomentObject)) {
	        to._isAMomentObject = from._isAMomentObject;
	    }
	    if (!isUndefined(from._i)) {
	        to._i = from._i;
	    }
	    if (!isUndefined(from._f)) {
	        to._f = from._f;
	    }
	    if (!isUndefined(from._l)) {
	        to._l = from._l;
	    }
	    if (!isUndefined(from._strict)) {
	        to._strict = from._strict;
	    }
	    if (!isUndefined(from._tzm)) {
	        to._tzm = from._tzm;
	    }
	    if (!isUndefined(from._isUTC)) {
	        to._isUTC = from._isUTC;
	    }
	    if (!isUndefined(from._offset)) {
	        to._offset = from._offset;
	    }
	    if (!isUndefined(from._pf)) {
	        to._pf = getParsingFlags(from);
	    }
	    if (!isUndefined(from._locale)) {
	        to._locale = from._locale;
	    }

	    if (momentProperties.length > 0) {
	        for (i = 0; i < momentProperties.length; i++) {
	            prop = momentProperties[i];
	            val = from[prop];
	            if (!isUndefined(val)) {
	                to[prop] = val;
	            }
	        }
	    }

	    return to;
	}

	var updateInProgress = false;

	// Moment prototype object
	function Moment(config) {
	    copyConfig(this, config);
	    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	    if (!this.isValid()) {
	        this._d = new Date(NaN);
	    }
	    // Prevent infinite loop in case updateOffset creates new moment
	    // objects.
	    if (updateInProgress === false) {
	        updateInProgress = true;
	        hooks.updateOffset(this);
	        updateInProgress = false;
	    }
	}

	function isMoment (obj) {
	    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
	}

	function absFloor (number) {
	    if (number < 0) {
	        // -0 -> 0
	        return Math.ceil(number) || 0;
	    } else {
	        return Math.floor(number);
	    }
	}

	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion,
	        value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = absFloor(coercedNumber);
	    }

	    return value;
	}

	// compare two arrays, return the number of differences
	function compareArrays(array1, array2, dontConvert) {
	    var len = Math.min(array1.length, array2.length),
	        lengthDiff = Math.abs(array1.length - array2.length),
	        diffs = 0,
	        i;
	    for (i = 0; i < len; i++) {
	        if ((dontConvert && array1[i] !== array2[i]) ||
	            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
	            diffs++;
	        }
	    }
	    return diffs + lengthDiff;
	}

	function warn(msg) {
	    if (hooks.suppressDeprecationWarnings === false &&
	            (typeof console !==  'undefined') && console.warn) {
	        console.warn('Deprecation warning: ' + msg);
	    }
	}

	function deprecate(msg, fn) {
	    var firstTime = true;

	    return extend(function () {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(null, msg);
	        }
	        if (firstTime) {
	            var args = [];
	            var arg;
	            for (var i = 0; i < arguments.length; i++) {
	                arg = '';
	                if (typeof arguments[i] === 'object') {
	                    arg += '\n[' + i + '] ';
	                    for (var key in arguments[0]) {
	                        arg += key + ': ' + arguments[0][key] + ', ';
	                    }
	                    arg = arg.slice(0, -2); // Remove trailing comma and space
	                } else {
	                    arg = arguments[i];
	                }
	                args.push(arg);
	            }
	            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
	            firstTime = false;
	        }
	        return fn.apply(this, arguments);
	    }, fn);
	}

	var deprecations = {};

	function deprecateSimple(name, msg) {
	    if (hooks.deprecationHandler != null) {
	        hooks.deprecationHandler(name, msg);
	    }
	    if (!deprecations[name]) {
	        warn(msg);
	        deprecations[name] = true;
	    }
	}

	hooks.suppressDeprecationWarnings = false;
	hooks.deprecationHandler = null;

	function isFunction(input) {
	    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
	}

	function set$1 (config) {
	    var prop, i;
	    for (i in config) {
	        prop = config[i];
	        if (isFunction(prop)) {
	            this[i] = prop;
	        } else {
	            this['_' + i] = prop;
	        }
	    }
	    this._config = config;
	    // Lenient ordinal parsing accepts just a number in addition to
	    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    this._dayOfMonthOrdinalParseLenient = new RegExp(
	        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	            '|' + (/\d{1,2}/).source);
	}

	function mergeConfigs(parentConfig, childConfig) {
	    var res = extend({}, parentConfig), prop;
	    for (prop in childConfig) {
	        if (hasOwnProp(childConfig, prop)) {
	            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                res[prop] = {};
	                extend(res[prop], parentConfig[prop]);
	                extend(res[prop], childConfig[prop]);
	            } else if (childConfig[prop] != null) {
	                res[prop] = childConfig[prop];
	            } else {
	                delete res[prop];
	            }
	        }
	    }
	    for (prop in parentConfig) {
	        if (hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])) {
	            // make sure changes to properties don't modify parent config
	            res[prop] = extend({}, res[prop]);
	        }
	    }
	    return res;
	}

	function Locale(config) {
	    if (config != null) {
	        this.set(config);
	    }
	}

	var keys;

	if (Object.keys) {
	    keys = Object.keys;
	} else {
	    keys = function (obj) {
	        var i, res = [];
	        for (i in obj) {
	            if (hasOwnProp(obj, i)) {
	                res.push(i);
	            }
	        }
	        return res;
	    };
	}

	var defaultCalendar = {
	    sameDay : '[Today at] LT',
	    nextDay : '[Tomorrow at] LT',
	    nextWeek : 'dddd [at] LT',
	    lastDay : '[Yesterday at] LT',
	    lastWeek : '[Last] dddd [at] LT',
	    sameElse : 'L'
	};

	function calendar (key, mom, now) {
	    var output = this._calendar[key] || this._calendar['sameElse'];
	    return isFunction(output) ? output.call(mom, now) : output;
	}

	var defaultLongDateFormat = {
	    LTS  : 'h:mm:ss A',
	    LT   : 'h:mm A',
	    L    : 'MM/DD/YYYY',
	    LL   : 'MMMM D, YYYY',
	    LLL  : 'MMMM D, YYYY h:mm A',
	    LLLL : 'dddd, MMMM D, YYYY h:mm A'
	};

	function longDateFormat (key) {
	    var format = this._longDateFormat[key],
	        formatUpper = this._longDateFormat[key.toUpperCase()];

	    if (format || !formatUpper) {
	        return format;
	    }

	    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
	        return val.slice(1);
	    });

	    return this._longDateFormat[key];
	}

	var defaultInvalidDate = 'Invalid date';

	function invalidDate () {
	    return this._invalidDate;
	}

	var defaultOrdinal = '%d';
	var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	function ordinal (number) {
	    return this._ordinal.replace('%d', number);
	}

	var defaultRelativeTime = {
	    future : 'in %s',
	    past   : '%s ago',
	    s  : 'a few seconds',
	    ss : '%d seconds',
	    m  : 'a minute',
	    mm : '%d minutes',
	    h  : 'an hour',
	    hh : '%d hours',
	    d  : 'a day',
	    dd : '%d days',
	    M  : 'a month',
	    MM : '%d months',
	    y  : 'a year',
	    yy : '%d years'
	};

	function relativeTime (number, withoutSuffix, string, isFuture) {
	    var output = this._relativeTime[string];
	    return (isFunction(output)) ?
	        output(number, withoutSuffix, string, isFuture) :
	        output.replace(/%d/i, number);
	}

	function pastFuture (diff, output) {
	    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	}

	var aliases = {};

	function addUnitAlias (unit, shorthand) {
	    var lowerCase = unit.toLowerCase();
	    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	}

	function normalizeUnits(units) {
	    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
	}

	function normalizeObjectUnits(inputObject) {
	    var normalizedInput = {},
	        normalizedProp,
	        prop;

	    for (prop in inputObject) {
	        if (hasOwnProp(inputObject, prop)) {
	            normalizedProp = normalizeUnits(prop);
	            if (normalizedProp) {
	                normalizedInput[normalizedProp] = inputObject[prop];
	            }
	        }
	    }

	    return normalizedInput;
	}

	var priorities = {};

	function addUnitPriority(unit, priority) {
	    priorities[unit] = priority;
	}

	function getPrioritizedUnits(unitsObj) {
	    var units = [];
	    for (var u in unitsObj) {
	        units.push({unit: u, priority: priorities[u]});
	    }
	    units.sort(function (a, b) {
	        return a.priority - b.priority;
	    });
	    return units;
	}

	function zeroFill(number, targetLength, forceSign) {
	    var absNumber = '' + Math.abs(number),
	        zerosToFill = targetLength - absNumber.length,
	        sign = number >= 0;
	    return (sign ? (forceSign ? '+' : '') : '-') +
	        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
	}

	var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

	var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

	var formatFunctions = {};

	var formatTokenFunctions = {};

	// token:    'M'
	// padded:   ['MM', 2]
	// ordinal:  'Mo'
	// callback: function () { this.month() + 1 }
	function addFormatToken (token, padded, ordinal, callback) {
	    var func = callback;
	    if (typeof callback === 'string') {
	        func = function () {
	            return this[callback]();
	        };
	    }
	    if (token) {
	        formatTokenFunctions[token] = func;
	    }
	    if (padded) {
	        formatTokenFunctions[padded[0]] = function () {
	            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	        };
	    }
	    if (ordinal) {
	        formatTokenFunctions[ordinal] = function () {
	            return this.localeData().ordinal(func.apply(this, arguments), token);
	        };
	    }
	}

	function removeFormattingTokens(input) {
	    if (input.match(/\[[\s\S]/)) {
	        return input.replace(/^\[|\]$/g, '');
	    }
	    return input.replace(/\\/g, '');
	}

	function makeFormatFunction(format) {
	    var array = format.match(formattingTokens), i, length;

	    for (i = 0, length = array.length; i < length; i++) {
	        if (formatTokenFunctions[array[i]]) {
	            array[i] = formatTokenFunctions[array[i]];
	        } else {
	            array[i] = removeFormattingTokens(array[i]);
	        }
	    }

	    return function (mom) {
	        var output = '', i;
	        for (i = 0; i < length; i++) {
	            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
	        }
	        return output;
	    };
	}

	// format date using native date object
	function formatMoment(m, format) {
	    if (!m.isValid()) {
	        return m.localeData().invalidDate();
	    }

	    format = expandFormat(format, m.localeData());
	    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

	    return formatFunctions[format](m);
	}

	function expandFormat(format, locale) {
	    var i = 5;

	    function replaceLongDateFormatTokens(input) {
	        return locale.longDateFormat(input) || input;
	    }

	    localFormattingTokens.lastIndex = 0;
	    while (i >= 0 && localFormattingTokens.test(format)) {
	        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
	        localFormattingTokens.lastIndex = 0;
	        i -= 1;
	    }

	    return format;
	}

	var match1         = /\d/;            //       0 - 9
	var match2         = /\d\d/;          //      00 - 99
	var match3         = /\d{3}/;         //     000 - 999
	var match4         = /\d{4}/;         //    0000 - 9999
	var match6         = /[+-]?\d{6}/;    // -999999 - 999999
	var match1to2      = /\d\d?/;         //       0 - 99
	var match3to4      = /\d\d\d\d?/;     //     999 - 9999
	var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
	var match1to3      = /\d{1,3}/;       //       0 - 999
	var match1to4      = /\d{1,4}/;       //       0 - 9999
	var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

	var matchUnsigned  = /\d+/;           //       0 - inf
	var matchSigned    = /[+-]?\d+/;      //    -inf - inf

	var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
	var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

	var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

	// any word (or two) characters or numbers including two/three word month in arabic.
	// includes scottish gaelic two word and hyphenated months
	var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

	var regexes = {};

	function addRegexToken (token, regex, strictRegex) {
	    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
	        return (isStrict && strictRegex) ? strictRegex : regex;
	    };
	}

	function getParseRegexForToken (token, config) {
	    if (!hasOwnProp(regexes, token)) {
	        return new RegExp(unescapeFormat(token));
	    }

	    return regexes[token](config._strict, config._locale);
	}

	// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	function unescapeFormat(s) {
	    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
	        return p1 || p2 || p3 || p4;
	    }));
	}

	function regexEscape(s) {
	    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	}

	var tokens = {};

	function addParseToken (token, callback) {
	    var i, func = callback;
	    if (typeof token === 'string') {
	        token = [token];
	    }
	    if (isNumber(callback)) {
	        func = function (input, array) {
	            array[callback] = toInt(input);
	        };
	    }
	    for (i = 0; i < token.length; i++) {
	        tokens[token[i]] = func;
	    }
	}

	function addWeekParseToken (token, callback) {
	    addParseToken(token, function (input, array, config, token) {
	        config._w = config._w || {};
	        callback(input, config._w, config, token);
	    });
	}

	function addTimeToArrayFromToken(token, input, config) {
	    if (input != null && hasOwnProp(tokens, token)) {
	        tokens[token](input, config._a, config, token);
	    }
	}

	var YEAR = 0;
	var MONTH = 1;
	var DATE = 2;
	var HOUR = 3;
	var MINUTE = 4;
	var SECOND = 5;
	var MILLISECOND = 6;
	var WEEK = 7;
	var WEEKDAY = 8;

	// FORMATTING

	addFormatToken('Y', 0, 0, function () {
	    var y = this.year();
	    return y <= 9999 ? '' + y : '+' + y;
	});

	addFormatToken(0, ['YY', 2], 0, function () {
	    return this.year() % 100;
	});

	addFormatToken(0, ['YYYY',   4],       0, 'year');
	addFormatToken(0, ['YYYYY',  5],       0, 'year');
	addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	// ALIASES

	addUnitAlias('year', 'y');

	// PRIORITIES

	addUnitPriority('year', 1);

	// PARSING

	addRegexToken('Y',      matchSigned);
	addRegexToken('YY',     match1to2, match2);
	addRegexToken('YYYY',   match1to4, match4);
	addRegexToken('YYYYY',  match1to6, match6);
	addRegexToken('YYYYYY', match1to6, match6);

	addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	addParseToken('YYYY', function (input, array) {
	    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	});
	addParseToken('YY', function (input, array) {
	    array[YEAR] = hooks.parseTwoDigitYear(input);
	});
	addParseToken('Y', function (input, array) {
	    array[YEAR] = parseInt(input, 10);
	});

	// HELPERS

	function daysInYear(year) {
	    return isLeapYear(year) ? 366 : 365;
	}

	function isLeapYear(year) {
	    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	}

	// HOOKS

	hooks.parseTwoDigitYear = function (input) {
	    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	};

	// MOMENTS

	var getSetYear = makeGetSet('FullYear', true);

	function getIsLeapYear () {
	    return isLeapYear(this.year());
	}

	function makeGetSet (unit, keepTime) {
	    return function (value) {
	        if (value != null) {
	            set$2(this, unit, value);
	            hooks.updateOffset(this, keepTime);
	            return this;
	        } else {
	            return get$1(this, unit);
	        }
	    };
	}

	function get$1 (mom, unit) {
	    return mom.isValid() ?
	        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
	}

	function set$2 (mom, unit, value) {
	    if (mom.isValid() && !isNaN(value)) {
	        if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
	        }
	        else {
	            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	        }
	    }
	}

	// MOMENTS

	function stringGet (units) {
	    units = normalizeUnits(units);
	    if (isFunction(this[units])) {
	        return this[units]();
	    }
	    return this;
	}


	function stringSet (units, value) {
	    if (typeof units === 'object') {
	        units = normalizeObjectUnits(units);
	        var prioritized = getPrioritizedUnits(units);
	        for (var i = 0; i < prioritized.length; i++) {
	            this[prioritized[i].unit](units[prioritized[i].unit]);
	        }
	    } else {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units](value);
	        }
	    }
	    return this;
	}

	function mod(n, x) {
	    return ((n % x) + x) % x;
	}

	var indexOf;

	if (Array.prototype.indexOf) {
	    indexOf = Array.prototype.indexOf;
	} else {
	    indexOf = function (o) {
	        // I know
	        var i;
	        for (i = 0; i < this.length; ++i) {
	            if (this[i] === o) {
	                return i;
	            }
	        }
	        return -1;
	    };
	}

	function daysInMonth(year, month) {
	    if (isNaN(year) || isNaN(month)) {
	        return NaN;
	    }
	    var modMonth = mod(month, 12);
	    year += (month - modMonth) / 12;
	    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
	}

	// FORMATTING

	addFormatToken('M', ['MM', 2], 'Mo', function () {
	    return this.month() + 1;
	});

	addFormatToken('MMM', 0, 0, function (format) {
	    return this.localeData().monthsShort(this, format);
	});

	addFormatToken('MMMM', 0, 0, function (format) {
	    return this.localeData().months(this, format);
	});

	// ALIASES

	addUnitAlias('month', 'M');

	// PRIORITY

	addUnitPriority('month', 8);

	// PARSING

	addRegexToken('M',    match1to2);
	addRegexToken('MM',   match1to2, match2);
	addRegexToken('MMM',  function (isStrict, locale) {
	    return locale.monthsShortRegex(isStrict);
	});
	addRegexToken('MMMM', function (isStrict, locale) {
	    return locale.monthsRegex(isStrict);
	});

	addParseToken(['M', 'MM'], function (input, array) {
	    array[MONTH] = toInt(input) - 1;
	});

	addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	    var month = config._locale.monthsParse(input, token, config._strict);
	    // if we didn't find a month name, mark the date as invalid.
	    if (month != null) {
	        array[MONTH] = month;
	    } else {
	        getParsingFlags(config).invalidMonth = input;
	    }
	});

	// LOCALES

	var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
	var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
	function localeMonths (m, format) {
	    if (!m) {
	        return isArray(this._months) ? this._months :
	            this._months['standalone'];
	    }
	    return isArray(this._months) ? this._months[m.month()] :
	        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
	}

	var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
	function localeMonthsShort (m, format) {
	    if (!m) {
	        return isArray(this._monthsShort) ? this._monthsShort :
	            this._monthsShort['standalone'];
	    }
	    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
	        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
	}

	function handleStrictParse(monthName, format, strict) {
	    var i, ii, mom, llc = monthName.toLocaleLowerCase();
	    if (!this._monthsParse) {
	        // this is not used
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	        for (i = 0; i < 12; ++i) {
	            mom = createUTC([2000, i]);
	            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
	            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'MMM') {
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._longMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._longMonthsParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortMonthsParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeMonthsParse (monthName, format, strict) {
	    var i, mom, regex;

	    if (this._monthsParseExact) {
	        return handleStrictParse.call(this, monthName, format, strict);
	    }

	    if (!this._monthsParse) {
	        this._monthsParse = [];
	        this._longMonthsParse = [];
	        this._shortMonthsParse = [];
	    }

	    // TODO: add sorting
	    // Sorting makes sure if one month (or abbr) is a prefix of another
	    // see sorting in computeMonthsParse
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        if (strict && !this._longMonthsParse[i]) {
	            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
	            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
	        }
	        if (!strict && !this._monthsParse[i]) {
	            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
	            return i;
	        } else if (!strict && this._monthsParse[i].test(monthName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function setMonth (mom, value) {
	    var dayOfMonth;

	    if (!mom.isValid()) {
	        // No op
	        return mom;
	    }

	    if (typeof value === 'string') {
	        if (/^\d+$/.test(value)) {
	            value = toInt(value);
	        } else {
	            value = mom.localeData().monthsParse(value);
	            // TODO: Another silent failure?
	            if (!isNumber(value)) {
	                return mom;
	            }
	        }
	    }

	    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	    return mom;
	}

	function getSetMonth (value) {
	    if (value != null) {
	        setMonth(this, value);
	        hooks.updateOffset(this, true);
	        return this;
	    } else {
	        return get$1(this, 'Month');
	    }
	}

	function getDaysInMonth () {
	    return daysInMonth(this.year(), this.month());
	}

	var defaultMonthsShortRegex = matchWord;
	function monthsShortRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsShortStrictRegex;
	        } else {
	            return this._monthsShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsShortRegex')) {
	            this._monthsShortRegex = defaultMonthsShortRegex;
	        }
	        return this._monthsShortStrictRegex && isStrict ?
	            this._monthsShortStrictRegex : this._monthsShortRegex;
	    }
	}

	var defaultMonthsRegex = matchWord;
	function monthsRegex (isStrict) {
	    if (this._monthsParseExact) {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            computeMonthsParse.call(this);
	        }
	        if (isStrict) {
	            return this._monthsStrictRegex;
	        } else {
	            return this._monthsRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_monthsRegex')) {
	            this._monthsRegex = defaultMonthsRegex;
	        }
	        return this._monthsStrictRegex && isStrict ?
	            this._monthsStrictRegex : this._monthsRegex;
	    }
	}

	function computeMonthsParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom;
	    for (i = 0; i < 12; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, i]);
	        shortPieces.push(this.monthsShort(mom, ''));
	        longPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.months(mom, ''));
	        mixedPieces.push(this.monthsShort(mom, ''));
	    }
	    // Sorting makes sure if one month (or abbr) is a prefix of another it
	    // will match the longer piece.
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 12; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	    }
	    for (i = 0; i < 24; i++) {
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._monthsShortRegex = this._monthsRegex;
	    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	}

	function createDate (y, m, d, h, M, s, ms) {
	    // can't just apply() to create a date:
	    // https://stackoverflow.com/q/181348
	    var date = new Date(y, m, d, h, M, s, ms);

	    // the date constructor remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
	        date.setFullYear(y);
	    }
	    return date;
	}

	function createUTCDate (y) {
	    var date = new Date(Date.UTC.apply(null, arguments));

	    // the Date.UTC function remaps years 0-99 to 1900-1999
	    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
	        date.setUTCFullYear(y);
	    }
	    return date;
	}

	// start-of-first-week - start-of-year
	function firstWeekOffset(year, dow, doy) {
	    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	        fwd = 7 + dow - doy,
	        // first-week day local weekday -- which local weekday is fwd
	        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	    return -fwdlw + fwd - 1;
	}

	// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	    var localWeekday = (7 + weekday - dow) % 7,
	        weekOffset = firstWeekOffset(year, dow, doy),
	        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	        resYear, resDayOfYear;

	    if (dayOfYear <= 0) {
	        resYear = year - 1;
	        resDayOfYear = daysInYear(resYear) + dayOfYear;
	    } else if (dayOfYear > daysInYear(year)) {
	        resYear = year + 1;
	        resDayOfYear = dayOfYear - daysInYear(year);
	    } else {
	        resYear = year;
	        resDayOfYear = dayOfYear;
	    }

	    return {
	        year: resYear,
	        dayOfYear: resDayOfYear
	    };
	}

	function weekOfYear(mom, dow, doy) {
	    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	        resWeek, resYear;

	    if (week < 1) {
	        resYear = mom.year() - 1;
	        resWeek = week + weeksInYear(resYear, dow, doy);
	    } else if (week > weeksInYear(mom.year(), dow, doy)) {
	        resWeek = week - weeksInYear(mom.year(), dow, doy);
	        resYear = mom.year() + 1;
	    } else {
	        resYear = mom.year();
	        resWeek = week;
	    }

	    return {
	        week: resWeek,
	        year: resYear
	    };
	}

	function weeksInYear(year, dow, doy) {
	    var weekOffset = firstWeekOffset(year, dow, doy),
	        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	}

	// FORMATTING

	addFormatToken('w', ['ww', 2], 'wo', 'week');
	addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	// ALIASES

	addUnitAlias('week', 'w');
	addUnitAlias('isoWeek', 'W');

	// PRIORITIES

	addUnitPriority('week', 5);
	addUnitPriority('isoWeek', 5);

	// PARSING

	addRegexToken('w',  match1to2);
	addRegexToken('ww', match1to2, match2);
	addRegexToken('W',  match1to2);
	addRegexToken('WW', match1to2, match2);

	addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
	    week[token.substr(0, 1)] = toInt(input);
	});

	// HELPERS

	// LOCALES

	function localeWeek (mom) {
	    return weekOfYear(mom, this._week.dow, this._week.doy).week;
	}

	var defaultLocaleWeek = {
	    dow : 0, // Sunday is the first day of the week.
	    doy : 6  // The week that contains Jan 1st is the first week of the year.
	};

	function localeFirstDayOfWeek () {
	    return this._week.dow;
	}

	function localeFirstDayOfYear () {
	    return this._week.doy;
	}

	// MOMENTS

	function getSetWeek (input) {
	    var week = this.localeData().week(this);
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	function getSetISOWeek (input) {
	    var week = weekOfYear(this, 1, 4).week;
	    return input == null ? week : this.add((input - week) * 7, 'd');
	}

	// FORMATTING

	addFormatToken('d', 0, 'do', 'day');

	addFormatToken('dd', 0, 0, function (format) {
	    return this.localeData().weekdaysMin(this, format);
	});

	addFormatToken('ddd', 0, 0, function (format) {
	    return this.localeData().weekdaysShort(this, format);
	});

	addFormatToken('dddd', 0, 0, function (format) {
	    return this.localeData().weekdays(this, format);
	});

	addFormatToken('e', 0, 0, 'weekday');
	addFormatToken('E', 0, 0, 'isoWeekday');

	// ALIASES

	addUnitAlias('day', 'd');
	addUnitAlias('weekday', 'e');
	addUnitAlias('isoWeekday', 'E');

	// PRIORITY
	addUnitPriority('day', 11);
	addUnitPriority('weekday', 11);
	addUnitPriority('isoWeekday', 11);

	// PARSING

	addRegexToken('d',    match1to2);
	addRegexToken('e',    match1to2);
	addRegexToken('E',    match1to2);
	addRegexToken('dd',   function (isStrict, locale) {
	    return locale.weekdaysMinRegex(isStrict);
	});
	addRegexToken('ddd',   function (isStrict, locale) {
	    return locale.weekdaysShortRegex(isStrict);
	});
	addRegexToken('dddd',   function (isStrict, locale) {
	    return locale.weekdaysRegex(isStrict);
	});

	addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	    var weekday = config._locale.weekdaysParse(input, token, config._strict);
	    // if we didn't get a weekday name, mark the date as invalid
	    if (weekday != null) {
	        week.d = weekday;
	    } else {
	        getParsingFlags(config).invalidWeekday = input;
	    }
	});

	addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	    week[token] = toInt(input);
	});

	// HELPERS

	function parseWeekday(input, locale) {
	    if (typeof input !== 'string') {
	        return input;
	    }

	    if (!isNaN(input)) {
	        return parseInt(input, 10);
	    }

	    input = locale.weekdaysParse(input);
	    if (typeof input === 'number') {
	        return input;
	    }

	    return null;
	}

	function parseIsoWeekday(input, locale) {
	    if (typeof input === 'string') {
	        return locale.weekdaysParse(input) % 7 || 7;
	    }
	    return isNaN(input) ? null : input;
	}

	// LOCALES

	var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
	function localeWeekdays (m, format) {
	    if (!m) {
	        return isArray(this._weekdays) ? this._weekdays :
	            this._weekdays['standalone'];
	    }
	    return isArray(this._weekdays) ? this._weekdays[m.day()] :
	        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
	}

	var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
	function localeWeekdaysShort (m) {
	    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
	}

	var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
	function localeWeekdaysMin (m) {
	    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
	}

	function handleStrictParse$1(weekdayName, format, strict) {
	    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._minWeekdaysParse = [];

	        for (i = 0; i < 7; ++i) {
	            mom = createUTC([2000, 1]).day(i);
	            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
	            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
	            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	        }
	    }

	    if (strict) {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    } else {
	        if (format === 'dddd') {
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else if (format === 'ddd') {
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        } else {
	            ii = indexOf.call(this._minWeekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._weekdaysParse, llc);
	            if (ii !== -1) {
	                return ii;
	            }
	            ii = indexOf.call(this._shortWeekdaysParse, llc);
	            return ii !== -1 ? ii : null;
	        }
	    }
	}

	function localeWeekdaysParse (weekdayName, format, strict) {
	    var i, mom, regex;

	    if (this._weekdaysParseExact) {
	        return handleStrictParse$1.call(this, weekdayName, format, strict);
	    }

	    if (!this._weekdaysParse) {
	        this._weekdaysParse = [];
	        this._minWeekdaysParse = [];
	        this._shortWeekdaysParse = [];
	        this._fullWeekdaysParse = [];
	    }

	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already

	        mom = createUTC([2000, 1]).day(i);
	        if (strict && !this._fullWeekdaysParse[i]) {
	            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
	            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
	            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
	        }
	        if (!this._weekdaysParse[i]) {
	            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
	            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	        }
	        // test the regex
	        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
	            return i;
	        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	            return i;
	        }
	    }
	}

	// MOMENTS

	function getSetDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	    if (input != null) {
	        input = parseWeekday(input, this.localeData());
	        return this.add(input - day, 'd');
	    } else {
	        return day;
	    }
	}

	function getSetLocaleDayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	    return input == null ? weekday : this.add(input - weekday, 'd');
	}

	function getSetISODayOfWeek (input) {
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }

	    // behaves the same as moment#day except
	    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	    // as a setter, sunday should belong to the previous week.

	    if (input != null) {
	        var weekday = parseIsoWeekday(input, this.localeData());
	        return this.day(this.day() % 7 ? weekday : weekday - 7);
	    } else {
	        return this.day() || 7;
	    }
	}

	var defaultWeekdaysRegex = matchWord;
	function weekdaysRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysStrictRegex;
	        } else {
	            return this._weekdaysRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            this._weekdaysRegex = defaultWeekdaysRegex;
	        }
	        return this._weekdaysStrictRegex && isStrict ?
	            this._weekdaysStrictRegex : this._weekdaysRegex;
	    }
	}

	var defaultWeekdaysShortRegex = matchWord;
	function weekdaysShortRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysShortStrictRegex;
	        } else {
	            return this._weekdaysShortRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	        }
	        return this._weekdaysShortStrictRegex && isStrict ?
	            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
	    }
	}

	var defaultWeekdaysMinRegex = matchWord;
	function weekdaysMinRegex (isStrict) {
	    if (this._weekdaysParseExact) {
	        if (!hasOwnProp(this, '_weekdaysRegex')) {
	            computeWeekdaysParse.call(this);
	        }
	        if (isStrict) {
	            return this._weekdaysMinStrictRegex;
	        } else {
	            return this._weekdaysMinRegex;
	        }
	    } else {
	        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	        }
	        return this._weekdaysMinStrictRegex && isStrict ?
	            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
	    }
	}


	function computeWeekdaysParse () {
	    function cmpLenRev(a, b) {
	        return b.length - a.length;
	    }

	    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
	        i, mom, minp, shortp, longp;
	    for (i = 0; i < 7; i++) {
	        // make the regex if we don't have it already
	        mom = createUTC([2000, 1]).day(i);
	        minp = this.weekdaysMin(mom, '');
	        shortp = this.weekdaysShort(mom, '');
	        longp = this.weekdays(mom, '');
	        minPieces.push(minp);
	        shortPieces.push(shortp);
	        longPieces.push(longp);
	        mixedPieces.push(minp);
	        mixedPieces.push(shortp);
	        mixedPieces.push(longp);
	    }
	    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	    // will match the longer piece.
	    minPieces.sort(cmpLenRev);
	    shortPieces.sort(cmpLenRev);
	    longPieces.sort(cmpLenRev);
	    mixedPieces.sort(cmpLenRev);
	    for (i = 0; i < 7; i++) {
	        shortPieces[i] = regexEscape(shortPieces[i]);
	        longPieces[i] = regexEscape(longPieces[i]);
	        mixedPieces[i] = regexEscape(mixedPieces[i]);
	    }

	    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	    this._weekdaysShortRegex = this._weekdaysRegex;
	    this._weekdaysMinRegex = this._weekdaysRegex;

	    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
	    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
	    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
	}

	// FORMATTING

	function hFormat() {
	    return this.hours() % 12 || 12;
	}

	function kFormat() {
	    return this.hours() || 24;
	}

	addFormatToken('H', ['HH', 2], 0, 'hour');
	addFormatToken('h', ['hh', 2], 0, hFormat);
	addFormatToken('k', ['kk', 2], 0, kFormat);

	addFormatToken('hmm', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	});

	addFormatToken('hmmss', 0, 0, function () {
	    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	addFormatToken('Hmm', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2);
	});

	addFormatToken('Hmmss', 0, 0, function () {
	    return '' + this.hours() + zeroFill(this.minutes(), 2) +
	        zeroFill(this.seconds(), 2);
	});

	function meridiem (token, lowercase) {
	    addFormatToken(token, 0, 0, function () {
	        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
	    });
	}

	meridiem('a', true);
	meridiem('A', false);

	// ALIASES

	addUnitAlias('hour', 'h');

	// PRIORITY
	addUnitPriority('hour', 13);

	// PARSING

	function matchMeridiem (isStrict, locale) {
	    return locale._meridiemParse;
	}

	addRegexToken('a',  matchMeridiem);
	addRegexToken('A',  matchMeridiem);
	addRegexToken('H',  match1to2);
	addRegexToken('h',  match1to2);
	addRegexToken('k',  match1to2);
	addRegexToken('HH', match1to2, match2);
	addRegexToken('hh', match1to2, match2);
	addRegexToken('kk', match1to2, match2);

	addRegexToken('hmm', match3to4);
	addRegexToken('hmmss', match5to6);
	addRegexToken('Hmm', match3to4);
	addRegexToken('Hmmss', match5to6);

	addParseToken(['H', 'HH'], HOUR);
	addParseToken(['k', 'kk'], function (input, array, config) {
	    var kInput = toInt(input);
	    array[HOUR] = kInput === 24 ? 0 : kInput;
	});
	addParseToken(['a', 'A'], function (input, array, config) {
	    config._isPm = config._locale.isPM(input);
	    config._meridiem = input;
	});
	addParseToken(['h', 'hh'], function (input, array, config) {
	    array[HOUR] = toInt(input);
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	    getParsingFlags(config).bigHour = true;
	});
	addParseToken('Hmm', function (input, array, config) {
	    var pos = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos));
	    array[MINUTE] = toInt(input.substr(pos));
	});
	addParseToken('Hmmss', function (input, array, config) {
	    var pos1 = input.length - 4;
	    var pos2 = input.length - 2;
	    array[HOUR] = toInt(input.substr(0, pos1));
	    array[MINUTE] = toInt(input.substr(pos1, 2));
	    array[SECOND] = toInt(input.substr(pos2));
	});

	// LOCALES

	function localeIsPM (input) {
	    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	    // Using charAt should be more compatible.
	    return ((input + '').toLowerCase().charAt(0) === 'p');
	}

	var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
	function localeMeridiem (hours, minutes, isLower) {
	    if (hours > 11) {
	        return isLower ? 'pm' : 'PM';
	    } else {
	        return isLower ? 'am' : 'AM';
	    }
	}


	// MOMENTS

	// Setting the hour should keep the time, because the user explicitly
	// specified which hour they want. So trying to maintain the same hour (in
	// a new timezone) makes sense. Adding/subtracting hours does not follow
	// this rule.
	var getSetHour = makeGetSet('Hours', true);

	var baseConfig = {
	    calendar: defaultCalendar,
	    longDateFormat: defaultLongDateFormat,
	    invalidDate: defaultInvalidDate,
	    ordinal: defaultOrdinal,
	    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	    relativeTime: defaultRelativeTime,

	    months: defaultLocaleMonths,
	    monthsShort: defaultLocaleMonthsShort,

	    week: defaultLocaleWeek,

	    weekdays: defaultLocaleWeekdays,
	    weekdaysMin: defaultLocaleWeekdaysMin,
	    weekdaysShort: defaultLocaleWeekdaysShort,

	    meridiemParse: defaultLocaleMeridiemParse
	};

	// internal storage for locale config files
	var locales = {};
	var localeFamilies = {};
	var globalLocale;

	function normalizeLocale(key) {
	    return key ? key.toLowerCase().replace('_', '-') : key;
	}

	// pick the locale from the array
	// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	function chooseLocale(names) {
	    var i = 0, j, next, locale, split;

	    while (i < names.length) {
	        split = normalizeLocale(names[i]).split('-');
	        j = split.length;
	        next = normalizeLocale(names[i + 1]);
	        next = next ? next.split('-') : null;
	        while (j > 0) {
	            locale = loadLocale(split.slice(0, j).join('-'));
	            if (locale) {
	                return locale;
	            }
	            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
	                //the next array item is better than a shallower substring of this one
	                break;
	            }
	            j--;
	        }
	        i++;
	    }
	    return globalLocale;
	}

	function loadLocale(name) {
	    var oldLocale = null;
	    // TODO: Find a better way to register and load all the locales in Node
	    if (!locales[name] && (typeof module !== 'undefined') &&
	            module && module.exports) {
	        try {
	            oldLocale = globalLocale._abbr;
	            var aliasedRequire = require;
	            aliasedRequire('./locale/' + name);
	            getSetGlobalLocale(oldLocale);
	        } catch (e) {}
	    }
	    return locales[name];
	}

	// This function will load locale and then set the global locale.  If
	// no arguments are passed in, it will simply return the current global
	// locale key.
	function getSetGlobalLocale (key, values) {
	    var data;
	    if (key) {
	        if (isUndefined(values)) {
	            data = getLocale(key);
	        }
	        else {
	            data = defineLocale(key, values);
	        }

	        if (data) {
	            // moment.duration._locale = moment._locale = data;
	            globalLocale = data;
	        }
	        else {
	            if ((typeof console !==  'undefined') && console.warn) {
	                //warn user if arguments are passed but the locale could not be set
	                console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
	            }
	        }
	    }

	    return globalLocale._abbr;
	}

	function defineLocale (name, config) {
	    if (config !== null) {
	        var locale, parentConfig = baseConfig;
	        config.abbr = name;
	        if (locales[name] != null) {
	            deprecateSimple('defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                    'an existing locale. moment.defineLocale(localeName, ' +
	                    'config) should only be used for creating a new locale ' +
	                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
	            parentConfig = locales[name]._config;
	        } else if (config.parentLocale != null) {
	            if (locales[config.parentLocale] != null) {
	                parentConfig = locales[config.parentLocale]._config;
	            } else {
	                locale = loadLocale(config.parentLocale);
	                if (locale != null) {
	                    parentConfig = locale._config;
	                } else {
	                    if (!localeFamilies[config.parentLocale]) {
	                        localeFamilies[config.parentLocale] = [];
	                    }
	                    localeFamilies[config.parentLocale].push({
	                        name: name,
	                        config: config
	                    });
	                    return null;
	                }
	            }
	        }
	        locales[name] = new Locale(mergeConfigs(parentConfig, config));

	        if (localeFamilies[name]) {
	            localeFamilies[name].forEach(function (x) {
	                defineLocale(x.name, x.config);
	            });
	        }

	        // backwards compat for now: also set the locale
	        // make sure we set the locale AFTER all child locales have been
	        // created, so we won't end up with the child locale set.
	        getSetGlobalLocale(name);


	        return locales[name];
	    } else {
	        // useful for testing
	        delete locales[name];
	        return null;
	    }
	}

	function updateLocale(name, config) {
	    if (config != null) {
	        var locale, tmpLocale, parentConfig = baseConfig;
	        // MERGE
	        tmpLocale = loadLocale(name);
	        if (tmpLocale != null) {
	            parentConfig = tmpLocale._config;
	        }
	        config = mergeConfigs(parentConfig, config);
	        locale = new Locale(config);
	        locale.parentLocale = locales[name];
	        locales[name] = locale;

	        // backwards compat for now: also set the locale
	        getSetGlobalLocale(name);
	    } else {
	        // pass null for config to unupdate, useful for tests
	        if (locales[name] != null) {
	            if (locales[name].parentLocale != null) {
	                locales[name] = locales[name].parentLocale;
	            } else if (locales[name] != null) {
	                delete locales[name];
	            }
	        }
	    }
	    return locales[name];
	}

	// returns locale data
	function getLocale (key) {
	    var locale;

	    if (key && key._locale && key._locale._abbr) {
	        key = key._locale._abbr;
	    }

	    if (!key) {
	        return globalLocale;
	    }

	    if (!isArray(key)) {
	        //short-circuit everything else
	        locale = loadLocale(key);
	        if (locale) {
	            return locale;
	        }
	        key = [key];
	    }

	    return chooseLocale(key);
	}

	function listLocales() {
	    return keys(locales);
	}

	function checkOverflow (m) {
	    var overflow;
	    var a = m._a;

	    if (a && getParsingFlags(m).overflow === -2) {
	        overflow =
	            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
	            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
	            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
	            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
	            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
	            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
	            -1;

	        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
	            overflow = DATE;
	        }
	        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	            overflow = WEEK;
	        }
	        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	            overflow = WEEKDAY;
	        }

	        getParsingFlags(m).overflow = overflow;
	    }

	    return m;
	}

	// Pick the first defined of two or three arguments.
	function defaults(a, b, c) {
	    if (a != null) {
	        return a;
	    }
	    if (b != null) {
	        return b;
	    }
	    return c;
	}

	function currentDateArray(config) {
	    // hooks is actually the exported moment object
	    var nowValue = new Date(hooks.now());
	    if (config._useUTC) {
	        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
	    }
	    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	}

	// convert an array to a date.
	// the array should mirror the parameters below
	// note: all values past the year are optional and will default to the lowest possible value.
	// [year, month, day , hour, minute, second, millisecond]
	function configFromArray (config) {
	    var i, date, input = [], currentDate, expectedWeekday, yearToUse;

	    if (config._d) {
	        return;
	    }

	    currentDate = currentDateArray(config);

	    //compute day of the year from weeks and weekdays
	    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	        dayOfYearFromWeekInfo(config);
	    }

	    //if the day of the year is set, figure out what it is
	    if (config._dayOfYear != null) {
	        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
	            getParsingFlags(config)._overflowDayOfYear = true;
	        }

	        date = createUTCDate(yearToUse, 0, config._dayOfYear);
	        config._a[MONTH] = date.getUTCMonth();
	        config._a[DATE] = date.getUTCDate();
	    }

	    // Default to current date.
	    // * if no year, month, day of month are given, default to today
	    // * if day of month is given, default month and year
	    // * if month is given, default only year
	    // * if year is given, don't default anything
	    for (i = 0; i < 3 && config._a[i] == null; ++i) {
	        config._a[i] = input[i] = currentDate[i];
	    }

	    // Zero out whatever was not defaulted, including time
	    for (; i < 7; i++) {
	        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
	    }

	    // Check for 24:00:00.000
	    if (config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0) {
	        config._nextDay = true;
	        config._a[HOUR] = 0;
	    }

	    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
	    expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

	    // Apply timezone offset from input. The actual utcOffset can be changed
	    // with parseZone.
	    if (config._tzm != null) {
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	    }

	    if (config._nextDay) {
	        config._a[HOUR] = 24;
	    }

	    // check for mismatching day of week
	    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
	        getParsingFlags(config).weekdayMismatch = true;
	    }
	}

	function dayOfYearFromWeekInfo(config) {
	    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

	    w = config._w;
	    if (w.GG != null || w.W != null || w.E != null) {
	        dow = 1;
	        doy = 4;

	        // TODO: We need to take the current isoWeekYear, but that depends on
	        // how we interpret now (local, utc, fixed offset). So create
	        // a now version of current config (take local/utc/offset flags, and
	        // create now).
	        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
	        week = defaults(w.W, 1);
	        weekday = defaults(w.E, 1);
	        if (weekday < 1 || weekday > 7) {
	            weekdayOverflow = true;
	        }
	    } else {
	        dow = config._locale._week.dow;
	        doy = config._locale._week.doy;

	        var curWeek = weekOfYear(createLocal(), dow, doy);

	        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	        // Default to current week.
	        week = defaults(w.w, curWeek.week);

	        if (w.d != null) {
	            // weekday -- low day numbers are considered next week
	            weekday = w.d;
	            if (weekday < 0 || weekday > 6) {
	                weekdayOverflow = true;
	            }
	        } else if (w.e != null) {
	            // local weekday -- counting starts from begining of week
	            weekday = w.e + dow;
	            if (w.e < 0 || w.e > 6) {
	                weekdayOverflow = true;
	            }
	        } else {
	            // default to begining of week
	            weekday = dow;
	        }
	    }
	    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	        getParsingFlags(config)._overflowWeeks = true;
	    } else if (weekdayOverflow != null) {
	        getParsingFlags(config)._overflowWeekday = true;
	    } else {
	        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	        config._a[YEAR] = temp.year;
	        config._dayOfYear = temp.dayOfYear;
	    }
	}

	// iso 8601 regex
	// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
	var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

	var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

	var isoDates = [
	    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	    ['YYYY-DDD', /\d{4}-\d{3}/],
	    ['YYYY-MM', /\d{4}-\d\d/, false],
	    ['YYYYYYMMDD', /[+-]\d{10}/],
	    ['YYYYMMDD', /\d{8}/],
	    // YYYYMM is NOT allowed by the standard
	    ['GGGG[W]WWE', /\d{4}W\d{3}/],
	    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	    ['YYYYDDD', /\d{7}/]
	];

	// iso time formats and regexes
	var isoTimes = [
	    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	    ['HH:mm', /\d\d:\d\d/],
	    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	    ['HHmmss', /\d\d\d\d\d\d/],
	    ['HHmm', /\d\d\d\d/],
	    ['HH', /\d\d/]
	];

	var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

	// date from iso format
	function configFromISO(config) {
	    var i, l,
	        string = config._i,
	        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	        allowTime, dateFormat, timeFormat, tzFormat;

	    if (match) {
	        getParsingFlags(config).iso = true;

	        for (i = 0, l = isoDates.length; i < l; i++) {
	            if (isoDates[i][1].exec(match[1])) {
	                dateFormat = isoDates[i][0];
	                allowTime = isoDates[i][2] !== false;
	                break;
	            }
	        }
	        if (dateFormat == null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[3]) {
	            for (i = 0, l = isoTimes.length; i < l; i++) {
	                if (isoTimes[i][1].exec(match[3])) {
	                    // match[2] should be 'T' or space
	                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                    break;
	                }
	            }
	            if (timeFormat == null) {
	                config._isValid = false;
	                return;
	            }
	        }
	        if (!allowTime && timeFormat != null) {
	            config._isValid = false;
	            return;
	        }
	        if (match[4]) {
	            if (tzRegex.exec(match[4])) {
	                tzFormat = 'Z';
	            } else {
	                config._isValid = false;
	                return;
	            }
	        }
	        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	        configFromStringAndFormat(config);
	    } else {
	        config._isValid = false;
	    }
	}

	// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

	function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
	    var result = [
	        untruncateYear(yearStr),
	        defaultLocaleMonthsShort.indexOf(monthStr),
	        parseInt(dayStr, 10),
	        parseInt(hourStr, 10),
	        parseInt(minuteStr, 10)
	    ];

	    if (secondStr) {
	        result.push(parseInt(secondStr, 10));
	    }

	    return result;
	}

	function untruncateYear(yearStr) {
	    var year = parseInt(yearStr, 10);
	    if (year <= 49) {
	        return 2000 + year;
	    } else if (year <= 999) {
	        return 1900 + year;
	    }
	    return year;
	}

	function preprocessRFC2822(s) {
	    // Remove comments and folding whitespace and replace multiple-spaces with a single space
	    return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}

	function checkWeekday(weekdayStr, parsedInput, config) {
	    if (weekdayStr) {
	        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
	        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
	        if (weekdayProvided !== weekdayActual) {
	            getParsingFlags(config).weekdayMismatch = true;
	            config._isValid = false;
	            return false;
	        }
	    }
	    return true;
	}

	var obsOffsets = {
	    UT: 0,
	    GMT: 0,
	    EDT: -4 * 60,
	    EST: -5 * 60,
	    CDT: -5 * 60,
	    CST: -6 * 60,
	    MDT: -6 * 60,
	    MST: -7 * 60,
	    PDT: -7 * 60,
	    PST: -8 * 60
	};

	function calculateOffset(obsOffset, militaryOffset, numOffset) {
	    if (obsOffset) {
	        return obsOffsets[obsOffset];
	    } else if (militaryOffset) {
	        // the only allowed military tz is Z
	        return 0;
	    } else {
	        var hm = parseInt(numOffset, 10);
	        var m = hm % 100, h = (hm - m) / 100;
	        return h * 60 + m;
	    }
	}

	// date and time from ref 2822 format
	function configFromRFC2822(config) {
	    var match = rfc2822.exec(preprocessRFC2822(config._i));
	    if (match) {
	        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
	        if (!checkWeekday(match[1], parsedArray, config)) {
	            return;
	        }

	        config._a = parsedArray;
	        config._tzm = calculateOffset(match[8], match[9], match[10]);

	        config._d = createUTCDate.apply(null, config._a);
	        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	        getParsingFlags(config).rfc2822 = true;
	    } else {
	        config._isValid = false;
	    }
	}

	// date from iso format or fallback
	function configFromString(config) {
	    var matched = aspNetJsonRegex.exec(config._i);

	    if (matched !== null) {
	        config._d = new Date(+matched[1]);
	        return;
	    }

	    configFromISO(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    configFromRFC2822(config);
	    if (config._isValid === false) {
	        delete config._isValid;
	    } else {
	        return;
	    }

	    // Final attempt, use Input Fallback
	    hooks.createFromInputFallback(config);
	}

	hooks.createFromInputFallback = deprecate(
	    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	    'discouraged and will be removed in an upcoming major release. Please refer to ' +
	    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	    function (config) {
	        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	    }
	);

	// constant that refers to the ISO standard
	hooks.ISO_8601 = function () {};

	// constant that refers to the RFC 2822 form
	hooks.RFC_2822 = function () {};

	// date from string and format string
	function configFromStringAndFormat(config) {
	    // TODO: Move this to another part of the creation flow to prevent circular deps
	    if (config._f === hooks.ISO_8601) {
	        configFromISO(config);
	        return;
	    }
	    if (config._f === hooks.RFC_2822) {
	        configFromRFC2822(config);
	        return;
	    }
	    config._a = [];
	    getParsingFlags(config).empty = true;

	    // This array is used to make a Date, either with `new Date` or `Date.UTC`
	    var string = '' + config._i,
	        i, parsedInput, tokens, token, skipped,
	        stringLength = string.length,
	        totalParsedInputLength = 0;

	    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

	    for (i = 0; i < tokens.length; i++) {
	        token = tokens[i];
	        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
	        // console.log('token', token, 'parsedInput', parsedInput,
	        //         'regex', getParseRegexForToken(token, config));
	        if (parsedInput) {
	            skipped = string.substr(0, string.indexOf(parsedInput));
	            if (skipped.length > 0) {
	                getParsingFlags(config).unusedInput.push(skipped);
	            }
	            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
	            totalParsedInputLength += parsedInput.length;
	        }
	        // don't parse if it's not a known token
	        if (formatTokenFunctions[token]) {
	            if (parsedInput) {
	                getParsingFlags(config).empty = false;
	            }
	            else {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	            addTimeToArrayFromToken(token, parsedInput, config);
	        }
	        else if (config._strict && !parsedInput) {
	            getParsingFlags(config).unusedTokens.push(token);
	        }
	    }

	    // add remaining unparsed input length to the string
	    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
	    if (string.length > 0) {
	        getParsingFlags(config).unusedInput.push(string);
	    }

	    // clear _12h flag if hour is <= 12
	    if (config._a[HOUR] <= 12 &&
	        getParsingFlags(config).bigHour === true &&
	        config._a[HOUR] > 0) {
	        getParsingFlags(config).bigHour = undefined;
	    }

	    getParsingFlags(config).parsedDateParts = config._a.slice(0);
	    getParsingFlags(config).meridiem = config._meridiem;
	    // handle meridiem
	    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

	    configFromArray(config);
	    checkOverflow(config);
	}


	function meridiemFixWrap (locale, hour, meridiem) {
	    var isPm;

	    if (meridiem == null) {
	        // nothing to do
	        return hour;
	    }
	    if (locale.meridiemHour != null) {
	        return locale.meridiemHour(hour, meridiem);
	    } else if (locale.isPM != null) {
	        // Fallback
	        isPm = locale.isPM(meridiem);
	        if (isPm && hour < 12) {
	            hour += 12;
	        }
	        if (!isPm && hour === 12) {
	            hour = 0;
	        }
	        return hour;
	    } else {
	        // this is not supposed to happen
	        return hour;
	    }
	}

	// date from string and array of format strings
	function configFromStringAndArray(config) {
	    var tempConfig,
	        bestMoment,

	        scoreToBeat,
	        i,
	        currentScore;

	    if (config._f.length === 0) {
	        getParsingFlags(config).invalidFormat = true;
	        config._d = new Date(NaN);
	        return;
	    }

	    for (i = 0; i < config._f.length; i++) {
	        currentScore = 0;
	        tempConfig = copyConfig({}, config);
	        if (config._useUTC != null) {
	            tempConfig._useUTC = config._useUTC;
	        }
	        tempConfig._f = config._f[i];
	        configFromStringAndFormat(tempConfig);

	        if (!isValid$1(tempConfig)) {
	            continue;
	        }

	        // if there is any input that was not parsed add a penalty for that format
	        currentScore += getParsingFlags(tempConfig).charsLeftOver;

	        //or tokens
	        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	        getParsingFlags(tempConfig).score = currentScore;

	        if (scoreToBeat == null || currentScore < scoreToBeat) {
	            scoreToBeat = currentScore;
	            bestMoment = tempConfig;
	        }
	    }

	    extend(config, bestMoment || tempConfig);
	}

	function configFromObject(config) {
	    if (config._d) {
	        return;
	    }

	    var i = normalizeObjectUnits(config._i);
	    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
	        return obj && parseInt(obj, 10);
	    });

	    configFromArray(config);
	}

	function createFromConfig (config) {
	    var res = new Moment(checkOverflow(prepareConfig(config)));
	    if (res._nextDay) {
	        // Adding is smart enough around DST
	        res.add(1, 'd');
	        res._nextDay = undefined;
	    }

	    return res;
	}

	function prepareConfig (config) {
	    var input = config._i,
	        format = config._f;

	    config._locale = config._locale || getLocale(config._l);

	    if (input === null || (format === undefined && input === '')) {
	        return createInvalid({nullInput: true});
	    }

	    if (typeof input === 'string') {
	        config._i = input = config._locale.preparse(input);
	    }

	    if (isMoment(input)) {
	        return new Moment(checkOverflow(input));
	    } else if (isDate(input)) {
	        config._d = input;
	    } else if (isArray(format)) {
	        configFromStringAndArray(config);
	    } else if (format) {
	        configFromStringAndFormat(config);
	    }  else {
	        configFromInput(config);
	    }

	    if (!isValid$1(config)) {
	        config._d = null;
	    }

	    return config;
	}

	function configFromInput(config) {
	    var input = config._i;
	    if (isUndefined(input)) {
	        config._d = new Date(hooks.now());
	    } else if (isDate(input)) {
	        config._d = new Date(input.valueOf());
	    } else if (typeof input === 'string') {
	        configFromString(config);
	    } else if (isArray(input)) {
	        config._a = map(input.slice(0), function (obj) {
	            return parseInt(obj, 10);
	        });
	        configFromArray(config);
	    } else if (isObject(input)) {
	        configFromObject(config);
	    } else if (isNumber(input)) {
	        // from milliseconds
	        config._d = new Date(input);
	    } else {
	        hooks.createFromInputFallback(config);
	    }
	}

	function createLocalOrUTC (input, format, locale, strict, isUTC) {
	    var c = {};

	    if (locale === true || locale === false) {
	        strict = locale;
	        locale = undefined;
	    }

	    if ((isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)) {
	        input = undefined;
	    }
	    // object construction must be done this way.
	    // https://github.com/moment/moment/issues/1423
	    c._isAMomentObject = true;
	    c._useUTC = c._isUTC = isUTC;
	    c._l = locale;
	    c._i = input;
	    c._f = format;
	    c._strict = strict;

	    return createFromConfig(c);
	}

	function createLocal (input, format, locale, strict) {
	    return createLocalOrUTC(input, format, locale, strict, false);
	}

	var prototypeMin = deprecate(
	    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other < this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	var prototypeMax = deprecate(
	    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	    function () {
	        var other = createLocal.apply(null, arguments);
	        if (this.isValid() && other.isValid()) {
	            return other > this ? this : other;
	        } else {
	            return createInvalid();
	        }
	    }
	);

	// Pick a moment m from moments so that m[fn](other) is true for all
	// other. This relies on the function fn to be transitive.
	//
	// moments should either be an array of moment objects or an array, whose
	// first element is an array of moment objects.
	function pickBy(fn, moments) {
	    var res, i;
	    if (moments.length === 1 && isArray(moments[0])) {
	        moments = moments[0];
	    }
	    if (!moments.length) {
	        return createLocal();
	    }
	    res = moments[0];
	    for (i = 1; i < moments.length; ++i) {
	        if (!moments[i].isValid() || moments[i][fn](res)) {
	            res = moments[i];
	        }
	    }
	    return res;
	}

	// TODO: Use [].sort instead?
	function min () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isBefore', args);
	}

	function max () {
	    var args = [].slice.call(arguments, 0);

	    return pickBy('isAfter', args);
	}

	var now = function () {
	    return Date.now ? Date.now() : +(new Date());
	};

	var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

	function isDurationValid(m) {
	    for (var key in m) {
	        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
	            return false;
	        }
	    }

	    var unitHasDecimal = false;
	    for (var i = 0; i < ordering.length; ++i) {
	        if (m[ordering[i]]) {
	            if (unitHasDecimal) {
	                return false; // only allow non-integers for smallest unit
	            }
	            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                unitHasDecimal = true;
	            }
	        }
	    }

	    return true;
	}

	function isValid$2() {
	    return this._isValid;
	}

	function createInvalid$1() {
	    return createDuration(NaN);
	}

	function Duration (duration) {
	    var normalizedInput = normalizeObjectUnits(duration),
	        years = normalizedInput.year || 0,
	        quarters = normalizedInput.quarter || 0,
	        months = normalizedInput.month || 0,
	        weeks = normalizedInput.week || 0,
	        days = normalizedInput.day || 0,
	        hours = normalizedInput.hour || 0,
	        minutes = normalizedInput.minute || 0,
	        seconds = normalizedInput.second || 0,
	        milliseconds = normalizedInput.millisecond || 0;

	    this._isValid = isDurationValid(normalizedInput);

	    // representation for dateAddRemove
	    this._milliseconds = +milliseconds +
	        seconds * 1e3 + // 1000
	        minutes * 6e4 + // 1000 * 60
	        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	    // Because of dateAddRemove treats 24 hours as different from a
	    // day when working around DST, we need to store them separately
	    this._days = +days +
	        weeks * 7;
	    // It is impossible to translate months into days without knowing
	    // which months you are are talking about, so we have to store
	    // it separately.
	    this._months = +months +
	        quarters * 3 +
	        years * 12;

	    this._data = {};

	    this._locale = getLocale();

	    this._bubble();
	}

	function isDuration (obj) {
	    return obj instanceof Duration;
	}

	function absRound (number) {
	    if (number < 0) {
	        return Math.round(-1 * number) * -1;
	    } else {
	        return Math.round(number);
	    }
	}

	// FORMATTING

	function offset (token, separator) {
	    addFormatToken(token, 0, 0, function () {
	        var offset = this.utcOffset();
	        var sign = '+';
	        if (offset < 0) {
	            offset = -offset;
	            sign = '-';
	        }
	        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
	    });
	}

	offset('Z', ':');
	offset('ZZ', '');

	// PARSING

	addRegexToken('Z',  matchShortOffset);
	addRegexToken('ZZ', matchShortOffset);
	addParseToken(['Z', 'ZZ'], function (input, array, config) {
	    config._useUTC = true;
	    config._tzm = offsetFromString(matchShortOffset, input);
	});

	// HELPERS

	// timezone chunker
	// '+10:00' > ['10',  '00']
	// '-1530'  > ['-15', '30']
	var chunkOffset = /([\+\-]|\d\d)/gi;

	function offsetFromString(matcher, string) {
	    var matches = (string || '').match(matcher);

	    if (matches === null) {
	        return null;
	    }

	    var chunk   = matches[matches.length - 1] || [];
	    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	    var minutes = +(parts[1] * 60) + toInt(parts[2]);

	    return minutes === 0 ?
	      0 :
	      parts[0] === '+' ? minutes : -minutes;
	}

	// Return a moment from input, that is local/utc/zone equivalent to model.
	function cloneWithOffset(input, model) {
	    var res, diff;
	    if (model._isUTC) {
	        res = model.clone();
	        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
	        // Use low-level api, because this fn is low-level api.
	        res._d.setTime(res._d.valueOf() + diff);
	        hooks.updateOffset(res, false);
	        return res;
	    } else {
	        return createLocal(input).local();
	    }
	}

	function getDateOffset (m) {
	    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	    // https://github.com/moment/moment/pull/1871
	    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
	}

	// HOOKS

	// This function will be called whenever a moment is mutated.
	// It is intended to keep the offset in sync with the timezone.
	hooks.updateOffset = function () {};

	// MOMENTS

	// keepLocalTime = true means only change the timezone, without
	// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	// +0200, so we adjust the time as needed, to be valid.
	//
	// Keeping the time actually adds/subtracts (one hour)
	// from the actual represented time. That is why we call updateOffset
	// a second time. In case it wants us to change the offset again
	// _changeInProgress == true case, then we have to adjust, because
	// there is no such time in the given timezone.
	function getSetOffset (input, keepLocalTime, keepMinutes) {
	    var offset = this._offset || 0,
	        localAdjust;
	    if (!this.isValid()) {
	        return input != null ? this : NaN;
	    }
	    if (input != null) {
	        if (typeof input === 'string') {
	            input = offsetFromString(matchShortOffset, input);
	            if (input === null) {
	                return this;
	            }
	        } else if (Math.abs(input) < 16 && !keepMinutes) {
	            input = input * 60;
	        }
	        if (!this._isUTC && keepLocalTime) {
	            localAdjust = getDateOffset(this);
	        }
	        this._offset = input;
	        this._isUTC = true;
	        if (localAdjust != null) {
	            this.add(localAdjust, 'm');
	        }
	        if (offset !== input) {
	            if (!keepLocalTime || this._changeInProgress) {
	                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
	            } else if (!this._changeInProgress) {
	                this._changeInProgress = true;
	                hooks.updateOffset(this, true);
	                this._changeInProgress = null;
	            }
	        }
	        return this;
	    } else {
	        return this._isUTC ? offset : getDateOffset(this);
	    }
	}

	function getSetZone (input, keepLocalTime) {
	    if (input != null) {
	        if (typeof input !== 'string') {
	            input = -input;
	        }

	        this.utcOffset(input, keepLocalTime);

	        return this;
	    } else {
	        return -this.utcOffset();
	    }
	}

	function setOffsetToUTC (keepLocalTime) {
	    return this.utcOffset(0, keepLocalTime);
	}

	function setOffsetToLocal (keepLocalTime) {
	    if (this._isUTC) {
	        this.utcOffset(0, keepLocalTime);
	        this._isUTC = false;

	        if (keepLocalTime) {
	            this.subtract(getDateOffset(this), 'm');
	        }
	    }
	    return this;
	}

	function setOffsetToParsedOffset () {
	    if (this._tzm != null) {
	        this.utcOffset(this._tzm, false, true);
	    } else if (typeof this._i === 'string') {
	        var tZone = offsetFromString(matchOffset, this._i);
	        if (tZone != null) {
	            this.utcOffset(tZone);
	        }
	        else {
	            this.utcOffset(0, true);
	        }
	    }
	    return this;
	}

	function hasAlignedHourOffset (input) {
	    if (!this.isValid()) {
	        return false;
	    }
	    input = input ? createLocal(input).utcOffset() : 0;

	    return (this.utcOffset() - input) % 60 === 0;
	}

	function isDaylightSavingTime () {
	    return (
	        this.utcOffset() > this.clone().month(0).utcOffset() ||
	        this.utcOffset() > this.clone().month(5).utcOffset()
	    );
	}

	function isDaylightSavingTimeShifted () {
	    if (!isUndefined(this._isDSTShifted)) {
	        return this._isDSTShifted;
	    }

	    var c = {};

	    copyConfig(c, this);
	    c = prepareConfig(c);

	    if (c._a) {
	        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	        this._isDSTShifted = this.isValid() &&
	            compareArrays(c._a, other.toArray()) > 0;
	    } else {
	        this._isDSTShifted = false;
	    }

	    return this._isDSTShifted;
	}

	function isLocal () {
	    return this.isValid() ? !this._isUTC : false;
	}

	function isUtcOffset () {
	    return this.isValid() ? this._isUTC : false;
	}

	function isUtc () {
	    return this.isValid() ? this._isUTC && this._offset === 0 : false;
	}

	// ASP.NET json date format regex
	var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

	// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	// and further modified to allow for strings containing both week and day
	var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	function createDuration (input, key) {
	    var duration = input,
	        // matching against regexp is expensive, do it on demand
	        match = null,
	        sign,
	        ret,
	        diffRes;

	    if (isDuration(input)) {
	        duration = {
	            ms : input._milliseconds,
	            d  : input._days,
	            M  : input._months
	        };
	    } else if (isNumber(input)) {
	        duration = {};
	        if (key) {
	            duration[key] = input;
	        } else {
	            duration.milliseconds = input;
	        }
	    } else if (!!(match = aspNetRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : 1;
	        duration = {
	            y  : 0,
	            d  : toInt(match[DATE])                         * sign,
	            h  : toInt(match[HOUR])                         * sign,
	            m  : toInt(match[MINUTE])                       * sign,
	            s  : toInt(match[SECOND])                       * sign,
	            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
	        };
	    } else if (!!(match = isoRegex.exec(input))) {
	        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
	        duration = {
	            y : parseIso(match[2], sign),
	            M : parseIso(match[3], sign),
	            w : parseIso(match[4], sign),
	            d : parseIso(match[5], sign),
	            h : parseIso(match[6], sign),
	            m : parseIso(match[7], sign),
	            s : parseIso(match[8], sign)
	        };
	    } else if (duration == null) {// checks for null or undefined
	        duration = {};
	    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
	        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

	        duration = {};
	        duration.ms = diffRes.milliseconds;
	        duration.M = diffRes.months;
	    }

	    ret = new Duration(duration);

	    if (isDuration(input) && hasOwnProp(input, '_locale')) {
	        ret._locale = input._locale;
	    }

	    return ret;
	}

	createDuration.fn = Duration.prototype;
	createDuration.invalid = createInvalid$1;

	function parseIso (inp, sign) {
	    // We'd normally use ~~inp for this, but unfortunately it also
	    // converts floats to ints.
	    // inp may be undefined, so careful calling replace on it.
	    var res = inp && parseFloat(inp.replace(',', '.'));
	    // apply sign while we're at it
	    return (isNaN(res) ? 0 : res) * sign;
	}

	function positiveMomentsDifference(base, other) {
	    var res = {milliseconds: 0, months: 0};

	    res.months = other.month() - base.month() +
	        (other.year() - base.year()) * 12;
	    if (base.clone().add(res.months, 'M').isAfter(other)) {
	        --res.months;
	    }

	    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

	    return res;
	}

	function momentsDifference(base, other) {
	    var res;
	    if (!(base.isValid() && other.isValid())) {
	        return {milliseconds: 0, months: 0};
	    }

	    other = cloneWithOffset(other, base);
	    if (base.isBefore(other)) {
	        res = positiveMomentsDifference(base, other);
	    } else {
	        res = positiveMomentsDifference(other, base);
	        res.milliseconds = -res.milliseconds;
	        res.months = -res.months;
	    }

	    return res;
	}

	// TODO: remove 'name' arg after deprecation is removed
	function createAdder(direction, name) {
	    return function (val, period) {
	        var dur, tmp;
	        //invert the arguments, but complain about it
	        if (period !== null && !isNaN(+period)) {
	            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
	            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
	            tmp = val; val = period; period = tmp;
	        }

	        val = typeof val === 'string' ? +val : val;
	        dur = createDuration(val, period);
	        addSubtract(this, dur, direction);
	        return this;
	    };
	}

	function addSubtract (mom, duration, isAdding, updateOffset) {
	    var milliseconds = duration._milliseconds,
	        days = absRound(duration._days),
	        months = absRound(duration._months);

	    if (!mom.isValid()) {
	        // No op
	        return;
	    }

	    updateOffset = updateOffset == null ? true : updateOffset;

	    if (months) {
	        setMonth(mom, get$1(mom, 'Month') + months * isAdding);
	    }
	    if (days) {
	        set$2(mom, 'Date', get$1(mom, 'Date') + days * isAdding);
	    }
	    if (milliseconds) {
	        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	    }
	    if (updateOffset) {
	        hooks.updateOffset(mom, days || months);
	    }
	}

	var add$1      = createAdder(1, 'add');
	var subtract = createAdder(-1, 'subtract');

	function getCalendarFormat(myMoment, now) {
	    var diff = myMoment.diff(now, 'days', true);
	    return diff < -6 ? 'sameElse' :
	            diff < -1 ? 'lastWeek' :
	            diff < 0 ? 'lastDay' :
	            diff < 1 ? 'sameDay' :
	            diff < 2 ? 'nextDay' :
	            diff < 7 ? 'nextWeek' : 'sameElse';
	}

	function calendar$1 (time, formats) {
	    // We want to compare the start of today, vs this.
	    // Getting start-of-today depends on whether we're local/utc/offset or not.
	    var now = time || createLocal(),
	        sod = cloneWithOffset(now, this).startOf('day'),
	        format = hooks.calendarFormat(this, sod) || 'sameElse';

	    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

	    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
	}

	function clone () {
	    return new Moment(this);
	}

	function isAfter (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() > localInput.valueOf();
	    } else {
	        return localInput.valueOf() < this.clone().startOf(units).valueOf();
	    }
	}

	function isBefore (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input);
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() < localInput.valueOf();
	    } else {
	        return this.clone().endOf(units).valueOf() < localInput.valueOf();
	    }
	}

	function isBetween (from, to, units, inclusivity) {
	    inclusivity = inclusivity || '()';
	    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
	        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
	}

	function isSame (input, units) {
	    var localInput = isMoment(input) ? input : createLocal(input),
	        inputMs;
	    if (!(this.isValid() && localInput.isValid())) {
	        return false;
	    }
	    units = normalizeUnits(units || 'millisecond');
	    if (units === 'millisecond') {
	        return this.valueOf() === localInput.valueOf();
	    } else {
	        inputMs = localInput.valueOf();
	        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
	    }
	}

	function isSameOrAfter (input, units) {
	    return this.isSame(input, units) || this.isAfter(input,units);
	}

	function isSameOrBefore (input, units) {
	    return this.isSame(input, units) || this.isBefore(input,units);
	}

	function diff (input, units, asFloat) {
	    var that,
	        zoneDelta,
	        output;

	    if (!this.isValid()) {
	        return NaN;
	    }

	    that = cloneWithOffset(input, this);

	    if (!that.isValid()) {
	        return NaN;
	    }

	    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	    units = normalizeUnits(units);

	    switch (units) {
	        case 'year': output = monthDiff(this, that) / 12; break;
	        case 'month': output = monthDiff(this, that); break;
	        case 'quarter': output = monthDiff(this, that) / 3; break;
	        case 'second': output = (this - that) / 1e3; break; // 1000
	        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
	        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
	        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
	        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
	        default: output = this - that;
	    }

	    return asFloat ? output : absFloor(output);
	}

	function monthDiff (a, b) {
	    // difference in months
	    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
	        // b is in (anchor - 1 month, anchor + 1 month)
	        anchor = a.clone().add(wholeMonthDiff, 'months'),
	        anchor2, adjust;

	    if (b - anchor < 0) {
	        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor - anchor2);
	    } else {
	        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	        // linear across the month
	        adjust = (b - anchor) / (anchor2 - anchor);
	    }

	    //check for negative zero, return zero if negative zero
	    return -(wholeMonthDiff + adjust) || 0;
	}

	hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	function toString () {
	    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	}

	function toISOString(keepOffset) {
	    if (!this.isValid()) {
	        return null;
	    }
	    var utc = keepOffset !== true;
	    var m = utc ? this.clone().utc() : this;
	    if (m.year() < 0 || m.year() > 9999) {
	        return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
	    }
	    if (isFunction(Date.prototype.toISOString)) {
	        // native implementation is ~50x faster, use it when we can
	        if (utc) {
	            return this.toDate().toISOString();
	        } else {
	            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
	        }
	    }
	    return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
	}

	/**
	 * Return a human readable representation of a moment that can
	 * also be evaluated to get a new moment which is the same
	 *
	 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	 */
	function inspect () {
	    if (!this.isValid()) {
	        return 'moment.invalid(/* ' + this._i + ' */)';
	    }
	    var func = 'moment';
	    var zone = '';
	    if (!this.isLocal()) {
	        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	        zone = 'Z';
	    }
	    var prefix = '[' + func + '("]';
	    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
	    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
	    var suffix = zone + '[")]';

	    return this.format(prefix + year + datetime + suffix);
	}

	function format (inputString) {
	    if (!inputString) {
	        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
	    }
	    var output = formatMoment(this, inputString);
	    return this.localeData().postformat(output);
	}

	function from (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function fromNow (withoutSuffix) {
	    return this.from(createLocal(), withoutSuffix);
	}

	function to (time, withoutSuffix) {
	    if (this.isValid() &&
	            ((isMoment(time) && time.isValid()) ||
	             createLocal(time).isValid())) {
	        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
	    } else {
	        return this.localeData().invalidDate();
	    }
	}

	function toNow (withoutSuffix) {
	    return this.to(createLocal(), withoutSuffix);
	}

	// If passed a locale key, it will set the locale for this
	// instance.  Otherwise, it will return the locale configuration
	// variables for this instance.
	function locale (key) {
	    var newLocaleData;

	    if (key === undefined) {
	        return this._locale._abbr;
	    } else {
	        newLocaleData = getLocale(key);
	        if (newLocaleData != null) {
	            this._locale = newLocaleData;
	        }
	        return this;
	    }
	}

	var lang = deprecate(
	    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	    function (key) {
	        if (key === undefined) {
	            return this.localeData();
	        } else {
	            return this.locale(key);
	        }
	    }
	);

	function localeData () {
	    return this._locale;
	}

	function startOf (units) {
	    units = normalizeUnits(units);
	    // the following switch intentionally omits break keywords
	    // to utilize falling through the cases.
	    switch (units) {
	        case 'year':
	            this.month(0);
	            /* falls through */
	        case 'quarter':
	        case 'month':
	            this.date(1);
	            /* falls through */
	        case 'week':
	        case 'isoWeek':
	        case 'day':
	        case 'date':
	            this.hours(0);
	            /* falls through */
	        case 'hour':
	            this.minutes(0);
	            /* falls through */
	        case 'minute':
	            this.seconds(0);
	            /* falls through */
	        case 'second':
	            this.milliseconds(0);
	    }

	    // weeks are a special case
	    if (units === 'week') {
	        this.weekday(0);
	    }
	    if (units === 'isoWeek') {
	        this.isoWeekday(1);
	    }

	    // quarters are also special
	    if (units === 'quarter') {
	        this.month(Math.floor(this.month() / 3) * 3);
	    }

	    return this;
	}

	function endOf (units) {
	    units = normalizeUnits(units);
	    if (units === undefined || units === 'millisecond') {
	        return this;
	    }

	    // 'date' is an alias for 'day', so it should be considered as such.
	    if (units === 'date') {
	        units = 'day';
	    }

	    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
	}

	function valueOf () {
	    return this._d.valueOf() - ((this._offset || 0) * 60000);
	}

	function unix () {
	    return Math.floor(this.valueOf() / 1000);
	}

	function toDate () {
	    return new Date(this.valueOf());
	}

	function toArray () {
	    var m = this;
	    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
	}

	function toObject () {
	    var m = this;
	    return {
	        years: m.year(),
	        months: m.month(),
	        date: m.date(),
	        hours: m.hours(),
	        minutes: m.minutes(),
	        seconds: m.seconds(),
	        milliseconds: m.milliseconds()
	    };
	}

	function toJSON () {
	    // new Date(NaN).toJSON() === null
	    return this.isValid() ? this.toISOString() : null;
	}

	function isValid$3 () {
	    return isValid$1(this);
	}

	function parsingFlags () {
	    return extend({}, getParsingFlags(this));
	}

	function invalidAt () {
	    return getParsingFlags(this).overflow;
	}

	function creationData() {
	    return {
	        input: this._i,
	        format: this._f,
	        locale: this._locale,
	        isUTC: this._isUTC,
	        strict: this._strict
	    };
	}

	// FORMATTING

	addFormatToken(0, ['gg', 2], 0, function () {
	    return this.weekYear() % 100;
	});

	addFormatToken(0, ['GG', 2], 0, function () {
	    return this.isoWeekYear() % 100;
	});

	function addWeekYearFormatToken (token, getter) {
	    addFormatToken(0, [token, token.length], 0, getter);
	}

	addWeekYearFormatToken('gggg',     'weekYear');
	addWeekYearFormatToken('ggggg',    'weekYear');
	addWeekYearFormatToken('GGGG',  'isoWeekYear');
	addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	// ALIASES

	addUnitAlias('weekYear', 'gg');
	addUnitAlias('isoWeekYear', 'GG');

	// PRIORITY

	addUnitPriority('weekYear', 1);
	addUnitPriority('isoWeekYear', 1);


	// PARSING

	addRegexToken('G',      matchSigned);
	addRegexToken('g',      matchSigned);
	addRegexToken('GG',     match1to2, match2);
	addRegexToken('gg',     match1to2, match2);
	addRegexToken('GGGG',   match1to4, match4);
	addRegexToken('gggg',   match1to4, match4);
	addRegexToken('GGGGG',  match1to6, match6);
	addRegexToken('ggggg',  match1to6, match6);

	addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
	    week[token.substr(0, 2)] = toInt(input);
	});

	addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	    week[token] = hooks.parseTwoDigitYear(input);
	});

	// MOMENTS

	function getSetWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy);
	}

	function getSetISOWeekYear (input) {
	    return getSetWeekYearHelper.call(this,
	            input, this.isoWeek(), this.isoWeekday(), 1, 4);
	}

	function getISOWeeksInYear () {
	    return weeksInYear(this.year(), 1, 4);
	}

	function getWeeksInYear () {
	    var weekInfo = this.localeData()._week;
	    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	}

	function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	    var weeksTarget;
	    if (input == null) {
	        return weekOfYear(this, dow, doy).year;
	    } else {
	        weeksTarget = weeksInYear(input, dow, doy);
	        if (week > weeksTarget) {
	            week = weeksTarget;
	        }
	        return setWeekAll.call(this, input, week, weekday, dow, doy);
	    }
	}

	function setWeekAll(weekYear, week, weekday, dow, doy) {
	    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	    this.year(date.getUTCFullYear());
	    this.month(date.getUTCMonth());
	    this.date(date.getUTCDate());
	    return this;
	}

	// FORMATTING

	addFormatToken('Q', 0, 'Qo', 'quarter');

	// ALIASES

	addUnitAlias('quarter', 'Q');

	// PRIORITY

	addUnitPriority('quarter', 7);

	// PARSING

	addRegexToken('Q', match1);
	addParseToken('Q', function (input, array) {
	    array[MONTH] = (toInt(input) - 1) * 3;
	});

	// MOMENTS

	function getSetQuarter (input) {
	    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
	}

	// FORMATTING

	addFormatToken('D', ['DD', 2], 'Do', 'date');

	// ALIASES

	addUnitAlias('date', 'D');

	// PRIORITY
	addUnitPriority('date', 9);

	// PARSING

	addRegexToken('D',  match1to2);
	addRegexToken('DD', match1to2, match2);
	addRegexToken('Do', function (isStrict, locale) {
	    // TODO: Remove "ordinalParse" fallback in next major release.
	    return isStrict ?
	      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
	      locale._dayOfMonthOrdinalParseLenient;
	});

	addParseToken(['D', 'DD'], DATE);
	addParseToken('Do', function (input, array) {
	    array[DATE] = toInt(input.match(match1to2)[0]);
	});

	// MOMENTS

	var getSetDayOfMonth = makeGetSet('Date', true);

	// FORMATTING

	addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	// ALIASES

	addUnitAlias('dayOfYear', 'DDD');

	// PRIORITY
	addUnitPriority('dayOfYear', 4);

	// PARSING

	addRegexToken('DDD',  match1to3);
	addRegexToken('DDDD', match3);
	addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	    config._dayOfYear = toInt(input);
	});

	// HELPERS

	// MOMENTS

	function getSetDayOfYear (input) {
	    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
	    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
	}

	// FORMATTING

	addFormatToken('m', ['mm', 2], 0, 'minute');

	// ALIASES

	addUnitAlias('minute', 'm');

	// PRIORITY

	addUnitPriority('minute', 14);

	// PARSING

	addRegexToken('m',  match1to2);
	addRegexToken('mm', match1to2, match2);
	addParseToken(['m', 'mm'], MINUTE);

	// MOMENTS

	var getSetMinute = makeGetSet('Minutes', false);

	// FORMATTING

	addFormatToken('s', ['ss', 2], 0, 'second');

	// ALIASES

	addUnitAlias('second', 's');

	// PRIORITY

	addUnitPriority('second', 15);

	// PARSING

	addRegexToken('s',  match1to2);
	addRegexToken('ss', match1to2, match2);
	addParseToken(['s', 'ss'], SECOND);

	// MOMENTS

	var getSetSecond = makeGetSet('Seconds', false);

	// FORMATTING

	addFormatToken('S', 0, 0, function () {
	    return ~~(this.millisecond() / 100);
	});

	addFormatToken(0, ['SS', 2], 0, function () {
	    return ~~(this.millisecond() / 10);
	});

	addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	addFormatToken(0, ['SSSS', 4], 0, function () {
	    return this.millisecond() * 10;
	});
	addFormatToken(0, ['SSSSS', 5], 0, function () {
	    return this.millisecond() * 100;
	});
	addFormatToken(0, ['SSSSSS', 6], 0, function () {
	    return this.millisecond() * 1000;
	});
	addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	    return this.millisecond() * 10000;
	});
	addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	    return this.millisecond() * 100000;
	});
	addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	    return this.millisecond() * 1000000;
	});


	// ALIASES

	addUnitAlias('millisecond', 'ms');

	// PRIORITY

	addUnitPriority('millisecond', 16);

	// PARSING

	addRegexToken('S',    match1to3, match1);
	addRegexToken('SS',   match1to3, match2);
	addRegexToken('SSS',  match1to3, match3);

	var token;
	for (token = 'SSSS'; token.length <= 9; token += 'S') {
	    addRegexToken(token, matchUnsigned);
	}

	function parseMs(input, array) {
	    array[MILLISECOND] = toInt(('0.' + input) * 1000);
	}

	for (token = 'S'; token.length <= 9; token += 'S') {
	    addParseToken(token, parseMs);
	}
	// MOMENTS

	var getSetMillisecond = makeGetSet('Milliseconds', false);

	// FORMATTING

	addFormatToken('z',  0, 0, 'zoneAbbr');
	addFormatToken('zz', 0, 0, 'zoneName');

	// MOMENTS

	function getZoneAbbr () {
	    return this._isUTC ? 'UTC' : '';
	}

	function getZoneName () {
	    return this._isUTC ? 'Coordinated Universal Time' : '';
	}

	var proto$1 = Moment.prototype;

	proto$1.add               = add$1;
	proto$1.calendar          = calendar$1;
	proto$1.clone             = clone;
	proto$1.diff              = diff;
	proto$1.endOf             = endOf;
	proto$1.format            = format;
	proto$1.from              = from;
	proto$1.fromNow           = fromNow;
	proto$1.to                = to;
	proto$1.toNow             = toNow;
	proto$1.get               = stringGet;
	proto$1.invalidAt         = invalidAt;
	proto$1.isAfter           = isAfter;
	proto$1.isBefore          = isBefore;
	proto$1.isBetween         = isBetween;
	proto$1.isSame            = isSame;
	proto$1.isSameOrAfter     = isSameOrAfter;
	proto$1.isSameOrBefore    = isSameOrBefore;
	proto$1.isValid           = isValid$3;
	proto$1.lang              = lang;
	proto$1.locale            = locale;
	proto$1.localeData        = localeData;
	proto$1.max               = prototypeMax;
	proto$1.min               = prototypeMin;
	proto$1.parsingFlags      = parsingFlags;
	proto$1.set               = stringSet;
	proto$1.startOf           = startOf;
	proto$1.subtract          = subtract;
	proto$1.toArray           = toArray;
	proto$1.toObject          = toObject;
	proto$1.toDate            = toDate;
	proto$1.toISOString       = toISOString;
	proto$1.inspect           = inspect;
	proto$1.toJSON            = toJSON;
	proto$1.toString          = toString;
	proto$1.unix              = unix;
	proto$1.valueOf           = valueOf;
	proto$1.creationData      = creationData;
	proto$1.year       = getSetYear;
	proto$1.isLeapYear = getIsLeapYear;
	proto$1.weekYear    = getSetWeekYear;
	proto$1.isoWeekYear = getSetISOWeekYear;
	proto$1.quarter = proto$1.quarters = getSetQuarter;
	proto$1.month       = getSetMonth;
	proto$1.daysInMonth = getDaysInMonth;
	proto$1.week           = proto$1.weeks        = getSetWeek;
	proto$1.isoWeek        = proto$1.isoWeeks     = getSetISOWeek;
	proto$1.weeksInYear    = getWeeksInYear;
	proto$1.isoWeeksInYear = getISOWeeksInYear;
	proto$1.date       = getSetDayOfMonth;
	proto$1.day        = proto$1.days             = getSetDayOfWeek;
	proto$1.weekday    = getSetLocaleDayOfWeek;
	proto$1.isoWeekday = getSetISODayOfWeek;
	proto$1.dayOfYear  = getSetDayOfYear;
	proto$1.hour = proto$1.hours = getSetHour;
	proto$1.minute = proto$1.minutes = getSetMinute;
	proto$1.second = proto$1.seconds = getSetSecond;
	proto$1.millisecond = proto$1.milliseconds = getSetMillisecond;
	proto$1.utcOffset            = getSetOffset;
	proto$1.utc                  = setOffsetToUTC;
	proto$1.local                = setOffsetToLocal;
	proto$1.parseZone            = setOffsetToParsedOffset;
	proto$1.hasAlignedHourOffset = hasAlignedHourOffset;
	proto$1.isDST                = isDaylightSavingTime;
	proto$1.isLocal              = isLocal;
	proto$1.isUtcOffset          = isUtcOffset;
	proto$1.isUtc                = isUtc;
	proto$1.isUTC                = isUtc;
	proto$1.zoneAbbr = getZoneAbbr;
	proto$1.zoneName = getZoneName;
	proto$1.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
	proto$1.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
	proto$1.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
	proto$1.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
	proto$1.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

	function createUnix (input) {
	    return createLocal(input * 1000);
	}

	function createInZone () {
	    return createLocal.apply(null, arguments).parseZone();
	}

	function preParsePostFormat (string) {
	    return string;
	}

	var proto$2 = Locale.prototype;

	proto$2.calendar        = calendar;
	proto$2.longDateFormat  = longDateFormat;
	proto$2.invalidDate     = invalidDate;
	proto$2.ordinal         = ordinal;
	proto$2.preparse        = preParsePostFormat;
	proto$2.postformat      = preParsePostFormat;
	proto$2.relativeTime    = relativeTime;
	proto$2.pastFuture      = pastFuture;
	proto$2.set             = set$1;

	proto$2.months            =        localeMonths;
	proto$2.monthsShort       =        localeMonthsShort;
	proto$2.monthsParse       =        localeMonthsParse;
	proto$2.monthsRegex       = monthsRegex;
	proto$2.monthsShortRegex  = monthsShortRegex;
	proto$2.week = localeWeek;
	proto$2.firstDayOfYear = localeFirstDayOfYear;
	proto$2.firstDayOfWeek = localeFirstDayOfWeek;

	proto$2.weekdays       =        localeWeekdays;
	proto$2.weekdaysMin    =        localeWeekdaysMin;
	proto$2.weekdaysShort  =        localeWeekdaysShort;
	proto$2.weekdaysParse  =        localeWeekdaysParse;

	proto$2.weekdaysRegex       =        weekdaysRegex;
	proto$2.weekdaysShortRegex  =        weekdaysShortRegex;
	proto$2.weekdaysMinRegex    =        weekdaysMinRegex;

	proto$2.isPM = localeIsPM;
	proto$2.meridiem = localeMeridiem;

	function get$2 (format, index, field, setter) {
	    var locale = getLocale();
	    var utc = createUTC().set(setter, index);
	    return locale[field](utc, format);
	}

	function listMonthsImpl (format, index, field) {
	    if (isNumber(format)) {
	        index = format;
	        format = undefined;
	    }

	    format = format || '';

	    if (index != null) {
	        return get$2(format, index, field, 'month');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 12; i++) {
	        out[i] = get$2(format, i, field, 'month');
	    }
	    return out;
	}

	// ()
	// (5)
	// (fmt, 5)
	// (fmt)
	// (true)
	// (true, 5)
	// (true, fmt, 5)
	// (true, fmt)
	function listWeekdaysImpl (localeSorted, format, index, field) {
	    if (typeof localeSorted === 'boolean') {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    } else {
	        format = localeSorted;
	        index = format;
	        localeSorted = false;

	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';
	    }

	    var locale = getLocale(),
	        shift = localeSorted ? locale._week.dow : 0;

	    if (index != null) {
	        return get$2(format, (index + shift) % 7, field, 'day');
	    }

	    var i;
	    var out = [];
	    for (i = 0; i < 7; i++) {
	        out[i] = get$2(format, (i + shift) % 7, field, 'day');
	    }
	    return out;
	}

	function listMonths (format, index) {
	    return listMonthsImpl(format, index, 'months');
	}

	function listMonthsShort (format, index) {
	    return listMonthsImpl(format, index, 'monthsShort');
	}

	function listWeekdays (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	}

	function listWeekdaysShort (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	}

	function listWeekdaysMin (localeSorted, format, index) {
	    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	}

	getSetGlobalLocale('en', {
	    dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	    ordinal : function (number) {
	        var b = number % 10,
	            output = (toInt(number % 100 / 10) === 1) ? 'th' :
	            (b === 1) ? 'st' :
	            (b === 2) ? 'nd' :
	            (b === 3) ? 'rd' : 'th';
	        return number + output;
	    }
	});

	// Side effect imports

	hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
	hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

	var mathAbs = Math.abs;

	function abs () {
	    var data           = this._data;

	    this._milliseconds = mathAbs(this._milliseconds);
	    this._days         = mathAbs(this._days);
	    this._months       = mathAbs(this._months);

	    data.milliseconds  = mathAbs(data.milliseconds);
	    data.seconds       = mathAbs(data.seconds);
	    data.minutes       = mathAbs(data.minutes);
	    data.hours         = mathAbs(data.hours);
	    data.months        = mathAbs(data.months);
	    data.years         = mathAbs(data.years);

	    return this;
	}

	function addSubtract$1 (duration, input, value, direction) {
	    var other = createDuration(input, value);

	    duration._milliseconds += direction * other._milliseconds;
	    duration._days         += direction * other._days;
	    duration._months       += direction * other._months;

	    return duration._bubble();
	}

	// supports only 2.0-style add(1, 's') or add(duration)
	function add$2 (input, value) {
	    return addSubtract$1(this, input, value, 1);
	}

	// supports only 2.0-style subtract(1, 's') or subtract(duration)
	function subtract$1 (input, value) {
	    return addSubtract$1(this, input, value, -1);
	}

	function absCeil (number) {
	    if (number < 0) {
	        return Math.floor(number);
	    } else {
	        return Math.ceil(number);
	    }
	}

	function bubble () {
	    var milliseconds = this._milliseconds;
	    var days         = this._days;
	    var months       = this._months;
	    var data         = this._data;
	    var seconds, minutes, hours, years, monthsFromDays;

	    // if we have a mix of positive and negative values, bubble down first
	    // check: https://github.com/moment/moment/issues/2166
	    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
	            (milliseconds <= 0 && days <= 0 && months <= 0))) {
	        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	        days = 0;
	        months = 0;
	    }

	    // The following code bubbles up values, see the tests for
	    // examples of what that means.
	    data.milliseconds = milliseconds % 1000;

	    seconds           = absFloor(milliseconds / 1000);
	    data.seconds      = seconds % 60;

	    minutes           = absFloor(seconds / 60);
	    data.minutes      = minutes % 60;

	    hours             = absFloor(minutes / 60);
	    data.hours        = hours % 24;

	    days += absFloor(hours / 24);

	    // convert days to months
	    monthsFromDays = absFloor(daysToMonths(days));
	    months += monthsFromDays;
	    days -= absCeil(monthsToDays(monthsFromDays));

	    // 12 months -> 1 year
	    years = absFloor(months / 12);
	    months %= 12;

	    data.days   = days;
	    data.months = months;
	    data.years  = years;

	    return this;
	}

	function daysToMonths (days) {
	    // 400 years have 146097 days (taking into account leap year rules)
	    // 400 years have 12 months === 4800
	    return days * 4800 / 146097;
	}

	function monthsToDays (months) {
	    // the reverse of daysToMonths
	    return months * 146097 / 4800;
	}

	function as (units) {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    var days;
	    var months;
	    var milliseconds = this._milliseconds;

	    units = normalizeUnits(units);

	    if (units === 'month' || units === 'year') {
	        days   = this._days   + milliseconds / 864e5;
	        months = this._months + daysToMonths(days);
	        return units === 'month' ? months : months / 12;
	    } else {
	        // handle milliseconds separately because of floating point math errors (issue #1867)
	        days = this._days + Math.round(monthsToDays(this._months));
	        switch (units) {
	            case 'week'   : return days / 7     + milliseconds / 6048e5;
	            case 'day'    : return days         + milliseconds / 864e5;
	            case 'hour'   : return days * 24    + milliseconds / 36e5;
	            case 'minute' : return days * 1440  + milliseconds / 6e4;
	            case 'second' : return days * 86400 + milliseconds / 1000;
	            // Math.floor prevents floating point math errors here
	            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
	            default: throw new Error('Unknown unit ' + units);
	        }
	    }
	}

	// TODO: Use this.as('ms')?
	function valueOf$1 () {
	    if (!this.isValid()) {
	        return NaN;
	    }
	    return (
	        this._milliseconds +
	        this._days * 864e5 +
	        (this._months % 12) * 2592e6 +
	        toInt(this._months / 12) * 31536e6
	    );
	}

	function makeAs (alias) {
	    return function () {
	        return this.as(alias);
	    };
	}

	var asMilliseconds = makeAs('ms');
	var asSeconds      = makeAs('s');
	var asMinutes      = makeAs('m');
	var asHours        = makeAs('h');
	var asDays         = makeAs('d');
	var asWeeks        = makeAs('w');
	var asMonths       = makeAs('M');
	var asYears        = makeAs('y');

	function clone$1 () {
	    return createDuration(this);
	}

	function get$3 (units) {
	    units = normalizeUnits(units);
	    return this.isValid() ? this[units + 's']() : NaN;
	}

	function makeGetter(name) {
	    return function () {
	        return this.isValid() ? this._data[name] : NaN;
	    };
	}

	var milliseconds = makeGetter('milliseconds');
	var seconds      = makeGetter('seconds');
	var minutes      = makeGetter('minutes');
	var hours        = makeGetter('hours');
	var days         = makeGetter('days');
	var months       = makeGetter('months');
	var years        = makeGetter('years');

	function weeks () {
	    return absFloor(this.days() / 7);
	}

	var round = Math.round;
	var thresholds = {
	    ss: 44,         // a few seconds to seconds
	    s : 45,         // seconds to minute
	    m : 45,         // minutes to hour
	    h : 22,         // hours to day
	    d : 26,         // days to month
	    M : 11          // months to year
	};

	// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	}

	function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
	    var duration = createDuration(posNegDuration).abs();
	    var seconds  = round(duration.as('s'));
	    var minutes  = round(duration.as('m'));
	    var hours    = round(duration.as('h'));
	    var days     = round(duration.as('d'));
	    var months   = round(duration.as('M'));
	    var years    = round(duration.as('y'));

	    var a = seconds <= thresholds.ss && ['s', seconds]  ||
	            seconds < thresholds.s   && ['ss', seconds] ||
	            minutes <= 1             && ['m']           ||
	            minutes < thresholds.m   && ['mm', minutes] ||
	            hours   <= 1             && ['h']           ||
	            hours   < thresholds.h   && ['hh', hours]   ||
	            days    <= 1             && ['d']           ||
	            days    < thresholds.d   && ['dd', days]    ||
	            months  <= 1             && ['M']           ||
	            months  < thresholds.M   && ['MM', months]  ||
	            years   <= 1             && ['y']           || ['yy', years];

	    a[2] = withoutSuffix;
	    a[3] = +posNegDuration > 0;
	    a[4] = locale;
	    return substituteTimeAgo.apply(null, a);
	}

	// This function allows you to set the rounding function for relative time strings
	function getSetRelativeTimeRounding (roundingFunction) {
	    if (roundingFunction === undefined) {
	        return round;
	    }
	    if (typeof(roundingFunction) === 'function') {
	        round = roundingFunction;
	        return true;
	    }
	    return false;
	}

	// This function allows you to set a threshold for relative time strings
	function getSetRelativeTimeThreshold (threshold, limit) {
	    if (thresholds[threshold] === undefined) {
	        return false;
	    }
	    if (limit === undefined) {
	        return thresholds[threshold];
	    }
	    thresholds[threshold] = limit;
	    if (threshold === 's') {
	        thresholds.ss = limit - 1;
	    }
	    return true;
	}

	function humanize (withSuffix) {
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var locale = this.localeData();
	    var output = relativeTime$1(this, !withSuffix, locale);

	    if (withSuffix) {
	        output = locale.pastFuture(+this, output);
	    }

	    return locale.postformat(output);
	}

	var abs$1 = Math.abs;

	function sign(x) {
	    return ((x > 0) - (x < 0)) || +x;
	}

	function toISOString$1() {
	    // for ISO strings we do not use the normal bubbling rules:
	    //  * milliseconds bubble up until they become hours
	    //  * days do not bubble at all
	    //  * months bubble up until they become years
	    // This is because there is no context-free conversion between hours and days
	    // (think of clock changes)
	    // and also not between days and months (28-31 days per month)
	    if (!this.isValid()) {
	        return this.localeData().invalidDate();
	    }

	    var seconds = abs$1(this._milliseconds) / 1000;
	    var days         = abs$1(this._days);
	    var months       = abs$1(this._months);
	    var minutes, hours, years;

	    // 3600 seconds -> 60 minutes -> 1 hour
	    minutes           = absFloor(seconds / 60);
	    hours             = absFloor(minutes / 60);
	    seconds %= 60;
	    minutes %= 60;

	    // 12 months -> 1 year
	    years  = absFloor(months / 12);
	    months %= 12;


	    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	    var Y = years;
	    var M = months;
	    var D = days;
	    var h = hours;
	    var m = minutes;
	    var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
	    var total = this.asSeconds();

	    if (!total) {
	        // this is the same as C#'s (Noda) and python (isodate)...
	        // but not other JS (goog.date)
	        return 'P0D';
	    }

	    var totalSign = total < 0 ? '-' : '';
	    var ymSign = sign(this._months) !== sign(total) ? '-' : '';
	    var daysSign = sign(this._days) !== sign(total) ? '-' : '';
	    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	    return totalSign + 'P' +
	        (Y ? ymSign + Y + 'Y' : '') +
	        (M ? ymSign + M + 'M' : '') +
	        (D ? daysSign + D + 'D' : '') +
	        ((h || m || s) ? 'T' : '') +
	        (h ? hmsSign + h + 'H' : '') +
	        (m ? hmsSign + m + 'M' : '') +
	        (s ? hmsSign + s + 'S' : '');
	}

	var proto$3 = Duration.prototype;

	proto$3.isValid        = isValid$2;
	proto$3.abs            = abs;
	proto$3.add            = add$2;
	proto$3.subtract       = subtract$1;
	proto$3.as             = as;
	proto$3.asMilliseconds = asMilliseconds;
	proto$3.asSeconds      = asSeconds;
	proto$3.asMinutes      = asMinutes;
	proto$3.asHours        = asHours;
	proto$3.asDays         = asDays;
	proto$3.asWeeks        = asWeeks;
	proto$3.asMonths       = asMonths;
	proto$3.asYears        = asYears;
	proto$3.valueOf        = valueOf$1;
	proto$3._bubble        = bubble;
	proto$3.clone          = clone$1;
	proto$3.get            = get$3;
	proto$3.milliseconds   = milliseconds;
	proto$3.seconds        = seconds;
	proto$3.minutes        = minutes;
	proto$3.hours          = hours;
	proto$3.days           = days;
	proto$3.weeks          = weeks;
	proto$3.months         = months;
	proto$3.years          = years;
	proto$3.humanize       = humanize;
	proto$3.toISOString    = toISOString$1;
	proto$3.toString       = toISOString$1;
	proto$3.toJSON         = toISOString$1;
	proto$3.locale         = locale;
	proto$3.localeData     = localeData;

	proto$3.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
	proto$3.lang = lang;

	// Side effect imports

	// FORMATTING

	addFormatToken('X', 0, 0, 'unix');
	addFormatToken('x', 0, 0, 'valueOf');

	// PARSING

	addRegexToken('x', matchSigned);
	addRegexToken('X', matchTimestamp);
	addParseToken('X', function (input, array, config) {
	    config._d = new Date(parseFloat(input, 10) * 1000);
	});
	addParseToken('x', function (input, array, config) {
	    config._d = new Date(toInt(input));
	});

	// Side effect imports

	//! moment.js

	hooks.version = '2.22.2';

	setHookCallback(createLocal);

	hooks.fn                    = proto$1;
	hooks.min                   = min;
	hooks.max                   = max;
	hooks.now                   = now;
	hooks.utc                   = createUTC;
	hooks.unix                  = createUnix;
	hooks.months                = listMonths;
	hooks.isDate                = isDate;
	hooks.locale                = getSetGlobalLocale;
	hooks.invalid               = createInvalid;
	hooks.duration              = createDuration;
	hooks.isMoment              = isMoment;
	hooks.weekdays              = listWeekdays;
	hooks.parseZone             = createInZone;
	hooks.localeData            = getLocale;
	hooks.isDuration            = isDuration;
	hooks.monthsShort           = listMonthsShort;
	hooks.weekdaysMin           = listWeekdaysMin;
	hooks.defineLocale          = defineLocale;
	hooks.updateLocale          = updateLocale;
	hooks.locales               = listLocales;
	hooks.weekdaysShort         = listWeekdaysShort;
	hooks.normalizeUnits        = normalizeUnits;
	hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
	hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	hooks.calendarFormat        = getCalendarFormat;
	hooks.prototype             = proto$1;

	// currently HTML5 input type only supports 24-hour formats
	hooks.HTML5_FMT = {
	    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
	    DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
	    DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
	    DATE: 'YYYY-MM-DD',                             // <input type="date" />
	    TIME: 'HH:mm',                                  // <input type="time" />
	    TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
	    TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
	    WEEK: 'YYYY-[W]WW',                             // <input type="week" />
	    MONTH: 'YYYY-MM'                                // <input type="month" />
	};

	var challangeStyle = (css="%3Ahost%7B--image-wrapper-width%3A%20800px%3B--image-wrapper-height%3A%20400px%3B--image-transition-rotate%3A%200deg%3B--image-width%3A%20100%25%7D.challenge__metadata%7Bdisplay%3Agrid%3Bgrid-template-columns%3A200px%201fr%7D.challenge__image-wrapper%7Boverflow%3Ahidden%3Bwidth%3Avar(--image-wrapper-width)%3Bheight%3Avar(--image-wrapper-height)%3Bposition%3Arelative%7D.challenge__image%7Bposition%3Aabsolute%3Bleft%3A50%25%3Btop%3A50%25%3Btransform%3Atranslate(-50%25%2C%20-50%25)%20rotate(var(--image-transition-rotate))%3Btransition%3Aall%200.25s%20ease-in%3Bwidth%3Avar(--image-width)%7D.challenge__image%3Ahover%7B--image-width%3A%20120%25%3B--image-transition-rotate%3A%2020deg%7D%0A") => (name) => {
	        const DOMModule = document.createElement('dom-module');

	        DOMModule.innerHTML = `
          <template>
            <style>
              ${decodeURIComponent(css)}
            </style>
          </template>
        `;

	        DOMModule.register(name);
	      };

	challangeStyle()('challenge-style');

	class Challenge extends PolymerElement {
	    static get template() {
	        return html`
      <style include="challenge-style"></style>
      <div class="challenge">
        <h1>Challenge: {{challenge.name}}</h1>
        <div class="challenge__metadata">
          <div class="challange__created">
            <b>Created at:</b> {{challenge.createdAt}}
          </div>
          <div class="challange__updated">
            <b>Updated:</b> {{challenge.updatedAt}}
          </div>
        </div>
        <hr />
        <div class="challenge__image-wrapper">
          <img class="challenge__image" src="{{challenge.image}}" />        
        </div>
        <div class="challenge__description"></div>
      </div>
    `
	    }

	    static get properties() {
	        return {
	            params: {
	                type: Object,
	                observer: '_onChallengeIdChange'
	            },
	            challenge: Object
	        }
	    }

	    _onChallengeIdChange() {
	        if (this.params.id) {
	            getChallenge(this.params.id).then(challenge => {
	                const {
	                    created,
	                    updated,
	                } = challenge;

	                challenge.createdAt = hooks(created).format('MMM Do YYYY');
	                challenge.updatedAt = hooks(updated || created).fromNow();

	                const container = document.createElement('p');
	                container.innerHTML = challenge.html;

	                this.shadowRoot.querySelector('.challenge__description').appendChild(container);
	                this.challenge = challenge;
	            });
	        }
	    }
	}

	customElements.define('my-challenge', Challenge);

	var challenge = /*#__PURE__*/Object.freeze({

	});

}());
//# sourceMappingURL=bundle.js.map
